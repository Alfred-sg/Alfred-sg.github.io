<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端工程体系</title>
    <url>/2020/12/31/frontend/architecture/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<p>我常常执着于部分（比如昏天暗地地解读一个源码），不能跳出来看看整体。这篇文章旨在于整理我所理解的前端工程体系，方便逐步演进顶层观念并指导后续发展。因为见识的有限和理解的不足，这篇文章本难免缺陷和差缪，还望有识予以理解。</p>
<img src="/2020/12/31/frontend/architecture/前端工程体系/global.png">
<p>我所理解的前端工程体系大致如上图。左半部分以 antd + umi、fusion + 飞冰为参照加以说明，组件库用于提供基础的通用组件。模板工程通常提供了应用层面的最佳实践，因此不止于使用在组件库之内的基础通用组件、在组件库之外的图表和编辑器组件等，还包含状态管理、路由管理、服务调用等内容。当某些组件还未包含在组件库中，但在应用中经常使用，那么这些组件也可以通过模板工程下沉到组件库中。由组件库往上，可以生长出业务组件、区块、前端工程模板，这些都可以被物料中心所吸纳，以便使用特定的域作为标识，在可视化搭建等其他应用、前端 IDE 工具或简单的本地开发环境中复用。这部分内容不限于 web 场景，还包含小程序等场景。事实上，fusion 的物料中心包含 rax 组件，支付宝小程序也提供了基础组件库和 IDE 开发环境。</p>
<p>右半部分在于使用 node 服务封装后端接口提供定制化的数据，包含但不限于元数据（如菜单栏）、查询数据库的动态数据等。node 服务不止可以提供数据接口，还包含构建发布平台（构建工具通过命令行工具与其打通）、mock 服务（在应用本地运行时动态获取）、国际化服务（在应用启动阶段动态拉取）等。</p>
<img src="/2020/12/31/frontend/architecture/前端工程体系/node.png">
<p>## </p>
<h2 id="组件库"><a href="#组件库" class="headerlink" title="组件库"></a>组件库</h2><p>现行较为火热的组件库有 <a href="https://github.com/ant-design/ant-design" target="_blank" rel="noopener">ant design</a>、<a href="https://github.com/alibaba-fusion/next" target="_blank" rel="noopener">fusion</a>、<a href="https://github.com/mui-org/material-ui" target="_blank" rel="noopener">material ui</a>、<a href="https://github.com/elemefe" target="_blank" rel="noopener">element ui</a> 等。以下是 ant design 的大体结构：</p>
<img src="/2020/12/31/frontend/architecture/前端工程体系/antd.png">
<ul>
<li><a href="https://github.com/benjycui/bisheng" target="_blank" rel="noopener">bisheng</a>: 解析 markdown 文件并生成静态网站。主流程上，它借助 <a href="https://github.com/mozilla/nunjucks" target="_blank" rel="noopener">nunjucks</a>、webpack、ssr 机制启动本地服务器、生成打包文件，以及通过 <a href="https://github.com/tschaub/gh-pages" target="_blank" rel="noopener">gh-pages</a> 将静态页面上传到 github 服务器上。实现可参考 <a href="http://xzfyu.com/2019/12/21/antd/%E8%81%8A%E8%81%8A%20antd%20%E7%BD%91%E7%AB%99%E6%98%AF%E6%80%8E%E4%B9%88%E5%88%B6%E4%BD%9C%E7%9A%84/">聊聊 antd 网站是怎么制作的</a>。</li>
<li><a href="https://github.com/ant-design/antd-tools" target="_blank" rel="noopener">antd-tools</a>、scripts: 提供基本的命令行工具。antd-tools 基于 gulp 实现，它集成了 compile（基于不同组件的入口文件编译 less、ts、svg 等）、dist（使用 webpack 打包整个组件库）、<a href="https://github.com/ant-design/antd-tools/blob/master/lib/lint/checkDeps.js" target="_blank" rel="noopener">deps-lint</a>（检查模块是否被依赖）、pub（编译、打包并发布）、guard、sort-api-table、api-collection、clean 等操作。</li>
</ul>
<p>ant design 的定制主题功能基于 less 的 <a href="https://ant.design/docs/react/customize-theme-cn" target="_blank" rel="noopener">modifyVars</a>，即将可定制的样式定义为 less 变量，随后就可以通过 less-loader 引用外部 less 变量文件实现定制。ant design 中可配置的样式见 <a href="https://github.com/ant-design/ant-design/blob/master/components/style/themes/default.less" target="_blank" rel="noopener">这里</a>。无障碍功能基于节点的 aria-、role- 属性实现，可参考 <a href="https://www.cnblogs.com/dingyuanxin/p/4052518.html" target="_blank" rel="noopener">aria初探</a>。国际化功能基于 react 的 context 机制实现，同时会设置 moment 的语言。按需加载功能借助于 <a href="https://github.com/ant-design/babel-plugin-import" target="_blank" rel="noopener">babel-plugin-import</a> 插件；其原理为在 babel 编译期间转换 import 语句，并加载必要的样式（默认加载组件文件夹下的 css/index.js 文件）。</p>
<p>以下是 react-components 组件图谱，动效、对齐、伸缩作为基础的组件或工具函数，其上再延伸出表单、数据展示、导航、回馈组件等。</p>
<img src="/2020/12/31/frontend/architecture/前端工程体系/react-components.png">
<p>ant-design 的组件基本基于 ConfigProvider 构建。ConfigProvider 通过 react 的 context 机制提供国际化、弹层根节点获取函数、空态渲染函数等。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://news.html5.qq.com/article?ch=901201&amp;tabId=0&amp;tagId=0&amp;docId=669838503675269442&amp;showAttach=1&amp;url=http%3A%2F%2Fkuaibao%2Eqq%2Ecom%2Fs%2F20191214A0F0TM00&amp;dataSrc=96&amp;showDate=1&amp;extenddata=%26%5Fdis%3D3%26bp%3D1%26contentLevel%3D2%26dataSrc%3D96%26queryId%3D1576313487963%26sGrayPlatFormModelId%3D100000%26sModelId%3D100000%26sStrategyId%3D153%26subjectId%3D1090319%26wx%3D1%26zimeitiId%3Dqeh%5F5598878&amp;pid=1&amp;data_type=1&amp;ctrid=1" target="_blank" rel="noopener">如果我是阿里的前端架构师，我会这么搭建前端架构体系</a><br><a href="https://zhuanlan.zhihu.com/p/94949118" target="_blank" rel="noopener">蚂蚁前端研发最佳实践</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>architecture</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>软件复用</title>
    <url>/2020/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E5%A4%8D%E7%94%A8/</url>
    <content><![CDATA[<p>软件复用分为实体复用和概念复用两类。实体复用有三个层次：应用系统复用、组件复用、对象和函数复用。概念复用指的是复用一个思想、一个方法、一个操作或一个算法，它可以嵌入在设计模式、可配置系统产品以及程序生成器等方法中。复用的好处在于降低开发成本、增加可靠性、降低过程风险、有效使用专家、标准一致等；坏处在于可复用的开发和维护成本高、推广可能遭遇不利。</p>
<p>软件复用的方法包含：体系结构模式、设计模式、应用框架、软件产品线、COTS 商业现货产品、ERP 企业资源规划系统、可配置垂直应用、遗留系统包装、程序库、模型驱动工程、程序生成器、面向方面的软件开发、基于组件的开发。</p>
<h2 id="应用框架"><a href="#应用框架" class="headerlink" title="应用框架"></a>应用框架</h2><p>框架是“一个由类、对象和组件构成的完整集合，它们共同提供一个面向一系列相关应用的可复用的体系结构”。框架规定了应用的体系结构、类和对象的分割、类和对象的协作关系、各部分的主要责任、以及控制流程。框架也会提供对一般功能的支持。在使用框架的基础上，应用设计者或实现者就能集中精力于应用本身的特定细节。</p>
<p>企业应用框架通常使用模型 - 视图 - 控制器（MVC）复合模式。作为设计模式的实现，一个 MVC 框架包含观察者模式、策略模式、组合模式以及其他多种模式。大多数 web 应用框架支持以下功能：安全性、动态页面、数据库支持、会话管理和 Ajax 等用户交互。</p>
<h2 id="软件产品线"><a href="#软件产品线" class="headerlink" title="软件产品线"></a>软件产品线</h2><p>软件产品线是一组应用，它们有相同的体系结构和共享组件，每个具体的应用程序反映不同的客户需求。核心系统通过配置以适应不同需求。软件产品线和应用框架的不同点在于：</p>
<ol>
<li>应用框架使用面向对象的方式进行扩展，它一般是不允许被修改的，可修改部分也在于框架所允许盛纳的组件。软件产品线运行进行修改、删除或重写。</li>
<li>应用框架侧重于技术支持，与特定的业务领域无关。软件产品线与业务领域相关，内嵌了领域和平台信息。</li>
<li>软件产品线由一系列相关的应用程序构成，以支持一系列业务过程；它可能和硬件设变打交道。如车辆调度系统可以演变为警务、消防和急救服务系统。</li>
</ol>
<p>软件产品线的配置方式有两种：设计时配置（即在系统中添加或删除组件）、部署时配置（通过配置界面交由专家和客户进行配置）。</p>
<h2 id="COTS-产品"><a href="#COTS-产品" class="headerlink" title="COTS 产品"></a>COTS 产品</h2><p>COTS 产品分为 COTS 解决方案系统和 COTS 集成系统两类。COTS 解决方案系统是一个供应商提供的独立产品，开发侧重于维护，由供应商负责维护。COTS 集成系统可能来自不同供应商，由多个异构系统构成，由系统拥有者维护个性化功能，开发侧重于系统集成。</p>
<p>COTS 解决方案系统可以表现为一个 ERP 系统，它由多个模块构成一整套业务流程，如购买模块、供应链模块、物流模块、CRM 用户关系管理模块。配置过程可以选择要包含的模块，配置这些单个模块，定义业务过程和业务规则，定义系统数据库的结构和组织。</p>
<h2 id="基于组件的开发"><a href="#基于组件的开发" class="headerlink" title="基于组件的开发"></a>基于组件的开发</h2><p>基于组件的软件工程包含如下要素：</p>
<ol>
<li>独立组件由接口完全定义，其实现可以被替换。</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>计算机科学</category>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>carrier</tag>
      </tags>
  </entry>
  <entry>
    <title>前端技术汇总贴</title>
    <url>/2020/06/09/frontend/architecture/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%B1%87%E6%80%BB%E8%B4%B4/</url>
    <content><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://segmentfault.com/a/1190000017946900" target="_blank" rel="noopener">立即收藏！这应该是你见过的最全前端下载总结</a></p>
<h2 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h2><h3 id="身份证号"><a href="#身份证号" class="headerlink" title="身份证号"></a>身份证号</h3><p>根据〖中华人民共和国国家标准 GB 11643-1999〗中有关公民身份号码的规定，公民身份号码是特征组合码，由十七位数字本体码和一位数字校验码组成。排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位数字校验码。</p>
<ul>
<li>地址码表示编码对象常住户口所在县(市、旗、区)的行政区划代码。</li>
<li>出生日期码表示编码对象出生的年、月、日，其中年份用四位数字表示，年、月、日之间不用分隔符。</li>
<li>顺序码表示同一地址码所标识的区域范围内，对同年、月、日出生的人员编定的顺序号。顺序码的奇数分给男性，偶数分给女性。</li>
<li>校验码是根据前面十七位数字码，按照 ISO 7064:1983.MOD 11-2 校验码计算出来的检验码。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> City = &#123;</span><br><span class="line">  <span class="number">11</span>:<span class="string">"北京"</span>, <span class="number">12</span>:<span class="string">"天津"</span>, <span class="number">13</span>:<span class="string">"河北"</span>, <span class="number">14</span>:<span class="string">"山西"</span>, <span class="number">15</span>:<span class="string">"内蒙古"</span>, <span class="number">21</span>:<span class="string">"辽宁"</span>, <span class="number">22</span>:<span class="string">"吉林"</span>, <span class="number">23</span>:<span class="string">"黑龙江 "</span>,</span><br><span class="line">  <span class="number">31</span>:<span class="string">"上海"</span>, <span class="number">32</span>:<span class="string">"江苏"</span>, <span class="number">33</span>:<span class="string">"浙江"</span>, <span class="number">34</span>:<span class="string">"安徽"</span>, <span class="number">35</span>:<span class="string">"福建"</span>, <span class="number">36</span>:<span class="string">"江西"</span>, <span class="number">37</span>:<span class="string">"山东"</span>, <span class="number">41</span>:<span class="string">"河南"</span>,</span><br><span class="line">  <span class="number">42</span>:<span class="string">"湖北 "</span>, <span class="number">43</span>:<span class="string">"湖南"</span>, <span class="number">44</span>:<span class="string">"广东"</span>, <span class="number">45</span>:<span class="string">"广西"</span>, <span class="number">46</span>:<span class="string">"海南"</span>, <span class="number">50</span>:<span class="string">"重庆"</span>, <span class="number">51</span>:<span class="string">"四川"</span>, <span class="number">52</span>:<span class="string">"贵州"</span>, </span><br><span class="line">  <span class="number">53</span>:<span class="string">"云南"</span>, <span class="number">54</span>:<span class="string">"西藏"</span>, <span class="number">61</span>:<span class="string">"陕西"</span>, <span class="number">62</span>:<span class="string">"甘肃"</span>, <span class="number">63</span>:<span class="string">"青海"</span>, <span class="number">64</span>:<span class="string">"宁夏"</span>, <span class="number">65</span>:<span class="string">"新疆"</span>, <span class="number">71</span>:<span class="string">"台湾"</span>,</span><br><span class="line">  <span class="number">81</span>:<span class="string">"香港"</span>, <span class="number">82</span>:<span class="string">"澳门"</span>, <span class="number">91</span>:<span class="string">"国外"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 15位校验规则：6位地址编码+6位出生日期+3位顺序号</span></span><br><span class="line"><span class="comment">// 18位校验规则：6位地址编码+8位出生日期+3位顺序号+1位校验位</span></span><br><span class="line"><span class="keyword">const</span> IdentityCodeRegExp = <span class="regexp">/^\d&#123;6&#125;(18|19|20)?\d&#123;2&#125;(0[1-9]|1[012])(0[1-9]|[12]\d|3[01])\d&#123;3&#125;(\d|X)$/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验位规则     公式:∑(ai×Wi)(mod 11)</span></span><br><span class="line"><span class="comment">//   i----表示号码字符从由至左包括校验码在内的位置序号； </span></span><br><span class="line"><span class="comment">//   ai----表示第i位置上的号码字符值； </span></span><br><span class="line"><span class="comment">//   Wi----示第i位置上的加权因子，其数值依据公式Wi=2^(n-1）(mod 11)计算得出。</span></span><br><span class="line"><span class="keyword">const</span> factor = [ <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span> ];<span class="comment">// 加权因子</span></span><br><span class="line"><span class="keyword">const</span> parity = [ <span class="number">1</span>, <span class="number">0</span>, <span class="string">'X'</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span> ];<span class="comment">// 校验位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> IdentityCodeValid = <span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>( !code || !IdentityCodeRegExp.test(code) )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"身份证号格式错误"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>( !City[code.substr(<span class="number">0</span>,<span class="number">2</span>)] )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"身份证号中地址编码错误"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 18位身份证需要验证最后一位校验位</span></span><br><span class="line">  <span class="keyword">if</span>( code.length == <span class="number">18</span> )&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    code.substr(<span class="number">0</span>,<span class="number">17</span>).split(<span class="string">''</span>).forEach(<span class="function">(<span class="params">ai, i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> wi = factor[i];</span><br><span class="line">      sum += ai * wi;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> last = parity[sum % <span class="number">11</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( last != code[<span class="number">17</span>] )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"校验位错误"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考 <a href="https://www.cnblogs.com/xtqg0304/p/9529721.html" target="_blank" rel="noopener">完美身份证正则表达式</a>。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>architecture</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>java 应用常见问题</title>
    <url>/2020/06/04/backend/java%20%E5%B7%A5%E7%A8%8B/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="get-set-方法报错"><a href="#get-set-方法报错" class="headerlink" title="get/set 方法报错"></a>get/set 方法报错</h2><ol>
<li>引入 lombok 依赖。</li>
<li>IDEA 添加 lombok 插件。</li>
<li>IDEA - file - setting 面板启动 AnnocationProcessors。</li>
</ol>
<p>更多可参考 <a href="https://www.jianshu.com/p/2543c71a8e45" target="_blank" rel="noopener">Lombok的基本使用</a>。</p>
]]></content>
      <categories>
        <category>backend</category>
        <category>java 工程</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>react 工程中使用 ts</title>
    <url>/2020/05/23/frontend/js/react%20%E5%B7%A5%E7%A8%8B%E4%B8%AD%E4%BD%BF%E7%94%A8%20ts/</url>
    <content><![CDATA[<h2 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h2><p>React.ReactNode：children 类型。<br>React.CSSProperties：样式类型。<br>React.MouseEvent&lt;HTMLElement, MouseEvent&gt; 等：event 对象类型。<br>React.ChangeEventHandler<htmlinputelement | htmltextareaelement> 等：事件处理器。<br>React.Ref<htmlinputelement | htmltextareaelement>：ref 引用类型，通常需要结合 React.useRef<htmlinputelement>(null)。</htmlinputelement></htmlinputelement></htmlinputelement></p>
<h2 id="使用-Omit-剔除某类型中的属性"><a href="#使用-Omit-剔除某类型中的属性" class="headerlink" title="使用 Omit 剔除某类型中的属性"></a>使用 Omit 剔除某类型中的属性</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">Omit&lt;OptionGroupData, <span class="string">'options'</span>&gt;</span><br></pre></td></tr></table></figure>
<h2 id="函数组件指定静态属性"><a href="#函数组件指定静态属性" class="headerlink" title="函数组件指定静态属性"></a>函数组件指定静态属性</h2><p>以下代码示例来自 rc-select。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> OptionGroupFC <span class="keyword">extends</span> React.FC&lt;OptGroupProps&gt; &#123;</span><br><span class="line">  isSelectOptGroup: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>frontend</category>
        <category>antd</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>react</tag>
        <tag>antd</tag>
      </tags>
  </entry>
  <entry>
    <title>Select 组件</title>
    <url>/2020/05/20/frontend/antd/Select/</url>
    <content><![CDATA[<p>Select 组件包含如下功能：</p>
<ul>
<li>多种展示模式：默认的单选模式、multiple 多选模式、tags 标签模式（支持随意输入值）、combobox 。</li>
<li>搜索功能：通过 props.showSearch、props.onSearch、props.optionFilterProp 配置搜索过滤能力。</li>
<li>选项分组：通过 OptGroup 组件设置选项分组。</li>
<li>扩展菜单：通过 props.dropdownRender 绘制扩展菜单。</li>
<li>值处理：props.labelInValue 能将 label 添加到提交数据中。</li>
</ul>
<h2 id="rc-select"><a href="#rc-select" class="headerlink" title="rc-select"></a>rc-select</h2><h3 id="组件构成"><a href="#组件构成" class="headerlink" title="组件构成"></a>组件构成</h3><img src="/2020/05/20/frontend/antd/Select/select.png">
<ul>
<li>Select：由 generate 函数创建，整合 Selector、SelectTrigger、OptionList 处理逻辑。</li>
<li>Selector：输入框，包含多选框、单选框两种模式。逻辑上包含点击聚焦事件、键盘事件、鼠标事件、手动录入事件、粘贴事件处理。其中，多选框会使用 rc-animate/lib/CSSMotionList 制作添加删除动效。</li>
<li>SelectTrigger：基于 rc-trigger 处理弹层展示逻辑。</li>
<li>OptionList：弹层内选择框，基于 rc-virtual-list 实现虚拟列表。</li>
<li>Option、OptGroup：虚拟组件，其 props 作为选项、选项分组的属性。</li>
<li>TransBtn：用于包装选择框中的后缀图标、多选框中的关清除图标。</li>
</ul>
<p>以上组件大多基于 React.forwardRef 包装，以便设置 ref 引用；这些组件内部基于 React.useImperativeHandle 向上提供调用方法。</p>
<h3 id="状态管理逻辑"><a href="#状态管理逻辑" class="headerlink" title="状态管理逻辑"></a>状态管理逻辑</h3><p>value 处理：</p>
<ol>
<li>使用 React.useState 记录内部状态值 innerValue。</li>
<li>innerValue 经 React.useRef 缓存成 prevValueRef 后，再通过 React.useEffect 机制在受控模式更新 prevValueRef。</li>
<li>如果存储的值包含 label，作纯 value 值提取处理。</li>
</ol>
<p>options 处理：</p>
<ol>
<li>借助 React.useMemo 缓存 props.options 或通过 children 获取选项。tags 模式下额外会将输入值转化成选项。</li>
<li>基于 flattenOptions 函数将 Option、OptGroup 转成扁平化数据。</li>
<li>如果在搜索模式下，基于输入框的搜索值过滤选项列表并作扁平化处理。</li>
</ol>
<p>其他包含输入框展示值（通过 value、options 获取）、选项列表选中值、搜索值处理。</p>
<h3 id="组件间交互逻辑"><a href="#组件间交互逻辑" class="headerlink" title="组件间交互逻辑"></a>组件间交互逻辑</h3><h3 id="container"><a href="#container" class="headerlink" title="container"></a>container</h3><p>div 容器挂载 onMouseDown、onKeyDown、onKeyUp、onFocus、onBlur 事件。笔者采用如下形式说明该节点的事件处理逻辑。如 container:focus -&gt; inputIcon:focusMock、popup:show; props.onFocus 意味着当 div 容器获得焦点时，inputIcon 按钮也会置为模拟聚焦状态，选项列表弹层显示，同时组件外围绑定的 props.onFocus 将被执行。#if event.which=enter 表示条件语句的主要内容为按键为回车键，antd 实现的条件语句还包含 Select 处于多选模式等。[(#if props.mode=tags) value:change] 表示当 Select 处于 tags 模式时，其值就会被改变。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">container:</span><span class="string">focus</span> <span class="bullet">-&gt;</span> <span class="attr">inputIcon:focusMock、popup:show;</span> <span class="string">props.onFocus</span></span><br><span class="line"><span class="attr">container:</span><span class="string">keydown</span> <span class="bullet">-&gt;</span> <span class="string">(#if</span> <span class="string">event.which=enter)</span> <span class="attr">popup:show;</span> <span class="string">props.onKeyDown</span></span><br><span class="line">                     <span class="string">(#elseif</span> <span class="string">event.which=backspace)</span> <span class="attr">value:change;</span> <span class="string">props.onKeyDown</span></span><br><span class="line">                     <span class="string">(#else)</span> <span class="attr">popup:keydown;</span> <span class="string">props.onKeyDown</span></span><br><span class="line"><span class="attr">container:</span><span class="string">keyup</span> <span class="bullet">-&gt;</span> <span class="attr">popup:keyup;</span> <span class="string">props.onKeyUp</span></span><br><span class="line"><span class="attr">container:</span><span class="string">blur</span> <span class="bullet">-&gt;</span> <span class="attr">inputIcon:unfocusMock、popup:hide、searchValue:reset、[(#if</span> <span class="string">props.mode=tags)</span> <span class="attr">value:change];</span> <span class="string">props.onBlur</span></span><br><span class="line"><span class="string">container(popup):mousedown</span> <span class="bullet">-&gt;</span> <span class="attr">selector:focus、inputIcon:unfocusMock;</span> <span class="string">props.onMouseDown</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>frontend</category>
        <category>antd</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>react</tag>
        <tag>antd</tag>
      </tags>
  </entry>
  <entry>
    <title>Upload 组件</title>
    <url>/2020/05/16/frontend/antd/Upload/</url>
    <content><![CDATA[<p>Upload 组件构成如下：</p>
<p><a href="https://github.com/react-component/upload" target="_blank" rel="noopener">rc-upload</a> 提供基本的文件上传功能。<br>Upload 组件在 rc-upload 基础上创建外观，实现文件与表单交互，并集成 UploadList 文件列表。</p>
<h2 id="rc-upload"><a href="#rc-upload" class="headerlink" title="rc-upload"></a>rc-upload</h2><p>rc-upload 的实现逻辑基于：由隐藏的 input 元素获取上传文件，再通过 ajax 上传 FormData 数据。上传时包含常规的 ajax 功能点以及 <a href="https://www.w3school.com.cn/tags/tag_input.asp" target="_blank" rel="noopener">input 表单控件</a>的功能点。ajax 功能点为：设置 withCredentials 跨域、headers 请求头、method 请求方式、data 附带属性；处理如 onProgress 进度、onSuccess 成功、onError 错误事件，abort 中断操作等。input 表单控件的功能点为：accept 支持上传的文件类型；multiple 是否允许多文件上传。</p>
<p>除此而外，rc-upload 支持拖拽上传、文件夹上传。</p>
<p>拖拽上传时，rc-upload 会基于 props.accept 属性过滤文件类型，因为拖拽上传不会经由 input 控件进行交互。同样一个原因，上传文件后的返回值若想作为表单数据，input 既存储了文件内容，又不能全然涵盖拖拽上传的情景，所以仍需通过 beforeUpload、onSuccess、onError、onStart、onProgress 等事件将返回值透出外围。</p>
<p>文件夹上传借助了 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransferItem/webkitGetAsEntry" target="_blank" rel="noopener">DataTransferItem.webkitGetAsEntry 方法</a>，以此遍历文件并上传。</p>
<h2 id="Upload-组件"><a href="#Upload-组件" class="headerlink" title="Upload 组件"></a>Upload 组件</h2><p>如上文所述，Upload 组件实现了 beforeUpload、onSuccess、onError、onStart、onProgress 等方法以与表单完成交互。每次负责与表单交互的 onChange 事件传递数据内容为 { file, fileList } 对象，file 当前正在上传的文件，fileList 处理中的文件列表。因此与 ant design 表单进行交互时，getValueFromEvent 方法用于获取 fileList 存入表单数据中；valuePropName = ‘fileList’ 用于将表单数据注入到 props.fileList 中。</p>
<ul>
<li>beforeUpload：校验或剔除上传文件（操控 info.fileList），阻止提交。</li>
<li>onStart：更新上传文件状态为 uploading。</li>
<li>onProgress：更新上传文件的上传进度。</li>
<li>onSuccess：更新上传文件状态为 done。</li>
<li>onError：更新上传文件状态为 error，即上传失败的文件仍会存于表单数据中，如果想剔除，需要通过 props.onChange 方法实现。</li>
</ul>
<p>Upload 组件对于拖拽上传的处理，只是切换外观。</p>
<p>除了基本的上传功能外，Upload 组件内还集成了 UploadList 文件列表展示功能。UploadList 可用于预览、下载、删除文件；它借助 Animate 组件实现动效。</p>
<ul>
<li>缩略图展示、文件预览：文件经 props.previewFile 处理后获得 file.thumbUrl，thumbUrl 以高于 url 的优先级作为图片缩略图、预览文件展示。props.onPreview 用于设置预览规则。默认的图片预览通过 canvas 接口将图片内容转成 url 实现，参见 <a href="https://github.com/ant-design/ant-design/blob/4.2.2/components/upload/utils.tsx#L71" target="_blank" rel="noopener">previewImage 函数</a>。</li>
<li>文件下载：如果提供了 props.onDownload，使用该方法下载文件；否则，使用 window.open 打开 file.url。</li>
<li>文件删除：移除 fileList 中被删除的文件，并使用 rc-upload 中的 abort 机制中断文件上传操作。</li>
</ul>
]]></content>
      <categories>
        <category>frontend</category>
        <category>antd</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>react</tag>
        <tag>antd</tag>
      </tags>
  </entry>
  <entry>
    <title>application.yml 配置</title>
    <url>/2020/05/05/backend/java%20%E5%B7%A5%E7%A8%8B/application.yml%20%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="database"><a href="#database" class="headerlink" title="database"></a>database</h2><p>数据库连接池使用 <a href="https://github.com/alibaba/druid" target="_blank" rel="noopener">druid</a>。</p>
<ol>
<li>pom.xml 添加 druid-spring-boot-starter 依赖。</li>
<li>配置 application.yml。</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span> <span class="comment"># useSSL=true 解决JDBC版本与MySQL版本不兼容问题</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">odic</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">Gw32_iuX</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line">      <span class="comment"># 连接池配置(通常来说，只需要修改initialSize、minIdle、maxActive</span></span><br><span class="line">      <span class="comment"># 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。removeabandoned不建议在生产环境中打开如果用SQL Server，建议追加配置)</span></span><br><span class="line"><span class="attr">      initial-size:</span> <span class="number">5</span> <span class="comment"># 初始化物理连接个数</span></span><br><span class="line"><span class="attr">      min-idle:</span> <span class="number">2</span> <span class="comment"># 连接池中最小空闲连接数</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">20</span> <span class="comment"># 连接池中最大的活跃连接数</span></span><br><span class="line"><span class="attr">      max-wait:</span> <span class="number">60000</span> <span class="comment"># 配置获取连接等待超时的时间</span></span><br><span class="line"><span class="attr">      pool-prepared-statements:</span> <span class="literal">false</span> <span class="comment"># 开启缓存preparedStatement(PSCache)</span></span><br><span class="line"><span class="attr">      max-pool-prepared-statement-per-connection-size:</span> <span class="bullet">-1</span> <span class="comment"># 启用PSCache后，指定每个连接上PSCache的大小</span></span><br><span class="line"><span class="attr">      test-on-borrow:</span> <span class="literal">false</span> <span class="comment"># 申请连接时不检测连接是否有效</span></span><br><span class="line"><span class="attr">      test-on-return:</span> <span class="literal">false</span> <span class="comment"># 归还连接时不检测连接是否有效</span></span><br><span class="line"><span class="attr">      test-while-idle:</span> <span class="literal">true</span> <span class="comment"># 如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效</span></span><br><span class="line"><span class="attr">      validation-query:</span> <span class="string">SELECT</span> <span class="string">'x'</span></span><br><span class="line"><span class="attr">      time-between-eviction-runs-millis:</span> <span class="number">60000</span> <span class="comment"># 检测连接的间隔时间，若连接空闲时间 &gt;= minEvictableIdleTimeMillis，则关闭物理连接</span></span><br><span class="line"><span class="attr">      min-evictable-idle-time-millis:</span> <span class="number">300000</span> <span class="comment"># 连接保持空闲而不被驱逐的最小时间</span></span><br><span class="line"><span class="attr">      filter:</span> <span class="string">config,stat</span> <span class="comment"># 配置监控统计拦截的filters（不配置则监控界面sql无法统计），监控统计filter:stat，日志filter:log4j，防御sql注入filter:wall</span></span><br><span class="line"><span class="attr">      connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000;config.decrypt=false;</span> <span class="comment"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span></span><br><span class="line"><span class="attr">      web-stat-filter:</span> </span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span> <span class="comment"># 是否启用StatFilter默认值true</span></span><br><span class="line"><span class="attr">        url-pattern:</span> <span class="string">/*</span></span><br><span class="line"><span class="attr">        exclusions:</span> <span class="string">/*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</span></span><br><span class="line"><span class="attr">        session-stat-enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">        session-stat-max-count:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">        principal-session-name:</span> <span class="string">admin</span> <span class="comment"># 从session中获取身份标识</span></span><br><span class="line"><span class="attr">        principal-cookie-name:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">        profile-enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># StatViewServlet配置</span></span><br><span class="line">      <span class="comment">#展示Druid的统计信息,StatViewServlet的用途包括：</span></span><br><span class="line">      <span class="comment">#   1.提供监控信息展示的html页面</span></span><br><span class="line">      <span class="comment">#   2.提供监控信息的JSON API</span></span><br><span class="line"><span class="attr">      stat-view-servlet:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span> <span class="comment"># 是否启用StatViewServlet默认值true</span></span><br><span class="line"><span class="attr">        url-pattern:</span> <span class="string">/druid/*</span> <span class="comment"># 根据配置中的url-pattern来访问内置监控页面</span></span><br><span class="line"><span class="attr">        reset-enable:</span> <span class="literal">false</span> <span class="comment"># 禁止手动重置监控数据</span></span><br><span class="line"><span class="attr">        login-username:</span> <span class="string">admin</span> <span class="comment"># 设置监控页面的登录名和密码</span></span><br><span class="line"><span class="attr">        login-password:</span> <span class="string">admin</span></span><br><span class="line">        <span class="comment">#StatViewSerlvet展示出来的监控信息比较敏感，是系统运行的内部情况，如果你需要做访问控制，可以配置allow和deny这两个参数</span></span><br><span class="line">        <span class="comment">#deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝。如果allow没有配置或者为空，则允许所有访问</span></span><br><span class="line">        <span class="comment">#配置的格式：&lt;IP&gt; 或者 &lt;IP&gt;/&lt;SUB_NET_MASK_size&gt;其中128.242.127.1/24</span></span><br><span class="line">        <span class="comment">#24表示，前面24位是子网掩码，比对的时候，前面24位相同就匹配,不支持IPV6。</span></span><br><span class="line">        <span class="comment">#deny:xxx</span></span><br><span class="line">        <span class="comment">#allow: 127.0.0.1</span></span><br><span class="line"><span class="attr">      aop-patterns:</span> <span class="string">com.example.demo.*.*.*</span> <span class="comment"># 对内部各接口调用的监控</span></span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/ce8df857c951" target="_blank" rel="noopener">SpringBoot项目集成阿里Druid连接池</a><br><a href="https://blog.csdn.net/justlpf/article/details/80728529" target="_blank" rel="noopener">Druid监控功能的深入使用与配置</a></p>
<h2 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h2><ol>
<li>pom.xml 添加 mybatis-spring-boot-starter 依赖、pagehelper-spring-boot-starter 依赖用于分页。</li>
<li>配置 application.yml。</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="string">classpath*:mapper/*.xml</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.example.demo.dao</span></span><br><span class="line"><span class="attr">  configuration:</span></span><br><span class="line"><span class="attr">    map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    database:</span> <span class="number">10</span> <span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment"># Redis服务器地址</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span> <span class="comment"># Redis服务器连接端口</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span> <span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line"><span class="attr">    ssl:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    lettuce:</span></span><br><span class="line"><span class="attr">      pool:</span></span><br><span class="line"><span class="attr">        max-active:</span> <span class="number">50</span> <span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line"><span class="attr">        max-wait-millis:</span> <span class="number">10000</span> <span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line"><span class="attr">        timeout:</span> <span class="number">0</span> <span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line"><span class="attr">        max-idle:</span> <span class="number">10</span> <span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line"><span class="attr">        min-idle:</span> <span class="number">5</span> <span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line"><span class="attr">        test-on-borrow:</span> <span class="literal">true</span> <span class="comment"># 调用者获取链接时，是否检测当前链接有效性</span></span><br><span class="line"><span class="attr">        test-on-return:</span> <span class="literal">true</span> <span class="comment"># 向链接池中归还链接时，是否检测链接有效性</span></span><br><span class="line"><span class="attr">        test-while-idle:</span> <span class="literal">true</span> <span class="comment"># 调用者获取链接时，是否检测空闲超时, 如果超时，则会被移除</span></span><br><span class="line"><span class="attr">        time-between-eviction-runs-millis:</span> <span class="number">30000</span> <span class="comment"># 空闲链接检测线程检测周期（使用负值表示不运行检测线程）</span></span><br><span class="line"><span class="attr">        num-tests-per-eviction-run:</span> <span class="number">10</span> <span class="comment"># 空闲链接检测线程一次运行检测多少条链接</span></span><br><span class="line"><span class="attr">        min-evictable-idle-time-millis:</span> <span class="number">60000</span> <span class="comment"># 连接在池中最小的生存时间</span></span><br></pre></td></tr></table></figure>
<h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/caizhaokai/p/11037610.html" target="_blank" rel="noopener">SpringBoot + Redis：基本配置及使用</a><br><a href="https://www.jianshu.com/p/b422b153f650" target="_blank" rel="noopener">redis深度历险</a><br><a href="https://www.cnblogs.com/yliucnblogs/p/10240576.html" target="_blank" rel="noopener">Spring Boot整合Redis</a></p>
<h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><ol>
<li>pom.xml 添加 log4j-over-slf4j、jcl-over-slf4、jul-to-slf4j 依赖。log4j-over-slf4j 通过代理将系统中所有 log4j 日志（含第三方库的）路由到 slf4j上。jcl-over-slf4 将 apache commons logging 路由到 slf4j上。jul-over-slf4 将 java.util.logging 路由到 slf4j上。</li>
<li>配置 application.yml。</li>
<li>配置 logback-config.xml。</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  config:</span> <span class="attr">classpath:logback-config.xml</span></span><br><span class="line"><span class="attr">  file:</span></span><br><span class="line"><span class="attr">    path:</span> <span class="string">/data</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line"><span class="attr">    all:</span> <span class="string">debug</span></span><br><span class="line"><span class="attr">    root:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://github.com/spring-projects/spring-boot/blob/v1.4.2.RELEASE/spring-boot/src/main/resources/org/springframework/boot/logging/logback/defaults.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/defaults.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"APP_NAME"</span> <span class="attr">source</span>=<span class="string">"spring.application.name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"LOG_BASE_PATH"</span> <span class="attr">source</span>=<span class="string">"logging.file.path"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"BASE_LEVEL"</span> <span class="attr">source</span>=<span class="string">"logging.level.all"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"ROOT_LEVEL"</span> <span class="attr">source</span>=<span class="string">"logging.level.root"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LEVEL"</span> <span class="attr">value</span>=<span class="string">"$&#123;BASE_LEVEL&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_PATH"</span> <span class="attr">value</span>=<span class="string">"$&#123;LOG_BASE_PATH&#125;/logs/$&#123;APP_NAME&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ARCHIVE_LOG_PATH"</span> <span class="attr">value</span>=<span class="string">"$&#123;LOG_PATH&#125;/archive/%d&#123;yyyy-MM-dd&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_PATTERN"</span> <span class="attr">value</span>=<span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;|%X&#123;traceId&#125;| %-5level %logger&#123;80&#125; - %msg%n"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONSOLE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>utf8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"INFO"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_PATH&#125;/info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;ARCHIVE_LOG_PATH&#125;/info.%d&#123;yyyy-MM-dd&#125;.log.%i<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>7<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>50MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"WARN"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_PATH&#125;/warn.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;ARCHIVE_LOG_PATH&#125;/warn.%d&#123;yyyy-MM-dd&#125;.log.%i<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>7<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>50MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"ERROR"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_PATH&#125;/error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.LevelFilter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;ARCHIVE_LOG_PATH&#125;/error.%d&#123;yyyy-MM-dd&#125;.log.%i<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>7<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>50MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CACHE-LOG"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_PATH&#125;/cache.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;ARCHIVE_LOG_PATH&#125;/cache.%d&#123;yyyy-MM-dd&#125;.log.%i<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>7<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>50MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"SPRING-LOG"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_PATH&#125;/spring.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;ARCHIVE_LOG_PATH&#125;/spring.%d&#123;yyyy-MM-dd&#125;.log.%i<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>7<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>50MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"MYBATIS-LOG"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_PATH&#125;/mybatis.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;ARCHIVE_LOG_PATH&#125;/mybatis.%d&#123;yyyy-MM-dd&#125;.log.%i<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>7<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>50MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"NETTY-LOG"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_PATH&#125;/netty.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;ARCHIVE_LOG_PATH&#125;/netty.%d&#123;yyyy-MM-dd&#125;.log.%i<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>7<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>50MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILTER-LOG"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_PATH&#125;/filter.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;ARCHIVE_LOG_PATH&#125;/filter.%d&#123;yyyy-MM-dd&#125;.log.%i<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>7<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>50MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"CONTROLLER-LOG"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_PATH&#125;/controller.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;ARCHIVE_LOG_PATH&#125;/controller.%d&#123;yyyy-MM-dd&#125;.log.%i<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>7<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>50MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"SERVICE-LOG"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_PATH&#125;/service.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;ARCHIVE_LOG_PATH&#125;/service.%d&#123;yyyy-MM-dd&#125;.log.%i<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>7<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>50MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>20GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"prod,dev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache.ibatis"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"MYBATIS-LOG"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.mybatis.spring"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"MYBATIS-LOG"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.alibaba.druid"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"MYBATIS-LOG"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"io.netty"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"NETTY-LOG"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"SPRING-LOG"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"cache-log"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CACHE-LOG"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"javax.cache"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CACHE-LOG"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.example.demo.dao"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"MYBATIS-LOG"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.example.demo.manager"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"SERVICE-LOG"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.example.demo.service"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"SERVICE-LOG"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.example.demo.controller"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONTROLLER-LOG"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.example.demo.aop"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONTROLLER-LOG"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"$&#123;ROOT_LEVEL&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"local"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache.ibatis"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.mybatis.spring"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.alibaba.druid"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"io.netty"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"cache-log"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"javax.cache"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.example.demo.dao"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.example.demo.manager"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.example.demo.service"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.example.demo.controller"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.example.demo.aop"</span> <span class="attr">level</span>=<span class="string">"$&#123;LEVEL&#125;"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"$&#123;ROOT_LEVEL&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/john1337/article/details/76152906" target="_blank" rel="noopener">log4j-over-slf4j工作原理详解</a></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">18080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">  servlet:</span></span><br><span class="line"><span class="attr">    multipart:</span></span><br><span class="line"><span class="attr">      max-file-size:</span> <span class="number">100</span><span class="string">MB</span></span><br><span class="line"><span class="attr">      max-request-size:</span> <span class="number">100</span><span class="string">MB</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>backend</category>
        <category>java 工程</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis 使用</title>
    <url>/2020/05/04/backend/java%20%E5%B7%A5%E7%A8%8B/mybatis%20%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>本篇内容基于《mybatis 从入门到精通》整理。</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol>
<li>pom.xml 添加 mybatis-spring-boot-starter 依赖。</li>
<li>编写 Mapper.xml、实体类、Mapper 接口等。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Integer id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String description;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestMapper</span> </span>&#123;</span><br><span class="line">  <span class="function">Test <span class="title">selectByPrimaryKey</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定 namespace --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.example.demo.dao.mapper.TestMapper"</span> &gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- resultMap 用于设置返回值的类型和映射关系 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.example.demo.dao.domain.TestDO"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"description"</span> <span class="attr">property</span>=<span class="string">"description"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gmt_create"</span> <span class="attr">property</span>=<span class="string">"gmtCreate"</span> <span class="attr">jdbcType</span>=<span class="string">"TIMESTAMP"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"create_nick"</span> <span class="attr">property</span>=<span class="string">"createNick"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gmt_modified"</span> <span class="attr">property</span>=<span class="string">"gmtModified"</span> <span class="attr">jdbcType</span>=<span class="string">"TIMESTAMP"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"modified_nick"</span> <span class="attr">property</span>=<span class="string">"modifiedNick"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Base_Column_List"</span> &gt;</span></span><br><span class="line">    id, name, description, </span><br><span class="line">    gmt_create, create_nick, gmt_modified, modified_nick</span><br><span class="line">  <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- id 与 Mapper 接口的方法名对应，同一个命名空间下不能重复，且不能带有 '.' 号 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByPrimaryKey"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Long"</span> &gt;</span></span><br><span class="line">    select </span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></span><br><span class="line">    from test</span><br><span class="line">    where id = #&#123;id,jdbcType=BIGINT&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="mapper-xml"><a href="#mapper-xml" class="headerlink" title="mapper.xml"></a>mapper.xml</h2><h3 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h3><p>resultMap 标签用于设置返回值的类型和映射关系。resultMap 包含如下属性：id 必填且唯一；type 对应 java 实体类；extends 指定扩展关系；autoMapping 是否开启自动映射功能。</p>
<p>resultMap 可设置以下标签：</p>
<ul>
<li>constructor：使用构造函数创建结果。idArg 子标签用于指定 id；arg 指定其余参数。</li>
<li>id：标记结果作为 id，可以提高整体性能。其包含属性有：column 列名；property 对应实体类中的属性，支持 namepath；javaType 实体类中的类型别名（JavaBean 可自动判断类型；如映射到 HashMap 须指定）；jdbcType 列字段的数据库类型；typeHandler 指定类型处理器。result 标签同样含有这些属性。</li>
<li>result：注入到实体类中的普通结果。</li>
<li>association：一个复杂的类型关联，许多结果将包成这种类型。</li>
<li>collection：复杂类型的集合。</li>
<li>discriminator：根据结果值来决定使用哪个结果映射。</li>
<li>case：基于某些值的结果映射。</li>
</ul>
<p>resultMap 的 id 可以作为 select 标签的 resultMap 属性值。除了 resultMap 标签以外，select 标签的 resultMap 属性还可以设置为 java 实体类。</p>
<h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>select 标签用于查询。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 嵌套属性赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserAndRoleById"</span> <span class="attr">resultType</span>=<span class="string">"tk.mybatis.simple.model.SysUser"</span>&gt;</span></span><br><span class="line">  select u.id,</span><br><span class="line">    u.user_name userName, u.user_password userPassword, u.user_email userEmail ,</span><br><span class="line">    u.user_info userinfo, u.head_img headimg, u.create_time createTime, </span><br><span class="line">    r.id "role.id", r.role_name "role.roleName", </span><br><span class="line">    r.enabled "role.enabled", </span><br><span class="line">    r.create_by "role.createBy",</span><br><span class="line">    r.create_time "role.createTime"</span><br><span class="line">  from sys_user u</span><br><span class="line">    inner join sys_user_role ur on u.id = ur.user_id </span><br><span class="line">    inner join sys_role r on ur.role_id = r .id</span><br><span class="line">    where u.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>insert 标签用于插入。insert、update 可使用如下属性：</p>
<ul>
<li>parameterType：设置传入的参数。mybatis 会自动推断传入的类型，因此不建议设置。</li>
<li>flushCache：当调用发生时是否清空一级缓存和二级缓存。</li>
<li>timeout：超时时间。</li>
<li>statementType：对于 STATEMENT、 PREPARED、 CALLABLE, MyBatis会分别使用 对应的 Statement 、 PreparedStatement 、 CallableStatement ，默认 值为 PREPARED 。</li>
<li>useGeneratedKeys：是否使用 JDBC 的 getGeneratedKeys 方法获取主键，默认为 false。</li>
<li>keyProperty：设置获取主键值后将要赋值的属性名。</li>
<li>keyColumn：通过生成的键值设置表中的列名，仅在某些数据库（如 PostgreSQL）中是必须的。</li>
<li>databaseId：如果配置了 databaseidProvider(4.6节有详细配置方法)， MyBatis 会加载所有的不带 databaseid 的或匹配当前 databaseid 的语句 。如果同时 存在带 databaseid 和不带 databaseid 的语句，后者会被忽略。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"com.example.demo.dao.domain.TestDO"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">  insert into test (</span><br><span class="line">    id, name, description, </span><br><span class="line">    gmt_create, create_nick, gmt_modified, modified_nick</span><br><span class="line">  )</span><br><span class="line">  values (</span><br><span class="line">    #&#123;id,jdbcType=BIGINT&#125;, #&#123;name,jdbcType=VARCHAR&#125;, #&#123;description,jdbcType=VARCHAR&#125;, </span><br><span class="line">    #&#123;gmtCreate,jdbcType=TIMESTAMP&#125;, #&#123;createNick,jdbcType=VARCHAR&#125;, </span><br><span class="line">    #&#123;gmtModified,jdbcType=TIMESTAMP&#125;, #&#123;modifiedNick,jdbcType=VARCHAR&#125;</span><br><span class="line">  )</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用 selectKey 返回主键 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"com.example.demo.dao.domain.TestDO"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">  insert into test (</span><br><span class="line">    id, name, description, </span><br><span class="line">    gmt_create, create_nick, gmt_modified, modified_nick</span><br><span class="line">  )</span><br><span class="line">  values (</span><br><span class="line">    #&#123;id,jdbcType=BIGINT&#125;, #&#123;name,jdbcType=VARCHAR&#125;, #&#123;description,jdbcType=VARCHAR&#125;, </span><br><span class="line">    #&#123;gmtCreate,jdbcType=TIMESTAMP&#125;, #&#123;createNick,jdbcType=VARCHAR&#125;, </span><br><span class="line">    #&#123;gmtModified,jdbcType=TIMESTAMP&#125;, #&#123;modifiedNick,jdbcType=VARCHAR&#125;</span><br><span class="line">  )</span><br><span class="line">  <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"long"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span></span><br><span class="line">    SELECT LAST_INSERT_ID() </span><br><span class="line">  <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>update 标签用于更新。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&lt;update id="updateByPrimaryKey" parameterType="com.example.demo.dao.domain.TestDO" useGeneratedKeys="true" keyProperty="id"&gt;</span><br><span class="line">  <span class="keyword">update</span> <span class="keyword">test</span></span><br><span class="line">  <span class="keyword">set</span> <span class="keyword">name</span> = <span class="comment">#&#123;name,jdbcType=VARCHAR&#125;,</span></span><br><span class="line">    description = <span class="comment">#&#123;description,jdbcType=VARCHAR&#125;,</span></span><br><span class="line">    gmt_create = <span class="comment">#&#123;gmtCreate,jdbcType=TIMESTAMP&#125;,</span></span><br><span class="line">    create_nick = <span class="comment">#&#123;createNick,jdbcType=VARCHAR&#125;,</span></span><br><span class="line">    gmt_modified = <span class="comment">#&#123;gmtModified,jdbcType=TIMESTAMP&#125;,</span></span><br><span class="line">    modified_nick = <span class="comment">#&#123;modifiedNick,jdbcType=VARCHAR&#125;</span></span><br><span class="line">  <span class="keyword">where</span> <span class="keyword">id</span> = <span class="comment">#&#123;id,jdbcType=BIGINT&#125;</span></span><br><span class="line">&lt;/<span class="keyword">update</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p>delete 标签用于删除。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteByPrimaryKey"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Long"</span> &gt;</span></span><br><span class="line">  delete from test</span><br><span class="line">  where id = #&#123;id,jdbcType=BIGINT&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="多参数"><a href="#多参数" class="headerlink" title="多参数"></a>多参数</h3><p>使用 @Param 注解可为 insert、update 语句设置多个实体类作为参数。</p>
<h3 id="动态-sql"><a href="#动态-sql" class="headerlink" title="动态 sql"></a>动态 sql</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- if 条件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null and name != ''"</span>&gt;</span> </span><br><span class="line">  and name like concat('%', #&#123;name&#125;, '%') </span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- choose 条件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">    and id = #&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">when</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"name != null and name != ''"</span>&gt;</span> </span><br><span class="line">    and name = #&#123;name&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">when</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span> </span><br><span class="line">    and 1 = 2 </span><br><span class="line">  <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- where 条件，添加一个 where 子句，它会自动剔除 and --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userName != null and userName != ''"</span>&gt;</span> </span><br><span class="line">    and user_name like concat('%', #&#123;userName&#125;, '%') </span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userEmail != '' and userEmail != null"</span>&gt;</span> </span><br><span class="line">    and user_email = #&#123;userEmail&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- set 标签，添加一个 set 子句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null and name !=''"</span>&gt;</span></span><br><span class="line">    name = #&#123;name&#125; ,</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  id = #&#123;id&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用 trim 标签实现 where --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"WHERE"</span> <span class="attr">prefixOverrides</span>=<span class="string">"AND"</span>&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用 trim 标签实现 set --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"SET"</span> <span class="attr">suffixOverridess</span>=<span class="string">","</span>&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- foreach，collection 属性指定待循环的属性名；separator 分隔符；open、close 起始和结尾字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"user"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">  #&#123;user.name&#125;, #&#123;user.description&#125;, #&#123;user.createNick&#125;, </span><br><span class="line">  #&#123;user.gmtCreate, jdbcType=TIMESTAMP&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用 bind 创建 OGNL 表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null and name != ''"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bind</span> <span class="attr">narne</span>=<span class="string">"nameLike"</span> <span class="attr">value</span>=<span class="string">"'%' + name + '%'"</span> /&gt;</span> </span><br><span class="line">  and name like #&#123;nameLike&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="基本注解"><a href="#基本注解" class="headerlink" title="基本注解"></a>基本注解</h3><p>基本注解包含 @Results、@Select、@Insert、@Update、@Delete。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="meta">@Select</span>(&#123;<span class="string">"</span></span><br><span class="line"><span class="string">  select id, name, description,</span></span><br><span class="line"><span class="string">  gmt_create gmtCreate, create_nick createNick, </span></span><br><span class="line"><span class="string">  gmt_modified gmtModified, modified_nick modifiedNick</span></span><br><span class="line"><span class="string">  from test</span></span><br><span class="line"><span class="string">  where id = #&#123;id&#125;"</span></span><br><span class="line">&#125;) </span><br><span class="line"><span class="function">Test <span class="title">selectById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 resultMap</span></span><br><span class="line"><span class="meta">@Results</span>(&#123; </span><br><span class="line">  <span class="meta">@Result</span>(property = <span class="string">"id"</span>, column = <span class="string">"id"</span>, id = <span class="keyword">true</span>),</span><br><span class="line">  <span class="meta">@Result</span>(property = <span class="string">"name"</span>, column = <span class="string">"name"</span>),</span><br><span class="line">  <span class="meta">@Result</span>(property = <span class="string">"description"</span>, column = <span class="string">"description"</span>),</span><br><span class="line">  <span class="meta">@Result</span>(property = <span class="string">"gmtCreate"</span>, column = <span class="string">"gmt_create"</span>),</span><br><span class="line">  <span class="meta">@Result</span>(property = <span class="string">"createNick"</span>, column = <span class="string">"create_nick"</span>),</span><br><span class="line">  <span class="meta">@Result</span>(property = <span class="string">"gmtModified"</span>, column = <span class="string">"gmt_modified"</span>),</span><br><span class="line">  <span class="meta">@Result</span>(property = <span class="string">"modifiedNick"</span>, column = <span class="string">"modified_nick"</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta">@Select</span>(&#123;<span class="string">"</span></span><br><span class="line"><span class="string">  select id, name, description,</span></span><br><span class="line"><span class="string">  gmt_create, create_nick, gmt_modified, modified_nick</span></span><br><span class="line"><span class="string">  from test</span></span><br><span class="line"><span class="string">  where id = #&#123;id&#125;"</span></span><br><span class="line">&#125;) </span><br><span class="line"><span class="function">Test <span class="title">selectById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line"><span class="meta">@Insert</span>(&#123;<span class="string">"insert into test (name, description, create_nick, gmt_create)"</span>, </span><br><span class="line">  <span class="string">"values(#&#123;name&#125;, #&#123;description&#125;, #&#123;createNick&#125;, #&#123;gmtCreate, jdbcType=TIMESTAMP&#125;)"</span></span><br><span class="line">&#125;) </span><br><span class="line"><span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>, keyProperty = <span class="string">"id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Test test)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line"><span class="meta">@Update</span>(&#123;<span class="string">"update test"</span>,</span><br><span class="line">  <span class="string">"set name = #&#123;name&#125;, description = #&#123;description&#125;,"</span>, </span><br><span class="line">  <span class="string">"modified_nick = #&#123;modifiedNick&#125;, gmt_modified = #&#123;gmtModified, jdbcType=TIMESTAMP&#125;"</span>,</span><br><span class="line">  <span class="string">"where id = #&#123;id&#125;"</span> </span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">int</span> updateById&#123;Test test);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="meta">@Delete</span>(<span class="string">"delete from test where id = #&#123;id&#125;"</span>)</span><br><span class="line"><span class="keyword">int</span> deleteById&#123;Long id);</span><br></pre></td></tr></table></figure>
<h3 id="Provider-注解"><a href="#Provider-注解" class="headerlink" title="Provider 注解"></a>Provider 注解</h3><p>Provider 注解有四种：@SelectProvider、@InsertProvider、@UpdateProvider、@DeleteProvider。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SelectProvider</span>(type = PrivilegeProvider.class, method = <span class="string">"selectById"</span>) </span><br><span class="line"><span class="function">TestPrivilege <span class="title">selectById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivilegeProvider</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">selectById</span><span class="params">(<span class="keyword">final</span> Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SQL()&#123;</span><br><span class="line">      SELECT(<span class="string">"id, name, description"</span>);</span><br><span class="line">      FROM(<span class="string">"test"</span>);</span><br><span class="line">      WHERE(<span class="string">"id = #&#123;id&#125;"</span>);</span><br><span class="line">    &#125;.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>backend</category>
        <category>java 工程</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis 通用 mapper</title>
    <url>/2020/05/03/backend/java%20%E5%B7%A5%E7%A8%8B/mybatis%20%E9%80%9A%E7%94%A8%20mapper/</url>
    <content><![CDATA[<p><a href="https://github.com/abel533/Mapper" target="_blank" rel="noopener">Mybatis-Mapper 插件</a> 用于简化 mybatis 使用，这里只介绍基本使用和代码生成，扩展通用 Mapper 接口和 Example 的使用可参考<a href="https://github.com/abel533/Mapper/wiki/5.extend" target="_blank" rel="noopener">官方文档</a>。</p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol>
<li>pom.xml 添加 tk.mybatis 依赖。</li>
<li>配置 application.yml，设置通用 Mapper（支持自定义）。</li>
<li>编写 Mapper.xml。</li>
<li>编写实体类，实体类中字段名默认按驼峰式进行转换（通过 @NameStyle 注解可改变转换方式）。</li>
<li>以继承通用 Mapper 的方式编写 Mapper 接口。</li>
<li>基于 Mapper 接口编写 Service 实现类。</li>
</ol>
<p>application.yml 配置示例，配置项可参考 <a href="https://github.com/abel533/Mapper/wiki/3.config" target="_blank" rel="noopener">文档</a>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mapper:</span></span><br><span class="line"><span class="attr">  notEmpty:</span> <span class="literal">true</span> <span class="comment"># insertSelective 和 updateByPrimaryKeySelective 是否判断字符串类型 !=''</span></span><br></pre></td></tr></table></figure>
<p>Mapper.xml 编写示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.example.demo.dao.mapper.CountryMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.example.demo.dao.mapper.CountryMapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"Id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"countryname"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"countryname"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"countrycode"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"countrycode"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>实体类和 Mapper 接口编写示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实体类</span></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Country</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="keyword">private</span> Integer id;</span><br><span class="line">  <span class="keyword">private</span> String  countryname;</span><br><span class="line">  <span class="keyword">private</span> String  countrycode;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//省略 getter 和 setter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mapper 接口</span></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CountryMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Country</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from country where countryname = #&#123;countryname&#125;"</span>)</span><br><span class="line">    <span class="function">Country <span class="title">selectByCountryName</span><span class="params">(String countryname)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Service 实现类</span></span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.entity.Example;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountryServiceImpl</span> <span class="keyword">implements</span> <span class="title">CountryService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CountryMapper countryMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Country <span class="title">select</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        Example example = <span class="keyword">new</span> Example(Country.class);</span><br><span class="line">        Example.Criteria criteria = example.createCriteria();</span><br><span class="line">        criteria.andEqualTo(<span class="string">"id"</span>, id);</span><br><span class="line">        <span class="keyword">return</span> countryMapper.selectOneByExample(example);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实体类可用注解"><a href="#实体类可用注解" class="headerlink" title="实体类可用注解"></a>实体类可用注解</h3><ul>
<li>@NameStyle：字段名到列名的映射方式，如 @NameStyle(Style.uppercase)。</li>
<li>@Table：设置实体类关联的表名、数据库名。</li>
<li>@Column：设置字段与哪个列关联，insertable、updateable 属性用于影响 sql 的插入、更新操作。</li>
<li>@ColumnType：作用与 @Column 相似，优先级较低，可设置 jdbcType、类型处理器等。</li>
<li>@Transient：说明不是表中的字段，List、Map 等属性不需要添加该注解。</li>
<li>@Id：说明主键，联合主键可以配置多次，一个表中必须有一个主键。</li>
<li>@KeySql：设置主键策略，用于替换 @GeneratedValue。如 @KeySql(useGeneratedKeys = true) 用于使 sql 操作返回主键等。参看 <a href="https://github.com/abel533/Mapper/wiki/2.3-generatedvalue" target="_blank" rel="noopener">文档</a>。</li>
<li>@GeneratedValue：设置主键策略。</li>
<li>@Version：实现乐观锁。</li>
</ul>
<h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><p>这里介绍的是通过 maven 插件生成代码。</p>
<ol>
<li>pom.xml 添加 org.mybatis.generator 等 maven 插件。</li>
<li>添加 resources/generator/generatorConfig.xml 配置文件。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">      $&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml</span><br><span class="line">    <span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- generatorConfig.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"Mysql"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3Simple"</span> <span class="attr">defaultModelType</span>=<span class="string">"flat"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beginningDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"endingDelimiter"</span> <span class="attr">value</span>=<span class="string">"`"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"tk.mybatis.mapper.generator.MapperPlugin"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置通用 Mapper 接口 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappers"</span> <span class="attr">value</span>=<span class="string">"tk.mybatis.mapper.common.Mapper"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否区分大小写 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"caseSensitive"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/demo"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.example.demo.dao.entity"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"mapper"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.example.demo.dao.mapper"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"mapper_test"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">sqlStatement</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>backend</category>
        <category>java 工程</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>分页</title>
    <url>/2020/05/02/backend/java%20%E5%B7%A5%E7%A8%8B/%E5%88%86%E9%A1%B5/</url>
    <content><![CDATA[<h2 id="sql-分页"><a href="#sql-分页" class="headerlink" title="sql 分页"></a>sql 分页</h2><p>sql 分页借助于 limit 子句，这时应用层只需将前端页面上的参数传入数据库即可。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tableName <span class="keyword">limit</span> i, n <span class="comment">--- i 偏移量，n 每页显示条数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">id</span>) <span class="keyword">from</span> tableName <span class="comment">--- 获取总数</span></span><br></pre></td></tr></table></figure>
<h2 id="内存分页"><a href="#内存分页" class="headerlink" title="内存分页"></a>内存分页</h2><p>内存分页即取出表中的所有数据，然后根据前端传入的页码和每页显示条数计算当前需要展示的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(list != <span class="keyword">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">	count = list.size();</span><br><span class="line">	<span class="keyword">int</span> fromIndex = current * pageSize;</span><br><span class="line">	<span class="keyword">int</span> toIndex = (current + <span class="number">1</span>) * pageSize;</span><br><span class="line">	<span class="keyword">if</span>(toIndex &gt; count) &#123;</span><br><span class="line">		toIndex = count;</span><br><span class="line">	&#125;</span><br><span class="line">	List&lt;XDTO&gt; data = list.subList(fromIndex, toIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Mybatis-PageHelper-插件"><a href="#Mybatis-PageHelper-插件" class="headerlink" title="Mybatis-PageHelper 插件"></a>Mybatis-PageHelper 插件</h2><p><a href="https://github.com/pagehelper/Mybatis-PageHelper" target="_blank" rel="noopener">Mybatis-PageHelper</a> 分页插件的使用步骤如下：</p>
<ol>
<li>pom.xml 添加 com.github.pagehelper 依赖。</li>
<li>配置 application.yml。</li>
<li>编写 services。</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pagehelper:</span></span><br><span class="line"><span class="attr">  helperDialect:</span> <span class="string">mysql</span> <span class="comment"># 设置数据库方言</span></span><br><span class="line"><span class="attr">  reasonable:</span> <span class="literal">true</span> <span class="comment"># 分页合理化，即超过总条目时设为总条目数</span></span><br><span class="line"><span class="attr">  supportMethodsArguments:</span> <span class="literal">true</span> <span class="comment"># 支持通过 Mapper 接口参数来传递分页参数</span></span><br><span class="line"><span class="attr">  params:</span> <span class="string">count=countSql</span> <span class="comment"># 设置参数映射</span></span><br></pre></td></tr></table></figure>
<p>service 编写的<a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md" target="_blank" rel="noopener">官方示例</a>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法 1</span></span><br><span class="line">PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">List&lt;User&gt; list = userMapper.selectIf(<span class="number">1</span>);<span class="comment">// 使用拦截器从 PageHelper 中获取分页参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法 2</span></span><br><span class="line">Page&lt;User&gt; page = PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>).doSelectPage(()-&gt; userMapper.selectGroupBy());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法 3</span></span><br><span class="line">PageInfo pageInfo = PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>).doSelectPageInfo(() -&gt; userMapper.selectGroupBy());</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> total = PageHelper.count(()-&gt;userMapper.selectLike(user));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>backend</category>
        <category>java 工程</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL 语言</title>
    <url>/2020/05/01/%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF/SQL%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<p>SQL 关系数据库语言标准包含两个部分：</p>
<ul>
<li>DDL —— Data Definition Language 数据定义语言：用于定义数据库结构和数据的访问控制。</li>
<li>DML —— Data Mnipulation Language 数据操作语言：用于检索和更新数据。</li>
</ul>
<p>《数据库系统——设计、实现与管理（基础篇）》选用 BNF —— Backus Naur Form 巴克斯范式定义 SQL 语句：</p>
<ul>
<li>大写字母：表示保留字，须准确拼写。</li>
<li>小写字母：用户自定义字。</li>
<li>| 竖线：表示从选项中进行选择。</li>
<li>大括号：表示所需元素。</li>
<li>中括号：表示可选元素。</li>
<li>省略号：表示某一项可以重复零到多次。</li>
</ul>
<h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>SQL 标识符用于指定表名、视图名和列，标识符可使用大小写字母、数字、下划线书写，一般不能大于 128 个字符，不能有空格，必须以字母开头。</p>
<p>SQL 数据类型包含：</p>
<ul>
<li>BOOLEAN：布尔型。</li>
<li>CHAR、VARCHAR：字符型，设定格式如 VARCHAR[(length)]。</li>
<li>BIT、BIT VARYING：位类型，设定格式如 BIT [VARYING] [(length)]。</li>
<li>NUMERIC、DECIMAL、INTEGER、SMALLINT、BINGINT：定点数型，设定格式如 NUMERIC[(precision [, scale])]、INT。</li>
<li>FLOAT、REAL、DOUBLE PRECISION：浮点数型，设定格式如 FLOAT[(precision)]、REAL。</li>
<li>DATE、TIME、TIMESTAMP：日期时间型，设定格式如 DATE、TIME[timePrecision] [WITH TIME ZONE]。</li>
<li>INTERVAL：间隔型，设定格式如 INTERVAL YEAR(2) TO MONTH。</li>
<li>CHARACTER LARGE OBJECT、BINART LARGE OBJECT：大对象型，包含 BLOB 二进制大对象、CLOB 字符大对象、NCLOB 自然字符大对象。</li>
</ul>
<h3 id="标量运算符"><a href="#标量运算符" class="headerlink" title="标量运算符"></a>标量运算符</h3><p>标量运算符除 +、-、*、/ 算术运算符外，还有：</p>
<ul>
<li>OCTET_LENGTH：返回字符串的长度（位长度除以 2）。</li>
<li>CHAR_LENGTH：返回字符串的长度。</li>
<li>CAST：转换数据类型，如 CAST (5.2E6 AS INTEGER)。</li>
<li>||：连接连个字符串或位字符串。</li>
<li>LOWER、UPPER：大小写转换。</li>
<li>TRIM：裁剪字符串。</li>
<li>POSITION(a IN b)：返回子字符串 a 在 b 中的位置。</li>
<li>SUBSTRING(a FROM m TO n)：返回子字符串。</li>
<li>CASE columnName WHEN ‘a’ THEN a ELSE 0 END：条件返回。</li>
<li>CURRENT_DATE：返回用户当地当前日期。</li>
<li>CURRENT_TIME：返回当前时间。</li>
<li>CURRENT_TIMESTAMP：返回当前日期和时间。</li>
<li>ECTRACT：提取日期和时间间隔中的年、月或日信息。</li>
<li>ABS：计算绝对值。</li>
<li>MOD：取模。</li>
<li>LN：计算自然对数。</li>
<li>EXP：计算直属函数。</li>
<li>POWER：幂计算。</li>
<li>SQRT：计算平方根。</li>
<li>FLOOR：向下取整。</li>
<li>CEIL：向上。</li>
</ul>
<h3 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h3><h4 id="空值约束"><a href="#空值约束" class="headerlink" title="空值约束"></a>空值约束</h4><p>NOT NULL、NULL 用于限定列数据是否允许为空值，如 position VARCHAR(10) NOT NULL。</p>
<h4 id="域约束"><a href="#域约束" class="headerlink" title="域约束"></a>域约束</h4><p>域约束，用于限定枚举值的可能性。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- 方式1，使用 CHECK</span></span><br><span class="line">sex CHAR NOT NULL <span class="keyword">CHECK</span> (sex <span class="keyword">IN</span> (<span class="string">'M'</span>, <span class="string">'F'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 方式2，使用 CREATE DOMAIN</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DOMAIN</span> sexType <span class="keyword">AS</span> <span class="built_in">CHAR</span></span><br><span class="line">  <span class="keyword">DEFAULT</span> <span class="string">'M'</span></span><br><span class="line">  <span class="keyword">CHECK</span> (<span class="keyword">VALUE</span> <span class="keyword">IN</span> (<span class="string">'M'</span>, <span class="string">'F'</span>));</span><br><span class="line">sex sexType NOT NULL;</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 销毁，当域约束 sexType 被表定义所使用时，RESTRICT 会阻止销毁，CASCADE 会级联销毁</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DOMAIN</span> sexType [RESTRICT | <span class="keyword">CASCADE</span>]</span><br></pre></td></tr></table></figure>
<h4 id="实体完整性"><a href="#实体完整性" class="headerlink" title="实体完整性"></a>实体完整性</h4><p>主关键字可以用 PRIMARY KEY 设定，一个表只能设置一个关键字，但是关键字可以通过组合多个列字段构成，如 PRIMARY KEY(clientNo, propertyNo)。</p>
<p>关键字 UNIQUE 可保证列的唯一性（该列须被声明为 NOT NULL），每个表可以指定多个 UNIQUE 子句。</p>
<h3 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h3><h4 id="创建、删除数据库"><a href="#创建、删除数据库" class="headerlink" title="创建、删除数据库"></a>创建、删除数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> databaseName</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">SCHEMA</span> databaseName [RESTRICT | <span class="keyword">CASCADE</span>]</span><br></pre></td></tr></table></figure>
<h4 id="创建、删除表，修改表定义"><a href="#创建、删除表，修改表定义" class="headerlink" title="创建、删除表，修改表定义"></a>创建、删除表，修改表定义</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tableName</span><br><span class="line">  &#123;(columnName dataType [<span class="keyword">NOT</span> <span class="literal">NULL</span> [<span class="keyword">UNIQUE</span>])</span><br><span class="line">    [<span class="keyword">DEFAULT</span> defaultOption] [<span class="keyword">CHECK</span> (searchCondition)] [,...]&#125;</span><br><span class="line">  [PRIMARY <span class="keyword">KEY</span> (listColumns),]</span><br><span class="line">  &#123;[<span class="keyword">UNIQUE</span> (listColumns),] [,...]&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> tableName [RESTRICT | <span class="keyword">CASCADE</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tableName</span><br><span class="line">  [<span class="keyword">ADD</span> [<span class="keyword">COLUMN</span>] columnName dataType [<span class="keyword">NOT</span> <span class="literal">NULL</span>] [<span class="keyword">UNIQUE</span>]]</span><br><span class="line">  [<span class="keyword">DEFAULT</span> defaultOption] [<span class="keyword">CHECK</span> (searchCOndition)]</span><br><span class="line">  [<span class="keyword">DROP</span> [<span class="keyword">COLUMN</span>] columnName [RESTRICT | <span class="keyword">CASCADE</span>]]</span><br><span class="line">  [<span class="keyword">ALTER</span> [<span class="keyword">COLUMN</span>] <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> defaultOption]</span><br><span class="line">  [<span class="keyword">ALTER</span> [<span class="keyword">COLUMN</span>] <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>]</span><br></pre></td></tr></table></figure>
<h4 id="创建、删除索引"><a href="#创建、删除索引" class="headerlink" title="创建、删除索引"></a>创建、删除索引</h4><p>索引可以提升数据检索的效率，索引只能在基表上建立。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span>] <span class="keyword">INDEX</span> indexName</span><br><span class="line"><span class="keyword">ON</span> TableName (columnName [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>] [,...])</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> indexName</span><br></pre></td></tr></table></figure>
<h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>       [<span class="keyword">DISTINCT</span> | <span class="keyword">ALL</span>] &#123;* | [columnExpression [<span class="keyword">AS</span> newName]] [,...]&#125;</span><br><span class="line"><span class="keyword">FROM</span>         TableName [<span class="keyword">alias</span>] [,...]</span><br><span class="line">[<span class="keyword">WHERE</span>       condition]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span>    columnList] [<span class="keyword">HAVING</span> condition]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span>    columnList]</span><br></pre></td></tr></table></figure>
<p>DISTINCT 用于去重。<br>‘*’ 用于查询所有字段。<br>AS 为字段命名。</p>
<h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>WHERE 子句支持一下条件运算：</p>
<ul>
<li>比较：+、&lt;&gt;、!=、&lt;、&gt;、&lt;=、&gt;=。</li>
<li>范围：BETWEEN AND、NOT BTWEEN AND，如 WHERE salary &gt;= 20000 AND salary &lt;= 30000。</li>
<li>成员关系：IN、NOT IN，如 WHERE position IN (‘Manager’, ‘Supervisor’)。</li>
<li>模式匹配：LIKE、NOT LIKE。模式匹配符号有：% 表示通配符，_ 任意单个字符。如 WHERE address LIKE ‘H%’ 表示匹配 H 起始的字符串。</li>
<li>空匹配：IS NULL、IS NOT NULL。</li>
</ul>
<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>ORDER BY 子句可用于排序。保留字 ASC 表示升序，DESC 表示降序，默认使用升序。ORDER BY 子句支持多个字段排序，如 ORDER BY type, rent DESC。</p>
<h4 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h4><p>聚集函数可用于 SELECT 语句或 HAVING 子句中。当 SELECT 语句包含聚集函数时，那就不能在 SELECT 语句直接引用列字段，除非它作为聚集函数的参数。</p>
<ul>
<li>COUNT：返回指定列中数据的个数，能用于数值和非数值字段。</li>
<li>SUM：返回指定列中数据的总和，只能用于数值字段。</li>
<li>AVG：返回指定列中数据的平均值，只能用于数值字段。</li>
<li>MIN：返回指定列中数据的最小值，能用于数值和非数值字段。</li>
<li>MAX：返回指定列中数据的最大值，能用于数值和非数值字段。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> myCount <span class="keyword">FROM</span> PropertyForRent <span class="keyword">WHERE</span> rent &gt; <span class="number">350</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> propertyNo) <span class="keyword">AS</span> myCount <span class="keyword">FROM</span> Viewing <span class="keyword">WHERE</span> viewDate <span class="keyword">BETWEEN</span> <span class="string">'1-May-13'</span> <span class="keyword">AND</span> <span class="string">'31-May-13'</span>;</span><br></pre></td></tr></table></figure>
<h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><p>GROUP BY 用于分组查询，通常和聚集函数一样适用于报表。HAVING 子句用于过滤分组结果。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> branchNo, <span class="keyword">COUNT</span>(staffNo) <span class="keyword">AS</span> myCount, <span class="keyword">SUM</span>(salary) <span class="keyword">AS</span> mySum</span><br><span class="line"><span class="keyword">FROM</span> Staff</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> branchNo</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(staff) &gt; <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> branchNo;</span><br></pre></td></tr></table></figure>
<h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p>多表查询可使用子查询或连接操作。简单连接通过 WHERE 语句指定连接列。</p>
<h4 id="简单连接"><a href="#简单连接" class="headerlink" title="简单连接"></a>简单连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.clientNo, fName, iName, propertyNo, <span class="keyword">comment</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Client</span> c, Viewing v</span><br><span class="line"><span class="keyword">WHERE</span> c.clientNo = v.clientNo</span><br></pre></td></tr></table></figure>
<h4 id="JOIN-连接"><a href="#JOIN-连接" class="headerlink" title="JOIN 连接"></a>JOIN 连接</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- 内连接，求交集，查找多表中值相同的行，剔除不相同的行</span></span><br><span class="line"><span class="keyword">SELECT</span> b.*, p.*</span><br><span class="line"><span class="keyword">FROM</span> Branch b, PropertyForRent p</span><br><span class="line"><span class="keyword">WHERE</span> b.bCity = p.pCity</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 左外连接，求差集，保留左表中的所有行</span></span><br><span class="line"><span class="keyword">SELECT</span> b.*, p.*</span><br><span class="line"><span class="keyword">FROM</span> Branch b <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> PropertyForRent p <span class="keyword">ON</span> b.bCity = p.pCity</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 右外连接，求差集，保留右表中的所有行</span></span><br><span class="line"><span class="keyword">SELECT</span> b.*, p.*</span><br><span class="line"><span class="keyword">FROM</span> Branch b <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> PropertyForRent p <span class="keyword">ON</span> b.bCity = p.pCity</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 全外连接，求并集，保留多表中的所有行</span></span><br><span class="line"><span class="keyword">SELECT</span> b.*, p.*</span><br><span class="line"><span class="keyword">FROM</span> Branch b <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> PropertyForRent p <span class="keyword">ON</span> b.bCity = p.pCity</span><br></pre></td></tr></table></figure>
<h3 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h3><p>在某种意义上，分组查询是特殊的嵌套查询。子查询可用于 WHEHE、HAVING 子句，也可用于 INSERT、UPDATE、DELETE 语句。根据子查询的结果，子查询可以分为标量子查询（返回单行单列）、行子查询（返回单行多列）、表子查询（返回多行数据）。子查询可以添加 ANY、ALL、SOME、EXISTS、NOT EXISTS、NOT IN 等保留字，分别表示子查询获得的数据只要有任意一个、或全部满足条件即为真。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- 等价于分组查询</span></span><br><span class="line"><span class="keyword">SELECT</span> branchNo, (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(staffNo) <span class="keyword">AS</span> myCount</span><br><span class="line">                  <span class="keyword">FROM</span> Staff s</span><br><span class="line">                  <span class="keyword">WHERE</span> s.branchNo = b.branchNO),</span><br><span class="line">                  (<span class="keyword">SELECT</span> <span class="keyword">SUM</span>(staffNo) <span class="keyword">AS</span> mySum</span><br><span class="line">                  <span class="keyword">FROM</span> Staff s</span><br><span class="line">                  <span class="keyword">WHERE</span> s.branchNo = b.branchNO)</span><br><span class="line"><span class="keyword">FROM</span> Branch b</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> branchNo;</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 子查询作为 WHERE 条件</span></span><br><span class="line"><span class="keyword">SELECT</span> staffNo, fName, IName, <span class="keyword">position</span></span><br><span class="line"><span class="keyword">FROM</span> Staff</span><br><span class="line"><span class="keyword">WHERE</span> salary = (<span class="keyword">SELECT</span> salary</span><br><span class="line">                  <span class="keyword">FROM</span> Staff</span><br><span class="line">                  <span class="keyword">WHERE</span> branchNo = <span class="string">'B003'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="复合查询"><a href="#复合查询" class="headerlink" title="复合查询"></a>复合查询</h3><p>复合查询指对多个 SELECT 语句求并集、交集、差集。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- 求并集，两表的 city 列合并成一个新的查询结果</span></span><br><span class="line">(<span class="keyword">SELECT</span> city</span><br><span class="line"><span class="keyword">FROM</span> Branch</span><br><span class="line"><span class="keyword">WHERE</span> city <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line">(<span class="keyword">SELECT</span> city</span><br><span class="line"><span class="keyword">FROM</span> PropertyForRent</span><br><span class="line"><span class="keyword">WHERE</span> city <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 求交集</span></span><br><span class="line">(<span class="keyword">SELECT</span> city</span><br><span class="line"><span class="keyword">FROM</span> Branch)</span><br><span class="line"><span class="keyword">INTERSECT</span></span><br><span class="line">(<span class="keyword">SELECT</span> city</span><br><span class="line"><span class="keyword">FROM</span> PropertyForRent);</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 求差集</span></span><br><span class="line">(<span class="keyword">SELECT</span> city</span><br><span class="line"><span class="keyword">FROM</span> Branch)</span><br><span class="line"><span class="keyword">EXCEPT</span></span><br><span class="line">(<span class="keyword">SELECT</span> city</span><br><span class="line"><span class="keyword">FROM</span> PropertyForRent)</span><br></pre></td></tr></table></figure>
<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><ul>
<li>INSERT：添加</li>
<li>UPDATE：更新</li>
<li>DELETE：删除</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- 添加</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TableName [(columnList)]</span><br><span class="line"><span class="keyword">VALUES</span> (dataValueList)</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 复制数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TableName [(columnList)]</span><br><span class="line">  <span class="keyword">SELECT</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 更新，可同时更新多个列，也可以使用计算表达式</span></span><br><span class="line"><span class="keyword">UPDATE</span> TableName </span><br><span class="line"><span class="keyword">SET</span> columnName1 = dataValue1 [, columnName2 = dataValue2 ...]</span><br><span class="line">[<span class="keyword">WHERE</span> searchCondition]</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 删除，不指定条件时为删除全部数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> TableName</span><br><span class="line">[<span class="keyword">WHERE</span> searchCondition]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>backend</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>hibernate-validator</title>
    <url>/2020/04/30/backend/java%20%E5%B7%A5%E7%A8%8B/hibernate-validator/</url>
    <content><![CDATA[<p>从表现层到持久层都需要作数据校验，为了避免在各层实现校验函数的繁琐、性能消耗，<a href="https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#preface" target="_blank" rel="noopener">hibernate-validator</a> 依循 Jakarta Bean Validation 2.0 规范将校验规则绑定在领域模型 —— 实体类上（通过注解或 xml 文件的形式为实体类添加元数据描述）。</p>
<h2 id="一般校验"><a href="#一般校验" class="headerlink" title="一般校验"></a>一般校验</h2><ol>
<li>pom.xml 文件添加 hibernate-validator 依赖。</li>
<li>实体类添加 @NotNull 等注解，设定校验规则，参考 <a href="https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#validator-gettingstarted-createmodel" target="_blank" rel="noopener">Applying constraints</a>。</li>
<li>显式调用 Validation.buildDefaultValidatorFactory 等进行校验，参考 <a href="https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#_validating_constraints" target="_blank" rel="noopener">Validating constraints</a>。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="meta">@NotNull</span></span><br><span class="line">  <span class="keyword">private</span> String manufacturer;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NotNull</span></span><br><span class="line">  <span class="meta">@Size</span>(min = <span class="number">2</span>, max = <span class="number">14</span>)</span><br><span class="line">  <span class="keyword">private</span> String licensePlate;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Min</span>(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> seatCount;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String manufacturer, String licencePlate, <span class="keyword">int</span> seatCount)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.manufacturer = manufacturer;</span><br><span class="line">    <span class="keyword">this</span>.licensePlate = licencePlate;</span><br><span class="line">    <span class="keyword">this</span>.seatCount = seatCount;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ValidatorFactory factory = Validation.buildDefaultValidatorFactory();</span><br><span class="line">validator = factory.getValidator();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">Car car = <span class="keyword">new</span> Car(<span class="string">"Morris"</span>, <span class="string">"D"</span>, <span class="number">4</span>);</span><br><span class="line">Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations =</span><br><span class="line">  validator.validate( car );</span><br><span class="line">assertEquals(<span class="number">1</span>, constraintViolations.size() );</span><br><span class="line">assertEquals(</span><br><span class="line">  <span class="string">"size must be between 2 and 14"</span>,</span><br><span class="line">  constraintViolations.iterator().next().getMessage()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">Car car = <span class="keyword">new</span> Car( <span class="keyword">null</span>, <span class="keyword">true</span> );</span><br><span class="line">Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = validator.validateProperty(</span><br><span class="line">  car,</span><br><span class="line">  <span class="string">"manufacturer"</span></span><br><span class="line">);</span><br><span class="line">assertEquals( <span class="number">1</span>, constraintViolations.size() );</span><br><span class="line">assertEquals( <span class="string">"must not be null"</span>, constraintViolations.iterator().next().getMessage() );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line">Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = validator.validateValue(</span><br><span class="line">  Car.class,</span><br><span class="line">  <span class="string">"manufacturer"</span>,</span><br><span class="line">  <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line">assertEquals( <span class="number">1</span>, constraintViolations.size() );</span><br><span class="line">assertEquals( <span class="string">"must not be null"</span>, constraintViolations.iterator().next().getMessage() );</span><br></pre></td></tr></table></figure>
<h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><p>hibernate-validator 的校验条件可以放在属性、方法、Map 或 List 成员、类等。<a href="https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#validator-defineconstraints-spec" target="_blank" rel="noopener">校验条件</a>主要包含：</p>
<ul>
<li>@NotNull、@Null：校验 null</li>
<li>@NotEmpty：校验元素非空</li>
<li>@NotBlank：校验 trim 后的字符串</li>
<li>@AssertFalse、@AssertTrue：校验是否 false、true</li>
<li>@DecimalMax(value=, inclusive=)、@DecimalMin(value=, inclusive=)：校验数值大小</li>
<li>@Digits(integer=, fraction=)：校验整数、小数位数</li>
<li>@Min(value=)、@Max(value=)、@Range(min=, max=)：最大值、最小值、范围校验</li>
<li>@Negative、@NegativeOrZero、@Positive、@PositiveOrZero：正负值或零校验</li>
<li>@Future、@FutureOrPresent、@Past、@PastOrPresent：校验日期是否将来或过去等</li>
<li>@DurationMax(days=, hours=, minutes=, seconds=, millis=, nanos=, inclusive=)、@DurationMin(days=, hours=, minutes=, seconds=, millis=, nanos=, inclusive=)：校验时段</li>
<li>@Length(min=, max=)：校验字符串的长度</li>
<li>@Size(min=, max=)：校验集合的大小</li>
<li>@UniqueElements：校验集合包含的元素均唯一</li>
<li>@Currency(value=)：校验货币单位</li>
<li>@Pattern(regex=, flags=)：正则表达式校验</li>
<li>@Email：校验邮件</li>
<li>@URL(protocol=, host=, port=, regexp=, flags=)：校验链接</li>
<li>@CreditCardNumber(ignoreNonDigitCharacters=)：信用卡校验</li>
</ul>
<h2 id="spring-boot"><a href="#spring-boot" class="headerlink" title="spring-boot"></a>spring-boot</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/getCar"</span>)</span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Result&lt;Car&gt; <span class="title">insertUser</span><span class="params">(@Valid Car car, BindingResult result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">      Result.createFailResult(</span><br><span class="line">        String.valueOf(ResponseConstants.PARAM_ERROR.getCode()), </span><br><span class="line">        result.getAllErrors()[<span class="number">0</span>].getDefaultMessage()</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.createSuccessResult(car);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自定义校验器"><a href="#自定义校验器" class="headerlink" title="自定义校验器"></a>自定义校验器</h2><p>自定义校验器通过以下步骤制作：</p>
<ol>
<li>创建约束条件注解。</li>
<li>实现 validator。</li>
<li>定义默认的错误提示。</li>
</ol>
<p>以下是官方提供的自定义字符串大小写校验器示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123; FIELD, METHOD, PARAMETER, ANNOTATION_TYPE, TYPE_USE &#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)<span class="comment">// 在运行时可以通过反射获取</span></span><br><span class="line"><span class="meta">@Constraint</span>(validatedBy = CheckCaseValidator.class)<span class="comment">// 指定校验逻辑</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Repeatable</span>(List.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CheckCase &#123;</span><br><span class="line">    <span class="comment">// Jakarta Bean Validation API 规范，message 默认错误提示</span></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "</span>&#123;org.hibernate.validator.referenceguide.chapter06.CheckCase.message&#125;<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // Jakarta Bean Validation API 规范，message 默认错误提示</span></span><br><span class="line"><span class="string">    Class&lt;?&gt;[] groups() default &#123; &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Class&lt;? extends Payload&gt;[] payload() default &#123; &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    CaseMode value();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @Target(&#123; FIELD, METHOD, PARAMETER, ANNOTATION_TYPE &#125;)</span></span><br><span class="line"><span class="string">    @Retention(RUNTIME)</span></span><br><span class="line"><span class="string">    @Documented</span></span><br><span class="line"><span class="string">    @interface List &#123;</span></span><br><span class="line"><span class="string">        CheckCase[] value();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">public enum CaseMode &#123;</span></span><br><span class="line"><span class="string">    UPPER,</span></span><br><span class="line"><span class="string">    LOWER;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">public class CheckCaseValidator implements ConstraintValidator&lt;CheckCase, String&gt; &#123;</span></span><br><span class="line"><span class="string">    private CaseMode caseMode;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @Override</span></span><br><span class="line"><span class="string">    public void initialize(CheckCase constraintAnnotation) &#123;</span></span><br><span class="line"><span class="string">        this.caseMode = constraintAnnotation.value();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @Override</span></span><br><span class="line"><span class="string">    public boolean isValid(String object, ConstraintValidatorContext constraintContext) &#123;</span></span><br><span class="line"><span class="string">        if ( object == null ) &#123;</span></span><br><span class="line"><span class="string">            return true;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        if ( caseMode == CaseMode.UPPER ) &#123;</span></span><br><span class="line"><span class="string">            return object.equals( object.toUpperCase() );</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">            return object.equals( object.toLowerCase() );</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/qq_27680317/article/details/79970590" target="_blank" rel="noopener">https://blog.csdn.net/qq_27680317/article/details/79970590</a><br><a href="https://blog.csdn.net/dh554112075/article/details/80790464" target="_blank" rel="noopener">https://blog.csdn.net/dh554112075/article/details/80790464</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>java 工程</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>spring boot 应用常见问题</title>
    <url>/2020/04/30/backend/java%20%E5%B7%A5%E7%A8%8B/java%20%E5%BA%94%E7%94%A8%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>文件上传可借助 MultipartFile。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/uploadFile"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;FileDTO&gt; <span class="title">uploadFile</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile file)</span>&#123;</span><br><span class="line">  FileDTO fileDTO;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    fileDTO = storageService.store(file);<span class="comment">// 实现存储 service</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (DAOException de) &#123;</span><br><span class="line">    <span class="keyword">return</span> Result.createFailResult(ResponseConstants.DAO_EXCEPTION);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (BusinessException be) &#123;</span><br><span class="line">      <span class="keyword">return</span> Result.createFailResult(String.valueOf(</span><br><span class="line">        ResponseConstants.BUSINESS_EXCEPTION.getCode()), be.getMessage()</span><br><span class="line">      );</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">return</span> Result.createFailResult(ResponseCodeConstants.UNKOWN_SYSTEM_ERROR);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Result.createSuccessResult(fileDTO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>spring boot 官网<a href="https://spring.io/guides/gs/uploading-files/" target="_blank" rel="noopener">Uploading Files 文档</a>提供了上传文件、下载文件、列出文件清单的示例。</p>
<h2 id="content-type"><a href="#content-type" class="headerlink" title="content-type"></a>content-type</h2><p><a href="https://tool.oschina.net/commons/" target="_blank" rel="noopener">https://tool.oschina.net/commons/</a><br><a href="https://www.jianshu.com/p/4b09c260f9b2" target="_blank" rel="noopener">https://www.jianshu.com/p/4b09c260f9b2</a></p>
<h2 id="spring-boot"><a href="#spring-boot" class="headerlink" title="spring-boot"></a>spring-boot</h2><p><a href="https://blog.csdn.net/qq_27680317/article/details/79970590" target="_blank" rel="noopener">https://blog.csdn.net/qq_27680317/article/details/79970590</a><br><a href="https://blog.csdn.net/dh554112075/article/details/80790464" target="_blank" rel="noopener">https://blog.csdn.net/dh554112075/article/details/80790464</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>java 工程</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>react fiber 代码梳理篇</title>
    <url>/2020/04/29/frontend/react16/react%20fiber%20%E4%BB%A3%E7%A0%81%E6%A2%B3%E7%90%86%E7%AF%87/</url>
    <content><![CDATA[<h2 id="scheduleWork"><a href="#scheduleWork" class="headerlink" title="scheduleWork"></a>scheduleWork</h2><p>正如 <a href="https://zhuanlan.zhihu.com/p/108477707" target="_blank" rel="noopener">react fiber 搜罗整理篇</a> 已点明的，fiber reconciler 对首次渲染和再次渲染会采用不同的机制。</p>
<p>首次渲染 —— 比如用户侧在浏览器环境调用 ReactDOM.render(rootReactElement, rootDomElement)  —— 时，fiber reconciler 首先会通过 <a href="https://github.com/facebook/react/blob/v16.13.0/packages/react-reconciler/src/ReactFiberReconciler.js#L219" target="_blank" rel="noopener">createContainer</a> 将根节点 rootDomElement 转化成 fiberRoot 根节点；然后通过 <a href="https://github.com/facebook/react/blob/v16.13.0/packages/react-reconciler/src/ReactFiberReconciler.js#L228" target="_blank" rel="noopener">updateContainer</a> 执行 scheduleWork(fiberRoot, expirationTime) 调度作业，完成渲染。</p>
<p>再次渲染 —— 比如类组件或函数组件状态更新 —— 时，<a href="https://zhuanlan.zhihu.com/p/110903585" target="_blank" rel="noopener">react fiber 类组件状态更新篇</a>、<a href="https://zhuanlan.zhihu.com/p/111695829" target="_blank" rel="noopener">react fiber hooks钩子篇</a> 已指出，两者都会执行 scheduleWork(fiber, expirationTime) 调度作业，实现重绘。</p>
<p>可见，两种场景均依赖于 scheduleWork。</p>
<h3 id="executionContext-amp-expirationTime"><a href="#executionContext-amp-expirationTime" class="headerlink" title="executionContext &amp; expirationTime"></a>executionContext &amp; expirationTime</h3><p>scheduleWork 内有两个核心要素：executionContext 执行上下文，用于更新方式以及所处阶段；expirationTime 过期时间。</p>
<h4 id="executionContext"><a href="#executionContext" class="headerlink" title="executionContext"></a>executionContext</h4><p>react 使用位运算更新或判断 executionContext 值，如使用 executionContext |= RenderContext 更新；使用 executionContext &amp; RenderContext !== NoContext 判断是否处于 render 阶段。fiber reconciler 在每次变更 executionContext 时都会保存先前值，等操作完成后再将 executionContext 置回先前值（本文中贴示代码均省略这一过程）。介于 executionContext 初始值为 NoContext，使用 executionContext === NoContext 可判断调用栈是否回到底部。以下是 executionContext 状态值的基础枚举：</p>
<ul>
<li>0b000000 NoContext：空状态，作为初始值，可用于推断调用栈是否回到底部、或者推断 executionContext 处于那种状态</li>
<li>0b000001 BatchedContext：批量执行更新任务，如调用 batchedUpdates 更新时。</li>
<li>0b000010 EventContext：执行更新任务，如调用 batchedEventUpdates 更新时。</li>
<li>0b000100 DiscreteEventContext：以 UserBlockingPriority 优先级执行任务，如调用 discreteUpdates 更新时。</li>
<li>0b001000 LegacyUnbatchedContext：传统的非批量执行更新任务，如首次挂载时调用 unbatchedUpdates 更新时。</li>
<li>0b010000 RenderContext：当前更新处于 render 阶段</li>
<li>0b100000 CommitContext：当前更新处于 commit 阶段</li>
</ul>
<h4 id="expirationTime"><a href="#expirationTime" class="headerlink" title="expirationTime"></a>expirationTime</h4><p>fiber 的 expirationTime 基于 computeExpirationForFiber 计算。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computeExpirationForFiber</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  currentTime: ExpirationTime,</span></span></span><br><span class="line"><span class="function"><span class="params">  fiber: Fiber,</span></span></span><br><span class="line"><span class="function"><span class="params">  suspenseConfig: null | SuspenseConfig,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">ExpirationTime</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> mode = fiber.mode;</span><br><span class="line">  <span class="keyword">if</span> ((mode &amp; BlockingMode) === NoMode) &#123;</span><br><span class="line">    <span class="keyword">return</span> Sync;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> priorityLevel = getCurrentPriorityLevel();</span><br><span class="line">  <span class="keyword">if</span> ((mode &amp; ConcurrentMode) === NoMode) &#123;</span><br><span class="line">    <span class="keyword">return</span> priorityLevel === ImmediatePriority ? Sync : Batched;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((executionContext &amp; RenderContext) !== NoContext) &#123;</span><br><span class="line">    <span class="comment">// Use whatever time we're already rendering</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Should there be a way to opt out, like with `runWithPriority`?</span></span><br><span class="line">    <span class="keyword">return</span> renderExpirationTime;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> expirationTime;</span><br><span class="line">  <span class="keyword">if</span> (suspenseConfig !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Compute an expiration time based on the Suspense timeout.</span></span><br><span class="line">    expirationTime = computeSuspenseExpiration(</span><br><span class="line">      currentTime,</span><br><span class="line">      suspenseConfig.timeoutMs | <span class="number">0</span> || LOW_PRIORITY_EXPIRATION,</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Compute an expiration time based on the Scheduler priority.</span></span><br><span class="line">    <span class="keyword">switch</span> (priorityLevel) &#123;</span><br><span class="line">      <span class="keyword">case</span> ImmediatePriority:</span><br><span class="line">        expirationTime = Sync;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> UserBlockingPriority:</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Rename this to computeUserBlockingExpiration</span></span><br><span class="line">        expirationTime = computeInteractiveExpiration(currentTime);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> NormalPriority:</span><br><span class="line">      <span class="keyword">case</span> LowPriority: <span class="comment">// <span class="doctag">TODO:</span> Handle LowPriority</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Rename this to... something better.</span></span><br><span class="line">        expirationTime = computeAsyncExpiration(currentTime);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> IdlePriority:</span><br><span class="line">        expirationTime = Idle;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        invariant(<span class="literal">false</span>, <span class="string">'Expected a valid priority level'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If we're in the middle of rendering a tree, do not update at the same</span></span><br><span class="line">  <span class="comment">// expiration time that is already rendering.</span></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> We shouldn't have to do this if the update is on a different root.</span></span><br><span class="line">  <span class="comment">// Refactor computeExpirationForFiber + scheduleUpdate so we have access to</span></span><br><span class="line">  <span class="comment">// the root when we check for this condition.</span></span><br><span class="line">  <span class="keyword">if</span> (workInProgressRoot !== <span class="literal">null</span> &amp;&amp; expirationTime === renderExpirationTime) &#123;</span><br><span class="line">    <span class="comment">// This is a trick to move this update into a separate batch</span></span><br><span class="line">    expirationTime -= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> expirationTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>0 NoWork：</li>
<li>1 Never：</li>
<li>2 Idle：</li>
<li>3 ContinuousHydration：</li>
<li>1073741822 Batched：</li>
<li>1073741823 Sync：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> scheduleWork = scheduleUpdateOnFiber;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scheduleUpdateOnFiber</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  fiber: Fiber,</span></span></span><br><span class="line"><span class="function"><span class="params">  expirationTime: ExpirationTime,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);</span><br><span class="line">  <span class="keyword">if</span> (expirationTime === Sync) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      (executionContext &amp; LegacyUnbatchedContext) !== NoContext &amp;&amp;</span><br><span class="line">      (executionContext &amp; (RenderContext | CommitContext)) === NoContext</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// This is a legacy edge case. The initial mount of a ReactDOM.render-ed</span></span><br><span class="line">      <span class="comment">// root inside of batchedUpdates should be synchronous, but layout updates</span></span><br><span class="line">      <span class="comment">// should be deferred until the end of the batch.</span></span><br><span class="line">      performSyncWorkOnRoot(root);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ensureRootIsScheduled(root);</span><br><span class="line">      <span class="keyword">if</span> (executionContext === NoContext) &#123;</span><br><span class="line">        <span class="comment">// Flush the synchronous work now, unless we're already working or inside</span></span><br><span class="line">        <span class="comment">// a batch. This is intentionally inside scheduleUpdateOnFiber instead of</span></span><br><span class="line">        <span class="comment">// scheduleCallbackForFiber to preserve the ability to schedule a callback</span></span><br><span class="line">        <span class="comment">// without immediately flushing it. We only do this for user-initiated</span></span><br><span class="line">        <span class="comment">// updates, to preserve historical behavior of legacy mode.</span></span><br><span class="line">        flushSyncCallbackQueue();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ensureRootIsScheduled(root);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ensureRootIsScheduled</span>(<span class="params">root: FiberRoot</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> lastExpiredTime = root.lastExpiredTime;</span><br><span class="line">  <span class="keyword">if</span> (lastExpiredTime !== NoWork) &#123;</span><br><span class="line">    <span class="comment">// Special case: Expired work should flush synchronously.</span></span><br><span class="line">    root.callbackExpirationTime = Sync;</span><br><span class="line">    root.callbackPriority = ImmediatePriority;</span><br><span class="line">    root.callbackNode = scheduleSyncCallback(</span><br><span class="line">      performSyncWorkOnRoot.bind(<span class="literal">null</span>, root),</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> expirationTime = getNextRootExpirationTimeToWorkOn(root);</span><br><span class="line">  <span class="keyword">const</span> existingCallbackNode = root.callbackNode;<span class="comment">// 上一个调度任务</span></span><br><span class="line">  <span class="keyword">if</span> (expirationTime === NoWork) &#123;</span><br><span class="line">    <span class="comment">// There's nothing to work on.</span></span><br><span class="line">    <span class="keyword">if</span> (existingCallbackNode !== <span class="literal">null</span>) &#123;</span><br><span class="line">      root.callbackNode = <span class="literal">null</span>;</span><br><span class="line">      root.callbackExpirationTime = NoWork;</span><br><span class="line">      root.callbackPriority = NoPriority;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> currentTime = requestCurrentTimeForUpdate();</span><br><span class="line">  <span class="keyword">const</span> priorityLevel = inferPriorityFromExpirationTime(</span><br><span class="line">    currentTime,</span><br><span class="line">    expirationTime,</span><br><span class="line">  );</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 对于之前的渲染任务，校验其是否有足够的优先级及过期时间，否则取消</span></span><br><span class="line">  <span class="keyword">if</span> (existingCallbackNode !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> existingCallbackPriority = root.callbackPriority;</span><br><span class="line">    <span class="keyword">const</span> existingCallbackExpirationTime = root.callbackExpirationTime;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="comment">// Callback must have the exact same expiration time.</span></span><br><span class="line">      existingCallbackExpirationTime === expirationTime &amp;&amp;</span><br><span class="line">      existingCallbackPriority &gt;= priorityLevel</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cancelCallback(existingCallbackNode);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  root.callbackExpirationTime = expirationTime;</span><br><span class="line">  root.callbackPriority = priorityLevel;</span><br><span class="line">  <span class="keyword">let</span> callbackNode;</span><br><span class="line">  <span class="comment">// 同步作业，以 ImmediatePriority 优先级调度执行</span></span><br><span class="line">  <span class="keyword">if</span> (expirationTime === Sync) &#123;</span><br><span class="line">    callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(<span class="literal">null</span>, root));</span><br><span class="line">  <span class="comment">// 禁用定时调度时，以指定的 priorityLevel 优先级调度</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (disableSchedulerTimeoutBasedOnReactExpirationTime) &#123;</span><br><span class="line">    callbackNode = scheduleCallback(</span><br><span class="line">      priorityLevel,</span><br><span class="line">      performConcurrentWorkOnRoot.bind(<span class="literal">null</span>, root),</span><br><span class="line">    );</span><br><span class="line">  <span class="comment">// 指定 timeout 延时调度，优先级为 priorityLevel</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    callbackNode = scheduleCallback(</span><br><span class="line">      priorityLevel,</span><br><span class="line">      performConcurrentWorkOnRoot.bind(<span class="literal">null</span>, root),</span><br><span class="line">      &#123;<span class="attr">timeout</span>: expirationTimeToMs(expirationTime) - now()&#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  root.callbackNode = callbackNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 同步任务添加到 syncQueue 队列中</span></span><br><span class="line"><span class="comment">// 2. 调度 flushSyncCallbackQueue 以 ImmediatePriority 优先级执行</span></span><br><span class="line"><span class="comment">// 3. 若报错，重试调度作业</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scheduleSyncCallback</span>(<span class="params">callback: SchedulerCallback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (syncQueue === <span class="literal">null</span>) &#123;</span><br><span class="line">    syncQueue = [callback];</span><br><span class="line">    <span class="comment">// 使用 scheduler 模块透出接口执行调度作业</span></span><br><span class="line">    immediateQueueCallbackNode = Scheduler_scheduleCallback(</span><br><span class="line">      Scheduler_ImmediatePriority,</span><br><span class="line">      flushSyncCallbackQueueImpl,</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    syncQueue.push(callback);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fakeCallbackNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同步模式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">performSyncWorkOnRoot</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Check if there's expired work on this root. Otherwise, render at Sync.</span></span><br><span class="line">  <span class="keyword">const</span> lastExpiredTime = root.lastExpiredTime;</span><br><span class="line">  <span class="keyword">const</span> expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If we have a work-in-progress fiber, it means there's still work to do</span></span><br><span class="line">  <span class="comment">// in this root.</span></span><br><span class="line">  <span class="keyword">if</span> (workInProgress !== <span class="literal">null</span>) &#123;</span><br><span class="line">    executionContext |= RenderContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        workLoopSync();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (thrownValue) &#123;</span><br><span class="line">        <span class="comment">// 错误边界捕获处理</span></span><br><span class="line">        handleError(root, thrownValue);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步作业，此时 workInProgress 必须为 null</span></span><br><span class="line">    <span class="keyword">if</span> (workInProgress !== <span class="literal">null</span>) &#123;</span><br><span class="line">      invariant(</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        <span class="string">'Cannot commit an incomplete root. This error is likely caused by a '</span> +</span><br><span class="line">          <span class="string">'bug in React. Please file an issue.'</span>,</span><br><span class="line">      );</span><br><span class="line">    <span class="comment">// render 阶段完成，将 work-in-progress fiber 置为 finished-work fiber</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      root.finishedWork = (root.current.alternate: any);</span><br><span class="line">      root.finishedExpirationTime = expirationTime;</span><br><span class="line">      finishSyncRender(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调度的渲染任务，避免排队中的任务长期阻塞</span></span><br><span class="line">    ensureRootIsScheduled(root);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// render 阶段</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">workLoopSync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (workInProgress !== <span class="literal">null</span>) &#123;</span><br><span class="line">    workInProgress = performUnitOfWork(workInProgress);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// commit 阶段</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">finishSyncRender</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  workInProgressRoot = <span class="literal">null</span>;</span><br><span class="line">  commitRoot(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>异步模式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">performConcurrentWorkOnRoot</span>(<span class="params">root, didTimeout</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Since we know we're in a React event, we can clear the current</span></span><br><span class="line">  <span class="comment">// event time. The next update will compute a new event time.</span></span><br><span class="line">  currentEventTime = NoWork;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (didTimeout) &#123;</span><br><span class="line">    <span class="comment">// The render task took too long to complete. Mark the current time as</span></span><br><span class="line">    <span class="comment">// expired to synchronously render all expired work in a single batch.</span></span><br><span class="line">    <span class="keyword">const</span> currentTime = requestCurrentTimeForUpdate();</span><br><span class="line">    markRootExpiredAtTime(root, currentTime);</span><br><span class="line">    <span class="comment">// This will schedule a synchronous callback.</span></span><br><span class="line">    ensureRootIsScheduled(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Determine the next expiration time to work on, using the fields stored</span></span><br><span class="line">  <span class="comment">// on the root.</span></span><br><span class="line">  <span class="keyword">const</span> expirationTime = getNextRootExpirationTimeToWorkOn(root);</span><br><span class="line">  <span class="keyword">if</span> (expirationTime !== NoWork) &#123;</span><br><span class="line">    <span class="keyword">const</span> originalCallbackNode = root.callbackNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we have a work-in-progress fiber, it means there's still work to do</span></span><br><span class="line">    <span class="comment">// in this root.</span></span><br><span class="line">    <span class="keyword">if</span> (workInProgress !== <span class="literal">null</span>) &#123;</span><br><span class="line">      executionContext |= RenderContext;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          workLoopConcurrent();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (thrownValue) &#123;</span><br><span class="line">          handleError(root, thrownValue);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (workInProgress !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// There's still work left over. Exit without committing.</span></span><br><span class="line">        stopInterruptedWorkLoopTimer();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// We now have a consistent tree. The next step is either to commit it,</span></span><br><span class="line">        <span class="comment">// or, if something suspended, wait to commit it after a timeout.</span></span><br><span class="line">        stopFinishedWorkLoopTimer();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> finishedWork: Fiber = ((root.finishedWork =</span><br><span class="line">          root.current.alternate): any);</span><br><span class="line">        root.finishedExpirationTime = expirationTime;</span><br><span class="line">        finishConcurrentRender(</span><br><span class="line">          root,</span><br><span class="line">          finishedWork,</span><br><span class="line">          workInProgressRootExitStatus,</span><br><span class="line">          expirationTime,</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      ensureRootIsScheduled(root);</span><br><span class="line">      <span class="keyword">if</span> (root.callbackNode === originalCallbackNode) &#123;</span><br><span class="line">        <span class="comment">// The task node scheduled for this root is the same one that's</span></span><br><span class="line">        <span class="comment">// currently executed. Need to return a continuation.</span></span><br><span class="line">        <span class="keyword">return</span> performConcurrentWorkOnRoot.bind(<span class="literal">null</span>, root);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">workLoopConcurrent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Perform work until Scheduler asks us to yield</span></span><br><span class="line">  <span class="keyword">while</span> (workInProgress !== <span class="literal">null</span> &amp;&amp; !shouldYield()) &#123;</span><br><span class="line">    workInProgress = performUnitOfWork(workInProgress);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="fiber-tag-类型"><a href="#fiber-tag-类型" class="headerlink" title="fiber.tag 类型"></a>fiber.tag 类型</h3><p><a href="https://github.com/facebook/react/blob/v16.12.0/packages/shared/ReactWorkTags.js#L35" target="_blank" rel="noopener">ReactWorkTags.js</a> 展示了 fiber 的类型（基于不同的类型会作不同处理）：</p>
<ul>
<li>FunctionComponent：函数式组件。React$ElementType 为构造函数。</li>
<li>ClassComponent：类组件。React$ElementType 为函数。</li>
<li>HostComponent：Host 组件（如 DOM 节点）。React$ElementType 为 string。</li>
<li>Fragment：Fragment 组件。React$ElementType 为 REACT_FRAGMENT_TYPE。</li>
<li>Mode：React$ElementType 为 REACT_CONCURRENT_MODE_TYPE 或 REACT_STRICT_MODE_TYPE。</li>
<li>Profiler：React$ElementType 为 REACT_PROFILER_TYPE。</li>
<li>SuspenseComponent：React$ElementType 为 REACT_SUSPENSE_TYPE。</li>
<li>SuspenseListComponent：React$ElementType 为 REACT_SUSPENSE_LIST_TYPE。</li>
<li>IndeterminateComponent：</li>
<li>HostRoot：</li>
<li>HostPortal：</li>
<li>HostText：</li>
<li>ContextConsumer：Context.Consumer 组件。React$ElementType 为对象，React$ElementType$$typeof 为 REACT_CONTEXT_TYPE。</li>
<li>ContextProvider：Context.Provider 组件。React$ElementType 为对象，React$ElementType$$typeof 为 REACT_PROVIDER_TYPE。</li>
<li>ForwardRef：React$ElementType 为对象，React$ElementType$$typeof 为 REACT_FORWARD_REF_TYPE。</li>
<li>MemoComponent：React$ElementType 为对象，React$ElementType$$typeof 为 REACT_MEMO_TYPE。</li>
<li>LazyComponent：React$ElementType 为对象，React$ElementType$$typeof 为 REACT_LAZY_TYPE。</li>
<li>FundamentalComponent：React$ElementType 为对象，React$ElementType$$typeof 为 REACT_FUNDAMENTAL_TYPE。</li>
<li>ScopeComponent：React$ElementType 为对象，React$ElementType$$typeof 为 REACT_SCOPE_TYPE。</li>
<li>SimpleMemoComponent：</li>
<li>IncompleteClassComponent：</li>
<li>DehydratedFragment：</li>
<li>Chunk：</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000020248630?utm_source=tag-newest" target="_blank" rel="noopener">React源码解析之ExpirationTime</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>react</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>react16</tag>
        <tag>fiber-renconciler</tag>
      </tags>
  </entry>
  <entry>
    <title>sso 单点登录</title>
    <url>/2020/04/25/backend/%E6%9E%B6%E6%9E%84/sso%20%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<p>单应用，客户端传入的用户信息会使用 session 记录，然后将 sessionId 通过 cookie 回传给客户端，以便在下次发起请求时获取 session 存储的用户信息。</p>
<p>多子域应用，如 app1.a.com、app2.a.com，在用户访问 sso.a.com 并作登录操作时，服务器端可以将 cookie 的 domain 设为 taobao.com，从而使不同子域发起请求时能携带 sessionId，然后可使用 spring-session 等技术实现跨子域之间的共享 session，从而实现多子域的单点登录。</p>
<p>跨域应用，用户访问 a 系统，将重定向到 sso 系统进行登录，sso 系统将用户登录信息存入 session；sso 系统将访问地址重定向到 a 系统并传递 service ticket，a 系统持有 service ticket 从 sso 系统中获取用户信息并将写入自身的 session 中，同时传递 cookie 到客户端。若用户已通过 b 系统完成 sso 登录，a 系统可以在 session 失效时重走 sso 登录流程，以取得用户信息。</p>
<p>除了存储用户信息，sso 系统也会将调用用户信息的子系统也缓存起来，以便在注销时通知子系统删除各自的局部回话，以实现全局注销。</p>
<p><a href="https://www.cnblogs.com/zh94/p/8352943.html" target="_blank" rel="noopener">sso简单原理及实现</a> 贴出了这张时序图：</p>
<img src="/2020/04/25/backend/架构/sso%20单点登录/sso.png">
<p>对于 sso-client、sso-server 实现，<a href="https://www.cnblogs.com/zh94/p/8352943.html" target="_blank" rel="noopener">sso简单原理及实现</a> 给出了简单的示例 <a href="https://github.com/sheefee/simple-sso" target="_blank" rel="noopener">simple-sso</a>。</p>
<h2 id="sso-client"><a href="#sso-client" class="headerlink" title="sso-client"></a>sso-client</h2><p>对于登录，sso-client 会拦截请求，若用户已登录，则放行；未登录，且请求参数中带有 sso 系统传入的 service ticket，从 sso 系统获取用户登录信息；其余未登录且须登录的情况，重定向到 sso 系统。<br>对于登出，sso-client 会调用 sso 系统发送注销请求，再由 sso 系统通知其他子系统销毁局部回话。</p>
<p>登陆流程源码见于 <a href="https://github.com/a466350665/smart/blob/master/smart-sso/smart-sso-client/src/main/java/com/smart/sso/client/SsoFilter.java" target="_blank" rel="noopener">SsoFilter.java</a>，主要有两个操作：</p>
<ol>
<li>重定向到 sso-server 登录页，促使用户完成登录操作。</li>
<li>从请求参数中获取 sso-server 重定向带回的 service ticket，使用 service ticket 从 sso-server 获取用户信息。</li>
<li>客户登录状态下进行，直接使用客户端发送的 sessionId，并通过 sso-server 校验 sessionId 的有效性。</li>
</ol>
<h2 id="sso-server"><a href="#sso-server" class="headerlink" title="sso-server"></a>sso-server</h2><p>对于登录，sso-server 会重定向到登录页面，在用户发起登录请求、服务端缓存用户信息后，sso 系统带着 service ticket 重定向到 sso-client，以使其获得登录信息。<br>对于登出，sso-server 会销毁缓存的用户信息以及子系统记录，并通知其余子系统销毁局部回话。</p>
<p>登陆流程源码见于 <a href="https://github.com/a466350665/smart/blob/master/smart-sso/smart-sso-server/src/main/java/com/smart/sso/server/controller/LoginController.java" target="_blank" rel="noopener">LoginController.java</a>，主要有两个操作：</p>
<ol>
<li>跳转到登录页，如果 cookie 带有 sessionId，重定向到 sso-client，访问路径上携带 service ticket。</li>
<li>用户尝试登陆，重新生成带有 sessionId 的 cookie，并重定向到 sso-client，访问路径上携带 service ticket。</li>
<li>service ticket 自有逻辑，以定时器方式设置 30 分钟后过期。</li>
</ol>
<p>登出流程源码见于 <a href="https://github.com/a466350665/smart/blob/master/smart-sso/smart-sso-server/src/main/java/com/smart/sso/server/controller/LogoutController.java" target="_blank" rel="noopener">LogoutController.java</a>，其执行逻辑为：使 service ticket 失效。登出流程可以通过 sso-client 发起。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/zh94/p/8352943.html" target="_blank" rel="noopener">sso简单原理及实现</a><br><a href="https://yq.aliyun.com/articles/636281" target="_blank" rel="noopener">单点登录（SSO）看这一篇就够了</a><br><a href="https://github.com/kawhii/sso" target="_blank" rel="noopener">sso</a><br><a href="https://blog.csdn.net/u010475041/category_7156505.html" target="_blank" rel="noopener">cas</a><br><a href="https://apereo.github.io/cas/5.1.x/index.html" target="_blank" rel="noopener">https://apereo.github.io/cas/5.1.x/index.html</a><br><a href="https://github.com/a466350665/smart" target="_blank" rel="noopener">https://github.com/a466350665/smart</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>模块</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里架构转型史 —— 企业IT架构转型之道笔记</title>
    <url>/2020/04/23/backend/%E6%9E%B6%E6%9E%84/%E9%98%BF%E9%87%8C%E6%9E%B6%E6%9E%84%E8%BD%AC%E5%9E%8B%E5%8F%B2/</url>
    <content><![CDATA[<p>”架构本来就是一个追求平衡的艺术，不仅是设计原则上的平衡，还要在技术、成本、资源、性能、团队等各方面进行平衡，以最高效地解决主要问题。“ —— 钟华</p>
<h2 id="从单体应用到分布式服务"><a href="#从单体应用到分布式服务" class="headerlink" title="从单体应用到分布式服务"></a>从单体应用到分布式服务</h2><p>2008 年前，淘宝拥有超 500 人的技术团队，整个淘宝网站是一个几百兆的 war 包，功能模块超 200 个，所有数据保存在同一个 Oracle 数据库集群中，业务计划处于每隔几个月翻番的高速发展期。这样一种大团队在多功能模块的单体应用上协作开发的模式逐渐呈现疲态：</p>
<ul>
<li>版本管理困难，协同成本高，响应时间越来越慢。</li>
<li>当非核心功能设计不合理时，它可能会致使整个系统崩溃。</li>
<li>不能对流量较大的功能模块进行单独扩容，只能选择整体扩容。</li>
<li>数据库集群的连接池有限，峰值时间逼近了官方指定的连接数上限。</li>
<li>应用和业务复杂度超过了单个人的认知边际，业务和功能设计限于瓶颈 —— 没人能全面了解功能模块的边界（它可能会影响整个系统）。</li>
</ul>
<p>2008 年初，以用户中心作为试点，基于 SOA 理念使服务分治；随后逐步剥离出交易中心、类目中心、商品中心、店铺中心等。经历了 14 个月的改造后，最终形成了上百个 war 包独立部署的服务化架构，同时每一个核心服务中心都由各自独立的数据库，这样就有效避免上述各种问题。</p>
<p>在服务架构上，淘宝没有选择基于 ESB 总线的“中心化”服务架构，而是选择了基于 HSF 的“去中心化”服务架构。这样的架构选择主要基于以下考虑：</p>
<ul>
<li>“烟囱式”应用簇：在企业使用外买或自建系统的模式中，各系统可能采用不同的技术平台、框架、开发语言、通信协议，系统间的通信采用点对点模式。上游的接口调整必须告知下游进行相应的调整。</li>
<li>基于 ESB 总线的“中心化”服务架构：系统间的点对点通信通过 ESB 总线中转，在总线上适配不同通信协议和开发语言、转换数据格式、裁剪数据、路由服务请求、对服务作负载均衡、管控服务等。ESB 总线主要解决的是异构系统间的交互，适合处理企业外部服务。其问题有：通过中心点周转的方式会使 ESB 总线承担过重的压力，访问洪流会冲垮 ESB 服务器（一台宕机的情况下，其余机器要承受过重的负载；一旦击溃，逐台重启的方式也是不理想的，因为访问洪流还是会击溃所有 ESB 服务器尚未就位的总线）；单一请求在中心点周转的方式下会比点对点通信多两次 ESB 总线中转，这会影响响应性能。</li>
<li>“去中心化”的分布式服务架构：该架构基于同一的技术接口标准、网络协议、规范进行不同系统间的直接通信，不会出现中心点引起的雪崩问题；对比传统的点对点通信模式，“去中心化”服务架构以服务契约先行的方式保障了接口的稳定性，且支持多版本、负载均衡（通过服务注册中心将可用的服务推送给调用方）。</li>
</ul>
<p>阿里所使用的分布式服务是 <a href="http://xzfyu.com/2019/10/23/backend/%E8%BF%9C%E7%A8%8B%E9%80%9A%E4%BF%A1/HSF%E6%9C%8D%E5%8A%A1/">HSF服务</a>。</p>
<h2 id="从共享业务事业部到中台战略"><a href="#从共享业务事业部到中台战略" class="headerlink" title="从共享业务事业部到中台战略"></a>从共享业务事业部到中台战略</h2><p>2003 年，阿里成立淘宝事业部；2008 年，成立天猫事业部，技术支持由淘宝团队提供。2009 年，成立共享业务事业部。最开始，共享业务事业部相对淘宝、天猫等业务部门并没有过多的话语权，它没有充分发挥出沉淀底层服务、避免重复建设的价值。组织结构对业务、技术架构的影响也可见一斑。2010 年，聚划算团购平台的出现是集团层面明确规定淘宝、天猫、1688 必须通过共享业务事业部对接聚划算，共享业务事业部才掌握了足够的业务对话权，逐渐演变成核心业务平台。2015 年，阿里启动“厚平台，薄应用”的中台战略。</p>
<img src="/2020/04/23/backend/架构/阿里架构转型史/share.png">
<h2 id="共享服务中心建设"><a href="#共享服务中心建设" class="headerlink" title="共享服务中心建设"></a>共享服务中心建设</h2><p>淘宝的共享服务中心最初有四个服务中心：UIC 用户中心、IC 商品中心、TC 交易中心、SC 店铺中心。后续又增加了物流中心、营销中心、数据服务中心等。</p>
<ul>
<li>用户中心：构建了整个阿里巴巴集团统一的用户体系，对外提供统一的服务接口，便于作数据分析，组织独立的运营团队。</li>
<li>商品中心：商品中心在功能上包含商品描述能力、商品发布能力、商品管理能力、商品巡检能力、商品数据分析能力、商品评价能力，对接的用户包含卖家、运营小二，团队成员包含运营、产品、研发、大数据各方面的专家。随着商品中心的发展，后来抽离出了库存中心、评价中心。关于这部分内容，笔者将在电商系统建模中加以分析。</li>
<li>交易中心：初期整合购物车、交易流程、订单管理、支持、结算、营销等业务，后来拆解出营销中心等。</li>
<li>店铺中心：整合了店铺管理、店铺装修、店铺生命周期管理、店铺日常管理等业务，后来发展出第三方店铺装修市场。</li>
</ul>
<p>服务中心是随着业务不断演化的，淘宝的服务化架构有三个阶段的发展：尝试服务化阶段；全面服务化阶段，以建立共享业务事业部为标志；部分服务中心向平台化转变阶段，这样能更好地支持上层业务的多样化、定制化需求。服务中心需要贴合业务需求，不能做过于超前、过于理想化的架构。服务中心是根据业务和数据的完整性和独立性来设立的，其所包含的子模块更多是从系统设计和业务架构层面来考虑的。服务中心不止提供接口，还可能包含用户操作界面、数据看板等。</p>
<h3 id="服务中心划分原则"><a href="#服务中心划分原则" class="headerlink" title="服务中心划分原则"></a>服务中心划分原则</h3><p>共享服务中心建设的核心诉求：</p>
<ul>
<li>通过业务拆分降低系统的复杂性；</li>
<li>通过服务共享提供服务的可重用性；</li>
<li>通过服务化来达到业务支持的敏捷性；</li>
<li>通过统一的数据架构来打通数据孤岛。</li>
</ul>
<p>遵从以上目标，”以终为始“，再来看下不同视角下所关切的内容指标：</p>
<ul>
<li>从设计层面看，服务中心的业务和系统建模需要遵循面向对象的基本原则。</li>
<li>从运营层面看，服务中心应该是一个完整的业务模型，要有数据运营和业务整合的价值，其数据具备完整性、业务要有可运营性。</li>
<li>从工程层面看，共享服务架构基于分布式架构，需要面对分布式事务、问题排查等技术难题，需要综合考虑投入产出比。</li>
</ul>
<p>钟华总结共享服务架构的四大原则：</p>
<ul>
<li>高内聚、低耦合：服务中心内的各业务应该保持高相关性、高依赖性；服务中心之间尽可能的隔离，追求低耦合。比如积分中心是划入用户中心，还是营销中心，钟华认为，在积分中心还不成形的情况下，它可以划入用户中心，一来能维持会员服务的粒度，二来避免积分中心只包含增删改查等业务需求。等积分中心足够丰富或对其他业务中心的影响不可忽略时，再拆分出来。</li>
<li>数据完整性：这里的数据包含业务逻辑的关键数据以及相关性数据，也包含在线数据和离线数据，以便实现服务化架构的一个重要业务价值 —— 数据模型统一。</li>
<li>业务可运营：服务中心不单是一个技术产物，更多的是一个承载业务逻辑、沉淀业务数据、产生业务价值的业务单元。其运营价值体现在，快速支撑上层业务需求，这个时候属于沉淀阶段（即业务滋养服务中心）；由服务中心内部孕育出创新想法（即服务中心反哺业务）。</li>
<li>渐进式建设：指的是服务中心的设计要贴合业务，避免超前设计，如拆得过细会导致调用链路过长、延时太长，数据过于分散，数据库性能不佳，分布式事务过多，服务接口过于庞大等。</li>
</ul>
]]></content>
      <categories>
        <category>backend</category>
        <category>架构</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis-generator</title>
    <url>/2020/04/21/backend/java%20%E5%B7%A5%E7%A8%8B/mybatis-generator/</url>
    <content><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>创建 maven 项目，如 generator-mapper。</li>
<li>配置 pom.xml。</li>
<li>配置 resources/generatorConfig.xml。</li>
<li>maven 面板点击 Plugins - mybatis-generator:genrate。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>generate_mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>generate_mapper<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"MysqlTables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressDate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 将数据库中表的字段描述信息添加到注释 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"addRemarkComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否生成注释代时间戳--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressDate"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- jdbc链接信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;amp;characterEncoding=UTF8"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">"root"</span> <span class="attr">password</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成PO类的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.example.generate_mapper.dal.domain"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mapper映射文件生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"resources.mapper"</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">"src/main"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mapper接口生成的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">"com.example.generate_mapper.dal.mapper"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定要生成的表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"test"</span> <span class="attr">domainObjectName</span>=<span class="string">"Test"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><ul>
<li>Communications link failure 报错：数据库端口配置错误等，参看 <a href="https://blog.csdn.net/qq_27471405/article/details/80921846" target="_blank" rel="noopener">“Communications link failure”错误</a></li>
<li>Unknown system variable ‘query_cache_size’ 报错：mysql 驱动程序版本与 mysql 服务器版本不一致，查看 <a href="https://blog.csdn.net/qq_21870555/article/details/80711187" target="_blank" rel="noopener">Unknown system variable ‘query_cache_size’</a></li>
</ul>
]]></content>
      <categories>
        <category>backend</category>
        <category>java 工程</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>架构入门</title>
    <url>/2020/04/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E6%9E%B6%E6%9E%84%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="面向服务架构"><a href="#面向服务架构" class="headerlink" title="面向服务架构"></a>面向服务架构</h2><p>富客户端、客户端-服务器模式、基于 ESB 企业服务总线的 SOA 服务导向架构、microservices architecture 微服务架构，微服务架构是循着这条演进路线发展而来的。客户端-服务器模式可用于解释现行的很多架设，如 <a href="http://xzfyu.com/2019/10/23/backend/%E8%BF%9C%E7%A8%8B%E9%80%9A%E4%BF%A1/HSF%E6%9C%8D%E5%8A%A1/">hsf 服务</a>即包含客户端和服务端，此外还有微服务架构中的配置中心；redis 消息服务；sql 服务器和应用服务器的关系也是客户端-服务器模式。基于 ESB 企业服务总线的服务架构通常会聚焦于服务的注册和调用，未深入服务的集成、拓展和复用。如钟华在《企业IT架构转型之道》中所提到的，面向服务架构的核心在于服务的复用，微服务是 SOA 的一个演化。在面向服务架构中，系统的功能以服务的形态呈现，每一个服务来自于独立的服务器，便于水平扩展。</p>
<p>它的优点即为缺点，因为在低耦合的各服务单独部署的情况下，一方面会便于开发和水平扩展，另一方面众多的服务会造成其调用链路过长，影响性能，难于管理和失败回滚。</p>
<p><a href="http://www.oreilly.com/programming/free/software-architecture-patterns.csp" target="_blank" rel="noopener">Software Architecture Patterns</a>给出了下面这张微服务架构图。可是在实际工程中，结合业务所设计的微服务架构远不止这么简单：</p>
<img src="/2020/04/18/计算机科学/软件工程/架构入门/microservices.png">
<h2 id="云架构"><a href="#云架构" class="headerlink" title="云架构"></a>云架构</h2><p><a href="http://www.oreilly.com/programming/free/software-architecture-patterns.csp" target="_blank" rel="noopener">Software Architecture Patterns</a>中称，云架构没有中央数据库，而是将数据复制到处理单元的内存中，再由处理单元执行其业务逻辑。云架构由两部分构成：</p>
<ul>
<li>处理单元：实现业务逻辑。就笔者理解，实例比如云计算引擎中的服务器，或者 web 应用的线程。</li>
<li>虚拟中间件：负责通信、保持 sessions、数据复制、分布式处理、处理单元的部署。<ul>
<li>Messaging Grid 消息中间件：管理用户请求和 session。当一个请求抵达时，将其路由到对应的处理单元。</li>
<li>Data Grid 数据中间件：将数据同步到每一个处理单元。</li>
<li>Processing Grid 处理中间件：可选。当请求涉及多个处理单元时，该中间件负责协调处理单元。</li>
<li>Deployment Manager 部署中间件：负责处理单元的启动和关闭（实现弹性伸缩），监控负载和响应时间。</li>
</ul>
</li>
</ul>
<img src="/2020/04/18/计算机科学/软件工程/架构入门/cloud.png">
<p>云架构模式即见于云计算引擎，如<a href="http://xzfyu.com/2020/01/18/%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF/%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF/">数据技术</a>提到的。servlet 应用也可视为单机环境中的云架构。</p>
<h2 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h2><p>分层架构将系统功能划分为几个独立的层次，每一层只依赖下一层提供的服务和设施，内部保持内聚性，层与层之间松耦合。</p>
<p>它的优点有：</p>
<ul>
<li>每一层可以由独立的小团队负责，以清晰的接口促成各层之间协作。在系统草创、不具形态时，这一点也是干扰多方协作的缺点。</li>
<li>可以在不变更接口的基础上更换每一层的实现；也可以快速某一层之上快速实现新的一层，以便复用其下的处理逻辑。</li>
<li>在每一层可以提供身份校验等冗余服务，以提升系统的可靠性。</li>
</ul>
<p>它的缺点有：</p>
<ul>
<li>各层实现纯粹的分离是困难的，高层可能不得不与底层直接交互。</li>
<li>层次越多，系统对服务的处理需要层层传递，影响性能；响应业务变动也可能需要多层修改。</li>
</ul>
<p>以下是它的典型实例。</p>
<h3 id="桌面和-web-应用"><a href="#桌面和-web-应用" class="headerlink" title="桌面和 web 应用"></a>桌面和 web 应用</h3><p>桌面和 web 应用的常见分层如下：</p>
<ol>
<li>表现层/UI 层：负责绘制用户界面。</li>
<li>应用逻辑层/领域层：实现业务逻辑。</li>
<li>数据服务层/持久层：提供底层数据交互。</li>
</ol>
<img src="/2020/04/18/计算机科学/软件工程/架构入门/oa.jpeg">
<p>上图是网上找的一个 OA 系统的分层结构。即时通讯等通用服务即可游离在分层结构之外；也可以作为通用服务层，存在于应用逻辑层和数据服务层之间。</p>
<h3 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h3><p>ISO 的开发系统互联（OSI，Open Systems Interconnection）参考模型分层如下：</p>
<ul>
<li>物理层 physical layer：通过集线器、中继器、网线、双绞线等物理介质传递原始比特流。</li>
<li>数据链路层 data link layer：将比特组合成字节，字节组合成帧，以帧传输数据；使用链路层地址（以太网使用MAC地址）访问网桥、网卡、以太网交换机等物理介质；主要功能包含差错控制（错误重发、成功应答）和流量控制（对接快速发送发和慢速接收方）。参考 <a href="https://www.dgzj.com/tongxin/90168.html" target="_blank" rel="noopener">数据链路层通俗的讲是什么</a>。</li>
<li>网络层 network layer：通过 IP 寻址建立两个节点间的连接以控制子网的运行，将数据包从源端路由到接收方。物理介质为路由器、三层交换机。</li>
<li>传输层 transport layer：将上层的数据切割成较小的单元，以完成点对点的通信。自传输层以上各层，均为点对点通信，源机器和目标机器通过报文头和控制信息通信；以下各层，一台机器仅与其直接另据通过协议通信，即源机器和目标机器被多个路由器隔离了。物理介质为四层路由器、四层交换机。</li>
<li>会话层 session layer：负责建立、管理和终止表示层实体之间的通信会话，功能包含对话控制（谁来传递数据）、令牌管理（禁止双方同时执行某一操作）、同步功能（在长传输过程中设置断点，以便系统崩溃后的恢复）。</li>
<li>表示层 presentation layer：表示层关注传递数据的语法和语义（包含数据转换、编码、加密、压缩等），其下各层关注怎样传递数据。</li>
<li>应用层 application layer：为用户直接提供各种网络服务，包含 http、https、www、ftp 等。</li>
</ul>
<img src="/2020/04/18/计算机科学/软件工程/架构入门/osi.png">
<p>参考 <a href="https://www.jianshu.com/p/f32cfd6c208b" target="_blank" rel="noopener">OSI网络模型</a>。</p>
<h3 id="前端实例"><a href="#前端实例" class="headerlink" title="前端实例"></a>前端实例</h3><p>典型的前端应用也体现出分层结构。</p>
<ul>
<li>services：接口层，对接后端服务。</li>
<li>stores：状态机层，桥接页面和接口。</li>
<li>pages：页面路由层，绘制页面。</li>
</ul>
<h2 id="插件架构"><a href="#插件架构" class="headerlink" title="插件架构"></a>插件架构</h2><p>插件架构由内核、插件集组成。因其主要功能逻辑由插件实现，内核相对较小，它也被称为微核架构。插件应尽可能的相互独立，以避免紧耦合带来的复杂性。插件之间通过内核进行交互。在插件架构中，内核决定了插件运行的生命周期。在笔者的理解中，插件架构的极致就是以组件表现插件，以容器表现内核，组件自行决定其生命周期，容器只是聚合了一些功能逻辑，比如统一的数据周转或存储流程。当插件架构表现为容器架构时，其适用于有大量数据需要保存的场景，如一个组件生产数据，其他组件消费数据。</p>
<p>它的优点有：</p>
<ul>
<li>易于通过开发插件的形式扩展功能，这样也支持了高度定制的场景。</li>
<li>开发模式可以采用渐进式地推出或拓展插件。</li>
</ul>
<p>它的缺点有：</p>
<ul>
<li>内核的稳定性决定着整个系统的稳定性，不便于分布式部署。</li>
<li>插件通过内核通信会比较低效。</li>
</ul>
<p>它的典型架构图如下：</p>
<img src="/2020/04/18/计算机科学/软件工程/架构入门/plugins.png">
<p>就前端层面，不少工具会采用插件架构，如 umi、mocha、babel、webpack 等。前端应用中的 stores 层也具有容器特征，因为可在这一层对数据作记录、追踪等统一处理。同样的，多数可视化编辑器也采用容器架构。在 Ian Sommerville 所著的《软件工程》中，作者指明使用容器架构的例子有指挥和控制系统、管理信息系统、CAD 系统和软件的交互开发环境（即 IDE）等交互式系统，并给出了 IDE 系统的容器体系架构图：</p>
<img src="/2020/04/18/计算机科学/软件工程/架构入门/ide.png">
<h2 id="管道和过滤器架构"><a href="#管道和过滤器架构" class="headerlink" title="管道和过滤器架构"></a>管道和过滤器架构</h2><p>管道和过滤器架构指数据从一个处理单元流入另一个处理单元，每经过一个处理单元就做一次变换。管道和过滤器架构来自于 UNIX，在 UNIX 系统中，管道能从一个进程到另一个进程传递文本流。管道和过滤器架构可以实现为顺序的系统（批处理模型），也可以实现为并发的系统。</p>
<p>它的优缺点有：</p>
<ul>
<li>架构易于理解并支持变换的复用，容易通过添加变换的方式进行扩展。相应的，管道处理的数据格式需要协商好，数据也能成为系统中管道控制语句的判断条件。</li>
<li>工作流和很多业务处理体系结构很匹配。</li>
</ul>
<p>《软件工程》给出了以下这张管道和过滤器体系结构实例：</p>
<img src="/2020/04/18/计算机科学/软件工程/架构入门/pipeline.png">
<p>据笔者理解，java 应用中的 filter、koa 框架中的 middleware 可视为管道和过滤器架构。</p>
<h2 id="事件驱动架构"><a href="#事件驱动架构" class="headerlink" title="事件驱动架构"></a>事件驱动架构</h2><p>事件驱动架构使用事件进行通信。有前端中的 event.emit 触发事件、event.on 绑定事件模型演化可知，事件处理器和多个业务系统可以通过事件进行通信，这在分布式应用系统构成中也较为常见，如<a href="http://xzfyu.com/2020/01/21/backend/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/">异步消息</a>等。通常，事件处理器会缓存对特定事件感兴趣的业务系统，当事件触发时，从而将该事件发送到特定的业务系统中。在用户界面系统中，事件的一般处理方式是通过“事件侦听器”获取鼠标、键盘事件，再对它进行统一的建模，然后转换为更具体的命令。事件处理器也可以促成业务系统的点对点通信。下图是 <a href="https://ifs.host.cs.st-andrews.ac.uk/Books/SE9/Web/Architecture/ArchPatterns/" target="_blank" rel="noopener">Architectural patterns for control</a> 提供的架构图：</p>
<img src="/2020/04/18/计算机科学/软件工程/架构入门/event.jpg">
<p><a href="http://www.ruanyifeng.com/blog/2016/09/software-architecture.html?20160911094326" target="_blank" rel="noopener">软件架构入门</a> 对事件驱动架构的构成有更细致的分解（即将 Event and message handler 一拆为三）：</p>
<ul>
<li>event queue 事件队列：暂存事件，事件将由分发器转发给事件处理器。</li>
<li>event mediator 分发器：将不同的事件分发到不同的业务逻辑单元。</li>
<li>event channel 事件通道：作为分发器和事件处理器的桥梁，将会对不同类型的事件进行分组。</li>
<li>event processor 事件处理器：接受事件，继而由事件驱动业务处理；或发送事件，将事件注入事件队列中等待处理。</li>
</ul>
<p>它的优点有：业务系统可以采用分布式架构，高度解耦，容易独立部署和扩展。它的缺点有：事件一旦涉及多个处理器或者不同业务单元构成复杂的事件通信网络时，不容易测试和回滚。</p>
<p><a href="https://ifs.host.cs.st-andrews.ac.uk/Books/SE9/Web/Architecture/ArchPatterns/" target="_blank" rel="noopener">Architectural patterns for control</a>将上述称为 broadcast models 广播模型，此外又给出了 Interrupt-driven models 中断驱动模型。与典型的事件处理器相同，中断驱动模型会根据中断类型安排特定的中断处理器。中断驱动模型适用于实时系统等，当接收到特定类型的中断时，硬件开关会立即将控制权转移到其处理程序。</p>
<img src="/2020/04/18/计算机科学/软件工程/架构入门/interrupt.jpg">
<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>一般而言，面向服务架构、云架构可用于解释多应用场景；分层架构、插件架构、管道和过滤器架构、事件驱动架构多见于单应用场景，当然也能在分布式环境中使用。上述几类架构之间其实也有不少共同性。<a href="https://ifs.host.cs.st-andrews.ac.uk/Books/SE9/Web/Architecture/ArchPatterns/" target="_blank" rel="noopener">Architectural patterns for control</a>只给出了两类模式：<a href="https://ifs.host.cs.st-andrews.ac.uk/Books/SE9/Web/Architecture/ArchPatterns/CentralControl.html" target="_blank" rel="noopener">Centralized Control 集中式控制模式</a>、<a href="https://ifs.host.cs.st-andrews.ac.uk/Books/SE9/Web/Architecture/ArchPatterns/EventControl.html" target="_blank" rel="noopener">Event-driven Control 事件驱动控制模式</a>。就笔者理解，面向服务架构、云架构、插件架构、管道和过滤器架构又何尝不是集中式控制模式的变种呢？只是在实现层面有所不同。上文已指出，事件驱动控制模式分为 Broadcast models 广播模型、Interrupt-driven models 中断驱动模型两类。集中式控制模式同样有两类：支持串行的 call–return mode 调用链模式、支持并行的 manager model 控制器模式。</p>
<p>调用链模式譬如堆栈，父唤起子，子唤起孙，孙返回到子，子返回到父。<a href="https://ifs.host.cs.st-andrews.ac.uk/Books/SE9/Web/Architecture/ArchPatterns/" target="_blank" rel="noopener">Architectural patterns for control</a>给出了下面这张示例图：</p>
<img src="/2020/04/18/计算机科学/软件工程/架构入门/CallReturn.jpg">
<p>控制器模式基于状态变更决定处理单元是否需要启动或关闭。它会检测其他进程是否产生了待处理的信息，或发送了待处理的信息。检测机制通常基于连续循环、或轮询传感器、或其他进程。因此，该模型也称为事件循环模型。可见，状态机模型不止见于前端交互环境。下图为其示例：</p>
<img src="/2020/04/18/计算机科学/软件工程/架构入门/CentralisedControl.jpg">
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.oreilly.com/library/view/software-architecture-patterns/9781491971437/" target="_blank" rel="noopener">Software Architecture Patterns</a><br><a href="http://www.ruanyifeng.com/blog/2016/09/software-architecture.html?20160911094326" target="_blank" rel="noopener">软件架构入门</a><br><a href="https://ifs.host.cs.st-andrews.ac.uk/Books/SE9/Web/Architecture/ArchPatterns/" target="_blank" rel="noopener">Architectural patterns for control</a><br><a href="https://ifs.host.cs.st-andrews.ac.uk/Books/SE9/Web/" target="_blank" rel="noopener">Software Engineering</a></p>
]]></content>
      <categories>
        <category>计算机科学</category>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>carrier</tag>
      </tags>
  </entry>
  <entry>
    <title>前端模块化机制</title>
    <url>/2020/04/12/frontend/architecture/%E6%A8%A1%E5%9D%97%E5%8C%96%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>前端模块化规范有 AMD、CMD、CommonJS、ES2015 规范：</p>
<ul>
<li><a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="noopener">AMD 模块化规范</a>：<a href="https://github.com/requirejs/requirejs" target="_blank" rel="noopener">requirejs</a> 为其主要实现。</li>
<li><a href="https://github.com/cmdjs/specification/blob/master/draft/module.md" target="_blank" rel="noopener">CMD 模块化规范</a>：<a href="https://github.com/seajs/seajs" target="_blank" rel="noopener">seajs</a> 为其主要实现。</li>
<li>CommonJS 模块化规范：作为<a href="https://github.com/commonjs/commonjs" target="_blank" rel="noopener">CommonJS 规范</a>的一部分，<a href="http://nodejs.cn/api/modules.html" target="_blank" rel="noopener">nodejs</a>是其较常见的实现。</li>
<li>ES 2015 模块化规范：作为<a href="https://tc39.es/ecma262" target="_blank" rel="noopener">es 官方规范</a>的一部分。</li>
</ul>
<p>对于 AMD、CMD，本文尝试解读 requirejs、seajs 的实现。对于 CommonJS、ES6，本文更多聚焦于尝试解读其规范。介于笔者认知的不足，本文对 ES6 规范中 Cyclic Module Record、Source Text Module Record 并未作过多的投入（因为对 babel 理解的有限，本文也未深入 <a href="https://github.com/babel/babel/tree/master/packages/babel-helper-module-transforms" target="_blank" rel="noopener">babel-helper-module-transforms</a>）。实际上，这两个模型的规划设计恰恰是前端模块系统的精髓所在。相形之下，本文通过解读 requirejs、seajs 源码反演其设计并未臻于妙境。</p>
<h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接导出对象</span></span><br><span class="line">define(<span class="built_in">module</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义没有依赖的模块</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义有依赖的模块</span></span><br><span class="line">define([<span class="string">'module1'</span>, <span class="string">'module2'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">module1, module2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// callback 内部通过 require 加载模块</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> module1 = <span class="built_in">require</span>(<span class="string">'module1'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'module1'</span>, <span class="string">'module2'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">m1, m2</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 使用 module1、module2</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="requirejs"><a href="#requirejs" class="headerlink" title="requirejs"></a>requirejs</h3><ul>
<li>支持浏览器、web worker、nodejs 环境。</li>
<li>插件机制，’plugin!resource’ 形式指定资源。</li>
<li>通过在模块导出中使用 require 实现循环依赖。</li>
<li>通过 config.shim 支持将全局变量转换成依赖模块。</li>
<li>基于不同的上下文对模块进行分区。</li>
</ul>
<p>requirejs 中有两类模块：一类为使用 define 语法书写的模块；另一类为使用 require 语法加载的模块。requirejs 会在全局上下文中定义 define、require 函数；这两个函数都会基于不同的上下文实现分区定义和加载模块，默认在顶层上下文中定义和加载模块。</p>
<ul>
<li>define(name?, deps?, callback): 定义模块名、依赖、函数体（返回导出）。callback 有两种形式，一种显式指定依赖，另一种显式以 require, exports, module 为参数。</li>
<li>require(config?, deps, callback, errback, optional): 加载模块，通过 config.context 定义所使用的上下文，deps 依赖，callback 用于导出模块的句柄。</li>
</ul>
<p>context 上下文主要包含如下属性或方法：</p>
<ul>
<li>registry：已注册、尚未启动加载流程的模块，对象形式，属性值为 Module 实例。</li>
<li>enabledRegistry：通过将 enabled = true 启动加载流程的模块，对象形式。</li>
<li>defined：已创建导出的模块，对象形式。</li>
<li>defQueue：define 模块已加载，它并未转化成 requirejs 内部的 Module 形式，依赖也未曾加载，</li>
<li>require：在当前上下文环境中加载模块。由 context.makeRequire 创建。</li>
</ul>
<p>模块的内部表示为 Module 实例，主要包含以下属性或方法：</p>
<ul>
<li>map：moduleMap 对象，通过 <a href="https://github.com/requirejs/requirejs/blob/master/require.js#L416" target="_blank" rel="noopener">makeModuleMap</a> 获得。其下包含 prefix 属性为插件，即 ‘i18n!my/nls/colors’ 中 i18n 插件；isDefine 是否命名模块。</li>
<li>pluginMaps：插件，用于转换加载的模块。</li>
<li>depMaps：依赖，数组形式；depCount：未加载的依赖数；depMatched：标识依赖已加载；depExports：依赖的导出内容，作为 callback 的参数。</li>
<li>load 方法：通过创建 script 节点或调用 importScripts 形式加载模块。</li>
<li>callPlguin 方法：通过插件加载模块。</li>
<li>fetch 方法：加载模块总接口，内部会以 load 或 callPlguin 方法加载模块。</li>
<li>init 方法：初始化，按条件执行 enable 或 check 方法。特别的，当模块作为依赖时，它会未经 init 方法处理，即使用 <a href="https://github.com/requirejs/requirejs/blob/master/require.js#L1161" target="_blank" rel="noopener">enable</a> 方法加载。enable 方法尾部调用的 check 会依据 !inited 状态 fetch 模块。</li>
<li>enable 方法：将当前模块及其依赖、所使用的插件置为 enabled = true。若依赖已加载，则更新 mod.depExports 当前模块的依赖；若依赖未加载，调用依赖的 enable 方法加载依赖。尾部调用 check 方法，尝试创建模块的导出、或作错误处理、或加载模块。</li>
<li>check 方法：若模块尚未 inited 且不在 context.defQueue 队列中，调用 fetch 方法加载它；若报错，错误处理；若模块的依赖已加载完成，创建模块的导出，并触发 defined 事件，以向上创建 parentMod 的导出。其多态性需要通过 checkLoaded 函数反复触发不同情境的处理机制，如加载模块、错误处理、创建模块导出。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加载模块及其依赖</span></span><br><span class="line"><span class="keyword">const</span> enable = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.enabled = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  each(<span class="keyword">this</span>.depMaps, bind(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">depMap, i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id, mod, handler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> depMap === <span class="string">'string'</span>) &#123;</span><br><span class="line">      depMap = makeModuleMap(depMap,</span><br><span class="line">        (<span class="keyword">this</span>.map.isDefine ? <span class="keyword">this</span>.map : <span class="keyword">this</span>.map.parentMap),</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        !<span class="keyword">this</span>.skipMap);</span><br><span class="line">      <span class="keyword">this</span>.depMaps[i] = depMap;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 依赖已加载</span></span><br><span class="line">      handler = getOwn(handlers, depMap.id);</span><br><span class="line">      <span class="keyword">if</span> (handler) &#123;</span><br><span class="line">        <span class="keyword">this</span>.depExports[i] = handler(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.depCount += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 绑定事件，依赖加载完成后，调用 this.check 加载当前模块</span></span><br><span class="line">      <span class="comment">// on 方法同时为依赖创建 Module 实例，注册到 registry 中，但未执行 init 方法</span></span><br><span class="line">      on(depMap, <span class="string">'defined'</span>, bind(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">depExports</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.undefed) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.defineDep(i, depExports);</span><br><span class="line">        <span class="keyword">this</span>.check();</span><br><span class="line">      &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将依赖的 enabled 置为 true，尝试加载依赖</span></span><br><span class="line">    id = depMap.id;</span><br><span class="line">    mod = registry[id];</span><br><span class="line">    <span class="keyword">if</span> (!hasProp(handlers, id) &amp;&amp; mod &amp;&amp; !mod.enabled) &#123;</span><br><span class="line">      <span class="comment">// 因依赖未执行 init 方法，通过 enable 调用 check 时将加载该依赖</span></span><br><span class="line">      context.enable(depMap, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将插件的 enabled 置为 true</span></span><br><span class="line">  eachProp(<span class="keyword">this</span>.pluginMaps, bind(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">pluginMap</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> mod = getOwn(registry, pluginMap.id);</span><br><span class="line">    <span class="keyword">if</span> (mod &amp;&amp; !mod.enabled) &#123;</span><br><span class="line">      context.enable(pluginMap, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建模块的导出</span></span><br><span class="line">  <span class="keyword">this</span>.check();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多态，加载模块、或错误处理、或创建导出</span></span><br><span class="line"><span class="comment">// mod.check 的多态操作既能由 enable 唤起，也能由 script 节点加载完成后通过 checkLoaded 函数唤起</span></span><br><span class="line"><span class="comment">// 以创建模块的导出或作错误处理</span></span><br><span class="line"><span class="keyword">const</span> check = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.enabled) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> err, cjsModule,</span><br><span class="line">    id = <span class="keyword">this</span>.map.id,</span><br><span class="line">    depExports = <span class="keyword">this</span>.depExports,</span><br><span class="line">    exports = <span class="keyword">this</span>.exports,</span><br><span class="line">    factory = <span class="keyword">this</span>.factory;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模块未经初始化，通常是依赖，加载该模块</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.inited) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!hasProp(context.defQueueMap, id)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.fetch();</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 错误处理</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.error) &#123;</span><br><span class="line">    <span class="keyword">this</span>.emit(<span class="string">'error'</span>, <span class="keyword">this</span>.error);</span><br><span class="line">  <span class="comment">// 依赖已加载完成，创建导出，并触发 defined 事件</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.defining) &#123;</span><br><span class="line">    <span class="keyword">this</span>.defining = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// depCount &lt; 1 表示依赖已加载完成</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.depCount &lt; <span class="number">1</span> &amp;&amp; !<span class="keyword">this</span>.defined) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isFunction(factory)) &#123;</span><br><span class="line">        <span class="comment">// 执行 factory 句柄，生成刀块的导出</span></span><br><span class="line">        exports = context.execCb(id, factory, depExports, exports);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// factory 句柄如 CommonJS 一样使用 module、module.exports 进行赋值导出</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.map.isDefine &amp;&amp; exports === <span class="literal">undefined</span>) &#123;</span><br><span class="line">          cjsModule = <span class="keyword">this</span>.module;</span><br><span class="line">          <span class="keyword">if</span> (cjsModule) &#123;</span><br><span class="line">            exports = cjsModule.exports;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.usingExports) &#123;</span><br><span class="line">            exports = <span class="keyword">this</span>.exports;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        exports = factory;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.exports = exports;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 清理 context.registry，设置 context.defined，表示模块已 defined</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.map.isDefine &amp;&amp; !<span class="keyword">this</span>.ignore) &#123;</span><br><span class="line">        defined[id] = exports;</span><br><span class="line">      &#125;</span><br><span class="line">      cleanRegistry(id);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.defined = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.defining = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.defined &amp;&amp; !<span class="keyword">this</span>.defineEmitted) &#123;</span><br><span class="line">      <span class="keyword">this</span>.defineEmitted = <span class="literal">true</span>;</span><br><span class="line">      <span class="comment">// 触发 defined 事件，促使加载已当前模块为依赖的模块</span></span><br><span class="line">      <span class="keyword">this</span>.emit(<span class="string">'defined'</span>, <span class="keyword">this</span>.exports);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>requirejs 主要是在浏览器环境实现 js 脚本的模块化加载，其基本逻辑流程为：</p>
<ol>
<li>首先在 html 中通过 script 节点加载 requirejs 模块，该 script 节点的 data-main 属性指定了 entryMod 入口模块。</li>
<li>requirejs 模块执行期间，会通过 <a href="https://github.com/requirejs/requirejs/blob/master/require.js#L1836" target="_blank" rel="noopener">req({})</a> 创建顶层上下文并加载 entryMod 入口模块。</li>
<li>入口模块通常为 require 模块，因此会执行 require 函数，创建内部表示 Module 实例，并执行 entryMod.enable 方法。<ul>
<li>当入口模块没有依赖，会直接调用 entryMod.check 执行入口模块的句柄。</li>
<li>当入口模块有依赖，调用依赖的 enable 方法，此时依赖没有经过 init 方法处理，它会在 check 方法执行期间使用 <a href="https://github.com/requirejs/requirejs/blob/master/require.js#L856" target="_blank" rel="noopener">fetch</a> 方法加载依赖。<ul>
<li>当依赖为 require 模块时，重复 entryMod 的处理机制。</li>
<li>当依赖为 define 模块，加载该 define 模块，通过 script 节点加载事件加载其子依赖，内部依旧使用子依赖的 check 方法获取模块。</li>
</ul>
</li>
</ul>
</li>
<li>完成入口模块的句柄。</li>
</ol>
<p>依赖模块加载机制：</p>
<img src="/2020/04/12/frontend/architecture/模块化机制/dep.png">
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// define 定义模块，只更新 context.defQueue 或 globalDefQueue，并不会加载依赖、执行 callback</span></span><br><span class="line">define = <span class="function"><span class="keyword">function</span> (<span class="params">name, deps, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...参数处理，会将 require, [exports], [module] 注入 deps 依赖中</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如 define() 函数指定了上下文（通过 script 节点属性指定），直接更新 context.defQueue</span></span><br><span class="line">  <span class="comment">// 如未指定，等待 takeGlobalQueue 函数更新 context.defQueue</span></span><br><span class="line">  <span class="comment">// https://github.com/requirejs/requirejs/blob/master/require.js#L558</span></span><br><span class="line">  <span class="keyword">if</span> (context) &#123;</span><br><span class="line">    context.defQueue.push([name, deps, callback]);</span><br><span class="line">    context.defQueueMap[name] = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    globalDefQueue.push([name, deps, callback]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// require 加载模块，对外接口</span></span><br><span class="line">req = requirejs = <span class="function"><span class="keyword">function</span> (<span class="params">deps, callback, errback, optional</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 参数处理，deps 可能以 config 形式传入</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (config &amp;&amp; config.context) &#123;</span><br><span class="line">    contextName = config.context;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  context = getOwn(contexts, contextName);</span><br><span class="line">  <span class="keyword">if</span> (!context) &#123;</span><br><span class="line">    context = contexts[contextName] = req.s.newContext(contextName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置 context，并加载 data-main 入口模块</span></span><br><span class="line">  <span class="keyword">if</span> (config) context.configure(config);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> context.require(deps, callback, errback);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">req(&#123;&#125;);<span class="comment">// 加载入口模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// context.require 函数内部实现，通过 context.makeRequire(relMap, options) 制作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">localRequire</span>(<span class="params">deps, callback, errback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> map, requireMod;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// require('module') 形式，直接导出模块</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> deps === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (relMap &amp;&amp; hasProp(handlers, deps)) &#123;</span><br><span class="line">      <span class="keyword">return</span> handlers[deps](registry[relMap.id]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// nodejs 等环境使用 req.get 获取模块</span></span><br><span class="line">    <span class="keyword">if</span> (req.get) &#123;</span><br><span class="line">      <span class="keyword">return</span> req.get(context, deps, relMap, localRequire);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    map = makeModuleMap(deps, relMap, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> defined[map.id];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// define 模块已加载，将其转换成 Module 实例并执行该实例的 check 方法</span></span><br><span class="line">  intakeDefines();</span><br><span class="line"></span><br><span class="line">  context.nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    intakeDefines();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得 moduleMap 并创建 context.Module 实例，存入 context.registry[moduleMap.id] 中</span></span><br><span class="line">    requireMod = getModule(makeModuleMap(<span class="literal">null</span>, relMap));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行 requireMod 的 enable 方法，将当前模块及其依赖、插件的 enabled 属性置为 true</span></span><br><span class="line">    <span class="comment">// 若依赖已加载，更新 requireMod.depExports</span></span><br><span class="line">    requireMod.init(deps, callback, errback, &#123;</span><br><span class="line">      enabled: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    checkLoaded();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> localRequire;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接导出对象</span></span><br><span class="line">define([moduleName], [deps], [moduleFactoryOrObject]);</span><br><span class="line"></span><br><span class="line">define(<span class="built_in">module</span>);</span><br><span class="line"></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">define([<span class="string">'module1'</span>, <span class="string">'module2'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// module.dependencies 依赖</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'module'</span>);</span><br><span class="line"></span><br><span class="line">seajs.use(<span class="string">'js/main'</span>);<span class="comment">// 入口模块</span></span><br></pre></td></tr></table></figure>
<h3 id="seajs"><a href="#seajs" class="headerlink" title="seajs"></a>seajs</h3><ul>
<li>支持插件。插件通过事件接口与 seajs 主流程进行交互，仅需导入插件脚本，即可加载如 css 模块等。</li>
<li>define 句柄中的 require 会通过正则表达式提前收集为依赖。</li>
</ul>
<p>与 requirejs 相比较，seajs 的编码结构更为清晰。seajs 处理流程为：</p>
<ol>
<li>html 中导入 seajs 脚本。</li>
<li>通过 seajs.use 加载首层依赖及处理句柄。内部会创建 Module 实例，并调用 mod.load 加载依赖。</li>
<li>所有依赖加载完成后，会执行 mod.onload 创建 Module 实例的 mod.callback 创建模块的导出。</li>
<li>mod.callback 内，调用依赖的 exec 创建依赖的导出，然后执行当前模块的 callback 句柄创建导出。</li>
</ol>
<p>在以上步骤中，被依赖模块会通过 pass 方法将自身及父模块灌入到依赖的 _entry 属性中，已使加载完成后的依赖能确切地预知到哪些被依赖模块需要创建导出。当然，被依赖模块可能有多个依赖模块，只有当这些依赖模块都加载完成后，被依赖模块才能执行其句柄，这通过被依赖模块的 remain 属性判断。有多少未加载的依赖，被依赖模块的 remain 属性即为多少；在每个依赖加载完成后，remain 属性也相应减 1；当所有依赖加载完成后，remain 属性即为 0。</p>
<p>以下是 Module 实例包含的属性：</p>
<ul>
<li>uri：模块的地址。</li>
<li>dependencies：模块的依赖，数组形式。</li>
<li>deps：模块依赖的导出，数组形式。</li>
<li>status：状态。FETCHING 加载中；SAVED 元数据已存入模块实例；LOADING 依赖加载中；LOADED 依赖加载完成，可以创建模块的导出；EXECUTING 模块的句柄执行中；EXECUTED 模块的句柄执行完成，即导出创建成功；ERROR 模块加载失败。</li>
<li>_entry：被依赖模块，作为当前模块加载的入口，数组形式。当前模块加载完成，将通过 module.onload 方法唤起所有被依赖模块的 callback 句柄，这一行为等价于 requirejs 中的 emit(‘defined’)。</li>
<li>remain：标识未加载的依赖数。值为 0 时，所有依赖均已加载。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Module.use = <span class="function"><span class="keyword">function</span> (<span class="params">ids, callback, uri</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> mod = Module.get(uri, isArray(ids) ? ids : [ids])</span><br><span class="line"></span><br><span class="line">  mod._entry.push(mod)<span class="comment">// 用于构成依赖的 _entry 属性，当前模块的 _entry 将被清空</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 mod.callback 创建入口模块的导出</span></span><br><span class="line">  mod.callback = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> exports = []</span><br><span class="line">    <span class="keyword">var</span> uris = mod.resolve()<span class="comment">// 获取依赖路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = uris.length; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="comment">// 执行依赖模块的句柄，创建依赖模块的导出</span></span><br><span class="line">      <span class="comment">// exec 会为句柄注入 require, exports, module</span></span><br><span class="line">      exports[i] = cachedMods[uris[i]].exec()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">      callback.apply(global, exports)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载入口模块及其依赖</span></span><br><span class="line">  mod.load()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Module.define = <span class="function"><span class="keyword">function</span> (<span class="params">id, deps, factory</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// parseDependencies 通过正则表达式从 factory 句柄中解析显式调用 require 语句的依赖</span></span><br><span class="line">  <span class="keyword">if</span> (!isArray(deps) &amp;&amp; isFunction(factory)) &#123;</span><br><span class="line">    deps = <span class="keyword">typeof</span> parseDependencies === <span class="string">"undefined"</span> ? [] : parseDependencies(factory.toString())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> meta = &#123;</span><br><span class="line">    id: id,</span><br><span class="line">    uri: Module.resolve(id),<span class="comment">// Module.resolve 解析出绝对路径</span></span><br><span class="line">    deps: deps,</span><br><span class="line">    factory: factory</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Module.save 通过 Module.get 创建 Module 实例，并将 meta 存入 Module 实例，状态置为 SAVED</span></span><br><span class="line">  meta.uri ? Module.save(meta.uri, meta) :</span><br><span class="line">    <span class="comment">// Save information for "saving" work in the script onload event</span></span><br><span class="line">    anonymousMeta = meta</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Module.prototype.load = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> mod = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">  mod.status = STATUS.LOADING</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> uris = mod.resolve()<span class="comment">// 解析依赖路径</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = uris.length; i &lt; len; i++) &#123;</span><br><span class="line">    mod.deps[mod.dependencies[i]] = Module.get(uris[i])<span class="comment">// 依赖转变成 Module 实例</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将当前模块及其祖先传入依赖中，作为依赖的 _entry 属性</span></span><br><span class="line">  <span class="comment">// 以便依赖创建导出后，能唤起当前模块及其祖先件的 onload 方法</span></span><br><span class="line">  mod.pass()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当依赖已加载，mod._entry 将不被清空，这时只需执行 mod.onload</span></span><br><span class="line">  <span class="comment">// 通过 mod.onload 执行所有被依赖模块的 callback 方法</span></span><br><span class="line">  <span class="keyword">if</span> (mod._entry.length) &#123;</span><br><span class="line">    mod.onload()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> requestCache = &#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> m</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    m = cachedMods[uris[i]]<span class="comment">// cachedMods 缓存所有 Module 实例</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m.status &lt; STATUS.FETCHING) &#123;</span><br><span class="line">      <span class="comment">// 构建依赖加载函数，存入 requestCache 中</span></span><br><span class="line">      <span class="comment">// 该函数会通过创建 script 节点或调用 importScripts 加载依赖</span></span><br><span class="line">      <span class="comment">// 依赖加载完成后，递归调用 m.load 创建依赖的导出</span></span><br><span class="line">      m.fetch(requestCache)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (m.status === STATUS.SAVED) &#123;</span><br><span class="line">      <span class="comment">// 旨在调用 m.onload 创建依赖的导出</span></span><br><span class="line">      m.load()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 逐个调用依赖加载函数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> requestUri <span class="keyword">in</span> requestCache) &#123;</span><br><span class="line">    <span class="keyword">if</span> (requestCache.hasOwnProperty(requestUri)) &#123;</span><br><span class="line">      requestCache[requestUri]()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p><a href="https://github.com/commonjs/commonjs" target="_blank" rel="noopener">CommonJS 规范</a>指出：es2015 等官方规范定义了适用于客户端的标准 api，在服务端等领域却留下了巨大的真空。CommonJS 规范旨在于填补这个真空，像 Python、Rudy、Java 那样提供标准库，以期开发者使用 CommonJS 标准接口就能编写跨 js 解释器、跨宿主环境的应用。这些应用可以是服务端应用、命令行工具、桌面 GUI 应用、Adobe AIR 等混合应用。</p>
<p><a href="http://wiki.commonjs.org/wiki/Modules/1.1.1" target="_blank" rel="noopener">Modules/1.1.1 规范</a>定义了实现模块系统的最小特性：</p>
<ul>
<li>在模块上下文中提供 require、exports、module 变量。每个模块以 module.id 作为唯一标识；module.uri 作为除沙箱环境外可访问的资源位。模块标识以小驼峰式设定，可以指定为相对路径。</li>
<li>require 函数以模块唯一标识为入参，模块导出 api 为出参。对于循环依赖，依赖模块须导出被依赖模块执行时所需的 api。require.main 或者为模块上下文中的 module 变量，或者为 undefined。require.pathes 用于指定 loader 加载模块的目录列表，优先级从高到低（loader 会对其进行解析）；但是 loader 不只会在 require.pathes 范围内查找模块。</li>
<li>exports 初始时持有 module.exports 相同的指针。exports 可用于增量改写导出方法或属性；module.exports 可用于全量改写导出对象。</li>
</ul>
<p>CommonJS 的典型实现有 nodejs、<a href="https://github.com/browserify/browserify" target="_blank" rel="noopener">browserify</a>。</p>
<h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">const</span> mod = <span class="built_in">require</span>(<span class="string">'moduleName'</span>);</span><br><span class="line"><span class="keyword">const</span> x = <span class="built_in">require</span>(<span class="string">'moduleName'</span>).x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line">exports.x = mod;<span class="comment">// 增量导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = mod;<span class="comment">// 全量导出</span></span><br></pre></td></tr></table></figure>
<h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><p>nodejs 实现 require 函数的源码见于 <a href="https://github.com/nodejs/node/blob/v13.12.0/lib/internal/modules/cjs/loader.js" target="_blank" rel="noopener">cjs/loader.js</a>。nodejs v13.12.0 也实现了 ES2015 模块的加载方式，参见 <a href="https://github.com/nodejs/node/blob/master/lib/internal/modules/esm/loader.js" target="_blank" rel="noopener">esm/loader.js</a>。</p>
<p>CommonJS 在 nodejs 环境应用时，可用于加载 js、C++ 模块。与 requirejs、seajs 主要在浏览器环境加载远程资源不同的是，nodejs 加载的都是本地资源。<a href="http://nodejs.cn/api/modules.html#modules_all_together" target="_blank" rel="noopener">nodejs 文档</a>详细描绘了模块寻址流程。以 require(x) 为例，即如下：</p>
<ol>
<li>x 为 fs 等核心模块，加载该核心模块。</li>
<li>x 为文件模块<ul>
<li>x 以 ‘/‘, ‘./‘, ‘../‘ 起始，首先查找 x 模块；其次查找 x.js、x.json、x.node 模块；其次查找 x/package.json 文件，取 main 属性加载模块，若 main 属性不存在，则加载 x/index.js、x/index.json、x/index.node 模块。</li>
<li>x 在 package.json 的 exports 属性中，按 exports 属性检索文件。</li>
<li>向上查找各 node_modules 文件夹中的 x 模块。</li>
</ul>
</li>
</ol>
<p>加载模块的整体流程为：</p>
<ol>
<li>基于寻址流程获取 <a href="https://github.com/nodejs/node/blob/v13.12.0/lib/internal/modules/cjs/loader.js#L859" target="_blank" rel="noopener">filename</a>。</li>
<li>尝试从 <a href="https://github.com/nodejs/node/blob/v13.12.0/lib/internal/modules/cjs/loader.js#L861" target="_blank" rel="noopener">Module._cache</a> 中获取缓存。</li>
<li><a href="https://github.com/nodejs/node/blob/v13.12.0/lib/internal/modules/cjs/loader.js#L867" target="_blank" rel="noopener">loadNativeModule</a> 加载核心模块。</li>
<li>创建 <a href="https://github.com/nodejs/node/blob/v13.12.0/lib/internal/modules/cjs/loader.js#L871" target="_blank" rel="noopener">Module 实例</a>并调用 <a href="https://github.com/nodejs/node/blob/v13.12.0/lib/internal/modules/cjs/loader.js#L890" target="_blank" rel="noopener">module.load</a> 加载文件模块。在 module.load 执行过程中，会使用 <a href="https://github.com/nodejs/node/blob/v13.12.0/lib/internal/modules/cjs/loader.js#L996" target="_blank" rel="noopener">Module._extensions[extension]</a> 编译执行 js 文件、解析 json 文件或执行 C++ 模块。 <ul>
<li>js 文件：使用 <a href="https://github.com/nodejs/node/blob/v13.12.0/lib/internal/modules/cjs/loader.js#L1101" target="_blank" rel="noopener">module._compile</a> 编译处理模块内容。正是在这一过程中，nodejs 会使用 <a href="http://nodejs.cn/api/modules.html#modules_all_together" target="_blank" rel="noopener">模块封装器</a> 包装模块体，为其注入 require、module、exports、<strong>filename、</strong>dirname。</li>
</ul>
</li>
</ol>
<p>另据死月在《Node.js 来一打 C++ 扩展》中提到，npm 2.x 嵌套式依赖管理方案适合 node 端开发，相同依赖可以有多个版本；npm 3.x 扁平化管理方案适合纯前端开发，打包体积会较小。</p>
<h2 id="ES2015"><a href="#ES2015" class="headerlink" title="ES2015"></a>ES2015</h2><p>比 AMD、CMD、CommonJS 后推出的 <a href="https://tc39.es/ecma262/#sec-modules" target="_blank" rel="noopener">ECMAScript6 Module 规范</a>旨在于整合前述模块化规范的优势，使不同的用户都满意。它有以下特点：</p>
<ol>
<li>语法结构适合静态分析，编译期即可识别语法错误。</li>
<li>支持循环依赖、异步加载。</li>
</ol>
<p>ES2015 规定以 <a href="https://tc39.es/ecma262/#sec-abstract-module-records" target="_blank" rel="noopener">Abstract Module Record 抽象模块记录</a>封装单个模块的导入和导出。该规范还定义了 <a href="https://tc39.es/ecma262/#sec-cyclic-module-records" target="_blank" rel="noopener">Cyclic Module Record</a> 抽象子类用于处理循环依赖、<a href="https://tc39.es/ecma262/#sec-source-text-module-records" target="_blank" rel="noopener">Source Text Module Record</a> 具体子类用于解析文件模块。其他规范或实现可据此实现自己的模块记录子类。Module Record 模块记录包含以下属性和方法（所有实现类均需包含）：</p>
<ul>
<li>[[Realm]]：创建模块的域。</li>
<li>[[Environment]]：模块对应的顶层词法环境。</li>
<li>[[Namespace]]：模块的命名空间。</li>
<li>[[HostDefined]]：宿主环境提供的附加信息。</li>
<li>GetExportedNames([exportStarSet])：获取导出列表。</li>
<li>ResolveExport(exportName [, resolveSet])：获取导出名称的绑定，{[[module]]: Module Record, [[bindingName]]: String} 形式。</li>
<li>Link()：递归解析模块依赖，创建模块的 Environment Record。</li>
<li>Evaluate()：创建模块的导出。首先会创建依赖的导出，然后再创建当前模块的导出；其次作错误处理。</li>
</ul>
<p>我们可以发现，ES2015 规范中的模块导出构建过程与 seajs 有些相似，如 Link 方法譬如 seajs 中的 pass 方法，Evaluate 方法譬如 onLoad 方法。</p>
<h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入模块</span></span><br><span class="line"><span class="keyword">import</span> v <span class="keyword">from</span> <span class="string">"mod"</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ns <span class="keyword">from</span> <span class="string">"mod"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; x &#125; <span class="keyword">from</span> <span class="string">"mod"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; x <span class="keyword">as</span> v &#125; <span class="keyword">from</span> <span class="string">"mod"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"mod"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出模块</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> v;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="number">42</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; x &#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; v <span class="keyword">as</span> x &#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; x &#125; <span class="keyword">from</span> <span class="string">"mod"</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; v <span class="keyword">as</span> x &#125; <span class="keyword">from</span> <span class="string">"mod"</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">"mod"</span>;</span><br></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h3><p>UMD 模块用于适配 AMD、CommonJs 模块化规范，它会用下述代码包裹模块体：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function">(<span class="params">root, factory</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">    <span class="comment">//AMD</span></span><br><span class="line">    define([<span class="string">'jquery'</span>], factory);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="comment">//CommonJS</span></span><br><span class="line">    <span class="keyword">var</span> $ = requie(<span class="string">'jquery'</span>);</span><br><span class="line">    <span class="built_in">module</span>.exports = factory($);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    root.testModule = factory(root.jQuery);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="keyword">this</span>, ($) =&gt; &#123;</span><br><span class="line">  <span class="comment">//todo</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>打包一个模块，可使用 <a href="https://www.webpackjs.com/configuration/output/" target="_blank" rel="noopener">webpack</a> 或 <a href="https://rollupjs.org/guide/zh/" target="_blank" rel="noopener">rollup</a>。</p>
<p>如使用 webpack 打包，有以下两个配置会影响打包策略。</p>
<ul>
<li><a href="https://www.webpackjs.com/configuration/output/#output-library" target="_blank" rel="noopener">output.library</a>：指定导出模块名。</li>
<li><a href="https://www.webpackjs.com/configuration/output/#output-librarytarget" target="_blank" rel="noopener">output.libraryTarget</a>：指定打包后的模块系统。可选项 commonjs、commonjs2、amd、umd、var、global、window 等。commonjs2 用于改写 module.exports；commonjs 用于改写 exports 的指定属性。</li>
</ul>
<p>与 webpack 会为打包后的模块添加如 webpackUniversalModuleDefinition 等内容不同，rollup 打包产物格外纯净，因此编写 library 推荐使用 rollup 进行打包。在 rollup 配置文件中，<a href="https://rollupjs.org/guide/zh/#%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84%E5%8F%82%E6%95%B0command-line-flags" target="_blank" rel="noopener">output.format</a> 可用于打包后的模块系统，可选项包含 amd, cjs, esm, iife, umd。esm 即 ES2015 模块化规范；cjs 即 CommonJS；iife 将模块包装成立即执行的匿名函数（见于参考文档）。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000017466120" target="_blank" rel="noopener">前端模块化详解</a><br><a href="https://blog.csdn.net/qq_41875664/article/details/98870815" target="_blank" rel="noopener">深入了解前端模块化</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>architecture</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>node 命令行工具</title>
    <url>/2020/04/05/frontend/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>简单的命令行工具一般按照以下流程编写：</p>
<ol>
<li>package.json 文件中添加 bin 属性，指定命令的名称，如 “bin”: { “create-app”: “bin/create-app.js” }。</li>
<li>bin/create-app.js 文件中添加 #!/usr/bin/env node，指定这是一个使用 node 执行的命令行工具。</li>
<li>使用 commander.js 编写 bin/create-app.js 脚本内容。</li>
<li>通过 npm link 或 <a href="https://cloud.tencent.com/developer/section/1477733" target="_blank" rel="noopener">yarn link</a> 将软件包链接到全局空间，即可以调用 create-app directory 命令了。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>);</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">'create-app &lt;directory&gt;'</span>)</span><br><span class="line">  .action(<span class="function">(<span class="params">directory</span>) =&gt;</span> &#123;  </span><br><span class="line">    inquirer.prompt([&#123;</span><br><span class="line">      type: <span class="string">'list'</span>,</span><br><span class="line">      name: <span class="string">'type'</span>,</span><br><span class="line">      message: <span class="string">'which framework do you want to use?'</span>,</span><br><span class="line">      choices: [<span class="string">'react'</span>, <span class="string">'vue'</span>, <span class="string">'angular'</span>]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      type: <span class="string">'input'</span>,</span><br><span class="line">      name: <span class="string">'name'</span>,</span><br><span class="line">      message: <span class="string">"what is your app's name?"</span>,</span><br><span class="line">      <span class="keyword">default</span>: directory</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      type: <span class="string">'input'</span>,</span><br><span class="line">      name: <span class="string">'version'</span>,</span><br><span class="line">      message: <span class="string">"what is your app's version?"</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">'daily/0.0.1'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      type: <span class="string">'input'</span>,</span><br><span class="line">      name: <span class="string">'description'</span>,</span><br><span class="line">      message: <span class="string">"what is your app's description?"</span></span><br><span class="line">    &#125;]).then(<span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 创建前端项目</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .parse(process.argv);</span><br></pre></td></tr></table></figure>
<h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><p>适用于编写命令行工具的模块有：</p>
<ol>
<li><a href="https://github.com/tj/commander.js" target="_blank" rel="noopener">commander.js</a> 编写 node 命令。</li>
<li><a href="https://github.com/yargs/yargs" target="_blank" rel="noopener">yargs</a> 编写 node 命令。</li>
<li><a href="https://github.com/node-modules/common-bin" target="_blank" rel="noopener">common-bin</a> 在 yargs 基础上，以类语法形式编写 node 命令。</li>
<li><a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noopener">Inquirer.js</a> 编写终端交互式面板。</li>
<li><a href="https://github.com/enquirer/enquirer" target="_blank" rel="noopener">enquirer</a> 编写终端交互式面板。</li>
</ol>
<p>概要地讲，commander.js 首先注册命令行参数处理规则，随后通过甄别用户输入（node 环境中的 progress.argv），再从已注册的处理规则中选取其一并应用之。</p>
<img src="/2020/04/05/frontend/工程化/命令行工具/commander.png">
<p>命令行参数通常被抽象称为子命令、选项。选项部分功能包含设置短标识、默认值、描述，特殊选项为版本号信息。子命令是一类处理操作 action handler 的抽象，其功能包含设置必选参数、可选参数、选项、描述等。选项、子命令构成 help 内容提示。选项和命令是对常规如 git push –force 命令的抽象。更为灵活的是通过 commander.js、yargs 解析用户输入，由开发者决定如何使用这些参数。当然，直接对 progress.argv 作处理也是可选的方案。这是 commander.js 模块所提供的核心功能。</p>
<p>commander.js 本质是非交互式的，在用户输入完成后调用 commander.js 模块进行处理，无需监听键盘事件。Inquirer.js、enquirer 是交互式的，需要监听用户侧的键盘输入，以实现单选、多选、密码等交互动作。它们借助 <a href="http://nodejs.cn/api/readline.html" target="_blank" rel="noopener">readline</a> 模块处理标准输入 process.stdin、标准输出 process.stdout。</p>
<img src="/2020/04/05/frontend/工程化/命令行工具/enquire.png">
<p>以下仅介绍 commander.js、Inquirer.js 的实现，因为 yargs、common-bin 与 commander.js 功能相同，enquirer 与 Inquirer.js 功能相同。</p>
<h3 id="commander-js"><a href="#commander-js" class="headerlink" title="commander.js"></a>commander.js</h3><p>commander.js 抽象了 Commander 命令模型、Option 选项模型两个类。为使 –help 操作能打印父命令包含的子命令信息，command 实例持有 parent 属性指向父命令，commands 属性存储下属命令，以及 _noHelp 等属性限定打印的帮助信息内容。一个 command 实例可以分为三阶段：注册阶段、执行阶段、打印帮助信息阶段。这里仅说明注册阶段、执行阶段的核心方法。</p>
<h4 id="注册阶段主要方法"><a href="#注册阶段主要方法" class="headerlink" title="注册阶段主要方法"></a>注册阶段主要方法</h4><ul>
<li>command、addCommand：注册命令。command 方法的参数为命令行输入模板，如 ‘clone <source> [destination]’，返回值为新注册的子命令；addCommand 方法的参数为 Commander 实例，返回值为父命令。</li>
<li>action：注册命令的处理操作 action handler。命令是可执行的，除了注册处理操作以外，还可以通过 command 方法指定执行文件 _executableFile（默认为工程目录中的 program-command 文件）。</li>
<li>_parseExpectedArgs：用于为命令解析必选、可选参数，存入 Commander 实例的 _args 属性中。</li>
<li>option、requiredOption：用于为命令添加选项，Option 实例，存入 Commander 实例的 options 属性中。选项同样可以用 &lt;&gt;、[] 指定其为必选还是可选选项。选项可设置短标识、描述、默认值、选项值的匹配函数或正则。选项的值通过事件处理函数设置。特殊的，–no- 起始的选项会设置默认值为 true。</li>
</ul>
<h4 id="执行阶段主要方法"><a href="#执行阶段主要方法" class="headerlink" title="执行阶段主要方法"></a>执行阶段主要方法</h4><ul>
<li>parse、parseAsync: 解析用户输入，随后选用命令并执行。命令行输入分为三种情况，库本身通过 npm link 注册可调用命令、或使用 node 调用可执行性模块、或在 electron 环境下执行。其处理流程包含：通过 parseOptions 方法解析选项；找到匹配的命令并执行，或打印命令的帮助信息。执行命令有两种，一种为通过 action 方法注册了可执行函数，另一种通过 _executableFile 指定了可执行文件，可参阅源码中的 <a href="https://github.com/tj/commander.js/blob/master/index.js#L870" target="_blank" rel="noopener">_parseCommand</a>、<a href="https://github.com/tj/commander.js/blob/master/index.js#L749" target="_blank" rel="noopener">_executeSubCommand</a> 部分。</li>
</ul>
<p>commander.arguments 方法游离在主流程之外，其目的在于解析命令行输入，由开发者自行决定如何处理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. action handler</span></span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">'rm &lt;dir&gt;'</span>)</span><br><span class="line">  .option(<span class="string">'-r, --recursive'</span>, <span class="string">'Remove recursively'</span>)</span><br><span class="line">  .action(<span class="function"><span class="keyword">function</span> (<span class="params">dir, cmdObj</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'remove '</span> + dir + (cmdObj.recursive ? <span class="string">' recursively'</span> : <span class="string">''</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">  .parse(process.argv);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. executable file</span></span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">'install [name]'</span>, <span class="string">'install one or more packages'</span>)</span><br><span class="line">  .command(<span class="string">'search [query]'</span>, <span class="string">'search with optional query'</span>)</span><br><span class="line">  .command(<span class="string">'update'</span>, <span class="string">'update installed packages'</span>, &#123;<span class="attr">executableFile</span>: <span class="string">'myUpdateSubCommand'</span>&#125;)</span><br><span class="line">  .command(<span class="string">'list'</span>, <span class="string">'list packages installed'</span>, &#123;<span class="attr">isDefault</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">  .parse(process.argv);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. arguments</span></span><br><span class="line">program</span><br><span class="line">  .version(<span class="string">'0.1.0'</span>)</span><br><span class="line">  .arguments(<span class="string">'&lt;cmd&gt; [env]'</span>)</span><br><span class="line">  .action(<span class="function"><span class="keyword">function</span> (<span class="params">cmd, env</span>) </span>&#123;</span><br><span class="line">    cmdValue = cmd;</span><br><span class="line">    envValue = env;</span><br><span class="line">  &#125;)</span><br><span class="line">  .parse(process.argv);</span><br></pre></td></tr></table></figure>
<h3 id="Inquirer-js"><a href="#Inquirer-js" class="headerlink" title="Inquirer.js"></a>Inquirer.js</h3><p>作为一个使用 leran 打造的工程，Inquirer.js 由如下模块构成：</p>
<img src="/2020/04/05/frontend/工程化/命令行工具/inquier.png">
<p>在传统模式中，Inquirer.js 通过 StateManager 制作 input 等模块。有趣的是，Inquirer.js 像 react 一样实现了 hooks 机制，input 等模块也改由 hooks 实现了。</p>
<h4 id="StateManager"><a href="#StateManager" class="headerlink" title="StateManager"></a>StateManager</h4><p>StateManager 类命令行界面交互及渲染逻辑。借助 <a href="http://nodejs.cn/api/readline.html" target="_blank" rel="noopener">readline</a> 监听命令行输入，即键盘事件（回车、返回作为单次交互的终止符）。在逻辑上，它首先会根据初始化输入渲染命令行输出；然后通过监听键盘事件，它会把命令行输入存入内部状态中；同时在变更内部状态期间，它会重新渲染输出；直到用户点击回车或返回，交互行为才会宣告结束，它会驱动执行最终回调。在以上过程中，用户侧的键盘输入并不会直接转化成命令行输出，这借助 <a href="https://github.com/npm/mute-stream" target="_blank" rel="noopener">mute-stream</a> 模块使输出面板变得静默（不会即时响应用户输入），而需要经由状态值变更来驱动输出面板的重绘。</p>
<p>关于交互事件的监听，readline 模块提供了 <a href="http://nodejs.cn/api/readline.html#readline_readline_createinterface_options" target="_blank" rel="noopener">readline.createInterface</a> 方法用于创建 readline.Interface 实例（以 rl 指代）。通过 rl.on(‘line’, handler) 可以监听 line 事件；通过 rl.input.on(‘keypress’) 可以监听键盘事件（当按键为回车或返回键时，这个事件同时会触发 line 事件绑定函数）。关于输出面板的渲染，Inquirer.js 借助 readline.output.write 渲染输出面板；<a href="http://nodejs.cn/api/readline.html#readline_rl_setprompt_prompt" target="_blank" rel="noopener">readline.setPrompt</a> 设置提示。在 <a href="https://github.com/SBoudrias/Inquirer.js/blob/master/packages/core/lib/screen-manager.js#L21" target="_blank" rel="noopener">screen-manager</a> 模块中，Inquirer.js 首先会基于待渲染内容调用 readline.setPrompt 设置提示，然后基于 <a href="https://github.com/knownasilya/cli-width" target="_blank" rel="noopener">cli-width</a> 模块为渲染内容分行，再行调用 readline.output.write 绘制输出面板，随后基于 <a href="https://github.com/sindresorhus/ansi-escapes" target="_blank" rel="noopener">ansi-escapes</a> 模块调整光标的位置。</p>
<p>对于 input、select 等模块的交互和渲染差异，Inquirer.js 基于不同的 StateManager 实例呈现多态。在创建 StateManager 实例过程中，它允许 input 模块注册 onKeypress、onLine 等钩子，以对命令行输入作出不同的响应；同时设置 render 状态渲染函数，以便在命令行输出中绘制不同的内容。input 等模块提供的状态渲染函数仅需要将状态值转变为待渲染的内容，由 screen-manager 模块进行绘制。</p>
<p>以 input 模块为例，单个 StateManager 实例的总执行流程为：</p>
<ol>
<li>[内部]input 模块通过 createPrompt 注册 config.onKeypress 等配置，render 状态渲染函数。</li>
<li>[调用者]通过 input 接口设定 initialState 初始状态、最终回调 cb，[内部]基于初始状态渲染命令行输出面板。</li>
<li>[内部]StateManager 实例内监听键盘行为，基于状态变更重绘输出面板。</li>
<li>[调用者]点击 enter 按键，[内部]StateManager 实例驱动执行最终回调 cb，[调用者]消费最终状态。</li>
</ol>
<p>以下是 StateManager 摘要性源码（剔除了状态值校验、异步逻辑等）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateManager</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(configFactory, initialState, render) &#123;</span><br><span class="line">    <span class="keyword">this</span>.config = _.isFunction(configFactory) ? configFactory(<span class="keyword">this</span>.rl) :configFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.initialState = initialState;</span><br><span class="line">    <span class="keyword">this</span>.render = render;</span><br><span class="line">    <span class="keyword">this</span>.currentState = &#123;</span><br><span class="line">      loadingIncrement: <span class="number">0</span>,</span><br><span class="line">      value: <span class="string">''</span>,</span><br><span class="line">      status: <span class="string">'idle'</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> input = process.stdin;</span><br><span class="line">    <span class="keyword">const</span> output = <span class="keyword">new</span> MuteStream();</span><br><span class="line">    output.pipe(process.stdout);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// http://nodejs.cn/api/readline.html#readline_readline_createinterface_options</span></span><br><span class="line">    <span class="keyword">this</span>.rl = readline.createInterface(&#123;</span><br><span class="line">      terminal: <span class="literal">true</span>,</span><br><span class="line">      input,</span><br><span class="line">      output</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.screen = <span class="keyword">new</span> ScreenManager(<span class="keyword">this</span>.rl);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> execute(cb) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; message &#125; = <span class="keyword">this</span>.getState();</span><br><span class="line">    <span class="keyword">this</span>.cb = cb;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; message, <span class="attr">status</span>: <span class="string">'idle'</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.rl.input.on(<span class="string">'keypress'</span>, <span class="keyword">this</span>.onKeypress);</span><br><span class="line">    <span class="keyword">this</span>.rl.on(<span class="string">'line'</span>, <span class="keyword">this</span>.handleLineEvent);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将键盘输入记录到 state 中，并触发 onKeypress</span></span><br><span class="line">  <span class="comment">// enter、return 按键由 line 事件处理</span></span><br><span class="line">  onKeypress(value, key) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; onKeypress = _.noop &#125; = <span class="keyword">this</span>.config;</span><br><span class="line">    <span class="keyword">if</span> (key.name === <span class="string">'enter'</span> || key.name === <span class="string">'return'</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">value</span>: <span class="keyword">this</span>.rl.line, <span class="attr">error</span>: <span class="literal">null</span> &#125;);</span><br><span class="line">    onKeypress(<span class="keyword">this</span>.rl.line, key, <span class="keyword">this</span>.getState(), <span class="keyword">this</span>.setState);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// enter、return 按键，触发 onLine 完成 submit 等操作</span></span><br><span class="line">  handleLineEvent() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; onLine = defaultOnLine &#125; = <span class="keyword">this</span>.config;</span><br><span class="line">    onLine(<span class="keyword">this</span>.getState(), &#123;</span><br><span class="line">      submit: <span class="keyword">this</span>.onSubmit,</span><br><span class="line">      setState: <span class="keyword">this</span>.setState</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 剔除对 value 的校验、filter 处理后代码</span></span><br><span class="line">  <span class="keyword">async</span> onSubmit() &#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="keyword">this</span>.getState();</span><br><span class="line">    <span class="keyword">const</span> &#123; mapStateToValue = defaultMapStateToValue &#125; = <span class="keyword">this</span>.config;</span><br><span class="line">    <span class="keyword">let</span> value = mapStateToValue(state);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.rl.pause();</span><br><span class="line">    <span class="comment">// 状态值清空，解绑事件，执行 this.cb 回调</span></span><br><span class="line">    <span class="keyword">this</span>.onDone(value);</span><br><span class="line">    <span class="keyword">this</span>.rl.resume();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setState(partialState) &#123;</span><br><span class="line">    <span class="keyword">this</span>.currentState = <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="keyword">this</span>.currentState, partialState);</span><br><span class="line">    <span class="keyword">this</span>.onChange(<span class="keyword">this</span>.getState());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 状态变更时，重绘输出</span></span><br><span class="line">  onChange(state) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; status, message, value, transformer &#125; = <span class="keyword">this</span>.getState();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> error;</span><br><span class="line">    <span class="keyword">if</span> (state.error) &#123;</span><br><span class="line">      error = <span class="string">`<span class="subst">$&#123;chalk.red(<span class="string">'&gt;&gt;'</span>)&#125;</span> <span class="subst">$&#123;state.error&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> renderState = <span class="built_in">Object</span>.assign(</span><br><span class="line">      &#123;</span><br><span class="line">        prefix: <span class="keyword">this</span>.getPrefix()</span><br><span class="line">      &#125;,</span><br><span class="line">      state,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// Only pass message down if it's a string. Otherwise we're still in init state</span></span><br><span class="line">        message: _.isFunction(message) ? <span class="string">'Loading...'</span> : message,</span><br><span class="line">        value: transformer(value, &#123; <span class="attr">isFinal</span>: status === <span class="string">'done'</span> &#125;),</span><br><span class="line">        validate: <span class="literal">undefined</span>,</span><br><span class="line">        filter: <span class="literal">undefined</span>,</span><br><span class="line">        transformer: <span class="literal">undefined</span></span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">this</span>.screen.render(<span class="keyword">this</span>.render(renderState, <span class="keyword">this</span>.config), error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createPrompt = <span class="function">(<span class="params">config, render</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> run = <span class="function"><span class="params">initialState</span> =&gt;</span></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> prompt = <span class="keyword">new</span> StateManager(config, initialState, render);</span><br><span class="line">      prompt.execute(resolve);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  run.render = render;</span><br><span class="line">  run.config = config;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> run;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="hooks"><a href="#hooks" class="headerlink" title="hooks"></a>hooks</h4><p>有趣的是，hooks 包括 useState、useEffect、useRef、useKeypress 等。其实现机制是创建一个 readline.Interface 实例对交互行为进行监听，以变更 state，并触发重绘流程，执行 effect 等。input 等基于 hooks 制作的模块主要在于变更 state，基于 state 获取输出面板上的待渲染内容。以下是 hooks 部分源码及 confirm 模块对 hooks 的应用。</p>
<img src="/2020/04/05/frontend/工程化/命令行工具/hooks.png">
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> sessionRl;</span><br><span class="line"><span class="keyword">let</span> hooks = [];<span class="comment">// 存储 hooks</span></span><br><span class="line"><span class="keyword">let</span> hooksCleanup = [];<span class="comment">// 存储 hooks 清理函数</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> handleChange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清理 hooks</span></span><br><span class="line"><span class="keyword">const</span> cleanupHook = <span class="function"><span class="params">index</span> =&gt;</span> &#123; <span class="comment">/* ... */</span> &#125;;</span><br><span class="line"></span><br><span class="line">exports.useState = <span class="function"><span class="params">defaultValue</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> _idx = index;</span><br><span class="line">  <span class="keyword">const</span> value = _idx <span class="keyword">in</span> hooks ? hooks[_idx] : defaultValue;</span><br><span class="line"></span><br><span class="line">  index++;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    value,</span><br><span class="line">    newValue =&gt; &#123;</span><br><span class="line">      hooks[_idx] = newValue;</span><br><span class="line">      handleChange();<span class="comment">// 驱动重绘</span></span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.useKeypress = <span class="function"><span class="params">userHandler</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> _idx = index;</span><br><span class="line">  <span class="keyword">const</span> prevHandler = hooks[_idx];</span><br><span class="line">  <span class="keyword">const</span> handler = <span class="function">(<span class="params">input, event</span>) =&gt;</span> &#123;</span><br><span class="line">    userHandler(event, sessionRl);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (prevHandler !== handler) &#123;</span><br><span class="line">    cleanupHook(_idx);</span><br><span class="line"></span><br><span class="line">    sessionRl.input.on(<span class="string">'keypress'</span>, handler);</span><br><span class="line">    hooks[_idx] = handler;</span><br><span class="line">    hooksCleanup[_idx] = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      sessionRl.input.removeListener(<span class="string">'keypress'</span>, handler);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  index++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.useEffect = <span class="function">(<span class="params">cb, depArray</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> _idx = index;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> oldDeps = hooks[_idx];</span><br><span class="line">  <span class="keyword">let</span> hasChanged = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (oldDeps) &#123;</span><br><span class="line">    hasChanged = depArray.some(<span class="function">(<span class="params">dep, i</span>) =&gt;</span> !<span class="built_in">Object</span>.is(dep, oldDeps[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (hasChanged) &#123;</span><br><span class="line">    cleanupHook(_idx);</span><br><span class="line">    hooksCleanup[_idx] = cb();</span><br><span class="line">  &#125;</span><br><span class="line">  hooks[_idx] = depArray;</span><br><span class="line"></span><br><span class="line">  index++;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.useRef = <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> exports.useState(&#123; <span class="attr">current</span>: val &#125;)[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.createPrompt = <span class="function"><span class="params">view</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> input = process.stdin;</span><br><span class="line">    <span class="keyword">const</span> output = <span class="keyword">new</span> MuteStream();</span><br><span class="line">    output.pipe(process.stdout);</span><br><span class="line">    <span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">      terminal: <span class="literal">true</span>,</span><br><span class="line">      input,</span><br><span class="line">      output</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> screen = <span class="keyword">new</span> ScreenManager(rl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      sessionRl = rl;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> done = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> len = cleanupHook.length;</span><br><span class="line">        <span class="keyword">while</span> (len--) &#123;</span><br><span class="line">          cleanupHook(len);</span><br><span class="line">        &#125;</span><br><span class="line">        screen.done();</span><br><span class="line"></span><br><span class="line">        hooks = [];</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        sessionRl = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">        resolve(value);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      hooks = [];</span><br><span class="line">      <span class="keyword">const</span> workLoop = <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        handleChange = <span class="function"><span class="params">()</span> =&gt;</span> workLoop(config);<span class="comment">// 将最新的状态值交给 handleChange</span></span><br><span class="line">        screen.render(...[view(config, done)].flat().filter(<span class="built_in">Boolean</span>));</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// getPromptConfig 用于将 options 用户配置项转换为 config</span></span><br><span class="line">      getPromptConfig(options).then(workLoop, reject);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// confirm 模块</span></span><br><span class="line"><span class="built_in">module</span>.exports = createPrompt(<span class="function">(<span class="params">config, done</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [status, setStatus] = useState(<span class="string">'pending'</span>);</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">const</span> prefix = usePrefix();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听键盘事件</span></span><br><span class="line">  useKeypress(<span class="function">(<span class="params">key, rl</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isEnterKey(key)) &#123;</span><br><span class="line">      <span class="keyword">const</span> answer = value ? <span class="regexp">/^y(es)?/i</span>.test(value) : config.default !== <span class="literal">false</span>;</span><br><span class="line">      setValue(answer ? <span class="string">'yes'</span> : <span class="string">'no'</span>);</span><br><span class="line">      setStatus(<span class="string">'done'</span>);</span><br><span class="line">      done(answer);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      setValue(rl.line);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重新计算熏染内容</span></span><br><span class="line">  <span class="keyword">let</span> formattedValue = value;</span><br><span class="line">  <span class="keyword">let</span> defaultValue = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">if</span> (status === <span class="string">'done'</span>) &#123;</span><br><span class="line">    formattedValue = chalk.cyan(value ? <span class="string">'yes'</span> : <span class="string">'no'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    defaultValue = chalk.dim(config.default === <span class="literal">false</span> ? <span class="string">' (y/N)'</span> : <span class="string">' (Y/n)'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> message = chalk.bold(config.message);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;prefix&#125;</span> <span class="subst">$&#123;message&#125;</span><span class="subst">$&#123;defaultValue&#125;</span> <span class="subst">$&#123;formattedValue&#125;</span>`</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><p><a href="https://github.com/shelljs/shelljs" target="_blank" rel="noopener">shelljs</a> 用于执行 shell 脚本，常用如执行 git 操作。<br><a href="https://github.com/isaacs/rimraf" target="_blank" rel="noopener">rimraf</a> 移除文件夹或文件。<br><a href="https://github.com/chalk/chalk" target="_blank" rel="noopener">chalk</a> 在终端上带色彩打印内容。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>前端工程化</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>电商后台建模</title>
    <url>/2020/03/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%94%B5%E5%95%86%E5%90%8E%E5%8F%B0%E5%BB%BA%E6%A8%A1/</url>
    <content><![CDATA[<h2 id="系统建模"><a href="#系统建模" class="headerlink" title="系统建模"></a>系统建模</h2><p>系统建模是对软件系统的抽象，滤除了对细节的关照，通常需要包含如下内容：</p>
<ul>
<li>上下文模型：说明系统在上下文环境中有怎样的构成，边界如何。上下文模型并未说明各系统的交互关系。</li>
<li>业务过程模型：说明系统中某个业务人工或自动化的处理过程，并交代各系统在该业务过程中的交互行为。可使用 UML 活动图绘制。</li>
<li>交互模型：说明系统与外部参与者（用户或其他系统）之间的交互关系，其中传递的数据可通过文本或结构化表格描述。可使用 UML 用例图、时序图绘制。</li>
<li>结构模型：说明系统内各组件的构成和关系以及数据结构，包含静态模型和运行时的动态模型。可使用 UML 类图绘制。</li>
<li>行为模型：说明系统运行时的动态行为，动态行为发生缘由可以是数据或事件。可使用 UML 活动图、时序图、状态图绘制。</li>
</ul>
<h2 id="电商后台"><a href="#电商后台" class="headerlink" title="电商后台"></a>电商后台</h2>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>carrier</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack 踩坑录</title>
    <url>/2020/03/18/%E8%B8%A9%E5%9D%91/webpack%20%E8%B8%A9%E5%9D%91%E5%BD%95/</url>
    <content><![CDATA[<h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><p>Q: 使用 webpack4, @babel/plugin-syntax-dynamic-import 插件后，react-router3 中基于 require.ensure 将不再生效，需要使用如 react-loadable 等加载方式。可参考 <a href="https://blog.csdn.net/jacktesla/article/details/80792110" target="_blank" rel="noopener">react-router的3种按需加载介绍</a>。<br>A: 猜想：webpack 中使用 require.ensure, import() 采用同一套机制，dynamic-import 插件也会影响 require.ensure，将导出模块转换成 promise。babel 文档 <a href="https://babeljs.io/docs/en/babel-plugin-syntax-dynamic-import/" target="_blank" rel="noopener">@babel/plugin-syntax-dynamic-import</a>、webpack 文档 <a href="https://webpack.js.org/guides/code-splitting/#dynamic-imports" target="_blank" rel="noopener">Dynamic Imports</a> 指明，import() 需要加载 <a href="https://github.com/stefanpenner/es6-promise" target="_blank" rel="noopener">es6-promise</a> 或者 <a href="https://github.com/taylorhakes/promise-polyfill" target="_blank" rel="noopener">promise-polyfill</a> 垫片。<a href="https://webpack.js.org/api/module-methods/#requireensure" target="_blank" rel="noopener">require.ensure</a> 是 webpack 所使用的传统方法。</p>
<p>Q: chunkFileName </p>
]]></content>
      <categories>
        <category>踩坑</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>图片校验码</title>
    <url>/2020/03/11/frontend/guide/%E5%9B%BE%E7%89%87%E6%A0%A1%E9%AA%8C%E7%A0%81/</url>
    <content><![CDATA[<h2 id="纯前端实现"><a href="#纯前端实现" class="headerlink" title="纯前端实现"></a>纯前端实现</h2><p>纯前端实现图片校验码指的是通过 canvas 绘制随机串的方式。这种方式有极大的弊端：如果随机串在前端生成，那么通过拦截伪造请求仍然能正常调用后台接口；如果随机串由后台发送给前端，那么中间可以被拦截并伪造（当然，可尝试用加密技术进行保护）。因此，这种方式大体适用于学习研究的目的。以下代码段基于 <a href="https://blog.csdn.net/u012149906/article/details/95484216" target="_blank" rel="noopener">react 验证码组件</a> 整理，其实现也可以参考 <a href="https://www.cnblogs.com/zppsakura/p/11375864.html" target="_blank" rel="noopener">在React中随机生成图形验证码</a>。您可以在 codesandbox 查看<a href="https://codesandbox.io/s/zifuchuanxiaoyanma-4p8jl" target="_blank" rel="noopener">效果</a>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useRef, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./index.less'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getRandom = <span class="function">(<span class="params">max: number, min: number, num?: number</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> asciiNum = ~~(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>) + min)</span><br><span class="line">  <span class="keyword">if</span> (!num) <span class="keyword">return</span> asciiNum;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> arr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">    arr.push(getRandom(max, min))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> VerifyCode = (&#123;</span><br><span class="line">  code,</span><br><span class="line">  onRefresh,</span><br><span class="line">&#125;: &#123;</span><br><span class="line">    code: string,</span><br><span class="line">    onRefresh?: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span>,</span><br><span class="line">  &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [rotate, setRotate] = useState(getRandom(<span class="number">15</span>, <span class="number">-15</span>, <span class="number">4</span>));</span><br><span class="line">  <span class="keyword">const</span> [color, setColor] = useState([</span><br><span class="line">    getRandom(<span class="number">0</span>, <span class="number">255</span>, <span class="number">3</span>), getRandom(<span class="number">0</span>, <span class="number">255</span>, <span class="number">3</span>), getRandom(<span class="number">0</span>, <span class="number">255</span>, <span class="number">3</span>), getRandom(<span class="number">0</span>, <span class="number">255</span>, <span class="number">3</span>)</span><br><span class="line">  ]);</span><br><span class="line">  <span class="keyword">const</span> canvasRef = useRef&lt;any&gt;(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> refreshCanvas = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> canvas = canvasRef.current;</span><br><span class="line">    <span class="keyword">if</span> (canvas &amp;&amp; canvas.getContext) &#123;</span><br><span class="line">      <span class="keyword">let</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">      ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        ctx.font = <span class="string">'80px Calibri'</span>; <span class="comment">//随机生成字体大小</span></span><br><span class="line">        ctx.fillStyle = <span class="string">`rgb(<span class="subst">$&#123;color[i].toString()&#125;</span>)`</span>; <span class="comment">//随机生成字体颜色        </span></span><br><span class="line">        <span class="keyword">let</span> x = canvas.width / (<span class="number">5</span>) * (i + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">let</span> y = canvas.height / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">let</span> deg = rotate[i];</span><br><span class="line">        <span class="comment">/**设置旋转角度和坐标原点**/</span></span><br><span class="line">        ctx.translate(x, y);</span><br><span class="line">        ctx.rotate(deg * <span class="built_in">Math</span>.PI / <span class="number">180</span>);</span><br><span class="line">        ctx.fillText(code[i], <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**恢复旋转角度和坐标原点**/</span></span><br><span class="line">        ctx.rotate(-deg * <span class="built_in">Math</span>.PI / <span class="number">180</span>);</span><br><span class="line">        ctx.translate(-x, -y);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**绘制干扰线**/</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        ctx.strokeStyle = getRandom(<span class="number">100</span>, <span class="number">255</span>, <span class="number">3</span>);</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.moveTo(getRandom(<span class="number">0</span>, canvas.width), getRandom(<span class="number">0</span>, canvas.height));</span><br><span class="line">        ctx.lineTo(getRandom(<span class="number">0</span>, canvas.width), getRandom(<span class="number">0</span>, canvas.height));</span><br><span class="line">        ctx.stroke();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**绘制干扰点**/</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; canvas.width / <span class="number">4</span>; i++) &#123;</span><br><span class="line">        ctx.fillStyle = getRandom(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.arc(getRandom(<span class="number">0</span>, canvas.width), getRandom(<span class="number">0</span>, canvas.height), <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">        ctx.fill();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    refreshCanvas();</span><br><span class="line">  &#125;, [code]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleRefresh = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setRotate(getRandom(<span class="number">15</span>, <span class="number">-15</span>, <span class="number">4</span>));</span><br><span class="line">    setColor([</span><br><span class="line">      getRandom(<span class="number">0</span>, <span class="number">255</span>, <span class="number">3</span>), getRandom(<span class="number">0</span>, <span class="number">255</span>, <span class="number">3</span>), getRandom(<span class="number">0</span>, <span class="number">255</span>, <span class="number">3</span>), getRandom(<span class="number">0</span>, <span class="number">255</span>, <span class="number">3</span>)</span><br><span class="line">    ]);</span><br><span class="line">    onRefresh &amp;&amp; onRefresh();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;styles.verify_code_wrap&#125;&gt;</span><br><span class="line">      &lt;canvas className=&#123;styles.canvas&#125; ref=&#123;canvasRef&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">      &lt;div</span><br><span class="line">        className=&#123;styles.refresh&#125;</span><br><span class="line">        onClick=&#123;() =&gt; &#123;</span><br><span class="line">          handleRefresh();</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        看不清？换一个</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VerifyCode;</span><br></pre></td></tr></table></figure>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.verify_code_wrap</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">11.73333vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.canvas</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">64%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.refresh</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">11.73333vw</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: top;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">6%</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#da2824</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="后端传图片"><a href="#后端传图片" class="headerlink" title="后端传图片"></a>后端传图片</h2><p>后端传图片指的是后端制作图片校验码，或者将以 base64 的方式传递给前端，或者以纯图片的方式传递。若为 base64 数据，前端部分仅需指定 img 的 src 值。若为纯图片，须使用原生接口刷新图片，如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> imgWrap = useRef&lt;HTMLDivElement&gt;(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> handleRefresh = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">    image.src = src;</span><br><span class="line">    imgWrap.current.replaceChild(image, imgWrap.current.firstChild);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div ref=&#123;imgWrap&#125;&gt;</span><br><span class="line">      &#123;validCodeData &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;src&#125;</span> /&gt;</span>&#125;</span></span><br><span class="line">      &lt;div</span><br><span class="line">        className=&#123;styles.refresh&#125;</span><br><span class="line">        onClick=&#123;() =&gt; &#123;</span><br><span class="line">          handleRefresh();</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        看不清？换一个</span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后端部分可参考 <a href="https://www.cnblogs.com/hxw6/p/10151766.html" target="_blank" rel="noopener">Java实现图片验证码</a>，结合 session 才能做完整校验。<a href="https://www.cnblogs.com/chengeping/p/10587587.html" target="_blank" rel="noopener">react中图片校验码实现以及new Buffer()使用方法</a> 描述了使用 reponseType = arraybuffer 接取数据再转成 base64 的方式，未及尝试。arraybuffer 可参考 <a href="https://blog.csdn.net/wkyseo/article/details/78232485" target="_blank" rel="noopener">深入理解xhr的responseType中blob和arrayBuffer</a>。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>guide</category>
      </categories>
      <tags>
        <tag>carrier</tag>
      </tags>
  </entry>
  <entry>
    <title>react fiber hooks钩子篇</title>
    <url>/2020/03/08/frontend/react16/react%20fiber%20hooks%E9%92%A9%E5%AD%90%E7%AF%87/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文浅述了 react hooks 的执行机制，但在 expirationTime 优先级处理、suspenseConfig 配置、side-effects 执行机制、useContext、useTransition、useResponder 等方面显得力有不逮，并且未采用图文描述的形式。个中错谬，仍需勘正。</p>
<p>react hooks 的使用可参考 <a href="https://zhuanlan.zhihu.com/p/106665408?from=singlemessage" target="_blank" rel="noopener">React Hooks的体系设计之一 - 分层</a>、<a href="https://segmentfault.com/a/1190000018253310" target="_blank" rel="noopener">react-hooks中的一些懵逼点</a> 等文章。</p>
<p><a href="https://www.jianshu.com/p/b9ac8fa849f1" target="_blank" rel="noopener">React Hooks 原理</a> 以探索性的方式推想了 hooks 机制的实现原理；<a href="https://juejin.im/post/5c99a75af265da60ef635898#heading-3" target="_blank" rel="noopener">[译] 深入 React Hook 系统的原理</a> 也能为理解 hooks 机制带来帮助。</p>
<h2 id="主流程"><a href="#主流程" class="headerlink" title="主流程"></a>主流程</h2><p>react hooks 在函数式组件的渲染函数内运行生效，其实现基于使用 <a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js#L346" target="_blank" rel="noopener">renderWithHooks</a> 封装渲染函数。在 renderWithHooks 运行过程中，通过感知组件的渲染阶段 —— mount 挂载、update 更新等，继而通过 ReactCurrentDispatcher 切换 useState 等函数的实现，以此在 mount 阶段构建 hook（包含初始状态、状态更新函数），或者在 update 阶段获取最新状态。</p>
<p>hook 以链表的形式存储在 workInProgressFiber.memoizedState 中。在首次渲染完成后，随着 workInProgressFiber 转化成新的 currentFiber，memoizedState 同样也被存入 currentFiber 中。再次渲染时，workInProgressFiber.memoizedState 会被重置为 null，因此基于 currentFiber.memoizedState 的值就可以区分 mount 挂载、update 更新阶段，以此切换 ReactCurrentDispatcher 实现，如 HooksDispatcherOnMount、HooksDispatcherOnUpdate。</p>
<p>以 useState 说明 hook 处理流程如下：</p>
<ol>
<li>首次渲染时调用 useState，基于 HooksDispatcherOnMount 走 mountState 处理流程，构建 hook 并获取初始状态，随后消费 state 进行渲染，结束 mount 流程</li>
<li>基于 hook 更新状态，在状态更新逻辑的尾部会调用 scheduleWork 启动 fiber 重绘流程</li>
<li>再次渲染时调用 useState，基于 HooksDispatcherOnUpdate 走 updateState 流程，获取并消费最新 state 进行渲染，结束 update 流程</li>
</ol>
<p>除了 mount 挂载、update 更新外，ReactCurrentDispatcher 另有两种实现态：为了避免 hook 在渲染函数外部执行，fiber reconciler 提供了 ContextOnlyDispatcher 实现；为了实现渲染函数内部当即更新 state，fiber reconciler 提供了 HooksDispatcherOnRerender 实现。逻辑上，渲染函数内部更新 state 使用 do-while 循环更新状态，这时 useState 调用将走 rerenderState 流程，且不会调用 scheduleWork（因为本身就在一个渲染流程中）；fiber reconciler 也限制了这种 state 更新方式的最大次数。</p>
<p>这里贴出 renderWithHooks 的删减版源码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderWithHooks</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  current: Fiber | null,<span class="regexp">//</span> current fiber</span></span></span><br><span class="line"><span class="function"><span class="params">  workInProgress: Fiber,<span class="regexp">//</span> work-in-progress fiber</span></span></span><br><span class="line"><span class="function"><span class="params">  Component: any,<span class="regexp">//</span> 函数组件的渲染函数</span></span></span><br><span class="line"><span class="function"><span class="params">  props: any,<span class="regexp">//</span> 渲染函数的参数 props</span></span></span><br><span class="line"><span class="function"><span class="params">  secondArg: any,<span class="regexp">//</span> 渲染函数的次参</span></span></span><br><span class="line"><span class="function"><span class="params">  nextRenderExpirationTime: ExpirationTime,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  renderExpirationTime = nextRenderExpirationTime;</span><br><span class="line">  <span class="comment">// 缓存当前处理中的 fiber。renderWithHooks 结束置为 null</span></span><br><span class="line">  currentlyRenderingFiber = workInProgress;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 函数体每次执行时重置 workInProgress.memoizedState，借以与 currentFiber.memoizedState 有差别</span></span><br><span class="line">  workInProgress.memoizedState = <span class="literal">null</span>;</span><br><span class="line">  workInProgress.updateQueue = <span class="literal">null</span>;</span><br><span class="line">  workInProgress.expirationTime = NoWork;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 currentFiber.memoizedState 区分 mount、update 阶段，使用不同的 ReactCurrentDispatcher 实现</span></span><br><span class="line">  <span class="comment">// mount 阶段，HooksDispatcherOnMount 将促使 useState 调用走 mountState 流程</span></span><br><span class="line">  <span class="comment">// update 阶段，HooksDispatcherOnUpdate 将促使 useState 调用走 updateState 流程</span></span><br><span class="line">  ReactCurrentDispatcher.current =</span><br><span class="line">    current === <span class="literal">null</span> || current.memoizedState === <span class="literal">null</span></span><br><span class="line">      ? HooksDispatcherOnMount</span><br><span class="line">      : HooksDispatcherOnUpdate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用渲染函数，获取 hook 或最新状态，渲染内容</span></span><br><span class="line">  <span class="keyword">let</span> children = Component(props, secondArg);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在渲染函数体内更新 state，限制函数体内最大更新次数</span></span><br><span class="line">  <span class="keyword">if</span> (workInProgress.expirationTime === renderExpirationTime) &#123;</span><br><span class="line">    <span class="keyword">let</span> numberOfReRenders: number = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do-while 循环获取最新 state</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      workInProgress.expirationTime = NoWork;</span><br><span class="line"></span><br><span class="line">      invariant(</span><br><span class="line">        numberOfReRenders &lt; RE_RENDER_LIMIT,</span><br><span class="line">        <span class="string">'Too many re-renders. React limits the number of renders to prevent '</span> +</span><br><span class="line">          <span class="string">'an infinite loop.'</span>,</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      numberOfReRenders += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Start over from the beginning of the list</span></span><br><span class="line">      currentHook = <span class="literal">null</span>;</span><br><span class="line">      workInProgressHook = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      workInProgress.updateQueue = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// HooksDispatcherOnRerender 将促使 useState 调用走 rerenderState 流程</span></span><br><span class="line">      ReactCurrentDispatcher.current = __DEV__</span><br><span class="line">        ? HooksDispatcherOnRerenderInDEV</span><br><span class="line">        : HooksDispatcherOnRerender;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 调用渲染函数，获取最新状态，渲染内容</span></span><br><span class="line">      children = Component(props, secondArg);</span><br><span class="line">    &#125; <span class="keyword">while</span> (workInProgress.expirationTime === renderExpirationTime);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将 ReactCurrentDispatcher 置为 ContextOnlyDispatcher，避免 hook 在函数体外调用</span></span><br><span class="line">  ReactCurrentDispatcher.current = ContextOnlyDispatcher;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// didRenderTooFewHooks 为真，意为有些 hook 未执行完全，过早返回 state</span></span><br><span class="line">  <span class="keyword">const</span> didRenderTooFewHooks =</span><br><span class="line">    currentHook !== <span class="literal">null</span> &amp;&amp; currentHook.next !== <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  renderExpirationTime = NoWork;</span><br><span class="line">  currentlyRenderingFiber = (<span class="literal">null</span>: any);</span><br><span class="line"></span><br><span class="line">  currentHook = <span class="literal">null</span>;</span><br><span class="line">  workInProgressHook = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  didScheduleRenderPhaseUpdate = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  invariant(</span><br><span class="line">    !didRenderTooFewHooks,</span><br><span class="line">    <span class="string">'Rendered fewer hooks than expected. This may be caused by an accidental '</span> +</span><br><span class="line">      <span class="string">'early return statement.'</span>,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> children;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以看到，renderWithHooks 执行过程中处理的缓存变量：</p>
<ul>
<li>ReactCurrentDispatcher：hook 处理策略，其实现有 HooksDispatcherOnMount、HooksDispatcherOnUpdate、HooksDispatcherOnRerender、ContextOnlyDispatcher，上文已有描述。</li>
<li>currentlyRenderingFiber：缓存当前处理中的 fiber。renderWithHooks 执行中置为 workInProgressFiber，执行完置为 null。这样切分后的功能函数不必以传参的方式获取当前处理中的 fiber。</li>
<li>workInProgressHook：当前处理中的 hook。mount 阶段，通过 <a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js#L535" target="_blank" rel="noopener">mountWorkInProgressHook</a> 构造 workInProgressHook，并存入 workInProgressFiber.memoizedState；update 阶段，通过 <a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js#L556" target="_blank" rel="noopener">updateWorkInProgressHook</a> 从 workInProgressFiber.memoizedState 中获取或拷贝 currentHook 得来。</li>
<li>currentHook：其意义在于 update 阶段起始，workInProgressFiber.memoizedState 会被重置，currentFiber.memoizedState 保存了 hook 的完整链表，因此需要通过 currentHook 从 currentFiber.memoizedState 取出 hook 钩子，拷贝给 workInProgressHook，才有真正要处理的 hook。</li>
<li>renderExpirationTime：组件渲染的 deadline 时间，决定了更新是否需要被应用、还是被挂起。</li>
<li>didScheduleRenderPhaseUpdate：是否在 render 阶段更新 state。renderWithHooks 执行完置为 false，状态更新时判断触发更新的 fiber 是否与 currentlyRenderingFiber 等值，如等值，置为 true。当报错时，fiber reconciler 将基于 didScheduleRenderPhaseUpdate 丢弃各 hook 的 queue.pending，参考<a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js#L495" target="_blank" rel="noopener">文档</a>。</li>
</ul>
<h2 id="state-类钩子"><a href="#state-类钩子" class="headerlink" title="state 类钩子"></a>state 类钩子</h2><p>本节将 useState、useReducer 置为同类，因为 useState 期间所使用的各方法筑基在 useReducer 各方法之上。</p>
<p>hooks 中的状态变更与 redux 相仿，即采用 reducer = (prevState, action) =&gt; newState 计算 nextState。通常而言，新的状态计算产生后，fiber reconciler 会调用 scheduleWork 重新调度当前 fiber 的渲染任务。这是 state 变更的主流程。依循上文，这两种钩子的整体处理流程为：</p>
<ol>
<li>mount 阶段，通过 <a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js#L628" target="_blank" rel="noopener">mountReducer</a>、<a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js#L840" target="_blank" rel="noopener">mountState</a> 创建 hook</li>
<li>基于 hook.dispatch 更新状态</li>
<li>update 阶段，通过 <a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js#L655" target="_blank" rel="noopener">updateReducer</a>、<a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js#L865" target="_blank" rel="noopener">updateState</a> 获取最新的 state，其内部会调用 scheduleWork 重绘 fiber</li>
<li>特别的，若渲染函数内更新状态，通过 <a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js#L786" target="_blank" rel="noopener">rerenderReducer</a>、<a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js#L871" target="_blank" rel="noopener">rerenderState</a> 获取最新的 state，其内部不会触发 fiber 重绘</li>
</ol>
<p><a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js#L139" target="_blank" rel="noopener">hook</a> 为链表。其中，hook.baseState 属性用于存储更新前的 state；memoizedState 属性用于存储更新后的 state；queue 属性即一个 UpdateQueue 实例，包含状态变更逻辑、排队中的状态变更规则；baseQueue 就绪中的状态变更规则。baseQueue 按照优先级处理，比如有两组优先级更新，优先级高的会将 memoizedState 置为最新状态，优先级低的仍旧使用 baseState 作为初始状态。</p>
<p>hook.queue 作为一个 <a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js#L112" target="_blank" rel="noopener">UpdateQueue</a> 实例，其包含：lastRenderedState 属性存储上一个 state；lastRenderedReducer 属性存储 reducer 内部状态变更逻辑；dispatch 属性存储用户侧调用的状态变更接口；pending 属性存储排队中的状态变更规则。queue.dispatch 构建时会与 currentlyRenderingFiber 绑定，惟其如此，才能判断状态更新是否在当前 fiber 的 render 阶段，还是异步触发，以此将 didScheduleRenderPhaseUpdate 置为 true。</p>
<p>hook.baseQueue、hook.queue.pending 均为 <a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js#L102" target="_blank" rel="noopener">Update</a> 链表形式。update 包含：eagerReducer 缓存上一个 reducer；eagerState 缓存上一个状态，以便复用；action 状态变更的规则；expirationTime 过期时间，即 deadline 时间，未到该时间点，更新将不予执行；suspenseConfig 意为 suspense 配置。当使用 useReducer 时，reducer 在历次渲染函数中是可变的，如果 reducer 没有发生变更，fiber reconciler 将复用 update.eagerState。</p>
<p>useState、useReducer 中的 hook.dispatch 均基于 dispatchAction 构建，且在 fiber reconciler 内部就会装填参数 fiber、queue，用户侧只需传入 action。hook.dispatch 对外透出时作为 useState、useReducer 返回值中的第二个数组项，调回该方法即可更新状态。其处理流程为：</p>
<ol>
<li>基于 action 构建 update 实例，并将其添加到 hook.queue.pending 队列中</li>
<li>若在 render 阶段调用 hook.dispatch，更新 expirationTime，等待调度作业阶段获取 state；若否且 fiber 更新为同步任务，调用 reducer 计算最新状态</li>
<li>调用 scheduleWork 调度作业，执行重绘流程</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatchAction</span>&lt;<span class="title">S</span>, <span class="title">A</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  fiber: Fiber,<span class="regexp">//</span> 状态变更所作用的 fiber，用于推断是否在 render 阶段应用更新</span></span></span><br><span class="line"><span class="function"><span class="params">  queue: UpdateQueue&lt;S, A&gt;,<span class="regexp">//</span> hook.queue，用于获取状态变更逻辑</span></span></span><br><span class="line"><span class="function"><span class="params">  action: A,<span class="regexp">//</span> 用户侧传入的状态变更规则 action</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> currentTime = requestCurrentTimeForUpdate();</span><br><span class="line">  <span class="keyword">const</span> suspenseConfig = requestCurrentSuspenseConfig();</span><br><span class="line">  <span class="keyword">const</span> expirationTime = computeExpirationForFiber(</span><br><span class="line">    currentTime,</span><br><span class="line">    fiber,</span><br><span class="line">    suspenseConfig,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构建 update 实例</span></span><br><span class="line">  <span class="keyword">const</span> update: Update&lt;S, A&gt; = &#123;</span><br><span class="line">    expirationTime,</span><br><span class="line">    suspenseConfig,</span><br><span class="line">    action,</span><br><span class="line">    eagerReducer: <span class="literal">null</span>,</span><br><span class="line">    eagerState: <span class="literal">null</span>,</span><br><span class="line">    next: (<span class="literal">null</span>: any),</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将 update 添加到 hook.queue.pending 中</span></span><br><span class="line">  <span class="keyword">const</span> pending = queue.pending;</span><br><span class="line">  <span class="keyword">if</span> (pending === <span class="literal">null</span>) &#123;</span><br><span class="line">    update.next = update;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    update.next = pending.next;</span><br><span class="line">    pending.next = update;</span><br><span class="line">  &#125;</span><br><span class="line">  queue.pending = update;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> alternate = fiber.alternate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 推断是否在 render 阶段应用更新（调用 hook.dispatch）</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    fiber === currentlyRenderingFiber ||</span><br><span class="line">    (alternate !== <span class="literal">null</span> &amp;&amp; alternate === currentlyRenderingFiber)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// This is a render phase update. Stash it in a lazily-created map of</span></span><br><span class="line">    <span class="comment">// queue -&gt; linked list of updates. After this render pass, we'll restart</span></span><br><span class="line">    <span class="comment">// and apply the stashed updates on top of the work-in-progress hook.</span></span><br><span class="line">    didScheduleRenderPhaseUpdate = <span class="literal">true</span>;</span><br><span class="line">    update.expirationTime = renderExpirationTime;</span><br><span class="line">    currentlyRenderingFiber.expirationTime = renderExpirationTime;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// fiber.expirationTime 为 NoWork 时，采用同步更新处理</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      fiber.expirationTime === NoWork &amp;&amp;</span><br><span class="line">      (alternate === <span class="literal">null</span> || alternate.expirationTime === NoWork)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// 应用 queue.lastRenderedReducer 变更状态，并将变更结果存入 update</span></span><br><span class="line">      <span class="comment">// 若状态未变更，直接退出</span></span><br><span class="line">      <span class="keyword">const</span> lastRenderedReducer = queue.lastRenderedReducer;</span><br><span class="line">      <span class="keyword">if</span> (lastRenderedReducer !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> prevDispatcher;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> currentState: S = (queue.lastRenderedState: any);</span><br><span class="line">          <span class="keyword">const</span> eagerState = lastRenderedReducer(currentState, action);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// reducer 调用后才会赋值 update.eagerReducer、update.eagerState</span></span><br><span class="line">          update.eagerReducer = lastRenderedReducer;</span><br><span class="line">          update.eagerState = eagerState;</span><br><span class="line">          <span class="keyword">if</span> (is(eagerState, currentState)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="comment">// Suppress the error. It will throw again in the render phase.</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调度 fiber 的渲染任务</span></span><br><span class="line">    scheduleWork(fiber, expirationTime);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为 hook.dispatch 会调度一些异步更新，对于这些异步更新，state 变更在 updateReducer 函数中处理。updateReducer 的处理流程为：</p>
<ol>
<li>将 hook.queue.pend 排队更新任务队列添加到 hook.baseQueue 就绪更新任务队列中</li>
<li>执行 hook.baseQueue 中优先级足够的更新或复用 hook.dispatch 获得的更新状态</li>
<li>优先级不够的 update 任务等待下次调度作业处理</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateReducer</span>&lt;<span class="title">S</span>, <span class="title">I</span>, <span class="title">A</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  reducer: (S, A</span>) =&gt; <span class="title">S</span>,</span></span><br><span class="line"><span class="function">  <span class="title">initialArg</span>: <span class="title">I</span>,</span></span><br><span class="line"><span class="function">  <span class="title">init</span>?: <span class="title">I</span> =&gt; <span class="title">S</span>,</span></span><br><span class="line">): [S, Dispatch&lt;A&gt;] &#123;</span><br><span class="line">  <span class="keyword">const</span> hook = updateWorkInProgressHook();</span><br><span class="line">  <span class="keyword">const</span> queue = hook.queue;</span><br><span class="line">  invariant(</span><br><span class="line">    queue !== <span class="literal">null</span>,</span><br><span class="line">    <span class="string">'Should have a queue. This is likely a bug in React. Please file an issue.'</span>,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  queue.lastRenderedReducer = reducer;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> current: Hook = (currentHook: any);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// fiber 渲染后，尚未执行完成 update 更新，存于 currentFiber</span></span><br><span class="line">  <span class="keyword">let</span> baseQueue = current.baseQueue;</span><br><span class="line">  <span class="comment">// 排队中的 update 更新，存于 workInProgressFiber</span></span><br><span class="line">  <span class="keyword">let</span> pendingQueue = queue.pending;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将排队中的 update 更新添加到 baseQueue</span></span><br><span class="line">  <span class="keyword">if</span> (pendingQueue !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (baseQueue !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> baseFirst = baseQueue.next;</span><br><span class="line">      <span class="keyword">let</span> pendingFirst = pendingQueue.next;</span><br><span class="line">      baseQueue.next = pendingFirst;</span><br><span class="line">      pendingQueue.next = baseFirst;<span class="comment">// pending 队列尾节点添加 baseFirst</span></span><br><span class="line">    &#125;</span><br><span class="line">    current.baseQueue = baseQueue = pendingQueue;</span><br><span class="line">    queue.pending = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (baseQueue !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> first = baseQueue.next;</span><br><span class="line">    <span class="keyword">let</span> newState = current.baseState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> newBaseState = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> newBaseQueueFirst = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> newBaseQueueLast = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> update = first;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> updateExpirationTime = update.expirationTime;</span><br><span class="line">      <span class="comment">// update 优先级不足，将其存入 newBaseQueueList 等待更新</span></span><br><span class="line">      <span class="keyword">if</span> (updateExpirationTime &lt; renderExpirationTime) &#123;</span><br><span class="line">        <span class="keyword">const</span> clone: Update&lt;S, A&gt; = &#123;</span><br><span class="line">          expirationTime: update.expirationTime,</span><br><span class="line">          suspenseConfig: update.suspenseConfig,</span><br><span class="line">          action: update.action,</span><br><span class="line">          eagerReducer: update.eagerReducer,</span><br><span class="line">          eagerState: update.eagerState,</span><br><span class="line">          next: (<span class="literal">null</span>: any),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">if</span> (newBaseQueueLast === <span class="literal">null</span>) &#123;</span><br><span class="line">          newBaseQueueFirst = newBaseQueueLast = clone;</span><br><span class="line">          newBaseState = newState;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          newBaseQueueLast = newBaseQueueLast.next = clone;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Update the remaining priority in the queue.</span></span><br><span class="line">        <span class="keyword">if</span> (updateExpirationTime &gt; currentlyRenderingFiber.expirationTime) &#123;</span><br><span class="line">          currentlyRenderingFiber.expirationTime = updateExpirationTime;</span><br><span class="line">          markUnprocessedUpdateTime(updateExpirationTime);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// This update does have sufficient priority.</span></span><br><span class="line">        <span class="comment">// 同 UpdateQueue，当优先级高的 update 任务在优先级低的 update 任务后</span></span><br><span class="line">        <span class="comment">// 添加到 newBaseQueueList 中，更新处理会执行多次</span></span><br><span class="line">        <span class="keyword">if</span> (newBaseQueueLast !== <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> clone: Update&lt;S, A&gt; = &#123;</span><br><span class="line">            expirationTime: Sync, <span class="comment">// This update is going to be committed so we never want uncommit it.</span></span><br><span class="line">            suspenseConfig: update.suspenseConfig,</span><br><span class="line">            action: update.action,</span><br><span class="line">            eagerReducer: update.eagerReducer,</span><br><span class="line">            eagerState: update.eagerState,</span><br><span class="line">            next: (<span class="literal">null</span>: any),</span><br><span class="line">          &#125;;</span><br><span class="line">          newBaseQueueLast = newBaseQueueLast.next = clone;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Mark the event time of this update as relevant to this render pass.</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> This should ideally use the true event time of this update rather than</span></span><br><span class="line">        <span class="comment">// its priority which is a derived and not reverseable value.</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> We should skip this update if it was already committed but currently</span></span><br><span class="line">        <span class="comment">// we have no way of detecting the difference between a committed and suspended</span></span><br><span class="line">        <span class="comment">// update here.</span></span><br><span class="line">        markRenderEventTimeAndConfig(</span><br><span class="line">          updateExpirationTime,</span><br><span class="line">          update.suspenseConfig,</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// hook.dispatch 变更状态后再执行组件的渲染函数</span></span><br><span class="line">        <span class="comment">// 若 reducer 未变更，复用之前的状态 update.eagerState</span></span><br><span class="line">        <span class="comment">// 若 reducer 变更，使用 reducer 计算最新的状态</span></span><br><span class="line">        <span class="keyword">if</span> (update.eagerReducer === reducer) &#123;</span><br><span class="line">          newState = ((update.eagerState: any): S);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> action = update.action;</span><br><span class="line">          newState = reducer(newState, action);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      update = update.next;</span><br><span class="line">    &#125; <span class="keyword">while</span> (update !== <span class="literal">null</span> &amp;&amp; update !== first);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newBaseQueueLast === <span class="literal">null</span>) &#123;</span><br><span class="line">      newBaseState = newState;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      newBaseQueueLast.next = (newBaseQueueFirst: any);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!is(newState, hook.memoizedState)) &#123;</span><br><span class="line">      markWorkInProgressReceivedUpdate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hook.memoizedState = newState;</span><br><span class="line">    hook.baseState = newBaseState;</span><br><span class="line">    hook.baseQueue = newBaseQueueLast;</span><br><span class="line"></span><br><span class="line">    queue.lastRenderedState = newState;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dispatch: Dispatch&lt;A&gt; = (queue.dispatch: any);</span><br><span class="line">  <span class="keyword">return</span> [hook.memoizedState, dispatch];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="effect-类钩子"><a href="#effect-类钩子" class="headerlink" title="effect 类钩子"></a>effect 类钩子</h2><p>本节将 useEffect、useLayoutEffect、useImperativeHandle、useDeferredValue 置为同类。它们都基于 <a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberHooks.js#L147" target="_blank" rel="noopener">Effect</a> 数据结构。其包含：tag 指 side-effects 处理类型；create 指 side-effects 处理函数，在 commit 阶段执行，其返回值构成 effect.destroy（组件销毁时执行）；deps 指 side-effects 处理依赖。无论在 mount 还是 update 阶段，effect 类钩子的表现都是将 lastEffect 存入 workInProgressFiber.updateQueue，等待在 commit 阶段被执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mountEffectImpl</span>(<span class="params">fiberEffectTag, hookEffectTag, create, deps</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> hook = mountWorkInProgressHook();<span class="comment">// 构建 hook</span></span><br><span class="line">  <span class="keyword">const</span> nextDeps = deps === <span class="literal">undefined</span> ? <span class="literal">null</span> : deps;</span><br><span class="line">  currentlyRenderingFiber.effectTag |= fiberEffectTag;</span><br><span class="line">  <span class="comment">// pushEffect 构建 effect，并将其以 &#123; lastEffect &#125; 形式存入 workInProgressFiber.updateQueue 中</span></span><br><span class="line">  hook.memoizedState = pushEffect(</span><br><span class="line">    HookHasEffect | hookEffectTag,</span><br><span class="line">    create,</span><br><span class="line">    <span class="literal">undefined</span>,</span><br><span class="line">    nextDeps,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateEffectImpl</span>(<span class="params">fiberEffectTag, hookEffectTag, create, deps</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> hook = updateWorkInProgressHook();</span><br><span class="line">  <span class="keyword">const</span> nextDeps = deps === <span class="literal">undefined</span> ? <span class="literal">null</span> : deps;</span><br><span class="line">  <span class="keyword">let</span> destroy = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 复用之前的 destory</span></span><br><span class="line">  <span class="keyword">if</span> (currentHook !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> prevEffect = currentHook.memoizedState;</span><br><span class="line">    destroy = prevEffect.destroy;</span><br><span class="line">    <span class="keyword">if</span> (nextDeps !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> prevDeps = prevEffect.deps;</span><br><span class="line">      <span class="keyword">if</span> (areHookInputsEqual(nextDeps, prevDeps)) &#123;</span><br><span class="line">        pushEffect(hookEffectTag, create, destroy, nextDeps);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  currentlyRenderingFiber.effectTag |= fiberEffectTag;</span><br><span class="line"></span><br><span class="line">  hook.memoizedState = pushEffect(</span><br><span class="line">    HookHasEffect | hookEffectTag,</span><br><span class="line">    create,</span><br><span class="line">    destroy,</span><br><span class="line">    nextDeps,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>useEffect、useLayoutEffect 的差别在于执行时机。useEffect 将 hookEffectTag 置为 HookPassive，意为等组件渲染完成后触发调用；useLayoutEffect 将 hookEffectTag 置为 HookLayout，它在计算节点样式后、页面刷新前执行。</p>
<p>useImperativeHandle 须结合 forwardRef 一起使用，用于设置父组件的 ref 引用。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>useRef 用于缓存数据，特殊之处在于缓存 ref 引用。<br>useMemo 通过函数计算缓存数据，每次 deps 变更时会重新计算。<br>useCallback 用于缓存函数，每次 deps 变更时会重新计算。<br>useContext 读取祖先组件构建的上下文。<br>useTransition 用于延迟处理，参看 <a href="http://www.ayqy.net/blog/react-usetransition/" target="_blank" rel="noopener">React useTransition</a>。内部处理结合 runWithPriority、ReactCurrentBatchConfig.suspense 机制。<br>useDeferredValue 用于延迟获取数据（引用形式更新）。内部处理使用 ReactCurrentBatchConfig.suspense 机制<br>useResponder 响应式处理。</p>
<img src="/2020/03/08/frontend/react16/react%20fiber%20hooks钩子篇/hooks.png">
]]></content>
      <categories>
        <category>frontend</category>
        <category>react</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>react fiber 类组件状态更新篇</title>
    <url>/2020/03/04/frontend/react16/react%20fiber%20%E7%B1%BB%E7%BB%84%E4%BB%B6%E7%8A%B6%E6%80%81%E6%9B%B4%E6%96%B0%E7%AF%87/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文仅在局部层面上解释类组件的状态更新机制，并没有对函数组件的 hooks、fiber 优先级等作说明。</p>
<h2 id="Update-及-UpdateQueue"><a href="#Update-及-UpdateQueue" class="headerlink" title="Update 及 UpdateQueue"></a>Update 及 UpdateQueue</h2><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p>fiber reconciler 将 fiber 的状态更新抽象为 Update 单向链表：</p>
<ul>
<li>tag：更新类型，UpdateState、ReplaceState、ForceUpdate、CaptureUpdate</li>
<li>payload：状态变更函数或新状态本身</li>
<li>callback：回调，作用于 fiber.effectTag，并将 callback 作为 side-effects 回调</li>
<li>expirationTime：deadline 时间，未到该时间点，不予更新</li>
<li>suspenseConfig：suspense 配置</li>
<li>next：指向下一个 Update</li>
<li>priority：仅限于 dev 环境</li>
</ul>
<p>createUpdate 函数用于创建 Update。getStateFromUpdate 函数用于通过 Update 获取新的 fiber 状态，其处理方式基于 tag 类型。如 tag 为 UpdateState 时，getStateFromUpdate 将取用更新前的 state 值，并混入 payload 返回值或 payload 本身，作为新的 state 值返回。“payload 返回值”指的是 payload 本身是一个函数，它会以组件实例作为上下文，并以 prevState、nextProps 作为参数。getStateFromUpdate 依循 tag 值的处理机制如下：</p>
<ul>
<li>UpdateState：基于 prevState 以及 payload 增量更新</li>
<li>ReplaceState：基于 payload 全量更新</li>
<li>ForceUpdate：state 值依旧取 prevState，同时 hasForceUpdate 会被置为 true。</li>
<li>CaptureUpdate：将 fiber.effectTag 置为 </li>
</ul>
<p>我们可以看到，虽然 Update 表现为链表形式，可以处理多个 state 更新作业，但是 getStateFromUpdate 与 fiber 任务的优先级、side-effects 机制均无关联。</p>
<h3 id="UpdateQueue"><a href="#UpdateQueue" class="headerlink" title="UpdateQueue"></a>UpdateQueue</h3><p>如<a href="https://zhuanlan.zhihu.com/p/108477707" target="_blank" rel="noopener">react fiber 搜罗整理篇</a>提到的，render 阶段的 state 更新作业可以被丢弃。在实现上，fiber reconciler 使用 UpdateQueue 存储 Update 更新队列。更新队列有两条，baseQueue 执行中的更新队列，pendingQueue（即 shared.pending）待执行的更新队列。因为 Update 表现为环状单向链表，baseQueue、pendingQueue 均存储单向链表的尾节点。丢弃更新作业的实现在于，将 pendingQueue 复制给 baseQueue，丢弃之前的 baseQueue（current fiber 和 work-in-progress fiber 均会重置 baseQueue）。UpdateQueue 的数据结构如下：</p>
<ul>
<li>baseState：先前的状态，作为 payload 函数的 prevState 参数</li>
<li>baseQueue：存储执行中的更新任务 Update 队列，尾节点存储形式</li>
<li>shared：以 pending 属性存储待执行的更新任务 Update 队列，尾节点存储形式</li>
<li>effects：side-effects 队列，commit 阶段执行</li>
</ul>
<p>fiber reconciler 会在挂载组件时调用 initializeUpdateQueue 函数初始化 fiber 节点的 updateQueue 队列。只有挂载的组件才会有有效的状态更新，卸载的组件没必要使用 updateQueue 属性。enqueueUpdate 函数将 update 添加到 pendingQueue 队列中，典型如类组件在 setState 方法调用期间将 update 添加到 pendingQueue 中。</p>
<p>processUpdateQueue 函数用于应用 Update 队列完成状态更新。其流程如：</p>
<ol>
<li>丢失原先的 baseQueue，将 pendingQueue 复制给 baseQueue，作为执行中的 Update 队列。</li>
<li>启用 while 循环处理 Update 队列。如优先级足够，获取最新的状态值；如不够，添加到 newBaseQueue 队列，等待下次处理。至于为什么要使用 while 循环？是因为函数式组件可能会同步使用多个 useState 更新状态。特殊的，对于优先级不足的任务，其所处理的 prevState 是前一个任务更新后的状态值，如官方注释所示；当 baseQueue 已清空，while 循环会继续遍历 pendingQueue 并应用更新。</li>
<li>while 循环结束后，如 newBaseQueue 队列非空，将其作为新的 baseQueue 以备更新；如为空，更新 baseState。</li>
<li>最后更新 work-in-progress fiber 的 memoizedState 等属性。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processUpdateQueue</span>&lt;<span class="title">State</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  workInProgress: Fiber,</span></span></span><br><span class="line"><span class="function"><span class="params">  props: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  instance: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  renderExpirationTime: ExpirationTime,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> queue: UpdateQueue&lt;State&gt; = (workInProgress.updateQueue: any);</span><br><span class="line">  hasForceUpdate = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 丢弃原先的更新任务 baseQueue，将 pendingQueue 复制给 baseQueue</span></span><br><span class="line">  <span class="keyword">let</span> baseQueue = queue.baseQueue;</span><br><span class="line">  <span class="keyword">let</span> pendingQueue = queue.shared.pending;</span><br><span class="line">  <span class="keyword">if</span> (pendingQueue !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (baseQueue !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> baseFirst = baseQueue.next;</span><br><span class="line">      <span class="keyword">let</span> pendingFirst = pendingQueue.next;</span><br><span class="line">      baseQueue.next = pendingFirst;</span><br><span class="line">      pendingQueue.next = baseFirst;</span><br><span class="line">    &#125;</span><br><span class="line">    baseQueue = pendingQueue;</span><br><span class="line">    queue.shared.pending = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">const</span> current = workInProgress.alternate;</span><br><span class="line">    <span class="keyword">if</span> (current !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> currentQueue = current.updateQueue;</span><br><span class="line">      <span class="keyword">if</span> (currentQueue !== <span class="literal">null</span>) &#123;</span><br><span class="line">        currentQueue.baseQueue = pendingQueue;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// These values may change as we process the queue.</span></span><br><span class="line">  <span class="keyword">if</span> (baseQueue !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> first = baseQueue.next;</span><br><span class="line">    <span class="keyword">let</span> newState = queue.baseState;</span><br><span class="line">    <span class="keyword">let</span> newExpirationTime = NoWork;</span><br><span class="line">    <span class="keyword">let</span> newBaseState = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> newBaseQueueFirst = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> newBaseQueueLast = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (first !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> update = first;</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 优先级不足，将 update 添加到 newBaseQueue 队列中</span></span><br><span class="line">        <span class="comment">// newBaseState 更新为前一个 update 任务的结果</span></span><br><span class="line">        <span class="keyword">const</span> updateExpirationTime = update.expirationTime;</span><br><span class="line">        <span class="keyword">if</span> (updateExpirationTime &lt; renderExpirationTime) &#123;</span><br><span class="line">          <span class="keyword">const</span> clone: Update&lt;State&gt; = &#123;</span><br><span class="line">            expirationTime: update.expirationTime,</span><br><span class="line">            suspenseConfig: update.suspenseConfig,</span><br><span class="line">            tag: update.tag,</span><br><span class="line">            payload: update.payload,</span><br><span class="line">            callback: update.callback,</span><br><span class="line">            next: (<span class="literal">null</span>: any),</span><br><span class="line">          &#125;;</span><br><span class="line">          <span class="keyword">if</span> (newBaseQueueLast === <span class="literal">null</span>) &#123;</span><br><span class="line">            newBaseQueueFirst = newBaseQueueLast = clone;</span><br><span class="line">            newBaseState = newState;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newBaseQueueLast = newBaseQueueLast.next = clone;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (updateExpirationTime &gt; newExpirationTime) &#123;</span><br><span class="line">            newExpirationTime = updateExpirationTime;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果 update 在优先级不足的 update 之后，将其拷贝到 newBaseQueue 队列中</span></span><br><span class="line">          <span class="keyword">if</span> (newBaseQueueLast !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> clone: Update&lt;State&gt; = &#123;</span><br><span class="line">              expirationTime: Sync, <span class="comment">// This update is going to be committed so we never want uncommit it.</span></span><br><span class="line">              suspenseConfig: update.suspenseConfig,</span><br><span class="line">              tag: update.tag,</span><br><span class="line">              payload: update.payload,</span><br><span class="line">              callback: update.callback,</span><br><span class="line">              next: (<span class="literal">null</span>: any),</span><br><span class="line">            &#125;;</span><br><span class="line">            newBaseQueueLast = newBaseQueueLast.next = clone;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// Mark the event time of this update as relevant to this render pass.</span></span><br><span class="line">          <span class="comment">// <span class="doctag">TODO:</span> This should ideally use the true event time of this update rather than</span></span><br><span class="line">          <span class="comment">// its priority which is a derived and not reverseable value.</span></span><br><span class="line">          <span class="comment">// <span class="doctag">TODO:</span> We should skip this update if it was already committed but currently</span></span><br><span class="line">          <span class="comment">// we have no way of detecting the difference between a committed and suspended</span></span><br><span class="line">          <span class="comment">// update here.</span></span><br><span class="line">          markRenderEventTimeAndConfig(</span><br><span class="line">            updateExpirationTime,</span><br><span class="line">            update.suspenseConfig,</span><br><span class="line">          );</span><br><span class="line">          newState = getStateFromUpdate(</span><br><span class="line">            workInProgress,</span><br><span class="line">            queue,</span><br><span class="line">            update,</span><br><span class="line">            newState,</span><br><span class="line">            props,</span><br><span class="line">            instance,</span><br><span class="line">          );</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// 包含 callback 回调，更新 fiber.effectTag、baseQueue.effects</span></span><br><span class="line">          <span class="keyword">const</span> callback = update.callback;</span><br><span class="line">          <span class="keyword">if</span> (callback !== <span class="literal">null</span>) &#123;</span><br><span class="line">            workInProgress.effectTag |= Callback;</span><br><span class="line">            <span class="keyword">let</span> effects = queue.effects;</span><br><span class="line">            <span class="keyword">if</span> (effects === <span class="literal">null</span>) &#123;</span><br><span class="line">              queue.effects = [update];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              effects.push(update);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        update = update.next;</span><br><span class="line">        <span class="keyword">if</span> (update === <span class="literal">null</span> || update === first) &#123;</span><br><span class="line">          pendingQueue = queue.shared.pending;</span><br><span class="line">          <span class="keyword">if</span> (pendingQueue === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// An update was scheduled from inside a reducer. Add the new</span></span><br><span class="line">            <span class="comment">// pending updates to the end of the list and keep processing.</span></span><br><span class="line">            update = baseQueue.next = pendingQueue.next;</span><br><span class="line">            pendingQueue.next = first;</span><br><span class="line">            queue.baseQueue = baseQueue = pendingQueue;</span><br><span class="line">            queue.shared.pending = <span class="literal">null</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果没有优先级不足的 Update，更新 baseState</span></span><br><span class="line">    <span class="keyword">if</span> (newBaseQueueLast === <span class="literal">null</span>) &#123;</span><br><span class="line">      newBaseState = newState;</span><br><span class="line">    <span class="comment">// 如果有优先级不足的 Update，使这些 Update 首尾相连</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      newBaseQueueLast.next = (newBaseQueueFirst: any);</span><br><span class="line">    &#125;</span><br><span class="line">    queue.baseState = ((newBaseState: any): State);<span class="comment">// 最新状态</span></span><br><span class="line">    queue.baseQueue = newBaseQueueLast;<span class="comment">// 优先级不足的 update 队列</span></span><br><span class="line">    <span class="comment">// Set the remaining expiration time to be whatever is remaining in the queue.</span></span><br><span class="line">    <span class="comment">// This should be fine because the only two other things that contribute to</span></span><br><span class="line">    <span class="comment">// expiration time are props and context. We're already in the middle of the</span></span><br><span class="line">    <span class="comment">// begin phase by the time we start processing the queue, so we've already</span></span><br><span class="line">    <span class="comment">// dealt with the props. Context in components that specify</span></span><br><span class="line">    <span class="comment">// shouldComponentUpdate is tricky; but we'll have to account for</span></span><br><span class="line">    <span class="comment">// that regardless.</span></span><br><span class="line">    markUnprocessedUpdateTime(newExpirationTime);</span><br><span class="line">    workInProgress.expirationTime = newExpirationTime;</span><br><span class="line">    workInProgress.memoizedState = newState;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="类组件状态更新流程"><a href="#类组件状态更新流程" class="headerlink" title="类组件状态更新流程"></a>类组件状态更新流程</h2><p>类组件状态更新按如下 4 种场景处理：</p>
<ol>
<li>当组件挂载时，通过 initializeUpdateQueue 函数初始化 updateQueue 队列。</li>
<li>当 state 变更或强制渲染时，通过 enqueueUpdate 函数将 update 添加到 pendingQueue 队列。</li>
<li>在 render 阶段，cloneUpdateQueue 函数能把 current fiber 中的 updateQueue 复制给 work-in-progress fiber。这样就如官方注释所说，current fiber 和 work-in-progress 会持有相同的 updateQueue。cloneUpdateQueue 函数执行后，就会调用 processUpdateQueue 获取最新状态。</li>
<li>在 commit 阶段，通过 commitUpdateQueue 函数执行 side-effects 回调。</li>
</ol>
<p>其中，render 阶段和 commit 阶段均通过 scheduleWork（即 scheduleUpdateOnFiber） 启动。这里仅简要说明 scheduleWork 的内部表现：</p>
<ol>
<li>使用 <a href="https://zhuanlan.zhihu.com/p/110161396" target="_blank" rel="noopener">react scheduler 再解析篇</a>提到的 unstable_scheduleCallback 调度任务，以整个渲染流程作为单个任务（表现为 performSyncWorkOnRoot 或 performConcurrentWorkOnRoot，内容包含<a href="https://zhuanlan.zhihu.com/p/108477707" target="_blank" rel="noopener">react fiber 搜罗整理篇</a>提到的 work-loop 大循环、 commitRootImpl 提交流程。届时 state 更新在 performSyncWorkOnRoot 等函数中表现为 batch 批量任务）；</li>
<li>commitRootImpl 通过 Scheduler_runWithPriority 执行，因此在 scheduler 调度机制之外，不可打断。</li>
</ol>
<h3 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h3><p>当类组件通过 constructClassInstance 函数实例化期间，组件实例的 updater 属性即会赋值为 classComponentUpdater。组件实例的 setState 方法最终会触发 classComponentUpdater.enqueueSetState 方法的调用。其原理如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// react 包下 ReactBaseClasses.js 文件</span></span><br><span class="line">Component.prototype.setState = <span class="function"><span class="keyword">function</span>(<span class="params">partialState, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.updater.enqueueSetState(<span class="keyword">this</span>, partialState, callback, <span class="string">'setState'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// react-reconciler 包下 ReactFiberClassComponent.js 文件</span></span><br><span class="line"><span class="keyword">const</span> classComponentUpdater = &#123;</span><br><span class="line">  isMounted,</span><br><span class="line">  enqueueSetState(inst, payload, callback) &#123;</span><br><span class="line">    <span class="keyword">const</span> fiber = getInstance(inst);</span><br><span class="line">    <span class="keyword">const</span> currentTime = requestCurrentTimeForUpdate();</span><br><span class="line">    <span class="keyword">const</span> suspenseConfig = requestCurrentSuspenseConfig();</span><br><span class="line">    <span class="keyword">const</span> expirationTime = computeExpirationForFiber(</span><br><span class="line">      currentTime,</span><br><span class="line">      fiber,</span><br><span class="line">      suspenseConfig,</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">const</span> update = createUpdate(expirationTime, suspenseConfig);</span><br><span class="line">    update.payload = payload;</span><br><span class="line">    <span class="keyword">if</span> (callback !== <span class="literal">undefined</span> &amp;&amp; callback !== <span class="literal">null</span>) &#123;</span><br><span class="line">      update.callback = callback;</span><br><span class="line">    &#125;</span><br><span class="line">    enqueueUpdate(fiber, update);<span class="comment">// 添加到 pendingQueue</span></span><br><span class="line">    scheduleWork(fiber, expirationTime);<span class="comment">// 调度工作</span></span><br><span class="line">  &#125;,</span><br><span class="line">  enqueueReplaceState(inst, payload, callback) &#123;<span class="comment">/** **/</span>&#125;,</span><br><span class="line">  enqueueForceUpdate(inst, callback) &#123;<span class="comment">/** **/</span>&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="processUpdateQueue"><a href="#processUpdateQueue" class="headerlink" title="processUpdateQueue"></a>processUpdateQueue</h3><p>对于类组件，processUpdateQueue 会在以下场景中执行：</p>
<ul>
<li>mountClassInstance 函数挂载组件时，以及该函数执行到 componentWillMount 生命周期时</li>
<li>resumeMountClassInstance 函数复用组件时</li>
<li>updateClassInstance 函数更新组件时</li>
</ul>
<h2 id="错误捕获及-Suspense"><a href="#错误捕获及-Suspense" class="headerlink" title="错误捕获及 Suspense"></a>错误捕获及 Suspense</h2><p>在执行 work-loop 期间，fiber reconciler 会对捕获的错误进行处理，如<a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberWorkLoop.js#L1408" target="_blank" rel="noopener">这里</a>，或<a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberWorkLoop.js#L1464" target="_blank" rel="noopener">这里</a>。<a href="https://zhuanlan.zhihu.com/p/98518655" target="_blank" rel="noopener">React Suspense 源码解读</a>指出，react 先抛出错误，然后在 completeWork 执行完成之前捕获错误，并添加到 updateQueue 队列中。这里仅贴示 <a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberThrow.js#L177" target="_blank" rel="noopener">throwException 函数</a>所用到的 createClassErrorUpdate 代码，用于将错误处理制作成 update。据此可以发现，getDerivedStateFromError、componentDidCatch 生命周期均基于构建 update 的方式得到调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createClassErrorUpdate</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  fiber: Fiber,</span></span></span><br><span class="line"><span class="function"><span class="params">  errorInfo: CapturedValue&lt;mixed&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  expirationTime: ExpirationTime,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Update</span>&lt;<span class="title">mixed</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 通过 update 执行 getDerivedStateFromError</span></span><br><span class="line">  <span class="keyword">const</span> update = createUpdate(expirationTime, <span class="literal">null</span>);</span><br><span class="line">  update.tag = CaptureUpdate;</span><br><span class="line">  <span class="keyword">const</span> getDerivedStateFromError = fiber.type.getDerivedStateFromError;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> getDerivedStateFromError === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> error = errorInfo.value;</span><br><span class="line">    update.payload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      logError(fiber, errorInfo);</span><br><span class="line">      <span class="keyword">return</span> getDerivedStateFromError(error);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> inst = fiber.stateNode;</span><br><span class="line">  <span class="keyword">if</span> (inst !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> inst.componentDidCatch === <span class="string">'function'</span>) &#123;</span><br><span class="line">    update.callback = <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> getDerivedStateFromError !== <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="comment">// To preserve the preexisting retry behavior of error boundaries,</span></span><br><span class="line">        <span class="comment">// we keep track of which ones already failed during this batch.</span></span><br><span class="line">        <span class="comment">// This gets reset before we yield back to the browser.</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Warn in strict mode if getDerivedStateFromError is</span></span><br><span class="line">        <span class="comment">// not defined.</span></span><br><span class="line">        markLegacyErrorBoundaryAsFailed(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Only log here if componentDidCatch is the only error boundary method defined</span></span><br><span class="line">        logError(fiber, errorInfo);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 通过 side-effects 执行 componentDidCatch 生命周期</span></span><br><span class="line">      <span class="keyword">const</span> error = errorInfo.value;</span><br><span class="line">      <span class="keyword">const</span> stack = errorInfo.stack;</span><br><span class="line">      <span class="keyword">this</span>.componentDidCatch(error, &#123;</span><br><span class="line">        componentStack: stack !== <span class="literal">null</span> ? stack : <span class="string">''</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> update;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>特殊的，对于使用 React.Suspense 包裹的懒加载组件，fiber reconciler 会将 thenable 形式的懒加载函数抛出，以此进入错误处理；随后在 throwException 函数处理过程，thenable 会被添加到 updateQueue 队列中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readLazyComponentType</span>&lt;<span class="title">T</span>&gt;(<span class="params">lazyComponent: LazyComponent&lt;T&gt;</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  initializeLazyComponentType(lazyComponent);</span><br><span class="line">  <span class="keyword">if</span> (lazyComponent._status !== Resolved) &#123;</span><br><span class="line">    <span class="keyword">throw</span> lazyComponent._result;<span class="comment">// 即懒加载函数</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> lazyComponent._result;<span class="comment">// 懒加载成功或失败结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上，错误捕获及 Suspense 处理都是在 work-loop 循环抛出异常后，再行更新 updateQueue 队列。既然已经退出了 work-loop 循环，这时 updateQueue 队列就需要在下次重绘时执行。<a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberThrow.js#L275" target="_blank" rel="noopener">throwException 函数</a>注释部分指出，fiber reconciler 会通过 attachPingListener 函数重新 restart 渲染流程。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>react</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>js 事件循环</title>
    <url>/2020/03/01/frontend/architecture/js%20%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h2 id="事件循环基本"><a href="#事件循环基本" class="headerlink" title="事件循环基本"></a>事件循环基本</h2><p>js 是一门单线程非阻塞脚本语言。即便浏览器推出的 web worker 也只允许子线程承担计算任务，而不能操纵 dom 节点（因为主、子线程同时操纵 dom 会造成不一致）。</p>
<p>执行栈可用于解释 js 引擎对同步脚本的处理。即当函数首次被调用时，js 引擎就会为该过程创建执行上下文，并将该执行上下文压入执行栈中。执行上下文也称为执行环境，包含函数的私有作用域、父级作用域、参数、作用域中的变量以及 this 指向。当函数执行完毕后，js 引擎会在执行栈中销毁该执行上下文，并将执行栈定位到前一个执行上下文。执行上下文典型如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">executionContextObj = &#123;</span><br><span class="line">  scopeChain: &#123;<span class="comment">// 作用域链，对象形式，包含所有变量对象、所有父级执行上下文中的变量对象</span></span><br><span class="line">    <span class="comment">/* variableObject + all parent execution context's variableObject */</span> </span><br><span class="line">  &#125;,</span><br><span class="line">  variableObject: &#123;<span class="comment">// 变量对象，对象形式，包含函数形参、函数内部的变量以及函数声明(但不包含表达式)</span></span><br><span class="line">    <span class="comment">/* function arguments / parameters, inner variable and function declarations */</span> </span><br><span class="line">    <span class="built_in">arguments</span>: &#123;</span><br><span class="line">      <span class="number">0</span>: <span class="number">22</span>,<span class="comment">// 实参</span></span><br><span class="line">      length: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    realArg: <span class="number">22</span>,<span class="comment">// 调用期间获得的实参</span></span><br><span class="line">    afunction: pointer to <span class="function"><span class="keyword">function</span> <span class="title">afunction</span>(<span class="params"></span>),// 内部声明的函数，以指针形式引用</span></span><br><span class="line"><span class="function">    <span class="title">aVariable</span>: <span class="title">undefined</span>,// 内部变量 <span class="title">aVariable</span>，创建阶段声明上移，为 <span class="title">undefined</span></span></span><br><span class="line"><span class="function">    <span class="title">functionExp</span>: <span class="title">undefined</span>,// 内部以变量 <span class="title">functionExp</span> 声明的函数变量，创建阶段声明上移，为 <span class="title">undefined</span></span></span><br><span class="line"><span class="function">  &#125;,</span></span><br><span class="line"><span class="function">  <span class="title">this</span>: </span>&#123;&#125;<span class="comment">// this 关键字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>js 引擎对异步任务的处理则借助 callback queue 事件队列实现。即当主线程中的同步任务执行完毕时，js 引擎会去检查事件队列，并取出执行。异步任务有其优先级，在浏览器环境中，有 micro task 微任务、macro task 宏任务两类。微任务包含 Promise、MutaionObserver；宏任务包含 setTimeout、setInterval、setImmediate、requestAnimationFrame。浏览器先执行微任务，再执行宏任务。交互行为作为特殊的异步任务，通过收发消息的方式实现，详情可参考 <a href="https://www.cnblogs.com/xiaohuochai/p/8527618.html" target="_blank" rel="noopener">深入理解javascript中的事件循环event-loop</a>。</p>
<h2 id="node-中的事件循环"><a href="#node-中的事件循环" class="headerlink" title="node 中的事件循环"></a>node 中的事件循环</h2><p>在 node 环境中，node 使用 v8 引擎解释 js 脚本，然后使用 libuv 引擎处理事件循环以及其他异步行为。在启动阶段，node 就会初始化 event loop 事件循环。下图描绘了 node 处理事件循环的各阶段，每个阶段都有一个先进先出的回调队列待执行：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">   ┌───────────────────────────┐</span><br><span class="line">┌─&gt;│           timers          │</span><br><span class="line">│  └─────────────┬─────────────┘</span><br><span class="line">│  ┌─────────────┴─────────────┐</span><br><span class="line">│  │     pending callbacks     │</span><br><span class="line">│  └─────────────┬─────────────┘</span><br><span class="line">│  ┌─────────────┴─────────────┐</span><br><span class="line">│  │       idle, prepare       │</span><br><span class="line">│  └─────────────┬─────────────┘      ┌───────────────┐</span><br><span class="line">│  ┌─────────────┴─────────────┐      │   incoming:   │</span><br><span class="line">│  │           poll            │<span class="xml"><span class="tag">&lt;<span class="name">─────┤</span>  <span class="attr">connections</span>, │</span></span></span><br><span class="line"><span class="xml">│  └─────────────┬─────────────┘      │   data, etc.  │</span></span><br><span class="line"><span class="xml">│  ┌─────────────┴─────────────┐      └───────────────┘</span></span><br><span class="line"><span class="xml">│  │           check           │</span></span><br><span class="line"><span class="xml">│  └─────────────┬─────────────┘</span></span><br><span class="line"><span class="xml">│  ┌─────────────┴─────────────┐</span></span><br><span class="line"><span class="xml">└──┤      close callbacks      │</span></span><br><span class="line"><span class="xml">   └───────────────────────────┘</span></span><br></pre></td></tr></table></figure>
<ul>
<li>poll：I/O 事件完毕后，会进入 poll 阶段（同步模式会阻塞在 poll 阶段）。它首先会计算阻塞时间，然后执行 poll 队列，直到队列耗尽或超过阈值。然后检查脚本中是否有 setImmediate，如果有，进入 check 阶段。最后检查是否达到了定时器的指定时间，如果是，进入 timers 阶段。</li>
<li>check：执行 setImmediate 回调。其特殊意义在于，如果 poll 阶段队列为空，可以使用 setImmediate 使程序进入 check 阶段，而不至于阻塞在 poll 阶段。</li>
<li>close callbacks：调用如 socket.on(‘close’, …) 等回调。</li>
<li>timers：调用 setTimeout、setInterval 等回调。定时器通常会滞后于用户设定时间，因为它需要等待 timers 阶段之前的任务执行完成。技术上，定时器的执行时机由 poll 阶段控制。</li>
<li>pending callbacks：调用如某些系统操作（如TCP错误类型）的回调。</li>
<li>idle, prepare：node 内部使用。</li>
</ul>
<p>需注意，在非 I/O 循环中调用 setImmediate、setTimeout，两者的执行时机是不确定的；在 I/O 循环中，setImmediate 总是先于 setTimeout。</p>
<p>process.nextTick 在事件循环算法之外，它将在事件循环的任意阶段继续执行前得到调用。无限递归的 process.nextTick 有可能会饿死 I/O，无法使事件循环达到 loop 阶段。node 为什么将 process.nextTick 设计为当前操作之后、事件循环之前呢？其目的是这样设计能使同步执行的回调通过 process.nextTick 转化成异步执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同步脚本</span></span><br><span class="line"><span class="keyword">let</span> bar;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someAsyncApiCall</span>(<span class="params">callback</span>) </span>&#123; callback(); &#125;</span><br><span class="line"></span><br><span class="line">someAsyncApiCall(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'bar'</span>, bar); <span class="comment">// undefined</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">bar = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 借助 process.nextTick 实现异步</span></span><br><span class="line"><span class="keyword">let</span> bar;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someAsyncApiCall</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  process.nextTick(callback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">someAsyncApiCall(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'bar'</span>, bar); <span class="comment">// 1</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">bar = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/mqliutie/p/4422247.html" target="_blank" rel="noopener">JavaScript中执行环境和栈</a><br><a href="https://blog.csdn.net/qq_33572444/article/details/79106935" target="_blank" rel="noopener">详解JavaScript中的Event Loop（事件循环）机制</a><br><a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/" target="_blank" rel="noopener">The Node.js Event Loop, Timers, and process.nextTick()</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>architecture</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>react scheduler 再解析篇</title>
    <url>/2020/03/01/frontend/react16/react%20scheduler%20%E5%86%8D%E8%A7%A3%E6%9E%90%E7%AF%87/</url>
    <content><![CDATA[<p>顾名思义，scheduler 用于完成调度工作。</p>
<h2 id="主流程"><a href="#主流程" class="headerlink" title="主流程"></a>主流程</h2><h3 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h3><p>scheduler 使用 Heap 堆存放任务队列。每个任务在进入 Heap 堆前，会根据 sortIndex、id 属性进行优先级排序。它首先比较 sortIndex 值，值越小，优先级越高；其次以相同的规则比较 id（即比较任务的创建顺序）。依循优先级的高低，scheduler 采用位运算取中位节点的方式交换任务在 Heap 堆中的位置。push 函数用于将任务添加到 Heap 堆的尾端，并重新按优先级调整 Heap 堆。peek、pop 用于取出 Heap 堆中的首个任务。其中，pop 会从 Heap 堆中移除首个任务，并重新按优先级调整 Heap 堆；peek 不会移除。在使用上，peek 主要拣选 Heap 堆中的首个任务；若任务已执行或已取消，则使用 pop 移除。详情可参考 <a href="https://github.com/facebook/react/blob/v16.13.0/packages/scheduler/src/SchedulerMinHeap.js" target="_blank" rel="noopener">SchedulerMinHeap.js</a>。</p>
<p>scheduler 使用 Heap 堆机制构造了两个队列：taskQueue、timerQueue。taskQueue 存放将被处理的任务；timerQueue 存放延期处理的任务。可以推想的处理流程是：首先使用 peek 函数取出 taskQueue 中的任务并执行，完成后使用 pop 函数移除；在执行期间，检查当前时间是否满足 timerQueue 中任务的延期标准，若满足，将该任务移入 taskQueue，并从 timerQueue 中移除。任务由 timerQueue 流向 taskQueue 的过程由 <a href="https://github.com/facebook/react/blob/master/packages/scheduler/src/Scheduler.js#L81" target="_blank" rel="noopener">advanceTimers 函数</a> 完成。</p>
<h3 id="任务节点"><a href="#任务节点" class="headerlink" title="任务节点"></a>任务节点</h3><p>每个任务节点抽象为以下属性的集合：</p>
<ul>
<li>id：任务节点的序号，创建任务时自增 1</li>
<li>callback：任务函数执行内容</li>
<li>priorityLevel：任务的优先级。优先级按 ImmediatePriority、UserBlockingPriority、NormalPriority、LowPriority、IdlePriority 顺序依次越低</li>
<li>startTime：时间戳，任务预期执行时间，默认为当前时间，即同步任务。可通过 options.delay 设为异步延时任务</li>
<li>expirationTime：过期时间，scheduler 基于该值进行异步任务的调度。通过 options.timeout 设定或 priorityLevel 计算 timeout 值后，timeout 与 startTime 相加称为 expirationTime</li>
<li>sortIndex：默认值为 -1。对于异步延时任务，该值将赋为 expirationTime</li>
</ul>
<p>在这里，有必要先比较以下 startTime、expirationTime：startTime 是用户侧设定的预期执行时间；scheduler 会对交互行为、计算行为分派不同的优先级，这就没法基于 startTime 进行调度，而是要基于优先级进行调度。UserBlockingPriority 交互行为优先级高，expirationTime 以及任务的 sortIndex 属性相应也低。在同一个队列中，对于 startTime 相同的任务，scheduler 会率先处理 expirationTime 较低的任务（即优先级较高的任务）。expirationTime 的另一个作用是，作为任务的最后执行期限，即如果当前时间未到达任务的最后执行期限，那么任务就可以不被执行。</p>
<h3 id="任务运行流程"><a href="#任务运行流程" class="headerlink" title="任务运行流程"></a>任务运行流程</h3><p>创建任务的唯一接口为 <a href="https://github.com/facebook/react/blob/master/packages/scheduler/src/Scheduler.js#L295" target="_blank" rel="noopener">unstable_scheduleCallback(priorityLevel, callback, options) 函数</a>。任务分为两种，同步任务或异步延时任务。同步任务在 unstable_scheduleCallback 调用期间就会添加到 taskQueue 队列，且通过封装宿主环境 api 的 requestHostCallback 函数立即执行；异步延时任务会添加到 timerQueue 队列，且通过封装宿主环境 api 的 requestHostTimeout 函数延后执行。我们先按下 requestHostCallback、requestHostTimeout 宿主环境的封装接口不表，先以图示剖析一下 unstable_scheduleCallback 的执行流程：</p>
<img src="/2020/03/01/frontend/react16/react%20scheduler%20再解析篇/scheduler.png">
<p>在上图中，以 workLoop 方式循环调度 taskQueue 队列或以 handleTimeout 递归调度 timerQueue 队列这两种方式，只有一个在激活状态，也即 requestHostCallback、requestHostTimeout 只有一个在调用周期中。因为，taskQueue 队列调度完毕，会调用 requestHostTimeout 处理 timerQueue 队列；timerQueue 队列有一个任务进入 taskQueue，又会调用 requestHostCallback 处理 taskQueue 队列。</p>
<p>另外，workLoop 循环也使任务具有可并发执行的特性。任务若 <a href="https://github.com/facebook/react/blob/master/packages/scheduler/src/Scheduler.js#L185" target="_blank" rel="noopener">返回函数</a>，这个函数将作为 currentTask.callback 执行内容，即在 workLoop 循环中保证任务的回调被立即执行。</p>
<h2 id="任务的暂停、中止等"><a href="#任务的暂停、中止等" class="headerlink" title="任务的暂停、中止等"></a>任务的暂停、中止等</h2><p>我们再来看看封装宿主环境 api 的 requestHostCallback、requestHostTimeout。在浏览器环境中，react 通过 MessageChannel 发送消息的方式触发任务的真正执行，详情可参看 <a href="https://github.com/facebook/react/blob/master/packages/scheduler/src/forks/SchedulerHostConfig.default.js#L228" target="_blank" rel="noopener">requestHostCallback 函数</a> 的实现，效果是在渲染后执行任务。至于 requestHostTimeout，react 则使用 setTimeout 方法实现。</p>
<h3 id="任务的暂停与恢复"><a href="#任务的暂停与恢复" class="headerlink" title="任务的暂停与恢复"></a>任务的暂停与恢复</h3><p>需要指出的是，在单次 workLoop 循环中，如果 taskQueue 队列未被清空（比如任务被暂停了），react 会基于 MessageChannel 再次 <a href="https://github.com/facebook/react/blob/master/packages/scheduler/src/forks/SchedulerHostConfig.default.js#L208" target="_blank" rel="noopener">发送消息</a>，以处理 taskQueue 队列。为此，scheduler 对外提供 <a href="https://github.com/facebook/react/blob/master/packages/scheduler/src/Scheduler.js#L363" target="_blank" rel="noopener">unstable_pauseExecution</a>、<a href="https://github.com/facebook/react/blob/master/packages/scheduler/src/Scheduler.js#L367" target="_blank" rel="noopener">unstable_continueExecution</a> 接口用于暂停、恢复任务，这就是 <a href="/2020/02/22/react/react16%E6%BA%90%E7%A0%81/react%20fiber%20%E6%90%9C%E7%BD%97%E6%95%B4%E7%90%86%E7%AF%87/">react fiber 搜罗整理篇</a> 提到的任务暂停与恢复。</p>
<h3 id="任务的中止"><a href="#任务的中止" class="headerlink" title="任务的中止"></a>任务的中止</h3><p>至于任务的中止，scheduler 提供 <a href="https://github.com/facebook/react/blob/master/packages/scheduler/src/Scheduler.js#L375" target="_blank" rel="noopener">unstable_getFirstCallbackNode 函数</a> 用于获取 taskQueue 的首个任务，然后就可以使用 <a href="https://github.com/facebook/react/blob/master/packages/scheduler/src/Scheduler.js#L379" target="_blank" rel="noopener">unstable_cancelCallback 接口</a> 销毁任务了。</p>
<h3 id="避免任务长期工作"><a href="#避免任务长期工作" class="headerlink" title="避免任务长期工作"></a>避免任务长期工作</h3><p>为了避免工作任务长期占用主线程，react 使用帧率计算任务的 yieldInterval 最大工作时长。scheduler 允许使用 <a href="https://github.com/facebook/react/blob/master/packages/scheduler/src/forks/SchedulerHostConfig.default.js#L172" target="_blank" rel="noopener">forceFrameRate</a> 设置任务的最大工作时长。在任务执行开始时，scheduler 会基于任务的开始工作时间加 yieldInterval 计算任务的 deadline 暂停时间，一旦 workLoop 执行到 deadline 时间后，scheduler 会让出主线程以执行其他任务。判断任务运行是否达到 deadline，基于 <a href="https://github.com/facebook/react/blob/master/packages/scheduler/src/forks/SchedulerHostConfig.default.js#L164" target="_blank" rel="noopener">shouldYieldToHost 函数</a> 实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">workLoop</span>(<span class="params">hasTimeRemaining, initialTime</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> currentTime = initialTime;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (</span><br><span class="line">    currentTask !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">    !(enableSchedulerDebugging &amp;&amp; isSchedulerPaused)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      currentTask.expirationTime &gt; currentTime &amp;&amp;</span><br><span class="line">      (!hasTimeRemaining || shouldYieldToHost())<span class="comment">// 达到任务的最大运行时长，让出主线程</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// This currentTask hasn't expired, and we've reached the deadline.</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>scheduler 对外提供了 <a href="https://github.com/facebook/react/blob/master/packages/scheduler/src/Scheduler.js#L398" target="_blank" rel="noopener">unstable_shouldYield 接口</a> 用于判断是否用暂停当前任务的执行，其一在于新添加任务的优先级高于当前任务，其二在于当前任务已达到 deadline。届时就可以调用 unstable_pauseExecution 暂停 workloop 循环，执行高优先级任务或仅让出主线程。</p>
<h3 id="更改优先级"><a href="#更改优先级" class="headerlink" title="更改优先级"></a>更改优先级</h3><p>unstable_next、unstable_runWithPriority 接口会改写 currentPriorityLevel，而 fiber 任务的优先级又是通过 currentPriorityLevel 实现的，这样就会使 unstable_scheduleCallback 执行期间的任务被置为特定的优先级。效果可参考 <a href="https://blog.csdn.net/weixin_33896069/article/details/91472040" target="_blank" rel="noopener">[译] React 中的调度</a>。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>react</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>进程与线程踩点</title>
    <url>/2020/02/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇基于《现代操作系统》整理。虽然笔者也不甚理解，但是这篇总结可以为后续深入探究 node 进程、java 并发、react 调度算法打个桩，从中也确实增进了对进程、中断等的理解。</p>
<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><h3 id="进程概要"><a href="#进程概要" class="headerlink" title="进程概要"></a>进程概要</h3><p>单核 CPU 一瞬只能运行一个进程，因此需要通过多道程序设计实现多进程的伪并行，营造在 1 秒钟内有多个进程同时运行的错觉。<br>一个进程就是一个正在执行程序的实例，包含程序计数器、寄存器和变量的当前值。程序计数器用于存放指令，CPU 层面有物理程序计数器，以进程抽象的程序层面有逻辑程序计数器。程序运行时，它的逻辑程序计数器会被装入物理程序计数器中；当程序结束或暂停时，物理程序计数器会被保存在内存中该程序的逻辑程序计数器中。进程有程序、输入、输出及状态；多个进程可共享 CPU，通过调度算法实现进程间的切换。</p>
<h3 id="创建进程"><a href="#创建进程" class="headerlink" title="创建进程"></a>创建进程</h3><ul>
<li>UNIX 系统，已存在的进程执行 fork 系统调用创建一个与调用进程相同的副本进程。这两个进程拥有相同的内存映像、环境字符串和打开文件。当子进程执行 execve 等系统调用时，子进程的内存映像会被修改，随后运行一个新程序。在 fork 之后、execve 之前，子进程可以处理它的文件描述符，这样可以完成对标准输入文件、标准输出文件和标准错误文件的重定向。有关文件描述符，可参考 理解文件描述符。</li>
<li>Windows 系统，一个 Win32 函数调用 CreateProcess 创建进程，同时把程序装入进程。该调用的参数包含要执行的程序、输入给程序的命令行参数、各种安全属性、打开文件是否继承的控制位、优先级信息、窗口规格等。</li>
</ul>
<p>UNIX 中的父子进程会共享不可写内存，某些 UNIX 实现会允许子进程在写时 copy 父进程的内存。 Windows 中的父子进程一开始就会拥有不同的地址空间。</p>
<h3 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h3><ul>
<li>正常退出。UNIX 通过执行 exit 系统调用退出；Windows 通过执行 ExitProcess 退出。</li>
<li>出错退出，因为进程发现严重的错误而自愿退出。</li>
<li>严重错误，因为程序本身的错误而非自愿退出。</li>
<li>被其他进程杀死。UNIX 通过执行 kill 系统调用杀死其他进程；Windows 通过执行 TerminateProcess 系统调用杀死其他进程。两者都需要相当的权限。</li>
</ul>
<h3 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h3><ul>
<li>运行态（实际占用 CPU 运行中）</li>
<li>就绪态（可运行，等待 CPU 空闲）</li>
<li>阻塞态（除非外部事件触发，否则进程不能运行）</li>
</ul>
<p>进程间的切换、进程状态的变更由运行调度算法的进程调度程序完成。</p>
<h3 id="进程的实现"><a href="#进程的实现" class="headerlink" title="进程的实现"></a>进程的实现</h3><p>操作系统维护着一张进程表，它为每个进程分配一个进程表项。该表项包含程序计数器、堆栈指针、内存分配状态、打开文件的状态、账号、调度信息、以及进程切换操作所需的信息。</p>
<p>进程调度中与 I/O 相关的是中断服务。当磁盘中断发生时，中断硬件会将程序计数器、程序状态字、[寄存器]压入堆栈（保存到进程表中），计算机随即跳到中断向量所指示的地址，运行处理中断服务。当中断服务处理完成后，被中断的进程都会返回到中断前的状态。完整流程如下（保存寄存器值、设置堆栈指针等需要汇编语言实现）：</p>
<ol>
<li>硬件压入堆栈程序计数器等。</li>
<li>硬件从中断向量装入新的程序计数器。</li>
<li>汇编语言过程保存寄存器值。</li>
<li>汇编语言过程设置新的堆栈。</li>
<li>C中断服务历程运行（典型地读和缓冲输入）。</li>
<li>调度程序决定下一个将运行的进程。</li>
<li>C过程返回至汇编代码。</li>
<li>汇编语言过程开始运行新的当前进程。</li>
</ol>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="线程概要"><a href="#线程概要" class="headerlink" title="线程概要"></a>线程概要</h3><p>同一个应用程序的某些活动会随着时间推移进入阻塞态，这时将应用程序拆解成准并行运行的多个顺序线程，会使程序设计模型变得简单。线程可以共享同一个地址控件和所有可用数据，不必考虑单道程序设计时所需面对的中断、定时器和上下文切换；线程也远比进程更为轻量级，创建和销毁都比较容易；多线程面对大量 I/O 处理时有性能优势。</p>
<p>《现代操作系统》举例说明了多线程的优点：在字处理软件中，交互线程负责处理与用户的交互；格式化线程在后台默默进行格式化操作；磁盘备份线程实现自动保存功能。这样就避免了用户须等待格式化完成再进行其他处理的问题。这三个线程也能共享处理中的文件，而不像进程那样不能共享。在 web 服务器中，分派线程用于从网络中读取请求，并分发给工作线程。当请求到达时，分派线程会挑选一个阻塞的工作线程，提交该请求，通常是对该工作线程所配有的某个专门字写入消息指针。接着分派线程会唤醒工作线程，将它从阻塞态转为就绪态，以处理请求；等请求处理完成后，工作线程会重新进入阻塞态。在大量数据处理中，输入线程用于把数据读入缓冲区；处理线程用于处理数据，并将输出写入缓冲区；输出线程将结果写到磁盘上。</p>
<h4 id="三种处理模式"><a href="#三种处理模式" class="headerlink" title="三种处理模式"></a>三种处理模式</h4><ul>
<li>单线程：阻塞系统调用，便于程序设计，舍弃了性能。</li>
<li>多线程：阻塞系统调用，便于程序设计，通过并行改善了性能。</li>
<li>有限状态机：将这一程序转向 I/O 处理后，通过有限状态机机制保存状态，转而处理那一程序。当 I/O 处理完成后，通过信号或中断的形式唤醒这一程序，并装入状态。典型如 nodejs，借助中断实现非阻塞式调用。</li>
</ul>
<h4 id="进程与线程对比"><a href="#进程与线程对比" class="headerlink" title="进程与线程对比"></a>进程与线程对比</h4><p>进程的内容有地址空间、全局变量、打开文件、子进程、即将发生的定时器、信号处理程序、账号信息等属性。线程的内容有程序计数器、存放工作变量的寄存器、记录执行历史的堆栈（每一帧保存了已调用但未返回的过程）、状态等属性。进程的意义在于将资源分组后进行集中处理；线程的意义在于对某一分组资源采用多道程序处理。</p>
<h3 id="线程基本特征"><a href="#线程基本特征" class="headerlink" title="线程基本特征"></a>线程基本特征</h3><p>线程有四种状态：运行、阻塞、就绪或终止。</p>
<p>线程的堆栈用于存放调用中但为返回的过程，同时包含相应过程的局部变量以及过程执行完成的返回地址。</p>
<p>在多线程模式下，执行线程有能力通过调用库函数创建或终止线程。如使用 thread_create 创建线程（通过参数指定要运行的过程名，通常会返回一个线程标识符）；thread_exit 退出线程；thread_join 等待某线程退出后再运行，参数为待运行线程的标识符；thread_yield 释放 CPU 来运行另一线程（线程没法像进程那样利用时间中断强制让出 CPU）；thread_attr_init 初始化某线程的属性结构；thread_attr_destory 删除某线程的属性结构。</p>
<h3 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h3><p>线程包可以在用户空间或内核中实现，即在进程的运行时系统中存放线程表或在内核中存放线程表。线程表与进程表类似，用于存放线程重新启动所需的信息。</p>
<p>在用户空间切换线程比在内核中更为高效，同时允许每个进程定制自己的调度算法。用户空间线程包需要处理阻塞问题，等待 I/O 的线程会长期占用 CPU，导致其他线程无法展开工作。解决方式有二：通过修改操作系统的方式将调用改成非阻塞式（不乐观）；二则通过包装器 jacker 提前检测系统调用是否会被阻塞，等线程安全了再进行调用。</p>
<p>内核线程包开销较大，且需要面对 fork 的子进程是否拥有与父进程相同线程、以及线程怎样订阅进程间通信信号等问题。但是，内核线程包中能够阻塞线程的调用都以系统调用的形式实现，内核有能力切换到其他就绪线程上，避免 CPU 空转。其能力体现为：采用调度程序激活机制，内核会为每个进程安排一定数量的虚拟处理器，随后由运行时系统将线程分配到处理器上。当内核感知到线程被阻塞后，内核会通知运行时系统，并且在堆栈中以参数形式传递有问题的线程编号和所发生事件的一个描述。内核在上述堆栈地址启动运行时系统，从而发出通知，这是对 UNIX 中信号的一种粗略模拟。</p>
<p>混合实现综合了用户级线程和内核级线程的优点，单条内核线程下挂多条用户级线程，同样可以创建、销毁和调度这些用户级线程。</p>
<h4 id="弹出式线程"><a href="#弹出式线程" class="headerlink" title="弹出式线程"></a>弹出式线程</h4><p>消息如 web 服务请求到达时，传统的做法是使用阻塞进程或线程等待消息达到，然后进行处理。另一种方式是在消息到达系统后创建一个弹出式线程（全新的，没有历史，创建会非常快）。在内核创建弹出式线程比在用户空间中更快捷，且容易访问所有的表格和 I/O 设备，以便于作中断处理。但是，出错的内核线程比用户线程危害更大。</p>
<h3 id="多线程程序设计问题"><a href="#多线程程序设计问题" class="headerlink" title="多线程程序设计问题"></a>多线程程序设计问题</h3><p>多线程会面临如下问题：</p>
<ul>
<li>全局变量问题：某线程使用的全局变量会被另一线程篡改掉。有种解决方案是，为每个线程创建私有的全局变量，比如引入新的库过程（create_global、set_global、read_global 等）以创建、设置和读取这些线程范围内的全局变量。</li>
<li>库调用、内存分配问题：库调用在前一个执行期间，仍可进行二次调用；内存指针在线程切换期间可能会处于不稳定状态。有种解决方案是，为每个过程提供包装器，包装器会设置某个库在使用中的标识，这样该库的其他线程都会被阻塞。使用信号处理上述问题时会遇到额外的问题，在内核中发送非线程专用的信号，无法感知要把信号发送到哪个线程；如果信号采用广播模式，也会遇上诸如“某个线程想捕获信号，另一个想中断进程”的问题。</li>
<li>堆栈管理问题：进程的堆栈溢出时，内核会为该进程分配更多的堆栈；内核没法了解多线程的所有堆栈，无法为它们分配更多的堆栈。</li>
</ul>
<h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><p>进程间通信（Inter Process Communication, IPC）需要解决以下三个问题：</p>
<ol>
<li>A 进程怎样把信息传递给 B 进程（因为线程共享地址控件，线程间通信就没有这问题）。</li>
<li>怎样保证多个进程读写某一共享资源时会有一致性问题（线程间通信也会有这问题）。</li>
<li>B 进程处理前需要等待 A 进程处理完成之类的顺序问题（线程间通信也会有这问题）。</li>
</ol>
<p>多进程读写同一共享资源时的一致性问题也称为竞争条件，因其处理结果取决于多进程运行的精确时序。处理竞争条件的策略有互斥，即避免多个进程同时读写共享数据。当把读写共享数据的程序片段称为临界区后，多个进程在某一时刻只能有一个进入临界区。其实现有（线程竞争也可以使用同样的解决思路：</p>
<ul>
<li>屏蔽中断：在每个进程进入临界区时屏蔽中断，这样依赖于中断的进程切换就没法展开，某一时间就只能有一个进程在临界区中。在用户进程中屏蔽中断会导致其他 CPU 无法继续运行。</li>
<li>锁变量：通过共享锁变量标记某一进程在临界区中，阻断其他进程进入临界区。锁变量同样会有竞争条件问题。</li>
<li>严格轮换法：通过自旋锁阻断其他进程运行（自旋锁在 A 进程执行过程为 0，执行后为 1；B 进程执行过程为 1，执行后为 0），阻断可以用 while 锁变量实现（自旋锁为 0 时，B 进程无法运行；为 1 时， A 进程无法运行），使进程处于忙等待状态。</li>
<li>Pererson 算法：有两个进程，设置两个标识，一则以变量记录申请进入临界区的进程，二则以集合形式记录已申请进入临界区（处于运行态或阻塞态）的进程，直到运行结束才会释放。在 A 进程进入临界区期间，因为 A 进程在集合记录中，B 进程没法进入临界区；只有等到集合记录释放时，B 进程才能进入临界区。后续进程会进入忙等待状态。</li>
<li>TSL、XCHG 指令：通过汇编语言向寄存器中写入非零值，作循环处理，其他指令均无法修改，直到本指令的调用者执行结束。这样做就是锁住了内存总线（只能允许当前指令访问内存）。锁住内存总线的机制与屏蔽中断不同；屏蔽中断时，其他进程仍能访问内存。后续进程会进入忙等待状态。</li>
<li>sleep、wakeup 进程间通信原语（属于系统调用）：sleep 将引起调用进程阻塞，直到被另外一个进程唤起；wakeup 唤醒进程。有例子：生产者向缓存区刷入文件，消费者取出文件并打印，缓冲区计数标识有多少文件待打印。若计数标识为 0，消费者将睡眠；若计数标识已满，生产者将睡眠。</li>
<li>信号量：抽象为 down、up 系统调用。down 操作检查信号量，将信号量减 1；若该值为 0，进程将睡眠，但是 down 操作并未结束。up 操作将信号量增 1，唤醒由 down 操作休眠的进程，使其继续运行未完成的 down 操作。检查、更新信号量时，系统会调用 TSL、XCHG 指令锁住内存总线，屏蔽其他进程的竞争。信号量可用于实现中断，如启动 I/O 设备时执行 down 操作阻塞进程，中断到来时执行 up 操作使进程重新就绪；信号量可用于实现同步，如设置缓冲区空状态和满状态两个信号量，生产者 down 空状态信号量、up 满状态信号量，这样就能空状态下不能运行消费者进程。</li>
<li>互斥量 mutex：互斥量只有两种值，解锁或加锁，可基于 TSL、XCHG 指令实现只能单进程运行。使用互斥量也可以借助 futex 库或 pthread 库。</li>
<li>管程：管程由过程、变量和数据结构组成，任意时刻只能有一个活跃进程，它在编译器层面处理。wait 操作对条件变量执行，将阻塞进程；single 操作用于唤醒进程。Java 中的 synchronized 关键字即是管程的一种实现。</li>
<li>消息传递：通过 send、receive 收发消息。消息可以按进程地址编址，也可以按信箱这种新数据结构取用。生产者先接受消费者发送的空缓冲区，生产数据后，然后将数据项以消息的方式发送给消费者；消费者先接受生产者填充的数据项，消费数据后，然后将空缓冲区以消息的方式发送给生产者。</li>
</ul>
<p>上述方式都通过共享内存实现进程间的通信，即生产者向共享内存填入数据，消费者从共享内存取出数据。上述方式或者适用于保证双进程模式下只有一个进程读写内存，或者保证了双进程模式下进程处理的时序性。</p>
<p>不同于以上，屏障机制适用于处理进程组：只有当所有的进程完成工作后才会着手下一个阶段，否则运行完成的进程都会被阻塞。屏障通过对运行完成的进程调用 barrier 源于实现。</p>
<p>此外，某些数据结构和算法组合在多进程处理中不必上锁，也能保证读写的一致性。如树在写竭诚中使用新节点数据填充后在插入或树结构变更后再删除节点，在读进程中仍能访问新增前或删除前的节点，在特定操作下也能保证读写一致性。</p>
<h2 id="scheduler-调度"><a href="#scheduler-调度" class="headerlink" title="scheduler 调度"></a>scheduler 调度</h2><p>进程按处理内容分为计算密集型和 I/O 密集型两类。因为 CPU 处理速度在提升，更多的进程越来越偏向于 I/O 密集型。对于 I/O 密集型进程，应使它们尽快得到处理，以便磁盘始终忙碌；对于计算密集型，则需要多运行一些这类进程，以使 CPU 充分利用。</p>
<h3 id="调度时机"><a href="#调度时机" class="headerlink" title="调度时机"></a>调度时机</h3><ul>
<li>当父进程创建子进程时，调度程序可任意选择运行父进程或子进程。</li>
<li>进程退出时，调度程序会选择运行一个就绪态进程或空闲进程（当没有就绪态进程时）。</li>
<li>当进程由于 I/O、信号量等原因被阻塞时，调度程序会选择运行一个就绪态进程或空闲进程。</li>
<li>当 I/O 处理完结、中断发生时，调度程序将原进程置为就绪态。</li>
</ul>
<p>调度程序对时钟中断的表现分为两类：非抢占式调度算法允许进程运行到直至阻塞或主动让出 CPU 为止；抢占式调度算法会为进程设置最大时段，当该时段结束时，调度程序就会挂起运行中的进程。对于硬件提供的 50HZ、60HZ 或其他频率的周期性中断，调度程序会在每个时钟中断或没 k 个时钟中断时做出调度决策，以实现抢占式调度。</p>
<h3 id="调度环境及其调度算法"><a href="#调度环境及其调度算法" class="headerlink" title="调度环境及其调度算法"></a>调度环境及其调度算法</h3><p>调度环境分为三种：</p>
<ul>
<li>批处理系统，一般使用非抢占式算法或长时间周期的抢占式算法，须保证吞吐量（每小时批处理作业数）足够大、周转时间（批处理作业平均完成时间）足够小、CPU 利用率足够高。</li>
<li>交互式环境，使用抢占式算法，须使响应时间足够快、满足用户期望。</li>
<li>实时系统，有时候没必要使用抢占，须满足截止时间要求、可预测性高（即错误少）。实时系统如病人监控装置、飞机自动驾驶系统以及自动化工厂中的机器人控制等。实时系统分为硬实时、软实时两种，硬实时要求在规定时间内必须执行完成，软实时可以容忍超过规定时间。实时系统会通过将程序拆分为一组进程以提升性能，其中每个进程的行为都是可预测和提前掌握的。实时系统按响应方式可分为周期性事件或非周期性事件。实时系统额调度算法可以在开始运行前作决定（静态的）或在运行过程中作决定（动态的）。</li>
</ul>
<p>三种环境都需使每个进程公平分摊 CPU 份额，保证规定的策略被执行，保证系统的所有部分都忙碌。</p>
<p>适用于批处理系统的调度算法有：</p>
<ul>
<li>先来先服务：非抢占式，使用队列维护就绪进程，算法简单，可能会引起不必要的性能消耗。</li>
<li>最短作业优先：非抢占式，先决条件是运行时间可预期，能使作业的平均处理时间缩短，在作业非同时运行的情况下未必是最优解。</li>
<li>最短剩余时间优先：抢占式，先决条件是运行时间可预期，补充了最短作业优先算法的不足。</li>
</ul>
<p>适用于交互式系统的调度算法有：</p>
<ul>
<li>轮转调度：抢占式，为每个进程设置最大可运行时长 —— 时间片。超过时间片的运行进程将被挂起，不满时间片的运行进程会在结束时立即被切换。时间片设置过小，将会使进程切换时的性能损耗比重加大；过大，将会使后续的叫请求长时间得不到处理。时间片一般设为 20-50 ms。</li>
<li>优先级调度：抢占式，为进程设置优先级，高优先级的会先行得到运行。为避免高优先级的进程霸占 CPU，调度程序会基于时钟中断降低该进程的优先级。当优先级分为多类后，对归属一类的进程可以再使用轮转调度算法。优先级也可以动态设置，即看进程在上一次时间片中所消耗的时长，时长越短，优先级越高。</li>
<li>多级队列：抢占式，先为进程设置高优先级，给予一个时间片，以使 I/O 密集型进程能得到尽快处理。若为计算密集型且在一个时间片内处理不完，则为进程设置次高优先级，给予两个时间片的运行时间；处理不完再将优先级逐级递减，时间片逐级增大。为了防止计算密集型进程长期抢占 CPU，当用户按下 Enter 键时，所有进程将会被移到最高优先级。</li>
<li>最短进程优先：类似最短作业优先，使用进程历史运行时间的加权平均预估进程的当前运行时间。</li>
<li>保证调度：抢占式，使进程均摊 CPU 运行时间，即调度程序会为运行时间比重最低的进程分配更多的时间，直到它超过运行时间比重次低的进程。</li>
<li>彩票调度：抢占式。以每秒运行时长抽象彩票，运行时长 20 ms，即 50 张彩票。持有彩票数越多的进程会占用相同分量的 CPU 执行时间。进程也可以将彩票让渡给协作式进程，以使协作式进程尽快完成工作。</li>
<li>公平分享调度：上述调度以进程度量调度策略，公平分享调度以用户度量调度策略，即满足用户 1 持有 4 个进程，用户 2 持有 2 个进程，两个用户均摊 CPU 的场景。</li>
</ul>
<h3 id="调度策略和调度机制"><a href="#调度策略和调度机制" class="headerlink" title="调度策略和调度机制"></a>调度策略和调度机制</h3><p>对于父进程启动多个子进程的场景，在系统中调度没法或者子进程的重要性，而父进程却知道。因此，在系统层面实现 scheduling mechanism 调度机制并参数化，由用户进程决定 scheduling policy 调度策略。调度机制与调度策略分离，见及数据库管理系统、浏览器的实现。</p>
<h3 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h3><p>如上文，线程分为两种：用户级线程和内核级线程。切换内核级线程比切换用户级线程要消耗更多性能。对于用户级线程，也可以在用户进程中实现线程调度算法，如 web 服务器中的分派线程。如没有进程内的调度算法，计算密集型的用户线程很可能长期占用 CPU。</p>
]]></content>
      <categories>
        <category>计算机科学</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>carrier</tag>
      </tags>
  </entry>
  <entry>
    <title>聊聊 Ant Design 组件库的构成</title>
    <url>/2020/02/28/frontend/antd/%E8%81%8A%E8%81%8A%E7%BB%84%E4%BB%B6%E5%BA%93%E7%9A%84%E6%9E%84%E6%88%90/</url>
    <content><![CDATA[<h2 id="底层功能组件"><a href="#底层功能组件" class="headerlink" title="底层功能组件"></a>底层功能组件</h2><h3 id="rc-util"><a href="#rc-util" class="headerlink" title="rc-util"></a>rc-util</h3><p>KeyCode: 记录了各按键的编码，并提供按键判断工具。</p>
<h4 id="hooks"><a href="#hooks" class="headerlink" title="hooks"></a>hooks</h4><p>useMergedState(defaultStateValue, option) 主要用于表单项的 value 值状态处理，也可以用于其他状态处理。逻辑上，首先以 option.value、option.defaultValue、defaultStateValue 的顺序设置内部 value 状态值，该 value 值经 option.postState 转变后透出使用；同时透出的有 triggerChange 方法既能改变内部 value 状态值，又能触发 onChange 回调。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useControlledState</span>&lt;<span class="title">T</span>, <span class="title">R</span> = <span class="title">T</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  defaultStateValue: T | ((</span>) =&gt; <span class="title">T</span>),</span></span><br><span class="line"><span class="function">  <span class="title">option</span>?: </span>&#123;</span><br><span class="line">    defaultValue?: T | <span class="function">(<span class="params">(</span>) =&gt;</span> T);</span><br><span class="line">    value?: T;</span><br><span class="line">    onChange?: <span class="function">(<span class="params">value: T, prevValue: T</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">    postState?: <span class="function">(<span class="params">value: T</span>) =&gt;</span> T;</span><br><span class="line">  &#125;,</span><br><span class="line">): [R, (value: T) =&gt; <span class="keyword">void</span>] &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; defaultValue, value, onChange, postState &#125; = option || &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> [innerValue, setInnerValue] = React.useState&lt;T&gt;<span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (defaultValue !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> defaultValue === <span class="string">'function'</span></span><br><span class="line">        ? (defaultValue <span class="keyword">as</span> any)()</span><br><span class="line">        : defaultValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> defaultStateValue === <span class="string">'function'</span></span><br><span class="line">      ? (defaultStateValue <span class="keyword">as</span> any)()</span><br><span class="line">      : defaultStateValue;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> mergedValue = value !== <span class="literal">undefined</span> ? value : innerValue;</span><br><span class="line">  <span class="keyword">if</span> (postState) &#123;</span><br><span class="line">    mergedValue = postState(mergedValue);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">triggerChange</span>(<span class="params">newValue: T</span>) </span>&#123;</span><br><span class="line">    setInnerValue(newValue);</span><br><span class="line">    <span class="keyword">if</span> (mergedValue !== newValue &amp;&amp; onChange) &#123;</span><br><span class="line">      onChange(newValue, mergedValue);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [(mergedValue <span class="keyword">as</span> unknown) <span class="keyword">as</span> R, triggerChange];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="rc-align"><a href="#rc-align" class="headerlink" title="rc-align"></a>rc-align</h3><h3 id="rc-trigger"><a href="#rc-trigger" class="headerlink" title="rc-trigger"></a>rc-trigger</h3><p><a href="https://github.com/react-component/trigger" target="_blank" rel="noopener">rc-trigger</a> 作为触发器，它抽象了弹层触发的逻辑。功能点包含：</p>
<ul>
<li>触发节点：children 触发节点。</li>
<li>弹层内容：popup 弹层内容；getPopupContainer 获得弹层容器。</li>
<li>渲染、销毁时机：forceRender 弹层未显示时予以绘制；destroyPopupOnHide 弹层隐藏时销毁。</li>
<li>弹层显示、隐藏时机：action 何种用户行为展示；mouseEnterDelay 鼠标移入后延迟展示；mouseLeaveDelay 鼠标移出时延迟隐藏；popupVisible 受控显示弹层；defaultPopupVisible 弹层默认状况。</li>
<li>弹层位置：alignPoint 跟随鼠标位置动态变动；popupAlign 弹层位置；builtinPlacements 触发元素和弹层的对齐关系隐射 { topLeft: { points: [‘tl’, ‘tl’] }} 两元素左上角对齐；popupPlacement 设置对齐位置。</li>
<li>弹层样式：popupClassName 样式名；getPopupClassNameFromAlign；popupStyle 样式；prefixCls 样式名前缀。zIndex 弹层 zIndex；stretch 弹层大小随触发元素动态变更。</li>
<li>弹层动效：popupTransitionName 弹层动效；maskTransitionName 蒙层动效。</li>
<li>蒙层：mask 是否显示蒙层；maskClosable 点击蒙层关闭弹层；getDocument 文档节点，绑定点击隐藏冒牌事件。</li>
<li>弹层交互：onPopupVisibleChange 弹层显示时回调；onPopupAlign 弹层位置调整时回调。</li>
<li>ref 引用：getRootDomNode 获取触发节点的 dom 元素；getPopupDomNode 获取弹层的 dom 元素。</li>
</ul>
<h2 id="通用组件"><a href="#通用组件" class="headerlink" title="通用组件"></a>通用组件</h2><h3 id="按钮-Button"><a href="#按钮-Button" class="headerlink" title="按钮 Button"></a>按钮 Button</h3><ul>
<li>功能特性：<ul>
<li>绘制按钮。</li>
<li>绘制按钮组。</li>
</ul>
</li>
<li>样式特性：<ul>
<li>type 按钮类型：primary 主按钮、默认按钮、dashed 虚线按钮、danger 危险按钮和 link 链接按钮。其中，link 按钮以 a 节点渲染，其他按钮以 button 按钮渲染。</li>
<li>disabled、loading 按钮状态：默认正常状态、disabled 不可用状态、loading 加载中状态。加载中状态按钮将额外绘制加载图标。</li>
<li>shape 按钮形状：默认小圆角按钮、circle 圆形按钮、round 全圆角按钮。</li>
<li>size 按钮尺寸：large 大尺寸按钮、默认中尺寸按钮、small 小尺寸按钮。</li>
<li>block 按钮：100% 宽度构成块状按钮。</li>
<li>ghost 按钮：背景透明的按钮。</li>
<li>icon 图标：按钮内置图标。</li>
<li>按钮内容为双汉字，在双汉字之间插入空格。通过 ConfigProvider 的 autoInsertSpaceInButton 属性可以避免这一行为。</li>
</ul>
</li>
</ul>
<h3 id="图标-Icon"><a href="#图标-Icon" class="headerlink" title="图标 Icon"></a>图标 Icon</h3><p>图标基于 <a href="https://github.com/ant-design/ant-design-icons" target="_blank" rel="noopener">ant-design-icons</a> 制作。</p>
<ul>
<li>功能特性：<ul>
<li>绘制内置 svg 图标。</li>
<li>component 设置自定义 svg 图标渲染组件，自定义 svg 图标通过 <a href="https://www.npmjs.com/package/@svgr/webpack" target="_blank" rel="noopener">@svgr/webpack</a> 加载，参看 <a href="https://ant.design/components/icon-cn/#%E8%87%AA%E5%AE%9A%E4%B9%89-SVG-%E5%9B%BE%E6%A0%87" target="_blank" rel="noopener">自定义 SVG 图标</a>。</li>
<li>tabIndex 限制 tab 按键点选顺序。</li>
<li>viewbox 截取 svg 图片，参看 <a href="https://www.jianshu.com/p/4422c05ff0f2" target="_blank" rel="noopener">秒懂 svg 图片的 viewbox</a>。</li>
<li>onClick 点击交互等。</li>
<li>Icon.createFromIconfontCN 绘制 iconfont 图标，参看 <a href="https://ant.design/components/icon-cn/#%E8%87%AA%E5%AE%9A%E4%B9%89-font-%E5%9B%BE%E6%A0%87" target="_blank" rel="noopener">自定义 font 图标</a>。</li>
<li>Icon.setTwoToneColor 设置双色图标的主色。</li>
</ul>
</li>
<li>样式特性：<ul>
<li>theme 图标主题风格：outlined 默认描线、filled 实心、twoTone 双色。</li>
<li>type 图标类型：图标类型和 theme 主题风格构成按钮的编码类型，用于查询确切的 svg 图标。</li>
<li>spin 旋转图标。</li>
<li>rotate 旋转角度：基于 transform 样式制作。</li>
<li>twoToneColor 双色图标的主色。</li>
<li>className、style 设置 svg 图标颜色等。</li>
</ul>
</li>
</ul>
<h3 id="排版-Typography"><a href="#排版-Typography" class="headerlink" title="排版 Typography"></a>排版 Typography</h3><ul>
<li>功能特性：<ul>
<li>绘制 Title 标题、Text 文本、Paragraph 段落。</li>
<li>editable 编辑功能。编辑按钮使用 TransButton 组件包裹，便于使用 tab、enter 按键交互以及支持失焦、聚焦事件。编辑按钮点击时将绘制 Textarea。交互行为支持 editable.onStart、editable.onChange。</li>
<li>copyable 复制功能。copy 功能借助 <a href="https://github.com/sudodoki/copy-to-clipboard" target="_blank" rel="noopener">copy-to-clipboard</a> 库实现。复制按钮同样使用 TransButton 组件包裹。交互行为支持 copyable.onCopy；copyable.text 可设置复制内容。</li>
<li>ellipsis 文本省略，ellipsis.expandable 设置折叠展开功能。对于溢出的文本，ant-design 会借助 raf 在下一帧省略文本内容。文本省略采用两种方案实现：首先尝试使用 css 样式（-webkit-line-clamp、text-overflow 属性）；其次使用两分法查询待显示的文本内容，同时会合并文本节点。ant-design 同时会借助 rc-resize-observer 在屏幕大小改变调整显示文本。交互行为支持 ellipsis.onExpand。</li>
</ul>
</li>
<li>样式特性：<ul>
<li>Title 标题按 level 设置不同级别，分别用 h1、h2、h3、h4 节点渲染。</li>
<li>Text 文本使用 span 节点绘制；Paragraph 段落使用 div 节点绘制。</li>
<li>type 文字类型：默认主要文字、secondary 次要文字浅灰色、warning 警告文字橘黄色、danger 错误文字红色。disabled 失效文字。mark 使用 mark 节点渲染。code 使用 code 节点渲染。underline 使用 u 节点渲染。delete 使用 del 节点渲染。strong 使用 strong 节点渲染。</li>
</ul>
</li>
</ul>
<h2 id="布局组件"><a href="#布局组件" class="headerlink" title="布局组件"></a>布局组件</h2><h3 id="栅格-Grid"><a href="#栅格-Grid" class="headerlink" title="栅格 Grid"></a>栅格 Grid</h3><ul>
<li>功能特性：<ul>
<li>提供栅格布局功能。栅格布局基于 less 函数制作，并运用了 MediaQuery 样式特性。</li>
</ul>
</li>
<li>样式特性：<ul>
<li>flex 布局：Row 组件默认使用 block 绘制，可以基于 type 属性使用 flex 布局。flex 布局下，Row#justify 属性设置元素的水平对齐方式；Row#align 属性设置元素的垂直对齐方式；Col#order 属性设置元素的展示顺序。</li>
<li>Row#gutter 栅格间距（Row 组件设置左右减半负边距，Col 组件设置左右边距），间距可以根据屏幕大小动态调整。屏幕大小通过 enquire.js 库嗅探，以回调形式重绘组件。间距通过 Context 机制传入 Col 组件中。</li>
</ul>
</li>
</ul>
<h3 id="布局-Layout"><a href="#布局-Layout" class="headerlink" title="布局 Layout"></a>布局 Layout</h3><ul>
<li>功能特性：<ul>
<li>页面布局，包含 Header 头部、Content 内容、Sider 侧边栏、Footer 尾部。侧边栏可以展开折叠，由 Layout 组件通过收集折叠的侧边栏标识传入子组件中。</li>
</ul>
</li>
<li>样式特性：<ul>
<li>渲染时，Layout 组件使用 section 节点；Header 使用 header 节点；Content 使用 main 节点；Footer 使用 footer 节点。Layout 采用 flex 布局，主轴为垂直方向。</li>
<li>Sider#collapsible 激活侧边栏的展开折叠功能。其一可以通过触发按钮展开折叠侧边栏，其二基于 window.matchMedia 方式响应式展开折叠（触发按钮有两种，Sider 组件的展开折叠按钮、Sider 外围通过 Layout 获取状态的展开折叠按钮）。侧边栏内容由子组件渲染，侧边栏的展开折叠状态通过 Context 机制传递。</li>
<li>Sider#theme 设置侧边栏的样式主题。</li>
</ul>
</li>
</ul>
<h2 id="导航组件"><a href="#导航组件" class="headerlink" title="导航组件"></a>导航组件</h2><h3 id="固钉-Affix"><a href="#固钉-Affix" class="headerlink" title="固钉 Affix"></a>固钉 Affix</h3><ul>
<li>功能特性：<ul>
<li>绘制固钉。固钉会随着 target 节点的事件或者屏幕大小的调整改变位置。固钉的位置调整首先取决于 target 节点和固钉的渲染内容，因此 ant-design 首先会等待渲染完成，借助 raf （封装成方法的装饰器 throttleByAnimationFrameDecorator）调用 setState 重绘，重绘阶段经由 componentDidUpdate 生命周期计算固钉的偏移量等样式，再次使用 setState 进行重绘。依据屏幕大小的动态调整借助于 rc-resize-observer 库；依据 target 节点事件的动态调整借助于 rc-util 库绑定事件。</li>
</ul>
</li>
</ul>
<h3 id="面包屑-Breadcrumb"><a href="#面包屑-Breadcrumb" class="headerlink" title="面包屑 Breadcrumb"></a>面包屑 Breadcrumb</h3><p>Breadcrumb 组件测试脚本通过 MemoryRouter 组件实现。</p>
<ul>
<li>功能特性：<ul>
<li>绘制面包屑。面包屑内容既可以使用 Breadcrumb.Item 组件渲染，又可以基于 routes 路由属性渲染（基于路由渲染时，额外可以使用 itemRender 渲染函数获取面包屑元素）。</li>
</ul>
</li>
<li>样式特性：<ul>
<li>separator 分隔符，既可以通过 Breadcrumb#separator 属性设置，又可以通过 Breadcrumb.Separator 组件渲染。</li>
<li>Breadcrumb.Item#href 链接，设置后将使用 a 节点渲染，不然使用 span 节点渲染。</li>
<li>Breadcrumb.Item#overlay 下拉菜单的内容，下拉菜单通过 DropDown 组件渲染，展示位置在正下方。</li>
</ul>
</li>
</ul>
<h3 id="下拉菜单-DropDown"><a href="#下拉菜单-DropDown" class="headerlink" title="下拉菜单 DropDown"></a>下拉菜单 DropDown</h3><ul>
<li>功能特性<ul>
<li>提供下拉菜单的渲染容器。下拉菜单的触发节点 DropDown#children 和下拉菜单 DropDown#overlay 的内容都由开发者提供，一般菜单内容为 Menu 组件渲染内容。DropDown 会为下拉菜单内容传入 selectable=false, focusable=true 以及 expandIcon 图标属性。渲染容器基于 <a href="http://react-component.github.io/dropdown/" target="_blank" rel="noopener">rc-dropdown</a> 库实现，rc-dropdown 内部使用 <a href="https://github.com/react-component/trigger" target="_blank" rel="noopener">rc-trigger</a> 库。</li>
<li>DropDown.Button 不止于提供下拉菜单的渲染容器，同时也将触发节点设置为按钮。它的实现借助于 Button、DropDown 组件。</li>
</ul>
</li>
<li>样式特性：<ul>
<li>DropDown#getPopupContainer：基于 rc-trigger 库设置下拉菜单的渲染父节点，作为定位节点。</li>
<li>DropDown#align：基于 rc-trigger 库设置下拉菜单位置调整依据。</li>
<li>DropDown#placement：基于 rc-trigger 库设置下拉菜单的弹出位置。</li>
<li>DropDown#transitionName：基于 rc-trigger 库设置下拉菜单展示隐藏时的动效。</li>
<li>DropDown#trigger：基于 rc-trigger 库设置触发下拉菜单的行为 click、hover、contextMenu。当由 contextMenu 鼠标右键触发时，基于 rc-trigger 特性菜单位置也会跟随鼠标移动。</li>
<li>DropDown#forceRender、DropDown#mouseEnterDelay、DropDown#mouseLeaveDelay 等：均基于 rc-trigger 库实现。</li>
</ul>
</li>
</ul>
<h3 id="导航菜单-Menu"><a href="#导航菜单-Menu" class="headerlink" title="导航菜单 Menu"></a>导航菜单 Menu</h3><p>详情参考 <a href="/2018/12/10/antd/Menu/">菜单组件源码分析</a>。</p>
<ul>
<li>功能特性：<ul>
<li>渲染菜单。菜单的基本要素包含 Menu 菜单容器、SubMenu 子菜单、MenuItem 菜单项。菜单以 context 机制对外承接 Sider 侧边栏组件，对内透传折叠、主题状态到 SubMenu、MenuItem 组件。菜单渲染基于 <a href="https://github.com/react-component/menu" target="_blank" rel="noopener">rc-menu</a>、Tooltip 组件。</li>
<li>Menu 菜单容器，组织菜单顶层的展示模式、展开折叠内容及动效。</li>
<li>SubMenu 子菜单。</li>
<li>MenuItem 菜单项，以 Tooltip 组件绘制。</li>
</ul>
</li>
<li>样式特性：<ul>
<li>Menu#mode 展示模式：vertical 垂直、horizontal 水平、inline 子菜单内嵌三种。在内嵌子菜单模式下，展开的子菜单通过 state.openKeys, state.inlineOpenKeys 交换实现。</li>
<li>Menu#theme 主题：light 浅色、dark 深色两种。</li>
<li>Menu#openKeys、Menu#defaultOpenKeys 展开的子菜单；Menu#onOpenChange 展开的子菜单变更时调用；Menu#subMenuCloseDelay、Menu#subMenuOpenDelay 子菜单展开、折叠时延；</li>
<li>Menu#selectedKeys、Menu#defaultSelectedKeys 选中的菜单项；Menu#onSelect、Menu#onDeSelect 菜单项选中、取消选中时调用；Menu#selectable    是否可选；Menu#multiple 是否多选。</li>
<li>Menu#forceSubMenuRender 在子菜单展示之前就渲染进 DOM。</li>
<li>Menu#inlineCollapsed 内嵌模式下菜单是否收起；Menu#inlineIndent 内嵌模式下菜单缩进宽度。</li>
<li>Menu#onClick 菜单项点击时触发。</li>
<li>Menu#overflowedIndicator 菜单折叠时图标。</li>
</ul>
</li>
</ul>
<h3 id="Pagination-分页器"><a href="#Pagination-分页器" class="headerlink" title="Pagination 分页器"></a>Pagination 分页器</h3><p>分页器基于 <a href="https://github.com/react-component/pagination" target="_blank" rel="noopener">rc-pagination</a> 渲染。分页器分为非简洁模式和简洁模式两种。非简洁模式有三部分构成：总页数、翻页列表、每页显示条数。简洁模式只有翻页功能，没有总页数、每页显示条数。内置状态包含 current 当前页码、pageSize 每页显示条目数。外置状态 total 总页数用于更新当前页码。翻页功能包含跳转上/下一页；跳转前/后三（或五）页（当前页码在总页码中间态时）。操作方法基于简单改变 current、pageSize 延伸出跳转上/下一页、通过按键改变页码等方法。改变每页显示的 Select 组件由 rc-pagination 通过 props 属性传值。</p>
<h3 id="PageHeader-页头"><a href="#PageHeader-页头" class="headerlink" title="PageHeader 页头"></a>PageHeader 页头</h3><p>页头组合了 Breadcrumb 面包屑、Avatar 头像、Tag 标签等组件，用于绘制页头。</p>
<h3 id="Steps-步骤条"><a href="#Steps-步骤条" class="headerlink" title="Steps 步骤条"></a>Steps 步骤条</h3><p>步骤条基于 <a href="https://github.com/react-component/steps" target="_blank" rel="noopener">rc-steps</a> 渲染。Steps 组件主要包含一些样式特性，状态管理逻辑基本没有。当浏览器支持 flex 布局时，Step 采用 flex 布局渲染；不支持时，Step 采用百分比渲染：默认类型的 Steps 会用 margin 值为最后一个元素预留宽度（通过定时器计算最后一个元素的宽度，更新 state 以重绘），导航类型的 Steps 通过百分比均分宽度。</p>
<h2 id="数据录入"><a href="#数据录入" class="headerlink" title="数据录入"></a>数据录入</h2><h3 id="AutoComplete-自动完成"><a href="#AutoComplete-自动完成" class="headerlink" title="AutoComplete 自动完成"></a>AutoComplete 自动完成</h3><p>自动完成组件基于 Select、Input 组件制作，主要逻辑也由 Select 组件承担。</p>
<h3 id="Checkbox-复选框、Radio-单选框"><a href="#Checkbox-复选框、Radio-单选框" class="headerlink" title="Checkbox 复选框、Radio 单选框"></a>Checkbox 复选框、Radio 单选框</h3><p>Checkbox 复选框、Radio 单选框可以参考 <a href="/2018/11/27/antd/Radio,%20Checkbox/">Radio, Checkbox</a>。</p>
<h3 id="Cascader-级联选择"><a href="#Cascader-级联选择" class="headerlink" title="Cascader 级联选择"></a>Cascader 级联选择</h3><h4 id="rc-cascader"><a href="#rc-cascader" class="headerlink" title="rc-cascader"></a>rc-cascader</h4><p>级联选择基于 <a href="https://github.com/react-component/cascader" target="_blank" rel="noopener">rc-cascader</a> 制作。rc-cascader 的实现又基于 <a href="https://github.com/react-component/trigger" target="_blank" rel="noopener">rc-trigger</a> 抽象弹层逻辑、<a href="https://github.com/afc163/array-tree-filter" target="_blank" rel="noopener">array-tree-filter</a> 扁平化、过滤树形数据。</p>
<p>实际的触发节点 props.children 通过 React.cloneElement 绑定 onKeyDown 键盘事件。如果 props.children 定义了 onKeyDown 方法，则取用该方法进行处理；如果没有，则使用 rc-cascader 内置的处理逻辑，包含 up/down 上下选、left/backspace 回选、right 向前选、esc/tab 隐藏等功能。</p>
<p>在 rc-cascader 中，array-tree-filter 负责根据级联选择的动态 value 值计算待展示的弹层菜单列表（即弹层菜单中，第二列起的次级列表，其与树结构首层混合，构成当前下拉菜单中展示的完整内容）。菜单中每个选项根据 label 值渲染内容，同时可以包含展开、加载中按钮；选项支持的交互行为包含双击隐藏弹层、点击选中、鼠标移入移出选中。选中的选项存入本地缓存中，在弹层显示状态更新时，用于使选项列表滚动至选中元素上（通过节点的 scrollTop 属性设置）。选项选中逻辑为：如果选中选项为否值或 disabled 状态，直接返回；如果级联选择开启了远程加载 loadData 功能，且选中选项不是叶子节点，首先基于 changeOnSelect 向外透出选中列表，然后更新级联选择的 state.activeValue 状态值并加载远程数据；如果只使用本地数据，且选中选项是叶子节点，向外透出选中列表并更新 state.value 状态值；如果只使用本地数据，根据 expandTrigger 触发行为向外透传选中列表、条件隐藏弹层，并更新 state。value 状态值。</p>
<h4 id="Cascader"><a href="#Cascader" class="headerlink" title="Cascader"></a>Cascader</h4><p>Cascader 组件在 rc-cascader 的基础上，默认使用输入框作为触发节点，也可以使用 props.children 替换。输入框有只读态、showSearch 搜索态两种：只读态基于  rc-cascader 点击展开弹层；搜索态阻止点击事件冒泡、支持失焦行为、键盘事件阻止 space/backspace 按键隐藏弹层、change 事件改编 inputValue 值（渲染时更新弹层选项列表）。选中的值在输入框中的表现通过固定定位的 span 节点渲染。输入框内可设置 allowClear 清空图标、suffixIcon 后缀图标。</p>
<p>输入框触发器能基于 SizeContext 获得外层传入的 size 尺寸。Cascader 对外提供的 ref 引用，可以使用 focus、blur 方法获得或失去焦点；input 属性即输入框节点。</p>
<p>全量的选项列表会通过扁平化处理。在渲染时，Cascader 会基于输入框的值进行筛选；筛选内容有最大展示条目限制；筛选内容有最大展示条目限制；选项内容可排序（以上，均可通过 props.showSearch 设置）。当没有（匹配的）选项时，展示空态。</p>
<p>弹层位置可基于 props.popupPlacement 或通过 ConfigContext 传入的 direction 设置（右下或左下对齐）。弹层大小可基于 props.showSearch.matchInputWidth 设置为与输入框等宽。弹层容器可基于 props.getPopupContainer 或通过 ConfigContext 传入的 getPopupContainer 设置。</p>
<p>Cascader 组件的值、弹层显示状态均是受控的；对外回调接口包含 onChange、onPopupVisibleChange。</p>
<h3 id="DatePicker-日期选择框"><a href="#DatePicker-日期选择框" class="headerlink" title="DatePicker 日期选择框"></a>DatePicker 日期选择框</h3><p>DatePicker 组件基于 <a href="http://xzfyu.com/2020/02/13/antd/DatePicker/">rc-picker</a> 制作，它指定 moment 作为时间处理工具，并从上下文中获取 locale、size 属性等，以提供时间选择的功能。</p>
<h3 id="Form-表单"><a href="#Form-表单" class="headerlink" title="Form 表单"></a>Form 表单</h3><p>可参考 <a href="http://xzfyu.com/2018/11/04/antd/Form/">Form</a>。</p>
<h3 id="InputNumber-数字输入框"><a href="#InputNumber-数字输入框" class="headerlink" title="InputNumber 数字输入框"></a>InputNumber 数字输入框</h3><h3 id="Input-输入框"><a href="#Input-输入框" class="headerlink" title="Input 输入框"></a>Input 输入框</h3>]]></content>
      <categories>
        <category>frontend</category>
        <category>antd</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>react fiber 搜罗整理篇</title>
    <url>/2020/02/22/frontend/react16/react%20fiber%20%E6%90%9C%E7%BD%97%E6%95%B4%E7%90%86%E7%AF%87/</url>
    <content><![CDATA[<h2 id="fiber-出台的原委和特性"><a href="#fiber-出台的原委和特性" class="headerlink" title="fiber 出台的原委和特性"></a>fiber 出台的原委和特性</h2><p>The crux of the change is transitioning from processing updates in a synchronous, recursive way to relying on asynchronous scheduling and prioritization of interface changes.</p>
<p><a href="https://makersden.io/blog/look-inside-fiber/" target="_blank" rel="noopener">A look inside React Fiber</a> 指明，react 演进出 fiber 架构的关键点在于渲染策略的变更，从原先的 Stack Reconciler 同步递归模式转变为 Fiber Reconciler 基于优先级的异步调度模式。这样就能避免其他文章所说的，Stack Reconciler 模式中的 JS 运算、页面布局和页面绘制将长期占用主线程，页面出现掉帧的现象。依照官方文档 <a href="https://reactjs.org/docs/codebase-overview.html#fiber-reconciler" target="_blank" rel="noopener">Codebase Overview</a>，Fiber Reconciler 包含如下特性：</p>
<ul>
<li>将工作拆分为任务单元，实现增量渲染</li>
<li>按类型为任务单元设置优先级</li>
<li>任务单元可暂停、复用或中止</li>
<li>任务单元可并发执行</li>
</ul>
<p><a href="http://www.ayqy.net/blog/dive-into-react-fiber/" target="_blank" rel="noopener">完全理解 React Fiber</a> 提到增量渲染所采用的 cooperative scheduling 合作式调度是操作系统 3 种任务调度策略中的一种。其内容为：将渲染工作拆解，每次只做一小段，做完看是否还有时间继续下一个任务，没有就把时间控制权交还给主线程，有就继续处理下一个任务。</p>
<p><a href="https://github.com/acdlite/react-fiber-architecture" target="_blank" rel="noopener">React Fiber Architecture</a> 也指出，这一处理机跟 <a href="https://en.wikipedia.org/wiki/Call_stack" target="_blank" rel="noopener">call stack</a> 将执行函数作为栈帧添加到堆栈中相似。在处理 ui 时，浏览器提供了可用的 api：requestIdleCallback 会调度在空闲期间调用的低优先级函数；requestAnimationFrame 会调度在下一个动画帧上调用的高优先级函数。在 React 中，单个 fiber 就如同栈帧。React 的调度策略基于 pull 模式智能应用更新（基于 push 模式需要由开发者自主决定哪些更新是要应用的），且为不同的 fiber 设置不同的优先级，可以避免不必要的 UI 更新。</p>
<h2 id="React-分层模型和数据结构"><a href="#React-分层模型和数据结构" class="headerlink" title="React 分层模型和数据结构"></a>React 分层模型和数据结构</h2><p>推演 <a href="https://www.zcfy.cc/original/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react" target="_blank" rel="noopener">Inside Fiber: in-depth overview of the new reconciliation algorithm in React</a> 提及的，React 各分层的数据处理走向比如：</p>
<ul>
<li>用户侧创建 Class 或 Function 组件、Host 组件（如 DOM 节点）、Protals 等；</li>
<li>通过 React.createElement 创建 React 元素树，用于描述页面的呈现（<a href="https://www.zcfy.cc/original/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react" target="_blank" rel="noopener">Inside Fiber: in-depth overview of the new reconciliation algorithm in React</a> 坚持认为 Virtual DOM 实际上指的是不可改变的 React 元素树）；</li>
<li>基于 React 元素树创建 fiber 节点树（也称为 internal instances 内部实例树）；</li>
<li>最后由 fiber 节点树获得具体平台相关的 public instance（也称为 Host instance，如真实的 DOM 树）。</li>
</ul>
<p>上述数据结构的后半部分对应着 React 中的两个分层：</p>
<ul>
<li>Reconciler 层：执行 reconciliation 流程，通过 diff 算法等将组件状态变化反应为视图内容，并触发 side-effects（调用生命周期方法、更新 ref）等。</li>
<li>Renderer 层：根据不同的平台，渲染出真实的内容，比较常见的是 ReactDOM、ReactNative。</li>
</ul>
<h2 id="fiber，作为-unit-of-work"><a href="#fiber，作为-unit-of-work" class="headerlink" title="fiber，作为 unit of work"></a>fiber，作为 unit of work</h2><h3 id="fiber-基本结构"><a href="#fiber-基本结构" class="headerlink" title="fiber 基本结构"></a>fiber 基本结构</h3><p>fiber 节点可基于 React 元素创建，通过调用 <a href="https://github.com/facebook/react/blob/v16.12.0/packages/react-reconciler/src/ReactFiber.js#L593" target="_blank" rel="noopener">createFiberFromTypeAndProps.js</a> 实现。实际上，创建 fiber 节点不止于基于 React 元素一种。fiber 节点会以单向链表的形式构成节点树。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> type Fiber = &#123;|</span><br><span class="line">  <span class="comment">/** 1. 承接 React 元素的相关属性 **/</span></span><br><span class="line">  tag: WorkTag,<span class="comment">// fiber 节点的工作类型</span></span><br><span class="line">  elementType: any,<span class="comment">// react 元素类型</span></span><br><span class="line">  key: <span class="literal">null</span> | string,<span class="comment">// 用于 diff 算法的 key 键</span></span><br><span class="line">  type: any,<span class="comment">// 类组件构造函数或函数组件自身</span></span><br><span class="line">  ref:<span class="comment">// 引用</span></span><br><span class="line">    | <span class="literal">null</span></span><br><span class="line">    | <span class="function">(<span class="params">((handle: mixed</span>) =&gt;</span> <span class="keyword">void</span>) &amp; &#123;<span class="attr">_stringRef</span>: ?string, ...&#125;)</span><br><span class="line">    | RefObject,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 2. props &amp; state **/</span></span><br><span class="line">  <span class="comment">// React 元素类型的引用，可以认为这个属性保存了与 fiber 相关的本地状态</span></span><br><span class="line">  stateNode: any,</span><br><span class="line">  pendingProps: any,<span class="comment">// 待更新的 props</span></span><br><span class="line">  memoizedProps: any,<span class="comment">// 更新后的 props，作为输出透出到页面侧</span></span><br><span class="line">  memoizedState: any,<span class="comment">// 更新后的 state，作为输出透出到页面侧</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 存放 fiber 依赖的 contexts, events **/</span></span><br><span class="line">  dependencies: Dependencies | <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 3. fiber 树结构 **/</span></span><br><span class="line">  <span class="keyword">return</span>: Fiber | <span class="literal">null</span>, <span class="comment">// 类同堆栈的返回栈帧，通常是父节点</span></span><br><span class="line">  child: Fiber | <span class="literal">null</span>,<span class="comment">// 子节点</span></span><br><span class="line">  sibling: Fiber | <span class="literal">null</span>,<span class="comment">// 邻近的兄弟节点</span></span><br><span class="line">  index: number,</span><br><span class="line">|&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="fiber-工作单元"><a href="#fiber-工作单元" class="headerlink" title="fiber 工作单元"></a>fiber 工作单元</h3><p>fiber 节点树不像剥离掉 diff 算法后的 Virtual DOM 那样仅是一种表现，它内部集成了可调度工作任务以操作树的算法。<a href="https://www.zcfy.cc/original/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react" target="_blank" rel="noopener">Inside Fiber: in-depth overview of the new reconciliation algorithm in React</a> 称单个 fiber 节点就是一个工作单元，这也是源码中的表现：</p>
<p>You can think of a fiber as a data structure that represents some work to do or, in other words, a unit of work. Fiber’s architecture also provides a convenient way to track, schedule, pause and abort the work.</p>
<h4 id="current-tree-amp-work-in-progress-tree"><a href="#current-tree-amp-work-in-progress-tree" class="headerlink" title="current tree &amp; work-in-progress tree"></a>current tree &amp; work-in-progress tree</h4><ul>
<li>current tree：首次渲染或更新后设置，描述页面的当前展现；</li>
<li>work-in-progress tree：更新时用于页面呈现所需的操作，更新后会替代 current tree。</li>
</ul>
<p>使用 work-in-progress tree 直接替代 current tree 称为 double buffering 双缓冲技术，这样便于复用 fiber 对象、节省内存分配和 GC 的时间开销。current tree、work-in-progress tree 处理的简要流程如下：</p>
<p>首次渲染时，渲染完成的 fiber 节点树称为 current tree；更新渲染时，fiber 节点将被重用，current tree 会维持不变，更新内容反应为另一个 fiber 节点树 work-in-progress tree。当所有渲染流程走完时，work-in-progress tree 会被刷新到页面上，并成为新的 current tree（即 current tree 表示已渲染内容；work-in-progress tree 表示处理中的渲染内容）。current tree、work-in-progress tree 中的 fiber 节点以 alternate 属性相互持有对方，这样结对的处理方式便于延后批量应用更新内容，支持工作任务的可打断。下文将表明，Fiber Reconciler 的更新机制分为两阶段，render 阶段处理并获得以 work-in-progress tree 呈现的更新，commit 阶段应用 work-in-progress tree 的更新。</p>
<h4 id="update-queue"><a href="#update-queue" class="headerlink" title="update queue"></a>update queue</h4><p>可变的 state 更新会以 fiber.updateQueue 形式应用。<a href="https://github.com/facebook/react/blob/v16.12.0/packages/react-reconciler/src/ReactUpdateQueue.js#L10" target="_blank" rel="noopener">ReactUpdateQueue.js</a> 中阐明，UpdateQueue 跟 fiber 一样，也有 current queue、work-in-progress queue 两个队列。这两个队列共享同一个持久化的单链接链表。区别在于，这两个队列中指向活动中的 update 指针不同，work-in-progress 的指针索引在 render 阶段必然会大于或等于 current queue 的指针索引。提交阶段时，work-in-progress queue 会成为新的 current queue。任务的可中断正是在于，执行中的 work-in-progress queue 可被丢弃，并从 current queue 重新复制一份。</p>
<p>UpdateQueue 队列中的每个 update 任务有优先级标识。Reconciler 会根据优先级执行 update 任务。<a href="https://github.com/facebook/react/blob/v16.12.0/packages/react-reconciler/src/ReactUpdateQueue.js#L10" target="_blank" rel="noopener">ReactUpdateQueue.js</a> 指出需要特别注意的是，位于跳过的较低优先级之后高优先级任务仍旧会驻留在 UpdateQueue 队列中，就会造成这些高优先级任务被执行多次。正是因为这个原因，所以 render 阶段的生命周期函数才会打上 UNSAFE_ 标识，它们同样也会被执行多次，可能形成不必要的副作用（如在 UNSAFE_componentWillMount 中获取远程数据，请求就会发送多次）。</p>
<h4 id="expiration-time"><a href="#expiration-time" class="headerlink" title="expiration time"></a>expiration time</h4><p>fiber 任务的优先级与 fiber.expirationTime 息息相关。留待下回分解。</p>
<h4 id="side-effects"><a href="#side-effects" class="headerlink" title="side effects"></a>side effects</h4><p>除了 state 更新以外，react 官方将更新 ref 引用、调用生命周期、订阅 state 变更 dom 等都视为 side effects。<a href="https://www.zcfy.cc/original/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react" target="_blank" rel="noopener">Inside Fiber: in-depth overview of the new reconciliation algorithm in React</a> 引用了官方的原话：</p>
<p>You’ve likely performed data fetching, subscriptions, or manually changing the DOM from React components before. We call these operations “side effects” (or “effects” for short) because they can affect other components and can’t be done during rendering.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> type Fiber = &#123;|</span><br><span class="line">  <span class="comment">// current tree、work-in-progress tree 中的 fiber 节点以 alternate 属性相互持有对方</span></span><br><span class="line">  alternate: Fiber | <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// state 更新处理队列，以链表形式呈现</span></span><br><span class="line">  updateQueue: UpdateQueue&lt;any&gt; | <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 优先级 **/</span></span><br><span class="line">  expirationTime: ExpirationTime,<span class="comment">// fiber 任务预期执行时间，不包含子树中的更新</span></span><br><span class="line">  childExpirationTime: ExpirationTime,<span class="comment">// 用于判断子树中的任务是否执行完成</span></span><br><span class="line">  <span class="comment">// 以下四字段在 enableProfilerTimer 为 true 时设置</span></span><br><span class="line">  actualDuration?: number,<span class="comment">// 当前 fiber 及子孙的渲染时间，rerender 时重置为 0</span></span><br><span class="line">  actualStartTime?: number,<span class="comment">// render 阶段，fiber 任务开始时间</span></span><br><span class="line">  selfBaseDuration?: number,<span class="comment">// 当前 fiber 的历史渲染时间</span></span><br><span class="line">  treeBaseDuration?: number,<span class="comment">// 当前 fiber 子孙节点的历史渲染时间</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用于描述 fiber 及其子树的特性，ConcurrentMode 表示默认情况下子树是否应异步</span></span><br><span class="line">  <span class="comment">// 创建 fiber 时，默认继承父节点的 mode，创建时可修改，fiber 生命周期中将维持不变</span></span><br><span class="line">  mode: TypeOfMode,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** side-effects **/</span></span><br><span class="line">  effectTag: SideEffectTag,</span><br><span class="line">  nextEffect: Fiber | <span class="literal">null</span>,<span class="comment">// 链表结构，指向下一个带有 side-effects 的 fiber</span></span><br><span class="line">  firstEffect: Fiber | <span class="literal">null</span>,<span class="comment">// 链表中的首节点，便于快速更新链表</span></span><br><span class="line">  lastEffect: Fiber | <span class="literal">null</span>,<span class="comment">// 链表中的尾节点，便于快速更新链表</span></span><br><span class="line">|&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="render、commit-两阶段渲染"><a href="#render、commit-两阶段渲染" class="headerlink" title="render、commit 两阶段渲染"></a>render、commit 两阶段渲染</h2><p>如上文已指出，React 将渲染过程分为 render/reconciliation、commit 两阶段。<a href="http://www.ayqy.net/blog/dive-into-react-fiber/" target="_blank" rel="noopener">完全理解 React Fiber</a> 将这两阶段类比为 Virtual DOM 技术中的 diff、patch 过程。</p>
<ul>
<li>render 阶段计算并获取以 work-in-progress tree 呈现的更新，可中断；</li>
<li>commit 阶段应用 work-in-progress tree 的更新。</li>
</ul>
<p><a href="https://github.com/acdlite/react-fiber-architecture" target="_blank" rel="noopener">React Fiber Architecture</a> 中的以下描述也说明了两阶段的主要内容：</p>
<p>reconciliation：The algorithm React uses to diff one tree with another to determine which parts need to be changed.<br>update：A change in the data used to render a React app. Usually the result of <code>setState</code>. Eventually results in a re-render.</p>
<img src="/2020/02/22/frontend/react16/react%20fiber%20搜罗整理篇/lifecycle.png">
<h3 id="render-阶段"><a href="#render-阶段" class="headerlink" title="render 阶段"></a>render 阶段</h3><p>首次渲染时，reconciler 基于 React 元素创建 fiber，最终形成 fiber 节点树 current tree。当更新时，reconciler 会遍历 current tree，复用 fiber.alternate 备用节点，生成 work-in-progress tree。因为单个 fiber 也是 unit of work，work-in-progress tree 也可以称为任务单元树。</p>
<p>reconciler 会通过 performSyncWorkOnRoot、performConcurrentWorkOnRoot 函数启动 <a href="https://github.com/facebook/react/blob/v16.12.0/packages/react-reconciler/src/ReactFiberWorkLoop.js#L1459" target="_blank" rel="noopener">work-loop 循环</a> 。该循环会使用深度优先算法处理 work-in-progress tree，只有经过更新的 fiber 节点才会被处理。work-loop 循环有以下四种处理函数：</p>
<ul>
<li>performUnitOfWork：从 work-in-progress tree 中取出 fiber ，</li>
<li>beginWork：context 入栈后，更新当前 fiber 节点的 props、state 相关属性，视条件更新 side effects 链表，返回 fiber.child。</li>
<li>completeUnitOfWork：视条件更新 side effects 链表，返回 fiber.sibling 或 fiber.return。</li>
<li>completeWork：context 出栈等操作。</li>
</ul>
<p>performUnitOfWork、completeUnitOfWork 主要用于迭代 fiber 节点，主要更新活动由 beginWork、completeWork 完成。以下是这四种函数迭代节点的流程：</p>
<img src="/2020/02/22/frontend/react16/react%20fiber%20搜罗整理篇/loop-work.gif">
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">workLoopSync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (workInProgress !== <span class="literal">null</span>) &#123;</span><br><span class="line">    workInProgress = performUnitOfWork(workInProgress);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">performUnitOfWork</span>(<span class="params">workInProgress</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> next = beginWork(workInProgress);</span><br><span class="line">  <span class="keyword">if</span> (next === <span class="literal">null</span>) &#123;</span><br><span class="line">    next = completeUnitOfWork(workInProgress);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">beginWork</span>(<span class="params">workInProgress</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'work performed for '</span> + workInProgress.name);</span><br><span class="line">  <span class="keyword">return</span> workInProgress.child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">completeUnitOfWork</span>(<span class="params">unitOfWork</span>) </span>&#123;</span><br><span class="line">  workInProgress = unitOfWork;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> current = workInProgress.alternate;</span><br><span class="line">    <span class="keyword">const</span> returnFiber = workInProgress.return;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((workInProgress.effectTag &amp; Incomplete) === NoEffect) &#123;</span><br><span class="line">      <span class="keyword">let</span> next = completeWork(current, workInProgress, renderExpirationTime);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (next !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (returnFiber !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> next = unwindWork(workInProgress, renderExpirationTime);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (next !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (siblingFiber !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// If there is more work to do in this returnFiber, do that next.</span></span><br><span class="line">      <span class="keyword">return</span> siblingFiber;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Otherwise, return to the parent</span></span><br><span class="line">    workInProgress = returnFiber;</span><br><span class="line">  &#125; <span class="keyword">while</span> (workInProgress !== <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">completeWork</span>(<span class="params">workInProgress</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'work completed for '</span> + workInProgress.name);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>综上，更新时会生成部分节点带有 side effects 标识的 work-in-progress tree。effects list 链表会向上归并到父节点上，它会指示需要插入、更新或删除哪些节点，以及哪些组件需要调用其生命周期方法。current tree、work-in-progress tree、effects list 就是 render 阶段的所有产物（work-in-progress tree 在此时也被称为 finished-work tree）。</p>
<h3 id="commit-阶段"><a href="#commit-阶段" class="headerlink" title="commit 阶段"></a>commit 阶段</h3><p>commit 阶段的主要工作在于将 effects list 链表应用到 fiber 节点树上。这部分工作由 finishSyncRender、finishConcurrentRender 函数启动。主要功能则由 <a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberWorkLoop.js#L1720" target="_blank" rel="noopener">commitRootImpl.js</a> 完成。<a href="https://www.zcfy.cc/original/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react" target="_blank" rel="noopener">Inside Fiber: in-depth overview of the new reconciliation algorithm in React</a> 指出它包含如下操作：</p>
<ul>
<li>对标记了 Snapshot effect 的节点调用 getSnapshotBeforeUpdate 生命周期方法</li>
<li>对标记了 Deletion effect 的节点调用 componentWillUnmount 生命周期方法</li>
<li>执行所有 DOM 插入、更新和删除操作</li>
<li>将 finished-work tree 分配给 FiberRoot，并置为 current tree</li>
<li>对标记了 Placement effect 的节点调用 componentDidMount 生命周期方法</li>
<li>对标记了 Update effect 的节点调用 componentDidUpdate 生命周期方法</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>react fiber 是笔者长期没法啃下来的内容。这篇文章由以下文章汇总整理得来，却未对 scheduler、fiber 的优先级及类型等加诸说明。个中惭愧与骄傲处，留诗为念。</p>
<p>满身金紫一毛猴，偏腾赤手摘蟠桃。<br>不慎数声尽入水，引得御马都发笑。</p>
<p><a href="https://www.zcfy.cc/original/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react" target="_blank" rel="noopener">Inside Fiber: in-depth overview of the new reconciliation algorithm in React</a><br><a href="https://zhuanlan.zhihu.com/p/57346388" target="_blank" rel="noopener">[译]深入React fiber架构及源码</a><br><a href="https://github.com/acdlite/react-fiber-architecture" target="_blank" rel="noopener">React Fiber Architecture</a><br><a href="http://www.ayqy.net/blog/dive-into-react-fiber/" target="_blank" rel="noopener">完全理解 React Fiber</a><br><a href="https://makersden.io/blog/look-inside-fiber/" target="_blank" rel="noopener">A look inside React Fiber</a><br><a href="https://www.cnblogs.com/Darlietoothpaste/p/9941117.html" target="_blank" rel="noopener">React Fiber 源码分析</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>react</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>umi-plugin-qiankun</title>
    <url>/2020/02/17/frontend/%E5%B7%A5%E7%A8%8B%E5%8C%96/umi-plugin-qiankun/</url>
    <content><![CDATA[<p><a href="https://github.com/umijs/umi-plugin-qiankun" target="_blank" rel="noopener">umi-plugin-qiankun</a> 基于 <a href="http://xzfyu.com/2020/02/16/frontend/qiankun%20%E5%BE%AE%E6%9C%8D%E5%8A%A1/">qiankun</a>，允许在 umi 环境中创建微服务。</p>
<p>按官方示例，搭建 umi 微服务可基于以下流程实现：</p>
<ol>
<li>主应用 .umirc.js 添加 @umijs/plugin-qiankun 插件配置 master 内容：注册子应用（应用名、html 地址、路由前缀、路由方式、挂载节点、自定义属性等）、启动沙箱、启动预加载、启动异步渲染等。（备注：子应用也可以在运行时通过 src/app.js 这个特殊的运行时插件导出 qiankun 的方式动态注册）</li>
<li>子应用 .umirc.js 添加 @umijs/plugin-qiankun 插件配置 slave 内容：keepOriginalRoutes。</li>
<li>子应用入口文件中导出 qiankun = { bootstrap, mount, unmount }，非必要。</li>
</ol>
<p>综上，注册子应用的方式有两种：</p>
<ol>
<li>编译期通过 .umirc.js 注册。</li>
<li>运行时通过 src/app.js 注册。</li>
</ol>
<p>基于 qiankun、umi 的运作机制，使用 umi-plugin-qiankun 搭建微服务就是在运行时获取编译期或运行时配置，然后调用 qiankun 的接口注册子应用并启动微服务。因为需要在运行时注册子应用，所以就需要借助运行时插件的能力。在实现上，umi-plugin-qiankun 会通过 qiankun-master、qiankun-slave 这两个额外插件分别会调用 api.addRuntimePlugin 接口注册各自的 runtimePlugin 运行时插件。关于 umi 的运行时插件，可参考 <a href="http://xzfyu.com/2020/02/17/%E5%B7%A5%E7%A8%8B%E5%8C%96/umi%E8%BF%90%E8%A1%8C%E6%97%B6%E6%8F%92%E4%BB%B6/">umi 运行时插件</a>。</p>
<p>编译期配置（即 .umirc.js 中的 master、slave 内容）的获取，umi 提供的可实现方式是：</p>
<ol>
<li>首先通过 api.onOptionChange 监听编译期配置变更。</li>
<li>然后通过 api.changePluginOption 将配置内容传递给 qiankun-master、qiankun-slave 这两个额外插件。</li>
<li>在 qiankun-master、qiankun-slave 中，调用 api.writeTmpFile 将配置内容写入 subAppsConfig.json 临时文件。</li>
<li>runtimePlugin 运行时插件读取临时文件，并相应注册子应用。</li>
</ol>
<p>运行时配置（即 src/app.js 导出的 qiankun）的获取，umi 提供的可实现方式是：在 runtimePlugin 运行时插件通过调用 plugins.mergeConfigAsync(‘qiankun’) 读取导出内容。</p>
<h2 id="微服务注册启动流程"><a href="#微服务注册启动流程" class="headerlink" title="微服务注册启动流程"></a>微服务注册启动流程</h2><p>如上文，umi-plugin-qiankun 中的微服务注册启动流程就是读取编译器配置或运行时配置，再调用 qiankun 接口注册和启动微服务。这部分内容主要在 qiankun-master 这个额外插件实现。此外，umi-plugin-qiankun 支持使用 defer 配置异步渲染（子应用挂载在主应用渲染产生的节点上），这部分功能通过 api.writeTmpFile、api.addUmiExports 接口创建 qiankunDefer.js 临时文件实现。在启动微服务的流程中，umi-plugin-qiankun 首先会调用 render 脚本，然后（根据 defer 配置）等待 qiankunDefer 执行到 resolve 状态，最后调用 qiankun 接口启动微服务。想要使 qiankunDefer 变更到 resolve 状态，需要开发者手动调用 qiankunStart（也即 qiankunDefer.resolve）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*** qiankun-master *** runtimePlugin.js ***/</span></span><br><span class="line"><span class="comment">// 获取编译器配置（.umirc.js 中的 master、slave 内容）</span></span><br><span class="line"><span class="keyword">import</span> subAppConfig <span class="keyword">from</span> <span class="string">'@tmp/subAppsConfig.json'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取运行时配置（src/app.js 导出的 qiankun），运行时配置优先级高于编译器配置</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getMasterRuntime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> plugins = <span class="built_in">require</span>(<span class="string">'umi/_runtimePlugin'</span>);</span><br><span class="line">  <span class="keyword">const</span> config: GlobalOptions = (<span class="keyword">await</span> plugins.mergeConfigAsync(<span class="string">'qiankun'</span>)) || &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> &#123; master &#125; = config;</span><br><span class="line">  <span class="keyword">return</span> master || config;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">oldRender: typeof noop</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 执行 umi 应用的渲染脚本</span></span><br><span class="line">  <span class="comment">// 渲染脚本先于 defer 流程，defer 才有效</span></span><br><span class="line">  oldRender();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 子应用是否处于激活状态</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isAppActive</span>(<span class="params">location: Location, history: IConfig[<span class="string">'history'</span>], base: App[<span class="string">'base'</span>]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> baseConfig = toArray(base);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (history) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'hash'</span>:</span><br><span class="line">        <span class="keyword">return</span> baseConfig.some(<span class="function"><span class="params">pathPrefix</span> =&gt;</span> testPathWithPrefix(<span class="string">`#<span class="subst">$&#123;pathPrefix&#125;</span>`</span>, location.hash));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'browser'</span>:</span><br><span class="line">        <span class="keyword">return</span> baseConfig.some(<span class="function"><span class="params">pathPrefix</span> =&gt;</span> testPathWithPrefix(pathPrefix, location.pathname));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取运行时配置、编译器配置</span></span><br><span class="line">  <span class="keyword">const</span> runtimeConfig = <span class="keyword">await</span> getMasterRuntime();</span><br><span class="line">  <span class="keyword">const</span> &#123; apps, jsSandbox = <span class="literal">false</span>, prefetch = <span class="literal">true</span>, defer = <span class="literal">false</span>, lifeCycles, masterHistory, ...otherConfigs &#125; = &#123;</span><br><span class="line">    ...(subAppConfig <span class="keyword">as</span> Options),</span><br><span class="line">    ...(runtimeConfig <span class="keyword">as</span> Options),</span><br><span class="line">  &#125;;</span><br><span class="line">  assert(apps &amp;&amp; apps.length, <span class="string">'sub apps must be config when using umi-plugin-qiankun'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注册子应用</span></span><br><span class="line">  registerMicroApps(</span><br><span class="line">    apps.map(<span class="function">(<span class="params">&#123; name, entry, base, history = masterHistory, mountElementId = defaultMountContainerId, props &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">      name,</span><br><span class="line">      entry,</span><br><span class="line">      activeRule: <span class="function"><span class="params">location</span> =&gt;</span> isAppActive(location, history, base),</span><br><span class="line">      render: <span class="function">(<span class="params">&#123; appContent, loading &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.info(<span class="string">`app <span class="subst">$&#123;name&#125;</span> loading <span class="subst">$&#123;loading&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mountElementId) &#123;</span><br><span class="line">          <span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(mountElementId);</span><br><span class="line">          <span class="keyword">if</span> (container) &#123;</span><br><span class="line">            <span class="keyword">const</span> subApp = React.createElement(<span class="string">'div'</span>, &#123;</span><br><span class="line">              dangerouslySetInnerHTML: &#123;</span><br><span class="line">                __html: appContent,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line">            ReactDOM.render(subApp, container);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 将 base、history 都传入子应用</span></span><br><span class="line">      props: &#123;</span><br><span class="line">        base,</span><br><span class="line">        history,</span><br><span class="line">        ...props,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)),</span><br><span class="line">    lifeCycles,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 异步启动，需要在主应用中手动调用 qiankunStart 函数，以使 deferred 执行到 resolve 状态</span></span><br><span class="line">  <span class="keyword">if</span> (defer) &#123;</span><br><span class="line">    <span class="keyword">await</span> deferred.promise;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启动微服务</span></span><br><span class="line">  start(&#123; jsSandbox, prefetch, ...otherConfigs &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">api.writeTmpFile(</span><br><span class="line">  <span class="string">'qiankunDefer.js'</span>,</span><br><span class="line">  <span class="string">`</span></span><br><span class="line"><span class="string">    class Deferred &#123;</span></span><br><span class="line"><span class="string">      constructor() &#123;</span></span><br><span class="line"><span class="string">        this.promise = new Promise(resolve =&gt; this.resolve = resolve);</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    export const deferred = new Deferred();</span></span><br><span class="line"><span class="string">    export const qiankunStart = deferred.resolve;</span></span><br><span class="line"><span class="string">  `</span>.trim(),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">api.addUmiExports([</span><br><span class="line">  &#123;</span><br><span class="line">    specifiers: [<span class="string">'qiankunStart'</span>],</span><br><span class="line">    source: <span class="string">'@tmp/qiankunDefer'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<p>子应用侧，结合 qiankun 加载子应用脚本生命周期函数的机制，qiankun-slave 这个额外插件会借助 api.modifyDefaultConfig 为子应用设置跟路由、挂载节点、开启 runtimePublicPath 等；借助 api.modifyPublicPathStr 将 publicPath 设置为 window.<strong>INJECTED_PUBLIC_PATH_BY_QIANKUN</strong> 或 api.config.publicPath、’/‘ 等；借助 api.modifyWebpackConfig 将打包模式改为 umd 模式，并将开发环境的 publicPath 与开发服务器 ip 地址挂钩。与此同时，qiankun-slave 会借助 api.modifyHTMLWithAST 为子应用的入口文件加载节点打上 entry 标识；借助 api.chainWebpackConfig 为开发环境的 source-map 增添跨域能力。以下仅展示部分脚本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*** qiankun-slave *** index.ts ***/</span></span><br><span class="line">api.modifyHTMLWithAST(<span class="function"><span class="params">$</span> =&gt;</span> &#123;</span><br><span class="line">  $(<span class="string">'script'</span>).each(<span class="function">(<span class="params">_, el</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> scriptEl = $(el);</span><br><span class="line">    <span class="keyword">const</span> umiEntryJs = <span class="regexp">/\/?umi(\.\w+)?\.js$/g</span>;</span><br><span class="line">    <span class="keyword">if</span> (umiEntryJs.test(scriptEl.attr(<span class="string">'src'</span>) ?? <span class="string">''</span>)) &#123;</span><br><span class="line">      scriptEl.attr(<span class="string">'entry'</span>, <span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> $;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span> &amp;&amp; port) &#123;</span><br><span class="line">  <span class="comment">// 变更 webpack-dev-server websocket 默认监听地址</span></span><br><span class="line">  process.env.SOCKET_SERVER = <span class="string">`<span class="subst">$&#123;protocol&#125;</span>://<span class="subst">$&#123;localIpAddress&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>;</span><br><span class="line">  api.chainWebpackConfig(<span class="function"><span class="params">memo</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 禁用 devtool，启用 SourceMapDevToolPlugin</span></span><br><span class="line">    memo.devtool(<span class="literal">false</span>);</span><br><span class="line">    memo.plugin(<span class="string">'source-map'</span>).use(webpack.SourceMapDevToolPlugin, [</span><br><span class="line">      &#123;</span><br><span class="line">        namespace: pkgName,</span><br><span class="line">        append: <span class="string">`\n//# sourceMappingURL=<span class="subst">$&#123;protocol&#125;</span>://<span class="subst">$&#123;localIpAddress&#125;</span>:<span class="subst">$&#123;port&#125;</span>/[url]`</span>,</span><br><span class="line">        filename: <span class="string">'[file].map'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ]);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="子应用的生命周期函数"><a href="#子应用的生命周期函数" class="headerlink" title="子应用的生命周期函数"></a>子应用的生命周期函数</h2><p>umi-plugin-qiankun 允许在子应用的 src/app.js 配置生命周期函数。获取该部分的运行时配置同样通过添加运行时脚本实现，但这次并没有调用 api.addRuntimePlugin，而是调用 api.addRendererWrapperWithModule 将 qiankun-slave 插件中的 lifecycles.ts 模块注入到 umi.js 入口文件中，再通过调用 api.addEntryCode 使 umi.js 导出 bootstrap、mount、unmount 生命周期函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*** qiankun-slave *** index.ts ***/</span></span><br><span class="line"><span class="keyword">const</span> lifecyclePath = <span class="built_in">require</span>.resolve(<span class="string">'./lifecycles'</span>);</span><br><span class="line">api.addEntryImport(&#123;</span><br><span class="line">  source: lifecyclePath,</span><br><span class="line">  specifier:</span><br><span class="line">    <span class="string">'&#123; genMount as qiankun_genMount, genBootstrap as qiankun_genBootstrap, genUnmount as qiankun_genUnmount &#125;'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// lifecycles.ts 以 moduleBeforeRendererPromises 形式添加到入口文件中</span></span><br><span class="line"><span class="comment">// moduleBeforeRendererPromises 为什么返回 Promise，就像这个插件中的情形一样，可以改写 render</span></span><br><span class="line"><span class="comment">// 改写完成后，再通过 resolve 进行渲染操作</span></span><br><span class="line">api.addRendererWrapperWithModule(lifecyclePath);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 往入口文件中插入脚本，对应 entry.js.tpl 中的 code，render 脚本渲染后再调用</span></span><br><span class="line">api.addEntryCode(</span><br><span class="line">  <span class="string">`</span></span><br><span class="line"><span class="string">  export const bootstrap = qiankun_genBootstrap(Promise.all(moduleBeforeRendererPromises), render);</span></span><br><span class="line"><span class="string">  export const mount = qiankun_genMount();</span></span><br><span class="line"><span class="string">  export const unmount = qiankun_genUnmount('<span class="subst">$&#123;mountElementId&#125;</span>');</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  if (!window.__POWERED_BY_QIANKUN__) &#123;</span></span><br><span class="line"><span class="string">    bootstrap().then(mount);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** qiankun-slave *** lifecycles.ts ***/</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; noop &#125; <span class="keyword">from</span> <span class="string">'../common'</span>;</span><br><span class="line"></span><br><span class="line">type Defer = &#123;</span><br><span class="line">  promise: <span class="built_in">Promise</span>&lt;any&gt;;</span><br><span class="line">  resolve(value?: any): <span class="keyword">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defer: Defer = &#123;&#125;;</span><br><span class="line">defer.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  defer.resolve = resolve;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> render = noop;</span><br><span class="line"><span class="keyword">let</span> hasMountedAtLeastOnce = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// moduleBeforeRendererPromises 处理机制，需要返回 Promise</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; defer.promise;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/app.js 中配置的生命周期函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSlaveRuntime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> plugins = <span class="built_in">require</span>(<span class="string">'umi/_runtimePlugin'</span>);</span><br><span class="line">  <span class="keyword">const</span> config = plugins.mergeConfig(<span class="string">'qiankun'</span>) || &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> &#123; slave &#125; = config;</span><br><span class="line">  <span class="keyword">return</span> slave || config;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引导函数，先执行 src/app.js 中配置的 bootstrap 生命周期</span></span><br><span class="line"><span class="comment">// 然后改写 render 脚本，渲染失败予以提示</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">genBootstrap</span>(<span class="params">promises: Promise&lt;any&gt;, oldRender: typeof noop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (...args: any[]) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> slaveRuntime = getSlaveRuntime();</span><br><span class="line">    <span class="keyword">if</span> (slaveRuntime.bootstrap) <span class="keyword">await</span> slaveRuntime.bootstrap(...args);</span><br><span class="line">    render = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">      promises.then(oldRender).catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(<span class="string">'Render failed'</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载函数，先调用 defer.resolve 引起 render 渲染脚本执行</span></span><br><span class="line"><span class="comment">// 其次执行 src/app.js 中配置的 mount 生命周期</span></span><br><span class="line"><span class="comment">// 其次若非首次 mount，手动调用 render 渲染脚本</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">genMount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (...args: any[]) =&gt; &#123;</span><br><span class="line">    defer.resolve();</span><br><span class="line">    <span class="keyword">const</span> slaveRuntime = getSlaveRuntime();</span><br><span class="line">    <span class="keyword">if</span> (slaveRuntime.mount) <span class="keyword">await</span> slaveRuntime.mount(...args);</span><br><span class="line">    <span class="comment">// 第一次 mount umi 会自动触发 render，非第一次 mount 则需手动触发</span></span><br><span class="line">    <span class="keyword">if</span> (hasMountedAtLeastOnce) &#123;</span><br><span class="line">      render();</span><br><span class="line">    &#125;</span><br><span class="line">    hasMountedAtLeastOnce = <span class="literal">true</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">genUnmount</span>(<span class="params">mountElementId: string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (...args: any[]) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(mountElementId);</span><br><span class="line">    <span class="keyword">if</span> (container) &#123;</span><br><span class="line">      ReactDOM.unmountComponentAtNode(container);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> slaveRuntime = getSlaveRuntime();</span><br><span class="line">    <span class="keyword">if</span> (slaveRuntime.unmount) <span class="keyword">await</span> slaveRuntime.unmount(...args);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="应用间的数据共享"><a href="#应用间的数据共享" class="headerlink" title="应用间的数据共享"></a>应用间的数据共享</h2><p>如 umi-plugin-qiankun 文档中所述，应用间的数据共享可通过 props 实现（子应用注册方式采用运行时配置），其次可基于公共的 hooks 实现共享。基于 hooks 实现数据共享的流程为：</p>
<ol>
<li>开发者手动在主应用的工程目录下添加 src/rootExports.js 并导出 hooks；</li>
<li>由 qiankun-master 读取这些 hooks，并通过临时文件 qiankunRootExports.js 将其赋值到 window.g_rootExports 属性中；</li>
<li>由 qiankun-slave 创建 qiankunContext.js 临时文件，调用 React.createContext 生成上下文；</li>
<li>由 qiankun-slave 添加 rootContainer 类运行时脚本，以 qiankunContext 包裹原先的根节点，上下文中传入 window.g_rootExports 属性。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*** qiankun-master *** index.ts ***/</span></span><br><span class="line"><span class="keyword">const</span> rootExportsFile = join(api.paths.absSrcPath, <span class="string">'rootExports.js'</span>);</span><br><span class="line">api.addPageWatcher(rootExportsFile);</span><br><span class="line"></span><br><span class="line">api.onGenerateFiles(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> rootExports = <span class="string">`</span></span><br><span class="line"><span class="string">window.g_rootExports = <span class="subst">$&#123;existsSync(rootExportsFile) ? <span class="string">`require('@/rootExports')`</span> : <span class="string">`&#123;&#125;`</span>&#125;</span>;</span></span><br><span class="line"><span class="string">  `</span>.trim();</span><br><span class="line">  api.writeTmpFile(<span class="string">'qiankunRootExports.js'</span>, rootExports);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** qiankun-slave *** index.ts ***/</span></span><br><span class="line">api.writeTmpFile(</span><br><span class="line">    <span class="string">'qiankunContext.js'</span>,</span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string">import &#123; createContext, useContext &#125; from 'react';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export const Context = createContext(null);</span></span><br><span class="line"><span class="string">export function useRootExports() &#123;</span></span><br><span class="line"><span class="string">  return useContext(Context);</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">`</span>.trim(),</span><br><span class="line">);</span><br><span class="line">api.addUmiExports([</span><br><span class="line">  &#123;</span><br><span class="line">    specifiers: [<span class="string">'useRootExports'</span>],</span><br><span class="line">    source: <span class="string">'@tmp/qiankunContext'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** qiankun-slave *** runtimePlguin.ts ***/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rootContainer</span>(<span class="params">container: HTMLElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> value = (<span class="built_in">window</span> <span class="keyword">as</span> any).g_rootExports;</span><br><span class="line">  <span class="comment">// eslint-disable-next-line global-require</span></span><br><span class="line">  <span class="keyword">const</span> &#123; Context &#125; = <span class="built_in">require</span>(<span class="string">'@tmp/qiankunContext'</span>);</span><br><span class="line">  <span class="keyword">return</span> React.createElement(Context.Provider, &#123; value &#125;, container);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>稍稍厘清这个插件已觉费力，再看到 umi 团队规划中的任务项”子应用嵌套、公共依赖加载策略“，略感望尘莫及。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>前端工程化</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>umi 运行时插件</title>
    <url>/2020/02/17/frontend/%E5%B7%A5%E7%A8%8B%E5%8C%96/umi%E8%BF%90%E8%A1%8C%E6%97%B6%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h2><p>runtimePlugin 运行时插件也遵循先注册、后使用的流程。运行时插件表现为数组形式，数组项为运行时插件的导出对象。导出对象中的属性可以是函数、或对象、返回对象的 Promise（前者可称为执行类导出，后两者可称为配置类导出，因其用于获取配置项）。umi 包中的 runtimePlugin.js 提供了如下方法：</p>
<ul>
<li>plugins：运行时插件集合。</li>
<li>validKeys：校验 key 键集合。</li>
<li>init({ validKeys })：清空 plugins，赋值 plugins。</li>
<li>use(plugin)：注册插件，并校验插件的 key 键。</li>
<li>getItem(key)：获取 key 键为指定值的插件。</li>
<li>compose(item, { initialValue })：选用执行类导出以 reduce 机制依次执行其中的函数，函数执行时参数为上游的返回值。</li>
<li>apply(item, { initialValue, args })：选用执行类导出以 reduce 机制依次执行其中的函数，函数执行时参数为上游的返回值 memo，以及 apply 调用时传参 args。</li>
<li>applyForEach(item, { initialValue })：选用执行类导出以 array.forEach 机制依次执行其中的函数，函数执行时参数为 initialValue。</li>
<li>mergeConfig(item)：选用纯对象配置类导出，混合其配置输出。</li>
<li>mergeConfigAsync(item)：选用 Promise 形式的配置类导出，混合其配置输出。</li>
</ul>
<p>上述方法的有效性都依赖于 plugins 运行时插件集合、validKeys 校验 key 键集合非空。那么，plugins、validKeys 都是在什么装填进内容的呢？采用倒溯法，我们可以在 umi-build-dev 包下的 entry.js.tpl 入口文件模板中找到如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> plugins = <span class="built_in">require</span>(<span class="string">'umi/_runtimePlugin'</span>);<span class="comment">// 实际就是 umi 包中的 runtimePlugin.js</span></span><br><span class="line">&#123;&#123;#globalVariables&#125;&#125;</span><br><span class="line"><span class="built_in">window</span>.g_plugins = plugins;</span><br><span class="line">&#123;&#123;/globalVariables&#125;&#125;</span><br><span class="line">plugins.init(&#123;</span><br><span class="line">  validKeys: [&#123;&#123;#validKeys&#125;&#125;'&#123;&#123;&#123; . &#125;&#125;&#125;',&#123;&#123;/validKeys&#125;&#125;],</span><br><span class="line">&#125;);</span><br><span class="line">&#123;&#123;#plugins&#125;&#125;</span><br><span class="line">plugins.use(<span class="built_in">require</span>(<span class="string">'&#123;&#123;&#123; . &#125;&#125;&#125;'</span>));</span><br><span class="line">&#123;&#123;/plugins&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>上述入口文件模板代码也即意味着 umi 在启动时会将运行时插件及其校验 key 键集合通过 mustache 模板引擎装填到入口文件中，以便其他调用文件所使用。实际入口文件内容由以下代码填充：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*** umi-build-dev *** FilesGenerator.js ***/</span></span><br><span class="line"><span class="comment">// 调用 addRuntimePlugin 插件钩子，获得 umi 内部以及各 umi-plugin-* 注册的运行时插件</span></span><br><span class="line"><span class="keyword">const</span> plugins = <span class="keyword">this</span>.service</span><br><span class="line">  .applyPlugins(<span class="string">'addRuntimePlugin'</span>, &#123;</span><br><span class="line">    initialValue: [],</span><br><span class="line">  &#125;)</span><br><span class="line">  .map(<span class="function"><span class="params">plugin</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> winPath(relative(paths.absTmpDirPath, plugin));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 addRuntimePluginKey 插件钩子，获得 umi 内部以及各 umi-plugin-* 注册的运行时插件校验 key 键</span></span><br><span class="line"><span class="keyword">const</span> validKeys = <span class="keyword">this</span>.service.applyPlugins(<span class="string">'addRuntimePluginKey'</span>, &#123;</span><br><span class="line">  initialValue: [</span><br><span class="line">    <span class="string">'patchRoutes'</span>,</span><br><span class="line">    <span class="string">'render'</span>,</span><br><span class="line">    <span class="string">'rootContainer'</span>,</span><br><span class="line">    <span class="string">'modifyRouteProps'</span>,</span><br><span class="line">    <span class="string">'onRouteChange'</span>,</span><br><span class="line">    <span class="string">'modifyInitialProps'</span>,</span><br><span class="line">    <span class="string">'initialProps'</span>,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 mustache 模板引擎生成入口文件内容，为其装填运行时插件及其校验 key 键</span></span><br><span class="line"><span class="keyword">const</span> entryContent = Mustache.render(entryTpl, &#123;</span><br><span class="line">  globalVariables: !<span class="keyword">this</span>.service.config.disableGlobalVariables,</span><br><span class="line">  code: <span class="keyword">this</span>.service</span><br><span class="line">    .applyPlugins(<span class="string">'addEntryCode'</span>, &#123;</span><br><span class="line">      initialValue: [],</span><br><span class="line">    &#125;)</span><br><span class="line">    .join(<span class="string">'\n\n'</span>),</span><br><span class="line">  codeAhead: <span class="keyword">this</span>.service</span><br><span class="line">    .applyPlugins(<span class="string">'addEntryCodeAhead'</span>, &#123;</span><br><span class="line">      initialValue: [],</span><br><span class="line">    &#125;)</span><br><span class="line">    .join(<span class="string">'\n\n'</span>),</span><br><span class="line">  imports: importsToStr(</span><br><span class="line">    <span class="keyword">this</span>.service.applyPlugins(<span class="string">'addEntryImport'</span>, &#123;</span><br><span class="line">      initialValue: moduleBeforeRenderer,</span><br><span class="line">    &#125;),</span><br><span class="line">  ).join(<span class="string">'\n'</span>),</span><br><span class="line">  importsAhead: importsToStr(</span><br><span class="line">    <span class="keyword">this</span>.service.applyPlugins(<span class="string">'addEntryImportAhead'</span>, &#123;</span><br><span class="line">      initialValue: [],</span><br><span class="line">    &#125;),</span><br><span class="line">  ).join(<span class="string">'\n'</span>),</span><br><span class="line">  polyfillImports: importsToStr(</span><br><span class="line">    <span class="keyword">this</span>.service.applyPlugins(<span class="string">'addEntryPolyfillImports'</span>, &#123;</span><br><span class="line">      initialValue: [],</span><br><span class="line">    &#125;),</span><br><span class="line">  ).join(<span class="string">'\n'</span>),</span><br><span class="line">  moduleBeforeRenderer,</span><br><span class="line">  render: initialRender,</span><br><span class="line">  plugins,</span><br><span class="line">  validKeys,</span><br><span class="line">  htmlTemplateMap: htmlTemplateMap.join(<span class="string">'\n'</span>),</span><br><span class="line">  findRoutePath: winPath(<span class="built_in">require</span>.resolve(<span class="string">'./findRoute'</span>)),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>提供给 umi-plugin-* 插件所使用的 api.addRuntimePlugin、api.addRuntimePluginKey 作为 ADD 类型的插件钩子，其意义在于给 opts.memo 添加元素，然后在 applyPlugins 阶段输出 plugins、validKeys。关于 umi 的插件钩子，可参看 <a href="http://xzfyu.com/2020/02/16/%E5%B7%A5%E7%A8%8B%E5%8C%96/umi%20%E6%8F%92%E4%BB%B6%E9%92%A9%E5%AD%90%E6%9C%BA%E5%88%B6/">umi 插件钩子机制</a>。</p>
<h2 id="内置实例"><a href="#内置实例" class="headerlink" title="内置实例"></a>内置实例</h2><p>从上方源码也可以看出，umi 内置有 patchRoutes、render、rootContainer、modifyRouteProps、onRouteChange、modifyInitialProps、initialProps 等运行时插件。</p>
<h3 id="入口文件生成机制"><a href="#入口文件生成机制" class="headerlink" title="入口文件生成机制"></a>入口文件生成机制</h3><p>要说明这些插件的意义，先要解释一下 umi 中入口文件 umi.js 的生成策略。这部分功能由 FilesGenerator.js 模块中的 generateEntry 方法完成。它遵照一下流程：</p>
<ol>
<li>读取 entry.js.tpl 模板。</li>
<li>根据 SSR、CSR 渲染策略生成 render 渲染脚本（生成 rootContainer 应用根元素并完成挂载）。</li>
<li>执行 modifyEntryRender 插件钩子，改写 render 渲染脚本。</li>
<li>执行 addRendererWrapperWithModule 插件钩子，获取 render 渲染前执行脚本。</li>
<li>执行 addRuntimePlugin、addRuntimePluginKey 插件钩子，获取运行时插件及其校验 key 键。较为特殊的运行时插件为工程目录下的 app.js 文件。</li>
<li>如果是 SSR 渲染，生成服务端渲染 html 模板（注：不甚理解）。</li>
<li>通过 mustache 模板引擎生成 umi.js 入口文件脚本内容。</li>
<li>将入口文件脚本内容写入打包文件夹中。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*** umi-build-dev *** FilesGenerator.js ***/</span></span><br><span class="line">generateEntry() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; paths, config &#125; = <span class="keyword">this</span>.service;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 步骤 1</span></span><br><span class="line">  <span class="keyword">const</span> entryTpl = readFileSync(paths.defaultEntryTplPath, <span class="string">'utf-8'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 步骤 2、3</span></span><br><span class="line">  <span class="keyword">const</span> initialRender = <span class="keyword">this</span>.service.applyPlugins(<span class="string">'modifyEntryRender'</span>, &#123;</span><br><span class="line">    initialValue: <span class="string">`</span></span><br><span class="line"><span class="string">window.g_isBrowser = true;</span></span><br><span class="line"><span class="string">let props = &#123;&#125;;</span></span><br><span class="line"><span class="string">// Both support SSR and CSR</span></span><br><span class="line"><span class="string">if (window.g_useSSR) &#123;</span></span><br><span class="line"><span class="string">  // 如果开启服务端渲染则客户端组件初始化 props 使用服务端注入的数据</span></span><br><span class="line"><span class="string">  props = window.g_initialData;</span></span><br><span class="line"><span class="string">&#125; else &#123;</span></span><br><span class="line"><span class="string">  const pathname = location.pathname;</span></span><br><span class="line"><span class="string">  const activeRoute = findRoute(require('@@/router').routes, pathname);</span></span><br><span class="line"><span class="string">  // 在客户端渲染前，执行 getInitialProps 方法</span></span><br><span class="line"><span class="string">  // 拿到初始数据</span></span><br><span class="line"><span class="string">  if (activeRoute &amp;&amp; activeRoute.component &amp;&amp; activeRoute.component.getInitialProps) &#123;</span></span><br><span class="line"><span class="string">    const initialProps = plugins.apply('modifyInitialProps', &#123;</span></span><br><span class="line"><span class="string">      initialValue: &#123;&#125;,</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    props = activeRoute.component.getInitialProps ? await activeRoute.component.getInitialProps(&#123;</span></span><br><span class="line"><span class="string">      route: activeRoute,</span></span><br><span class="line"><span class="string">      isServer: false,</span></span><br><span class="line"><span class="string">      location,</span></span><br><span class="line"><span class="string">      ...initialProps,</span></span><br><span class="line"><span class="string">    &#125;) : &#123;&#125;;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">const rootContainer = plugins.apply('rootContainer', &#123;</span></span><br><span class="line"><span class="string">  initialValue: React.createElement(require('./router').default, props),</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">ReactDOM[window.g_useSSR ? 'hydrate' : 'render'](</span></span><br><span class="line"><span class="string">  rootContainer,</span></span><br><span class="line"><span class="string">  document.getElementById('<span class="subst">$&#123;config.mountElementId&#125;</span>'),</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string">    `</span>.trim(),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 步骤 4</span></span><br><span class="line">  <span class="keyword">const</span> moduleBeforeRenderer = <span class="keyword">this</span>.service</span><br><span class="line">    .applyPlugins(<span class="string">'addRendererWrapperWithModule'</span>, &#123;</span><br><span class="line">      initialValue: [],</span><br><span class="line">    &#125;)</span><br><span class="line">    .map(<span class="function">(<span class="params">source, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        source,</span><br><span class="line">        specifier: <span class="string">`moduleBeforeRenderer<span class="subst">$&#123;index&#125;</span>`</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 步骤 5</span></span><br><span class="line">  <span class="keyword">const</span> plugins = <span class="keyword">this</span>.service</span><br><span class="line">    .applyPlugins(<span class="string">'addRuntimePlugin'</span>, &#123;</span><br><span class="line">      initialValue: [],</span><br><span class="line">    &#125;)</span><br><span class="line">    .map(<span class="function"><span class="params">plugin</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> winPath(relative(paths.absTmpDirPath, plugin));</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">if</span> (findJS(paths.absSrcPath, <span class="string">'app'</span>)) &#123;</span><br><span class="line">    plugins.push(<span class="string">'@/app'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> validKeys = <span class="keyword">this</span>.service.applyPlugins(<span class="string">'addRuntimePluginKey'</span>, &#123;</span><br><span class="line">    initialValue: [</span><br><span class="line">      <span class="string">'patchRoutes'</span>,</span><br><span class="line">      <span class="string">'render'</span>,</span><br><span class="line">      <span class="string">'rootContainer'</span>,</span><br><span class="line">      <span class="string">'modifyRouteProps'</span>,</span><br><span class="line">      <span class="string">'onRouteChange'</span>,</span><br><span class="line">      <span class="string">'modifyInitialProps'</span>,</span><br><span class="line">      <span class="string">'initialProps'</span>,</span><br><span class="line">    ],</span><br><span class="line">  &#125;);</span><br><span class="line">  assert(</span><br><span class="line">    uniq(validKeys).length === validKeys.length,</span><br><span class="line">    <span class="string">`Conflict keys found in [<span class="subst">$&#123;validKeys.join(<span class="string">', '</span>)&#125;</span>]`</span>,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 步骤 6</span></span><br><span class="line">  <span class="keyword">let</span> htmlTemplateMap = [];</span><br><span class="line">  <span class="keyword">if</span> (config.ssr) &#123;</span><br><span class="line">    <span class="keyword">const</span> isProd = process.env.NODE_ENV === <span class="string">'production'</span>;</span><br><span class="line">    <span class="keyword">const</span> routePaths = getRoutePaths(<span class="keyword">this</span>.RoutesManager.routes);</span><br><span class="line">    htmlTemplateMap = routePaths.map(<span class="function"><span class="params">routePath</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> ssrHtml = <span class="string">'&lt;&gt;&lt;/&gt;'</span>;</span><br><span class="line">      <span class="keyword">const</span> hg = getHtmlGenerator(<span class="keyword">this</span>.service, &#123;</span><br><span class="line">        chunksMap: &#123;</span><br><span class="line">          <span class="comment">// TODO, for dynamic chunks</span></span><br><span class="line">          <span class="comment">// placeholder waiting manifest</span></span><br><span class="line">          umi: [</span><br><span class="line">            isProd ? <span class="string">'__UMI_SERVER__.js'</span> : <span class="string">'umi.js'</span>,</span><br><span class="line">            isProd ? <span class="string">'__UMI_SERVER__.css'</span> : <span class="string">'umi.css'</span>,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">        headScripts: [</span><br><span class="line">          &#123;</span><br><span class="line">            content: <span class="string">'window.g_useSSR=true;'</span>.trim(),</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">        scripts: [</span><br><span class="line">          &#123;</span><br><span class="line">            content: <span class="string">`window.g_initialData = \$&#123;stringify(props)&#125;;`</span>.trim(),</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">const</span> content = hg.getMatchedContent(normalizePath(routePath, config.base));</span><br><span class="line">      ssrHtml = htmlToJSX(content).replace(</span><br><span class="line">        <span class="string">`&lt;div id="<span class="subst">$&#123;config.mountElementId || <span class="string">'root'</span>&#125;</span>"&gt;&lt;/div&gt;`</span>,</span><br><span class="line">        <span class="string">`&lt;div id="<span class="subst">$&#123;config.mountElementId || <span class="string">'root'</span>&#125;</span>"&gt;&#123;rootContainer&#125;&lt;/div&gt;`</span>,</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`'<span class="subst">$&#123;routePath&#125;</span>': (<span class="subst">$&#123;ssrHtml&#125;</span>),`</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 步骤 7</span></span><br><span class="line">  <span class="keyword">const</span> entryContent = Mustache.render(entryTpl, &#123;</span><br><span class="line">    globalVariables: !<span class="keyword">this</span>.service.config.disableGlobalVariables,<span class="comment">// 是否配置 window.g_history 等全局变量</span></span><br><span class="line">    code: <span class="keyword">this</span>.service<span class="comment">// 入口文件处添加的执行脚本，渲染后</span></span><br><span class="line">      .applyPlugins(<span class="string">'addEntryCode'</span>, &#123;</span><br><span class="line">        initialValue: [],</span><br><span class="line">      &#125;)</span><br><span class="line">      .join(<span class="string">'\n\n'</span>),</span><br><span class="line">    codeAhead: <span class="keyword">this</span>.service<span class="comment">// 入口文件处添加的执行脚本，渲染前</span></span><br><span class="line">      .applyPlugins(<span class="string">'addEntryCodeAhead'</span>, &#123;</span><br><span class="line">        initialValue: [],</span><br><span class="line">      &#125;)</span><br><span class="line">      .join(<span class="string">'\n\n'</span>),</span><br><span class="line">    imports: importsToStr(<span class="comment">// 入口文件 import 的模块</span></span><br><span class="line">      <span class="keyword">this</span>.service.applyPlugins(<span class="string">'addEntryImport'</span>, &#123;</span><br><span class="line">        initialValue: moduleBeforeRenderer,</span><br><span class="line">      &#125;),</span><br><span class="line">    ).join(<span class="string">'\n'</span>),</span><br><span class="line">    importsAhead: importsToStr(<span class="comment">// 入口文件 import 的模块</span></span><br><span class="line">      <span class="keyword">this</span>.service.applyPlugins(<span class="string">'addEntryImportAhead'</span>, &#123;</span><br><span class="line">        initialValue: [],</span><br><span class="line">      &#125;),</span><br><span class="line">    ).join(<span class="string">'\n'</span>),</span><br><span class="line">    polyfillImports: importsToStr(<span class="comment">// 入口文件最顶层 import 的 ployfill 模块</span></span><br><span class="line">      <span class="keyword">this</span>.service.applyPlugins(<span class="string">'addEntryPolyfillImports'</span>, &#123;</span><br><span class="line">        initialValue: [],</span><br><span class="line">      &#125;),</span><br><span class="line">    ).join(<span class="string">'\n'</span>),</span><br><span class="line">    moduleBeforeRenderer,<span class="comment">// render 脚本执行前的操作函数</span></span><br><span class="line">    render: initialRender,<span class="comment">// 渲染 rootContainer 的 render 脚本</span></span><br><span class="line">    plugins,<span class="comment">// 运行时插件集合</span></span><br><span class="line">    validKeys,<span class="comment">// 运行时插件校验 key 键集合</span></span><br><span class="line">    htmlTemplateMap: htmlTemplateMap.join(<span class="string">'\n'</span>),<span class="comment">// 服务端渲染 html 模板</span></span><br><span class="line">    findRoutePath: winPath(<span class="built_in">require</span>.resolve(<span class="string">'./findRoute'</span>)),<span class="comment">// 提供 findRoute、getUrlQuery 函数的 findRoute 模块位置</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 步骤 8</span></span><br><span class="line">  writeContent(paths.absLibraryJSPath, prettierFile(<span class="string">`<span class="subst">$&#123;entryContent.trim()&#125;</span>\n`</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p>render 运行时插件的功能在于对渲染脚本进行封装。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*** umi-build-dev *** entry.js.tpl ***/</span></span><br><span class="line"><span class="keyword">const</span> render = plugins.compose(<span class="string">'render'</span>, &#123; <span class="attr">initialValue</span>: clientRender &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="rootContainer"><a href="#rootContainer" class="headerlink" title="rootContainer"></a>rootContainer</h3><p>rootContainer 运行时插件的功能在于对渲染脚本进行封装。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*** umi-build-dev *** entry.js.tpl ***/</span></span><br><span class="line"><span class="keyword">const</span> rootContainer = plugins.apply(<span class="string">'rootContainer'</span>, &#123;</span><br><span class="line">  initialValue: App,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="patchRoutes"><a href="#patchRoutes" class="headerlink" title="patchRoutes"></a>patchRoutes</h3><p>patchRoutes 运行时插件的功能在于追加或修改路由。其流程为：编译阶段获得配置路由或扫描文件路由，然后在运行时对这些路由进行再处理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*** umi-build-dev *** router.js.tpl ***/</span></span><br><span class="line"><span class="keyword">const</span> plugins = <span class="built_in">require</span>(<span class="string">'umi/_runtimePlugin'</span>);</span><br><span class="line">plugins.applyForEach(<span class="string">'patchRoutes'</span>, &#123; <span class="attr">initialValue</span>: routes &#125;);<span class="comment">// routes 为编译阶段输出路由</span></span><br></pre></td></tr></table></figure>
<h3 id="onRouteChange"><a href="#onRouteChange" class="headerlink" title="onRouteChange"></a>onRouteChange</h3><p>onRouteChange 运行时插件的功能在于监听路由变更信息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*** umi *** router.js.tpl ***/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">routeChangeHandler</span>(<span class="params">location, action</span>) </span>&#123;</span><br><span class="line">  plugins.applyForEach(<span class="string">'onRouteChange'</span>, &#123;</span><br><span class="line">    initialValue: &#123;</span><br><span class="line">      routes,</span><br><span class="line">      location,</span><br><span class="line">      action,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="modifyRouteProps、modifyInitialProps、initialProps"><a href="#modifyRouteProps、modifyInitialProps、initialProps" class="headerlink" title="modifyRouteProps、modifyInitialProps、initialProps"></a>modifyRouteProps、modifyInitialProps、initialProps</h3><p>modifyRouteProps、modifyInitialProps 的功能在于修改注入路由组件的 props。modifyInitialProps、initialProps 在服务端渲染时使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*** umi *** renderRoutes.js ***/</span></span><br><span class="line"><span class="keyword">const</span> newProps = plugins.apply(<span class="string">'modifyRouteProps'</span>, &#123;</span><br><span class="line">  initialValue: &#123;</span><br><span class="line">    ...props,</span><br><span class="line">    ...extraProps,</span><br><span class="line">    ...compatProps,</span><br><span class="line">  &#125;,</span><br><span class="line">  args: &#123; route &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">component</span>: Component &#125; = route;</span><br><span class="line"><span class="keyword">if</span> (__IS_BROWSER &amp;&amp; Component.getInitialProps) &#123;</span><br><span class="line">  <span class="keyword">const</span> initialProps = plugins.apply(<span class="string">'modifyInitialProps'</span>, &#123;</span><br><span class="line">    initialValue: &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  Component = wrapWithInitialProps(Component, initialProps);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;Component &#123;...newProps&#125; route=&#123;route&#125;&gt;</span><br><span class="line">    &#123;childRoutes&#125;</span><br><span class="line">  &lt;<span class="regexp">/Component&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>frontend</category>
        <category>前端工程化</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>qiankun 微服务</title>
    <url>/2020/02/16/frontend/architecture/qiankun%20%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p><a href="https://qiankun.umijs.org/zh/" target="_blank" rel="noopener">qiankun</a> 基于 <a href="http://xzfyu.com/2020/02/15/frontend/single-spa%20%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1/">single-spa</a>、<a href="https://github.com/kuitos/import-html-entry" target="_blank" rel="noopener">import-html-entry</a> 实现。</p>
<h2 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h2><p>跟 single-spa 一样，qiankun 启动微服务的流程仅有两步：</p>
<ol>
<li>registerMicroApps(apps, lifeCycles?, opts?) 注册应用。</li>
<li>start(opts?) 启动。</li>
</ol>
<p>qiankun 提供了以下新特性：</p>
<ol>
<li>qiankun 微服务的渲染内容通过 html 脚本形式提供，render 渲染函数处理的就是 html 内容（引用）。html 中加载的 js 脚本同样需要透出 bootstrap、mount、unmount 等生命周期函数。多个应用不会在同一张 html 页面寻找 dom 节点，从而相互隔离。备注：import-html-entry 加载 html 时会将 js 处理成 execScripts 脚本加载器。</li>
<li>除了应用的 js 脚本提供 bootstrap、mount、unmount 等生命周期函数以外，qiankun 允许在 registerMicroApps 执行期间添加 beforeLoad(appName)、beforeMount、afterMount、beforeUnmount、afterUnmount 等钩子。</li>
<li>为应用的 js 脚本提供沙箱环境，隔离应用之间的全局变量。沙箱生命周期中调用的劫持器能自动解绑事件、影响应用的发布配置 publicPath 等。</li>
<li>静默加载其他应用，或者在首个应用 mount 完成后启动加载流程，或者在应用无变更的前提下启动加载流程。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerMicroApps</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">object</span> = </span>&#123;&#125;&gt;(</span><br><span class="line">  apps: <span class="built_in">Array</span>&lt;RegistrableApp&lt;T&gt;&gt;,</span><br><span class="line">  lifeCycles?: LifeCycles&lt;T&gt;,</span><br><span class="line">  opts?: RegisterMicroAppsOpts,</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="built_in">window</span>.__POWERED_BY_QIANKUN__ = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; beforeUnmount = [], afterUnmount = [], afterMount = [], beforeMount = [], beforeLoad = [] &#125; = lifeCycles || &#123;&#125;;</span><br><span class="line">  microApps = [...microApps, ...apps];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> prevAppUnmountedDeferred: Deferred&lt;<span class="keyword">void</span>&gt;;</span><br><span class="line"></span><br><span class="line">  apps.forEach(<span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, entry, render, activeRule, props = &#123;&#125; &#125; = app;</span><br><span class="line"></span><br><span class="line">    registerApplication(</span><br><span class="line">      name,</span><br><span class="line">      <span class="keyword">async</span> (&#123; <span class="attr">name</span>: appName &#125;) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 加载应用须等待 start 执行结束</span></span><br><span class="line">        <span class="keyword">await</span> frameworkStartedDefer.promise;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过 import-html-entry 获取应用的入口 html 及 js 脚本加载器</span></span><br><span class="line">        <span class="keyword">const</span> &#123; <span class="attr">template</span>: appContent, execScripts, assetPublicPath &#125; = <span class="keyword">await</span> importEntry(entry, opts);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果微服务页面只挂载一个应用（单例模式），等待前一个应用 unmount 后，才予 load 当前应用</span></span><br><span class="line">        <span class="comment">// single-spa 会在前一个应用 unmount 的同时，处理当前应用的 load、bootstrap 流程 https://github.com/CanopyTax/single-spa/blob/master/src/navigation/reroute.js#L74</span></span><br><span class="line">        <span class="comment">// 单例模式在 start 执行期间制定，默认为单例模式</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">await</span> validateSingularMode(singularMode, app)) &#123;</span><br><span class="line">          <span class="keyword">await</span> (prevAppUnmountedDeferred &amp;&amp; prevAppUnmountedDeferred.promise);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 预先渲染微应用的 html 结构，等待 js 脚本 mount 内容</span></span><br><span class="line">        render(&#123; appContent, <span class="attr">loading</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> jsSandbox: Window = <span class="built_in">window</span>;</span><br><span class="line">        <span class="keyword">let</span> mountSandbox = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line">        <span class="keyword">let</span> unmountSandbox = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line">        <span class="keyword">if</span> (useJsSandbox) &#123;</span><br><span class="line">          <span class="keyword">const</span> sandbox = genSandbox(appName, assetPublicPath);</span><br><span class="line">          jsSandbox = sandbox.sandbox;</span><br><span class="line">          mountSandbox = sandbox.mount;</span><br><span class="line">          unmountSandbox = sandbox.unmount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> execHooksChain(toArray(beforeLoad), app);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> &#123; <span class="attr">bootstrap</span>: bootstrapApp, mount, unmount &#125; = <span class="keyword">await</span> execScripts(jsSandbox);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果应用脚本没有导出 bootstrap、mount、unmount，使用 window[appName] 中的值替代</span></span><br><span class="line">        <span class="keyword">if</span> (!isFunction(bootstrapApp) || !isFunction(mount) || !isFunction(unmount)) &#123;</span><br><span class="line">          <span class="keyword">const</span> globalVariableExports = (<span class="built_in">window</span> <span class="keyword">as</span> any)[appName] || &#123;&#125;;</span><br><span class="line">          bootstrapApp = globalVariableExports.bootstrap;</span><br><span class="line">          mount = globalVariableExports.mount;</span><br><span class="line">          unmount = globalVariableExports.unmount;</span><br><span class="line">          <span class="keyword">if</span> (!isFunction(bootstrapApp) || !isFunction(mount) || !isFunction(unmount)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`You need to export the functional lifecycles in <span class="subst">$&#123;appName&#125;</span> entry`</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.warn(</span><br><span class="line">              <span class="string">`LifeCycles are not found from <span class="subst">$&#123;appName&#125;</span> entry exports, fallback to get them from window['<span class="subst">$&#123;appName&#125;</span>'] `</span>,</span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="comment">// 微应用的引导流程，使用 single-spa 添加多个生命周期函数</span></span><br><span class="line">          bootstrap: [bootstrapApp],</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 微应用的挂载流程</span></span><br><span class="line">          <span class="comment">// 1. 单例模式下，等待前一个应用卸载完成</span></span><br><span class="line">          <span class="comment">// 2. 预先渲染微应用的 html 结构，等待 js 脚本 mount 内容</span></span><br><span class="line">          <span class="comment">// 3. 执行 beforeMount 钩子</span></span><br><span class="line">          <span class="comment">// 4. 执行 sandbox.mount 钩子</span></span><br><span class="line">          <span class="comment">// 5. 执行微应用的 mount 钩子</span></span><br><span class="line">          <span class="comment">// 6. 将微应用的 html 结构置为非加载状态</span></span><br><span class="line">          <span class="comment">// 7. 执行 afterMount 钩子</span></span><br><span class="line">          <span class="comment">// 8. 设置 prevAppUnmountedDeferred，以满足微服务的单例模式机制</span></span><br><span class="line">          mount: [</span><br><span class="line">            <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">              <span class="keyword">if</span> ((<span class="keyword">await</span> validateSingularMode(singularMode, app)) &amp;&amp; prevAppUnmountedDeferred) &#123;</span><br><span class="line">                <span class="keyword">return</span> prevAppUnmountedDeferred.promise;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">async</span> () =&gt; render(&#123; appContent, <span class="attr">loading</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">            <span class="keyword">async</span> () =&gt; execHooksChain(toArray(beforeMount), app),</span><br><span class="line">            mountSandbox,</span><br><span class="line">            mount,</span><br><span class="line">            <span class="keyword">async</span> () =&gt; render(&#123; appContent, <span class="attr">loading</span>: <span class="literal">false</span> &#125;),</span><br><span class="line">            <span class="keyword">async</span> () =&gt; execHooksChain(toArray(afterMount), app),</span><br><span class="line">            <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">await</span> validateSingularMode(singularMode, app)) &#123;</span><br><span class="line">                prevAppUnmountedDeferred = <span class="keyword">new</span> Deferred&lt;<span class="keyword">void</span>&gt;();</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 微应用的挂载流程</span></span><br><span class="line">          <span class="comment">// 1. 执行 beforeUnmount 钩子</span></span><br><span class="line">          <span class="comment">// 2. 执行微应用的 unmount 钩子</span></span><br><span class="line">          <span class="comment">// 3. 执行 sandbox.unmount 钩子</span></span><br><span class="line">          <span class="comment">// 4. 执行 afterUnmount 钩子</span></span><br><span class="line">          <span class="comment">// 5. 将微应用的 html 结构置空</span></span><br><span class="line">          <span class="comment">// 7. 执行 prevAppUnmountedDeferred.resolve，以便 load 其他应用</span></span><br><span class="line">          unmount: [</span><br><span class="line">            <span class="keyword">async</span> () =&gt; execHooksChain(toArray(beforeUnmount), app),</span><br><span class="line">            unmount,</span><br><span class="line">            unmountSandbox,</span><br><span class="line">            <span class="keyword">async</span> () =&gt; execHooksChain(toArray(afterUnmount), app),</span><br><span class="line">            <span class="keyword">async</span> () =&gt; render(&#123; <span class="attr">appContent</span>: <span class="string">''</span>, <span class="attr">loading</span>: <span class="literal">false</span> &#125;),</span><br><span class="line">            <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">              <span class="keyword">if</span> ((<span class="keyword">await</span> validateSingularMode(singularMode, app)) &amp;&amp; prevAppUnmountedDeferred) &#123;</span><br><span class="line">                prevAppUnmountedDeferred.resolve();</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 路由匹配策略</span></span><br><span class="line">      activeRule,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 自定义属性</span></span><br><span class="line">      props,</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">opts: StartOpts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; prefetch = <span class="literal">true</span>, jsSandbox = <span class="literal">true</span>, singular = <span class="literal">true</span>, fetch &#125; = opts;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (prefetch) &#123;</span><br><span class="line">    <span class="comment">// 监听 single-spa:first-mount 事件，在非手机环境或网络较快时加载时，通过 window.requestIdleCallback 或 setTimeout 加载其他应用</span></span><br><span class="line">    <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">      prefetchAfterFirstMounted(microApps, fetch);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听 single-spa:no-app-change 事件，静默加载其他应用</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'all'</span>:</span><br><span class="line">      prefetchAll(microApps, fetch);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 默认应用沙箱</span></span><br><span class="line">  <span class="keyword">if</span> (jsSandbox) &#123;</span><br><span class="line">    useJsSandbox = jsSandbox;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 默认单例模式</span></span><br><span class="line">  <span class="keyword">if</span> (singular) &#123;</span><br><span class="line">    singularMode = singular;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  startSpa();</span><br><span class="line"></span><br><span class="line">  frameworkStartedDefer.resolve();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Deferred</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  promise: <span class="built_in">Promise</span>&lt;T&gt;;</span><br><span class="line"></span><br><span class="line">  resolve!: <span class="function">(<span class="params">value?: T | PromiseLike&lt;T&gt;</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line"></span><br><span class="line">  reject!: <span class="function">(<span class="params">reason?: any</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.resolve = resolve;</span><br><span class="line">      <span class="keyword">this</span>.reject = reject;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="沙箱"><a href="#沙箱" class="headerlink" title="沙箱"></a>沙箱</h2><p>在 single-spa 微服务项目中，多个应用会共用 window 的对象，一个应用设置的全局变量会影响到另一个应用。为了隔离，qiankun 设计了沙箱机制。首先，qiankun 使用 Proxy 生成 window 对象的代理，该代理会作为应用脚本的执行上下文。当应用脚本对该代理设置属性时，qiankun 会使用 addedPropsMapInSandbox 记录新增的全局变量、modifiedPropsOriginalValueMapInSandbox 记录变更前的全局变量、currentUpdatedPropsValueMap 记录当前应用设置的全局变量（作为快照），然后对原始的 window 对象赋值，取值时通过代理从原始的 window 获得应用中设置的值（特别的，获取方法时会绑定上原始的 window）。当沙箱 unmount（即应用 unmount 时），qiankun 会基于 addedPropsMapInSandbox、modifiedPropsOriginalValueMapInSandbox 恢复 window 对象的属性。当沙箱再次 mount（即应用再次 mount 时），qiankun 会基于 modifiedPropsOriginalValueMapInSandbox 将原始 window 对象置为快照值。</p>
<p>sandbox 沙箱代码的执行时机遵从应用的生命周期：</p>
<ol>
<li>当应用被 load 时，创建沙箱，即生成 window 对象的代理，同时调用 hijackAtBootstrapping 劫持 window 方法。这时 sandboxRunning 状态为 true。备注：因为没调用 single-spa 的 unloadApplication 方法，应用只会被 load 一次。</li>
<li>当应用被 bootstrap 时，沙箱被应用脚本实际使用，用于导出 bootstrap、mount、unmount 等生命周期函数。备注：因为没调用 single-spa 的 unloadApplication 方法，应用只会被 bootstrap 一次。</li>
<li>当应用首次被 mount 时，沙箱的 sandbox.mount 会先于应用脚本的 mount 生命周期执行，调用 hijackAtMounting 劫持 window 方法。</li>
<li>当应用被 unmount 时，沙箱的 sandbox.unmount 会后于应用脚本的 mount 生命周期执行，恢复 window 对象的属性和被劫持方法。sandboxRunning 置为 false.</li>
<li>当应用再次被 mount 时，load 阶段创建的沙箱会被复用，然后按照以下流程处理：首先恢复 hijackAtBootstrapping 阶段劫持方法的执行结果；其次因为 sandboxRunning 为 false，基于 modifiedPropsOriginalValueMapInSandbox 快照恢复 window 对象的历史数据；其次执行 hijackAtMounting 劫持 window 方法；其次恢复 hijackAtMounting 阶段劫持方法的执行结果；最后将 sandboxRunning 置为 true。</li>
</ol>
<p>官方将应用 load 阶段的沙箱称为 app 环境沙箱；应用 mount 阶段的沙箱称为 render 沙箱。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">genSandbox</span>(<span class="params">appName: string, assetPublicPath: string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> addedPropsMapInSandbox = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;PropertyKey, any&gt;();<span class="comment">// 记录新增变量</span></span><br><span class="line">  <span class="keyword">const</span> modifiedPropsOriginalValueMapInSandbox = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;PropertyKey, any&gt;();<span class="comment">// 记录更新变量</span></span><br><span class="line">  <span class="keyword">const</span> currentUpdatedPropsValueMap = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;PropertyKey, any&gt;();<span class="comment">// 记录新增或更新变量</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// mountingFreers 用于释放 hijackAtMounting 劫持的方法</span></span><br><span class="line">  <span class="keyword">let</span> mountingFreers: Freer[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// sideEffectsRebuilders 用于恢复劫持方法的执行结果</span></span><br><span class="line">  <span class="keyword">let</span> sideEffectsRebuilders: Rebuilder[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> sandboxRunning = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> boundValueSymbol = <span class="built_in">Symbol</span>(<span class="string">'bound value'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> rawWindow = <span class="built_in">window</span>;</span><br><span class="line">  <span class="keyword">const</span> fakeWindow = <span class="built_in">Object</span>.create(<span class="literal">null</span>) <span class="keyword">as</span> Window;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> sandbox: WindowProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(fakeWindow, &#123;</span><br><span class="line">    <span class="keyword">set</span>(_: Window, p: PropertyKey, value: any): boolean &#123;</span><br><span class="line">      <span class="keyword">if</span> (sandboxRunning) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!rawWindow.hasOwnProperty(p)) &#123;</span><br><span class="line">          addedPropsMapInSandbox.set(p, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!modifiedPropsOriginalValueMapInSandbox.has(p)) &#123;</span><br><span class="line">          <span class="keyword">const</span> originalValue = (rawWindow <span class="keyword">as</span> any)[p];</span><br><span class="line">          modifiedPropsOriginalValueMapInSandbox.set(p, originalValue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        currentUpdatedPropsValueMap.set(p, value);</span><br><span class="line">        </span><br><span class="line">        (rawWindow <span class="keyword">as</span> any)[p] = value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">`Try to set window.<span class="subst">$&#123;p.toString()&#125;</span> while js sandbox destroyed or not active in <span class="subst">$&#123;appName&#125;</span>!`</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在 strict-mode 下，Proxy 的 handler.set 返回 false 会抛出 TypeError，在沙箱卸载的情况下应该忽略错误</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span>(_: Window, p: PropertyKey): any &#123;</span><br><span class="line">      <span class="comment">// 避免用户使用 window.top、window.window、window.self 绕过沙箱机制</span></span><br><span class="line">      <span class="comment">// https://github.com/eligrey/FileSaver.js/blob/master/src/FileSaver.js#L13</span></span><br><span class="line">      <span class="keyword">if</span> (p === <span class="string">'top'</span> || p === <span class="string">'window'</span> || p === <span class="string">'self'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> sandbox;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> value = (rawWindow <span class="keyword">as</span> any)[p];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 为纯函数（不是构造函数）绑定 rawWindow</span></span><br><span class="line">      <span class="comment">// qiankun 通过 prototype 中是否还有可枚举的拓展方法的方式来判断是否构造函数。检测方法不要随意替换，因为可能触发一些 edge case（比如在 lodash.isFunction 在 iframe 上下文中可能由于调用了 top window 对象触发的安全异常）</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">'function'</span> &amp;&amp; !isConstructable(value)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value[boundValueSymbol]) &#123;<span class="comment">// 已绑定 rawWindow</span></span><br><span class="line">          <span class="keyword">return</span> value[boundValueSymbol];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> boundValue = value.bind(rawWindow);</span><br><span class="line">        <span class="built_in">Object</span>.keys(value).forEach(<span class="function"><span class="params">key</span> =&gt;</span> (boundValue[key] = value[key]));</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(value, boundValueSymbol, &#123; <span class="attr">enumerable</span>: <span class="literal">false</span>, <span class="attr">value</span>: boundValue &#125;);</span><br><span class="line">        <span class="keyword">return</span> boundValue;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    has(_: Window, <span class="attr">p</span>: string | number | symbol): boolean &#123;</span><br><span class="line">      <span class="keyword">return</span> p <span class="keyword">in</span> rawWindow;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// bootstrappingFreers 用于释放 hijackAtBootstrapping 劫持的方法</span></span><br><span class="line">  <span class="keyword">const</span> bootstrappingFreers = hijackAtBootstrapping(appName, assetPublicPath, sandbox);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    sandbox,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> mount() &#123;</span><br><span class="line">      <span class="keyword">const</span> sideEffectsRebuildersAtBootstrapping = sideEffectsRebuilders.slice(<span class="number">0</span>, bootstrappingFreers.length);</span><br><span class="line">      <span class="keyword">const</span> sideEffectsRebuildersAtMounting = sideEffectsRebuilders.slice(bootstrappingFreers.length);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 恢复 hijackAtBootstrapping 阶段劫持方法的执行结果</span></span><br><span class="line">      <span class="keyword">if</span> (sideEffectsRebuildersAtBootstrapping.length) &#123;</span><br><span class="line">        sideEffectsRebuildersAtBootstrapping.forEach(<span class="function"><span class="params">rebuild</span> =&gt;</span> rebuild());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* ------ 因为有上下文依赖（window），以下代码执行顺序不能变 ------- */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 沙箱未启动说明为唤醒流程，此时需从之前的修改记录中恢复上下文</span></span><br><span class="line">      <span class="keyword">if</span> (!sandboxRunning) &#123;</span><br><span class="line">        currentUpdatedPropsValueMap.forEach(<span class="function">(<span class="params">v, p</span>) =&gt;</span> setWindowProp(p, v));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// render 沙箱启动时开始劫持各类全局监听，尽量不要在应用初始化阶段有 事件监听/定时器 等副作用</span></span><br><span class="line">      mountingFreers = hijackAtMounting(appName, sandbox);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 恢复 hijackAtMounting 阶段劫持方法的执行结果</span></span><br><span class="line">      <span class="keyword">if</span> (sideEffectsRebuildersAtMounting.length) &#123;</span><br><span class="line">        sideEffectsRebuildersAtMounting.forEach(<span class="function"><span class="params">rebuild</span> =&gt;</span> rebuild());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      sideEffectsRebuilders = [];</span><br><span class="line"></span><br><span class="line">      sandboxRunning = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> unmount() &#123;</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">`<span class="subst">$&#123;appName&#125;</span> modified global properties will be restore`</span>, [</span><br><span class="line">          ...addedPropsMapInSandbox.keys(),</span><br><span class="line">          ...modifiedPropsOriginalValueMapInSandbox.keys(),</span><br><span class="line">        ]);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 释放劫持处理</span></span><br><span class="line">      sideEffectsRebuilders = [...bootstrappingFreers, ...mountingFreers].map(<span class="function"><span class="params">free</span> =&gt;</span> free());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 恢复 window 对象的属性</span></span><br><span class="line">      modifiedPropsOriginalValueMapInSandbox.forEach(<span class="function">(<span class="params">v, p</span>) =&gt;</span> setWindowProp(p, v));</span><br><span class="line">      addedPropsMapInSandbox.forEach(<span class="function">(<span class="params">_, p</span>) =&gt;</span> setWindowProp(p, <span class="literal">undefined</span>, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">      sandboxRunning = <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="hijacker"><a href="#hijacker" class="headerlink" title="hijacker"></a>hijacker</h3><p>hijackPublicPath 在 hijackAtBootstrapping 阶段执行，意义是将 window.<strong>INJECTED_PUBLIC_PATH_BY_QIANKUN</strong> 设置为 assetPublicPath（用作 webpack 中的 publicPath），应用卸载时清空，挂载时恢复。</p>
<p>hijackTimer 在 hijackAtMounting 阶段执行，劫持 setInterval、setTimeout，意义是应用卸载时清空定时器。</p>
<p>hijackWindowListener 在 hijackAtMounting 阶段执行，劫持 window.addEventListener、 window.removeEventListener，意义是应用卸载时自动解绑绑定函数。</p>
<p>hijackHistoryListener 在 hijackAtMounting 阶段执行，使用 umi 时有效，意义是应用卸载自动解绑 window.g_history.listen 绑定的函数。</p>
<p>hijackDynamicHeadAppend 在 hijackAtBootstrapping、hijackAtMounting 阶段均会执行，劫持 HTMLHeadElement.prototype.appendChild 方法。当使用 HTMLHeadElement.prototype.appendChild 向 head 头部添加 link、style、script 节点行为（开发环境的实际表现就是应用脚本），script 节点内容需要在沙箱环境中运行。以下是 hijackDynamicHeadAppend 源码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hijack</span>(<span class="params">appName: string, proxy: Window</span>): <span class="title">Freer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dynamicStyleSheetElements: <span class="built_in">Array</span>&lt;HTMLLinkElement | HTMLStyleElement&gt; = [];</span><br><span class="line"></span><br><span class="line">  HTMLHeadElement.prototype.appendChild = <span class="function"><span class="keyword">function</span> <span class="title">appendChild</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Node</span>&gt;(<span class="params">this: any, newChild: T</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> element = newChild <span class="keyword">as</span> any;</span><br><span class="line">    <span class="keyword">if</span> (element.tagName) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (element.tagName) &#123;</span><br><span class="line">        <span class="keyword">case</span> LINK_TAG_NAME:</span><br><span class="line">        <span class="keyword">case</span> STYLE_TAG_NAME: &#123;</span><br><span class="line">          <span class="keyword">const</span> stylesheetElement: HTMLLinkElement | HTMLStyleElement = newChild <span class="keyword">as</span> any;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// check if the currently specified application is active</span></span><br><span class="line">          <span class="comment">// While we switch page from qiankun app to a normal react routing page, the normal one may load stylesheet dynamically while page rendering,</span></span><br><span class="line">          <span class="comment">// but the url change listener must to wait until the current call stack is flushed.</span></span><br><span class="line">          <span class="comment">// This scenario may cause we record the stylesheet from react routing page dynamic injection,</span></span><br><span class="line">          <span class="comment">// and remove them after the url change triggered and qiankun app is unmouting</span></span><br><span class="line">          <span class="comment">// see https://github.com/ReactTraining/history/blob/master/modules/createHashHistory.js#L222-L230</span></span><br><span class="line">          <span class="keyword">const</span> activated = checkActivityFunctions(<span class="built_in">window</span>.location).some(<span class="function"><span class="params">name</span> =&gt;</span> name === appName);</span><br><span class="line">          <span class="comment">// only hijack dynamic style injection when app activated</span></span><br><span class="line">          <span class="keyword">if</span> (activated) &#123;</span><br><span class="line">            dynamicStyleSheetElements.push(stylesheetElement);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 import-html-entry 的 execScripts 执行 script 节点内容，使其运行在沙箱环境</span></span><br><span class="line">        <span class="keyword">case</span> SCRIPT_TAG_NAME: &#123;</span><br><span class="line">          <span class="keyword">const</span> &#123; src, text &#125; = element <span class="keyword">as</span> HTMLScriptElement;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (src) &#123;</span><br><span class="line">            execScripts(<span class="literal">null</span>, [src], proxy).then(</span><br><span class="line">              () =&gt; &#123;</span><br><span class="line">                <span class="keyword">const</span> loadEvent = <span class="keyword">new</span> CustomEvent(<span class="string">'load'</span>);</span><br><span class="line">                <span class="keyword">if</span> (isFunction(element.onload)) &#123;</span><br><span class="line">                  element.onload(loadEvent);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  element.dispatchEvent(loadEvent);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              () =&gt; &#123;</span><br><span class="line">                <span class="keyword">const</span> errorEvent = <span class="keyword">new</span> CustomEvent(<span class="string">'error'</span>);</span><br><span class="line">                <span class="keyword">if</span> (isFunction(element.onerror)) &#123;</span><br><span class="line">                  element.onerror(errorEvent);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  element.dispatchEvent(errorEvent);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> dynamicScriptCommentElement = <span class="built_in">document</span>.createComment(<span class="string">`dynamic script <span class="subst">$&#123;src&#125;</span> replaced by qiankun`</span>);</span><br><span class="line">            <span class="keyword">return</span> rawHtmlAppendChild.call(<span class="keyword">this</span>, dynamicScriptCommentElement) <span class="keyword">as</span> T;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          execScripts(<span class="literal">null</span>, [<span class="string">`&lt;script&gt;<span class="subst">$&#123;text&#125;</span>&lt;/script&gt;`</span>], proxy).then(element.onload, element.onerror);</span><br><span class="line">          <span class="keyword">const</span> dynamicInlineScriptCommentElement = <span class="built_in">document</span>.createComment(<span class="string">'dynamic inline script replaced by qiankun'</span>);</span><br><span class="line">          <span class="keyword">return</span> rawHtmlAppendChild.call(<span class="keyword">this</span>, dynamicInlineScriptCommentElement) <span class="keyword">as</span> T;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rawHtmlAppendChild.call(<span class="keyword">this</span>, element) <span class="keyword">as</span> T;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">free</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    HTMLHeadElement.prototype.appendChild = rawHtmlAppendChild;</span><br><span class="line">    dynamicStyleSheetElements.forEach(<span class="function"><span class="params">stylesheetElement</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">document</span>.head.contains(stylesheetElement)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (stylesheetElement <span class="keyword">instanceof</span> HTMLStyleElement &amp;&amp; isStyledComponentsLike(stylesheetElement)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (stylesheetElement.sheet) &#123;</span><br><span class="line">            <span class="comment">// 缓存样式内容</span></span><br><span class="line">            setCachedRules(stylesheetElement, (stylesheetElement.sheet <span class="keyword">as</span> CSSStyleSheet).cssRules);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移除 style、link 节点</span></span><br><span class="line">        <span class="built_in">document</span>.head.removeChild(stylesheetElement);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">rebuild</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      dynamicStyleSheetElements.forEach(<span class="function"><span class="params">stylesheetElement</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 重新添加 style、link 节点</span></span><br><span class="line">        <span class="built_in">document</span>.head.appendChild(stylesheetElement);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 恢复 style 节点的样式内容</span></span><br><span class="line">        <span class="keyword">if</span> (stylesheetElement <span class="keyword">instanceof</span> HTMLStyleElement &amp;&amp; isStyledComponentsLike(stylesheetElement)) &#123;</span><br><span class="line">          <span class="keyword">const</span> cssRules = getCachedRules(stylesheetElement);</span><br><span class="line">          <span class="keyword">if</span> (cssRules) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cssRules.length; i++) &#123;</span><br><span class="line">              <span class="keyword">const</span> cssRule = cssRules[i];</span><br><span class="line">              (stylesheetElement.sheet <span class="keyword">as</span> CSSStyleSheet).insertRule(cssRule.cssText);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>以下改写自 <a href="https://github.com/kuitos/qiankun" target="_blank" rel="noopener">qiankun</a> 官方示例：</p>
<ol>
<li>编写主应用，设定 html 页面、待渲染内容的布局（通常是菜单）。</li>
<li>编写子应用，子应用需使用 umd 方式打包，这样才能加载到导出的生命周期函数（如上文所述，子应用的 publicPath 可使用 assetPublicPath 配置）。</li>
<li>子应用独立部署，然后由主应用远程获取子应用的 html 页面；或者子应用与主应用以 monorepo 方式组织，如 qiankun 官方示例一样。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主应用框架 html 内容</span></span><br><span class="line"><span class="comment">// &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="comment">// &lt;html lang="en"&gt;</span></span><br><span class="line"><span class="comment">// &lt;head&gt;</span></span><br><span class="line"><span class="comment">//   &lt;meta charset="UTF-8"&gt;</span></span><br><span class="line"><span class="comment">//   &lt;title&gt;main framework&lt;/title&gt;</span></span><br><span class="line"><span class="comment">// &lt;/head&gt;</span></span><br><span class="line"><span class="comment">// &lt;body&gt;</span></span><br><span class="line"><span class="comment">// &lt;main id="container"&gt;&lt;/main&gt;</span></span><br><span class="line"><span class="comment">// &lt;script src="./index.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">// &lt;/body&gt;</span></span><br><span class="line"><span class="comment">// &lt;/html&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主应用 index.js 脚本</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; registerMicroApps, setDefaultMountApp, start &#125; <span class="keyword">from</span> <span class="string">'../../es'</span>;</span><br><span class="line"><span class="keyword">import</span> Framework <span class="keyword">from</span> <span class="string">'./Framework'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">&#123; appContent, loading &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</span><br><span class="line">  ReactDOM.render(<span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line">    &lt;header className=&#123;style.header&#125;&gt;</span><br><span class="line">      &lt;nav&gt;</span><br><span class="line">        &lt;ol&gt;</span><br><span class="line">          &lt;li&gt;&lt;a onClick=&#123;() =&gt; goto('home', '/')&#125;&gt;home&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;&lt;a onClick=&#123;() =&gt; goto('react15 app', '/15react15')&#125;&gt;react15 + antd2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;&lt;a onClick=&#123;() =&gt; goto('vue app', '/vue')&#125;&gt;vue2 + element2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;&lt;a onClick=&#123;() =&gt; goto('react app', '/react')&#125;&gt;react16 + antd3&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ol&gt;</span><br><span class="line">      &lt;/nav&gt;</span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml">    &#123;loading ? <span class="tag">&lt;<span class="name">div</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span> : null&#125;</span></span><br><span class="line">    &lt;div dangerouslySetInnerHTML=&#123;&#123; __html: appContent &#125;&#125; className=&#123;style.appContainer&#125;/&gt;</span><br><span class="line">  &lt;/&gt;, container);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function genActiveRule(routerPrefix) &#123;</span><br><span class="line">  return location =&gt; location.pathname.startsWith(routerPrefix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function initApp() &#123;</span><br><span class="line">  render(&#123; appContent: '', loading: true &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initApp();</span><br><span class="line"></span><br><span class="line">registerMicroApps(</span><br><span class="line">  [</span><br><span class="line">    &#123; name: 'react16-main', entry: '//localhost:7100', render, activeRule: genActiveRule('/react') &#125;,</span><br><span class="line">    &#123; name: 'react15 app', entry: '//localhost:7102', render, activeRule: genActiveRule('/15react15') &#125;,</span><br><span class="line">    &#123; name: 'vue app', entry: '//localhost:7101', render, activeRule: genActiveRule('/vue') &#125;,</span><br><span class="line">  ],</span><br><span class="line">  &#123;</span><br><span class="line">    beforeLoad: [</span><br><span class="line">      app =&gt; &#123;</span><br><span class="line">        console.log('before load', app);</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    beforeMount: [</span><br><span class="line">      app =&gt; &#123;</span><br><span class="line">        console.log('before mount', app);</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    afterUnmount: [</span><br><span class="line">      app =&gt; &#123;</span><br><span class="line">        console.log('after unload', app);</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">setDefaultMountApp('/react');</span><br><span class="line"></span><br><span class="line">start(&#123; prefetch: true &#125;);</span><br><span class="line"></span><br><span class="line">// react16-main 应用脚本</span><br><span class="line">import React from 'react';</span><br><span class="line">import ReactDOM from 'react-dom';</span><br><span class="line">import App from './App';</span><br><span class="line"></span><br><span class="line">function render() &#123;</span><br><span class="line">  ReactDOM.render(&lt;App /&gt;, document.getElementById('root'));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 设置 publicPath</span><br><span class="line">if (window.__POWERED_BY_QIANKUN__) &#123;</span><br><span class="line">  __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (!window.__POWERED_BY_QIANKUN__) &#123;</span><br><span class="line">  render();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export async function bootstrap() &#123;</span><br><span class="line">  console.log('react app bootstraped');</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export async function mount(props) &#123;</span><br><span class="line">  console.log(props);</span><br><span class="line">  render();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export async function unmount() &#123;</span><br><span class="line">  ReactDOM.unmountComponentAtNode(document.getElementById('root'));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><h3 id="import-html-entry"><a href="#import-html-entry" class="headerlink" title="import-html-entry"></a>import-html-entry</h3><p><a href="https://github.com/kuitos/import-html-entry" target="_blank" rel="noopener">import-html-entry</a> 中的 importHTML 函数按以下流程处理：</p>
<ol>
<li>默认使用 window.fetch 远程获取 html 页面内容；</li>
<li>再通过 processTpl(html, domain) 将 html 内容解析成 { template, scripts, styles, entry    } 对象（通过正则表达式解析，entry 为入口文件 —— 默认取 entry 文件夹下脚本或最后一个 script 节点内容；scripts 脚本；styles 样式文件 —— 通过 link 节点加载的样式；template 移除脚本和样式后的 html 内容）；</li>
<li>再通过 getEmbedHTML 从远程拉取 link 节点内容，填充到 html 中；</li>
<li>最后返回 template（即 html）、assetPublicPath、getExternalScripts、getExternalStyleSheets、execScripts。execScripts(proxy) 会使用 window 代理执行 script 脚本；getExternalScripts、getExternalStyleSheets 均获取脚本内容。</li>
</ol>
<p>importEntry 在 importHTML 的基础上，提供了多态实现，既可以指定 html 的 url，又可以指定 html 的内容。</p>
<p>以下是 execScripts 函数的源码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execScripts</span>(<span class="params">entry, scripts, proxy = window, opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">const</span> &#123; fetch = defaultFetch &#125; = opts;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> getExternalScripts(scripts, fetch)</span><br><span class="line">		.then(<span class="function"><span class="params">scriptsText</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">			<span class="built_in">window</span>.proxy = proxy;<span class="comment">// 沙箱</span></span><br><span class="line">			<span class="keyword">const</span> geval = <span class="built_in">eval</span>;</span><br><span class="line"></span><br><span class="line">			<span class="function"><span class="keyword">function</span> <span class="title">exec</span>(<span class="params">scriptSrc, inlineScript, resolve</span>) </span>&#123;</span><br><span class="line">				<span class="keyword">const</span> markName = <span class="string">`Evaluating script <span class="subst">$&#123;scriptSrc&#125;</span>`</span>;</span><br><span class="line">				<span class="keyword">const</span> measureName = <span class="string">`Evaluating Time Consuming: <span class="subst">$&#123;scriptSrc&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">					performance.mark(markName);</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 入口文件导出，入口文件默认由最后一个 script 节点加载</span></span><br><span class="line">				<span class="keyword">if</span> (scriptSrc === entry) &#123;</span><br><span class="line">					noteGlobalProps();<span class="comment">// 记录 global 之前导出属性</span></span><br><span class="line"></span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						<span class="comment">// bind window.proxy to change `this` reference in script</span></span><br><span class="line">						geval(<span class="string">`;(function(window)&#123;;<span class="subst">$&#123;inlineScript&#125;</span>\n&#125;).bind(window.proxy)(window.proxy);`</span>);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">						<span class="built_in">console</span>.error(<span class="string">`error occurs while executing the entry <span class="subst">$&#123;scriptSrc&#125;</span>`</span>);</span><br><span class="line">						<span class="keyword">throw</span> e;</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">					<span class="keyword">const</span> exports = proxy[getGlobalProp()] || &#123;&#125;;<span class="comment">// 拣选出执行入口文件后，global 的导出属性</span></span><br><span class="line">          resolve(exports);</span><br><span class="line">        <span class="comment">// 非入口文件执行</span></span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						<span class="comment">// bind window.proxy to change `this` reference in script</span></span><br><span class="line">						geval(<span class="string">`;(function(window)&#123;;<span class="subst">$&#123;inlineScript&#125;</span>\n&#125;).bind(window.proxy)(window.proxy);`</span>);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">						<span class="built_in">console</span>.error(<span class="string">`error occurs while executing <span class="subst">$&#123;scriptSrc&#125;</span>`</span>);</span><br><span class="line">						<span class="keyword">throw</span> e;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">					performance.measure(measureName, markName);</span><br><span class="line">					performance.clearMarks(markName);</span><br><span class="line">					performance.clearMeasures(measureName);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="function"><span class="keyword">function</span> <span class="title">schedule</span>(<span class="params">i, resolvePromise</span>) </span>&#123;</span><br><span class="line">				<span class="keyword">if</span> (i &lt; scripts.length) &#123;</span><br><span class="line">					<span class="keyword">const</span> scriptSrc = scripts[i];</span><br><span class="line">					<span class="keyword">const</span> inlineScript = scriptsText[i];</span><br><span class="line"></span><br><span class="line">					exec(scriptSrc, inlineScript, resolvePromise);</span><br><span class="line">					<span class="comment">// resolve the promise while the last script executed and entry not provided</span></span><br><span class="line">					<span class="keyword">if</span> (!entry &amp;&amp; i === scripts.length - <span class="number">1</span>) &#123;</span><br><span class="line">						resolvePromise();</span><br><span class="line">					&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">						schedule(i + <span class="number">1</span>, resolvePromise);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> schedule(<span class="number">0</span>, resolve));</span><br><span class="line">		&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="react-app-rewire"><a href="#react-app-rewire" class="headerlink" title="react-app-rewire"></a>react-app-rewire</h3><p>qiankun 使用 <a href="https://github.com/timarney/react-app-rewired" target="_blank" rel="noopener">react-app-rewire</a> 制作微应用。仅需配置 config-overrides.js 以及 .env 约定端口号，然后使用 react-app-rewired start 启动。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; name &#125; = <span class="built_in">require</span>(<span class="string">'./package'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  webpack: <span class="function"><span class="keyword">function</span> <span class="title">override</span>(<span class="params">config, env</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> copyConfig = &#123; ...config &#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'env'</span>, env);</span><br><span class="line">    copyConfig.output.library = <span class="string">`<span class="subst">$&#123;name&#125;</span>-[name]`</span>;</span><br><span class="line">    copyConfig.output.libraryTarget = <span class="string">'umd'</span>;</span><br><span class="line">    copyConfig.output.jsonpFunction = <span class="string">`webpackJsonp_<span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: <span class="function"><span class="keyword">function</span>(<span class="params">configFunction</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">proxy, allowedHost</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> config = configFunction(proxy, allowedHost);</span><br><span class="line">      config.open = <span class="literal">false</span>;</span><br><span class="line">      config.hot = <span class="literal">false</span>;</span><br><span class="line">      config.headers = &#123;</span><br><span class="line">        <span class="string">'Access-Control-Allow-Origin'</span>: <span class="string">'*'</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">// Return your customised Webpack Development Server config.</span></span><br><span class="line">      <span class="keyword">return</span> config;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="vuepress"><a href="#vuepress" class="headerlink" title="vuepress"></a>vuepress</h3><p>qiankun 使用 <a href="https://vuepress.vuejs.org/" target="_blank" rel="noopener">vuepress</a> 制作文档。关于 vuepress，笔者将在后续的文章中加以介绍。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>望洋兴叹。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>architecture</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>umi 插件钩子机制（修正版）</title>
    <url>/2020/02/16/frontend/%E5%B7%A5%E7%A8%8B%E5%8C%96/umi%20%E6%8F%92%E4%BB%B6%E9%92%A9%E5%AD%90%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>plugin hook 插件钩子在 umi 内部的表现一为 method 方法，一为 hook 钩子。简单而论，插件钩子运作机制分为两步：register 注册插件钩子、apply 执行插件钩子。插件钩子按 name 命名存入 pluginHooks[name] 中，执行期间以 reduce 机制依次执行并控制入参。以下为 umi 源码注册插件钩子、执行插件钩子的底层方法：</p>
<ul>
<li>register(hook, fn) 注册插件钩子，hook 插件钩子名，fn 插件钩子执行脚本。</li>
<li>applyPlugins(key, opts) 依次执行插件钩子，key 插件钩子名，opts.initialValue 插件钩子链执行首参，opts.args 插件钩子链内处理参数。</li>
<li>_applyPluginsAsync(key, opts) 异步方式依次执行插件钩子。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*** umi-build-dev *** PluginAPI.js ***/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将插件钩子执行脚本添加到 pluginHooks[hook] 中</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; hook hook 名，对应 registerMethod 中的 name</span></span><br><span class="line"><span class="comment"> * @param &#123;function&#125; fn hook 处理函数，对应 registerMethod 中的插件钩子执行脚本</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">register(hook, fn) &#123;</span><br><span class="line">  assert(</span><br><span class="line">    <span class="keyword">typeof</span> hook === <span class="string">'string'</span>,</span><br><span class="line">    <span class="string">`The first argument of api.register() must be string, but got <span class="subst">$&#123;hook&#125;</span>`</span>,</span><br><span class="line">  );</span><br><span class="line">  assert(</span><br><span class="line">    <span class="keyword">typeof</span> fn === <span class="string">'function'</span>,</span><br><span class="line">    <span class="string">`The second argument of api.register() must be function, but got <span class="subst">$&#123;fn&#125;</span>`</span>,</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> &#123; pluginHooks &#125; = <span class="keyword">this</span>.service;</span><br><span class="line">  pluginHooks[hook] = pluginHooks[hook] || [];</span><br><span class="line">  pluginHooks[hook].push(&#123;</span><br><span class="line">    fn,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*** umi-build-dev *** Service.js ***/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取出 pluginHooks[key] 中的 hook 脚本（对应 registerMethod 中的插件钩子执行脚本）并依次执行</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; key hook 名，对应 registerMethod 中的 name</span></span><br><span class="line"><span class="comment"> * @param &#123;function&#125; opts 设置初始值 opts.initialValue 和传递参数 opts.args</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line">applyPlugins(key, opts = &#123;&#125;) &#123;</span><br><span class="line">  debug(<span class="string">`apply plugins <span class="subst">$&#123;key&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params"><span class="keyword">this</span>.pluginHooks[key] || []</span>).<span class="params">reduce</span>(<span class="params">(memo, &#123; fn &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> fn(&#123;</span><br><span class="line">        memo,</span><br><span class="line">        args: opts.args,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(chalk.red(<span class="string">`Plugin apply failed: <span class="subst">$&#123;e.message&#125;</span>`</span>));</span><br><span class="line">      <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, opts.initialValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异步方式依次执行插件钩子</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">async</span> _applyPluginsAsync(key, opts = &#123;&#125;) &#123;</span><br><span class="line">  debug(<span class="string">`apply plugins async <span class="subst">$&#123;key&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">const</span> hooks = <span class="keyword">this</span>.pluginHooks[key] || [];</span><br><span class="line">  <span class="keyword">let</span> memo = opts.initialValue;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> hook <span class="keyword">of</span> hooks) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; fn &#125; = hook;</span><br><span class="line">    <span class="comment">// eslint-disable-next-line no-await-in-loop</span></span><br><span class="line">    memo = <span class="keyword">await</span> fn(&#123;</span><br><span class="line">      memo,</span><br><span class="line">      args: opts.args,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> memo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为什么 umi 选用 reduce 机制执行插件钩子呢？那就要说一下 umi 插件钩子承担的职责了。其一，插件钩子可用于修改配置项（包含添加和修改）；第二，插件钩子可用于监听事件；第三，插件钩子可用于设置普通的处理流程。仅以 webpack 配置为例，多个下游（下一个插件钩子执行脚本）如果想修改 webpack 配置，那就需要一种缓存机制将修改后的 webpack 配置传入下游，reduce 天然具有这种能力。那为何 umi 不使用上游的返回值 memo 作为下游的入参呢？我们再以 webpack 配置为例，线上环境、日常环境的配置内容往往是不同的，因此在插件钩子执行期间需要一个环境标识加以区分，umi 往下游传递的 opts.args 正好可以放这个环境标识。这样就解释了 applyPlugins 采用上述实现的原委了。</p>
<p>至于 umi 插件钩子为什么要承担那么多职能？笔者也摸不清头脑。</p>
<p>umi 内部将插件钩子定义为如下四类：</p>
<ol>
<li>apply 类：注册时提供 apply 自定义钩子处理函数，实现定制的处理流程。没有具体的应用场景。</li>
<li>ADD 类：注册时 type 值设为 ADD，用于添加配置项，典型如往 html 页面上添加 script 节点。</li>
<li>MODIFY 类：注册时 type 值设为 MODIFY，用于修改配置项，典型如修改 webpack 配置。</li>
<li>EVENT 类：注册时 type 值设为 EVENT，用于作事件处理，典型如监听 webpack 编译成功事件。</li>
</ol>
<p>上述四种插件钩子的实际效用又是怎样的呢？</p>
<ol>
<li>apply 类：没有具体的应用场景。</li>
<li>ADD、MODIFY 类：applyPlugins 执行返回结果供使用，因此需要在 applyPlugins 执行结束后才能确切明白其功能。</li>
<li>EVENT 类：插件钩子执行脚本即为功能实现。</li>
</ol>
<p>registerMethod 用于创建多态注册插件钩子的方法，该方法存为 pluginMethods[name]（实际作为 umi-plugin-* 插件中所使用的接口，如 api.addRuntimePlugin 即是 pluginMethods.addRuntimePlugin）。如上所述，插件钩子函数在 apply 类型下都是 umi 内部约定的，即 pluginMethods.addRuntimePlugin(…args) 的调用结果在 applyPlugins 阶段的表现只有两种可能，一种意义，都是变更 opts.memo 的值：</p>
<ul>
<li>当 args[0] 非函数，将 args[0] 塞入 opts.memo 中。</li>
<li>当 args[0] 为函数，使用该函数处理 opts.memo、opts.args，其返回值作为新的 opts.memo。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*** umi-build-dev *** PluginAPI.js ***/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成插件钩子的注册函数 pluginMethods[name]</span></span><br><span class="line"><span class="comment"> * 同一个 name 名下可以挂多个插件钩子脚本，以 pluginHooks[name] 形式存储</span></span><br><span class="line"><span class="comment"> * 最终通过 applyPlugins 调用，以 reduce 方式依次执行，参数 opts = &#123; memo, args &#125; 以闭包形式向后传递</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; name 插件钩子名</span></span><br><span class="line"><span class="comment"> * @param &#123;object&#125; opts = &#123; type, apply &#125;</span></span><br><span class="line"><span class="comment"> *    type 插件钩子类型，umi 将根据 type 类型生成插件钩子脚本</span></span><br><span class="line"><span class="comment"> *         ADD 类型，往 opts.memo 里塞值</span></span><br><span class="line"><span class="comment"> *         MODIFY 类型，修改 opts.memo</span></span><br><span class="line"><span class="comment"> *         EVENT 类型，首参绑定函数会消费 opts.args</span></span><br><span class="line"><span class="comment"> *    apply 自定义插件钩子执行脚本，由该脚本消费 opts = &#123; memo, args &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">registerMethod(name, opts) &#123;</span><br><span class="line">  assert(!<span class="keyword">this</span>[name], <span class="string">`api.<span class="subst">$&#123;name&#125;</span> exists.`</span>);</span><br><span class="line">  assert(opts, <span class="string">`opts must supplied`</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123; type, apply &#125; = opts;</span><br><span class="line">  assert(!(type &amp;&amp; apply), <span class="string">`Only be one for type and apply.`</span>);</span><br><span class="line">  assert(type || apply, <span class="string">`One of type and apply must supplied.`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.service.pluginMethods[name] = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (apply) &#123;</span><br><span class="line">      <span class="keyword">this</span>.register(name, opts =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> apply(opts, ...args);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="keyword">this</span>.API_TYPE.ADD) &#123;</span><br><span class="line">      <span class="keyword">this</span>.register(name, opts =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> (opts.memo || []).concat(</span><br><span class="line">          <span class="keyword">typeof</span> args[<span class="number">0</span>] === <span class="string">'function'</span> ? args[<span class="number">0</span>](opts.memo, opts.args) : args[<span class="number">0</span>],</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="keyword">this</span>.API_TYPE.MODIFY) &#123;</span><br><span class="line">      <span class="keyword">this</span>.register(name, opts =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> args[<span class="number">0</span>] === <span class="string">'function'</span> ? args[<span class="number">0</span>](opts.memo, opts.args) : args[<span class="number">0</span>];</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="keyword">this</span>.API_TYPE.EVENT) &#123;</span><br><span class="line">      <span class="keyword">this</span>.register(name, opts =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> args[<span class="number">0</span>](opts.args);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`unexpected api type <span class="subst">$&#123;type&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>综上，register 用于底层注册插件钩子；applyPlugins、_applyPluginsAsync 用于底层调用插件钩子；registerMethod 用于生成插件钩子的注册方法。这四个方法均不对外暴露，对外暴露的是通过 registerMethod 生成的 pluginMethods[name]。那么，umi 内部为 umi-plugin-* 插件提供了多少种插件钩子的注册方法呢？我们可以看一下如下方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*** umi-build-dev *** PluginAPI.js ***/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于 registerMethod 生成插件钩子的注册方法 pluginMethods[name]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">_addMethods() &#123;</span><br><span class="line">  [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">'chainWebpackConfig'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        type: <span class="keyword">this</span>.API_TYPE.EVENT,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      <span class="string">'_registerConfig'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        type: <span class="keyword">this</span>.API_TYPE.ADD,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'onStart'</span>,</span><br><span class="line">    <span class="string">'onExit'</span>,</span><br><span class="line">    <span class="string">'onStartAsync'</span>,</span><br><span class="line">    <span class="string">'onRouteChange'</span>,</span><br><span class="line">    <span class="string">'onDevCompileDone'</span>,</span><br><span class="line">    <span class="string">'onBuildSuccess'</span>,</span><br><span class="line">    <span class="string">'onBuildSuccessAsync'</span>,</span><br><span class="line">    <span class="string">'onBuildFail'</span>,</span><br><span class="line">    <span class="string">'onPrintUmiError'</span>,</span><br><span class="line">    <span class="string">'addPageWatcher'</span>,</span><br><span class="line">    <span class="string">'addEntryCode'</span>,</span><br><span class="line">    <span class="string">'addEntryCodeAhead'</span>,</span><br><span class="line">    <span class="string">'addEntryImport'</span>,</span><br><span class="line">    <span class="string">'addEntryImportAhead'</span>,</span><br><span class="line">    <span class="string">'addEntryPolyfillImports'</span>,</span><br><span class="line">    <span class="string">'addRendererWrapperWithComponent'</span>,</span><br><span class="line">    <span class="string">'addRendererWrapperWithModule'</span>,</span><br><span class="line">    <span class="string">'addRouterImport'</span>,</span><br><span class="line">    <span class="string">'addRouterImportAhead'</span>,</span><br><span class="line">    <span class="string">'addVersionInfo'</span>,</span><br><span class="line">    <span class="string">'addUIPlugin'</span>,</span><br><span class="line">    <span class="string">'onUISocket'</span>,</span><br><span class="line">    <span class="string">'modifyAFWebpackOpts'</span>,</span><br><span class="line">    <span class="string">'modifyEntryRender'</span>,</span><br><span class="line">    <span class="string">'modifyEntryHistory'</span>,</span><br><span class="line">    <span class="string">'modifyRouteComponent'</span>,</span><br><span class="line">    <span class="string">'modifyRouterRootComponent'</span>,</span><br><span class="line">    <span class="string">'modifyWebpackConfig'</span>,</span><br><span class="line">    <span class="string">'_beforeServerWithApp'</span>,</span><br><span class="line">    <span class="string">'beforeDevServer'</span>,</span><br><span class="line">    <span class="string">'_beforeDevServerAsync'</span>,</span><br><span class="line">    <span class="string">'afterDevServer'</span>,</span><br><span class="line">    <span class="string">'addMiddlewareAhead'</span>,</span><br><span class="line">    <span class="string">'addMiddleware'</span>,</span><br><span class="line">    <span class="string">'addMiddlewareBeforeMock'</span>,</span><br><span class="line">    <span class="string">'addMiddlewareAfterMock'</span>,</span><br><span class="line">    <span class="string">'modifyRoutes'</span>,</span><br><span class="line">    <span class="string">'onPatchRoute'</span>,</span><br><span class="line">    <span class="string">'modifyHTMLContext'</span>,</span><br><span class="line">    <span class="string">'modifyPublicPathStr'</span>,</span><br><span class="line">    <span class="string">'addHTMLMeta'</span>,</span><br><span class="line">    <span class="string">'addHTMLLink'</span>,</span><br><span class="line">    <span class="string">'addHTMLScript'</span>,</span><br><span class="line">    <span class="string">'addHTMLStyle'</span>,</span><br><span class="line">    <span class="string">'addHTMLHeadScript'</span>,</span><br><span class="line">    <span class="string">'addUmiExports'</span>,</span><br><span class="line">    <span class="string">'modifyHTMLChunks'</span>,</span><br><span class="line">    <span class="string">'onGenerateFiles'</span>,</span><br><span class="line">    <span class="string">'onHTMLRebuild'</span>,</span><br><span class="line">    <span class="string">'modifyDefaultConfig'</span>,</span><br><span class="line">    <span class="string">'_modifyConfig'</span>,</span><br><span class="line">    <span class="string">'modifyHTMLWithAST'</span>,</span><br><span class="line">    <span class="string">'_modifyHelpInfo'</span>,</span><br><span class="line">    <span class="string">'addRuntimePlugin'</span>,</span><br><span class="line">    <span class="string">'addRuntimePluginKey'</span>,</span><br><span class="line">    <span class="string">'beforeBlockWriting'</span>,</span><br><span class="line">    <span class="string">'addBlockUIResource'</span>,</span><br><span class="line">    <span class="string">'modifyBlockUIResources'</span>,</span><br><span class="line">    <span class="string">'_modifyBlockPackageJSONPath'</span>,</span><br><span class="line">    <span class="string">'_modifyBlockDependencies'</span>,</span><br><span class="line">    <span class="string">'_modifyBlockFile'</span>,</span><br><span class="line">    <span class="string">'_modifyBlockTarget'</span>,</span><br><span class="line">    <span class="string">'_modifyCommand'</span>,</span><br><span class="line">    <span class="string">'_modifyBlockNewRouteConfig'</span>,</span><br><span class="line">    <span class="string">'beforeBuildCompileAsync'</span>,</span><br><span class="line">  ].forEach(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(method)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.registerMethod(...method);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> type;</span><br><span class="line">      <span class="keyword">const</span> isPrivate = method.charAt(<span class="number">0</span>) === <span class="string">'_'</span>;</span><br><span class="line">      <span class="keyword">const</span> slicedMethod = isPrivate ? method.slice(<span class="number">1</span>) : method;</span><br><span class="line">      <span class="keyword">if</span> (slicedMethod.indexOf(<span class="string">'modify'</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">        type = <span class="keyword">this</span>.API_TYPE.MODIFY;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (slicedMethod.indexOf(<span class="string">'add'</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">        type = <span class="keyword">this</span>.API_TYPE.ADD;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">        slicedMethod.indexOf(<span class="string">'on'</span>) === <span class="number">0</span> ||</span><br><span class="line">        slicedMethod.indexOf(<span class="string">'before'</span>) === <span class="number">0</span> ||</span><br><span class="line">        slicedMethod.indexOf(<span class="string">'after'</span>) === <span class="number">0</span></span><br><span class="line">      ) &#123;</span><br><span class="line">        type = <span class="keyword">this</span>.API_TYPE.EVENT;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`unexpected method name <span class="subst">$&#123;method&#125;</span>`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.registerMethod(method, &#123; type &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码即意味着 umi 为 umi-plugin-* 插件提供了 api.chainWebpackConfig 等 pluginMethods[name]。</p>
<p>在内部实现上，pluginMethods[name] 表现为注册插件钩子；在外部调用表现上，pluginMethods[name] 如其 name 名所示，或者添加配置项（如 addRuntimePlugin），或者修改配置项（如 modifyWebpackConfig），或者执行事件处理函数（如 onDevCompileDone），主要分为以下几类：</p>
<ul>
<li>apply 类：以 umi 内置的自定义钩子函数处理 opts = { memo, args } 以及调用时获得的其他参数。</li>
<li>ADD 类：当首参为函数，该函数以 opts.memo、opts.args 为参数，用于获取新的 opts.memo；当首参非函数，将首参填入 opts.memo 以制作新的 opts.memo（如 addRuntimePlugin）。</li>
<li>MODIFY 类：当首参为函数，该函数以 opts.memo、opts.args 为参数，用于获取新的 opts.memo；当首参非函数，以首参作为新的 opts.memo（如 modifyWebpackConfig）。</li>
<li>EVENT 类：首参只能为函数，作为事件的绑定函数，以该函数处理 opts.args 消息（如 onDevCompileDone）。</li>
</ul>
<p>在后续文章中，笔者将揭开这些方法的具体意义。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>每每回头看，以往行文的精准性老是让人心生惭愧。此前一度觉得 umi 的 plugin hooks 机制很绕，现在看来，依然觉得很绕，只是 api.addRuntimePlugin 等对外接口显得清晰了。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>前端工程化</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>single-spa 实现前端微服务</title>
    <url>/2020/02/15/frontend/architecture/single-spa%20%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="文档及示例"><a href="#文档及示例" class="headerlink" title="文档及示例"></a>文档及示例</h2><p><a href="https://single-spa.js.org" target="_blank" rel="noopener">single-spa</a> 具有以下功能特性：在无须刷新页面的前提下，同一个页面可使用不同的框架；基于不同框架实现的前端应用可以独立部署；制作新内容时可以使用不同的框架；支持应用内脚本的懒加载。</p>
<p>single-spa 借鉴了组件生命周期的思想，它为应用设置了针对路由的生命周期。当应用匹配路由/处于激活状态时，应用会把自身的内容挂载到页面上；反之则卸载。典型的 single-spa 由 html 页面、应用注册脚本、应用脚本自身构成。应用注册内容包含：name 应用名；loadingFunction 应用脚本加载函数；activityFunction 应用激活态判断函数。single-spa 又约定应用脚本包含以下生命周期：load 当应用匹配路由时就会加载脚本（非函数，只是一种状态）、bootstrap 引导函数（对接 html，应用内容首次挂载到页面前调用）、mount 挂载函数、unmount 卸载函数（须移除事件绑定等内容）、unload 非必要（unload 之后会重新启动 bootstrap 流程；借助 unload 可实现热更新）。生命周期函数获得参数包含 name 应用名、singleSpa 实例、mountParcel 手动挂载函数、customProps 自定义信息；它必须返回 Promise 或其本身为 async 函数；bootstrap、mount、unmount 生命周期函数不可缺省；生命周期函数可以指定多个，它们会构成异步调用链，逐个调用。官网中的实例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. html 页面</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script src=<span class="string">"single-spa-config.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 应用注册脚本</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> singleSpa <span class="keyword">from</span> <span class="string">'single-spa'</span>;</span><br><span class="line"><span class="keyword">const</span> appName = <span class="string">'app1'</span>;</span><br><span class="line"><span class="keyword">const</span> loadingFunction = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./app1/app1.js'</span>);<span class="comment">// loadingFunction，须返回 promise</span></span><br><span class="line"><span class="keyword">const</span> activityFunction = <span class="function"><span class="params">location</span> =&gt;</span> location.pathname.startsWith(<span class="string">'/app1'</span>);<span class="comment">// activityFunction，纯函数</span></span><br><span class="line"><span class="keyword">const</span> customProps = &#123;&#125;;</span><br><span class="line">singleSpa.registerApplication(appName, loadingFunction, activityFunction, customProps);<span class="comment">// customProps 可以不填</span></span><br><span class="line">singleSpa.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 应用脚本 app1.js，可以在另一个仓库中</span></span><br><span class="line"><span class="keyword">let</span> domEl;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    name,        <span class="comment">// The name of the application</span></span><br><span class="line">    singleSpa,   <span class="comment">// The singleSpa instance</span></span><br><span class="line">    mountParcel, <span class="comment">// Function for manually mounting </span></span><br><span class="line">    customProps  <span class="comment">// Additional custom information</span></span><br><span class="line">  &#125; = props;     <span class="comment">// Props are given to every lifecycle</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span></span><br><span class="line">    .resolve()</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      domEl = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">      domEl.id = <span class="string">'app1'</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(domEl);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mount</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span></span><br><span class="line">    .resolve()</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      domEl.textContent = <span class="string">'App 1 is mounted!'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">unmount</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span></span><br><span class="line">    .resolve()</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      domEl.textContent = <span class="string">''</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="快速对接框架"><a href="#快速对接框架" class="headerlink" title="快速对接框架"></a>快速对接框架</h3><p>在官方提供的示例项目 <a href="https://github.com/single-spa/single-spa-examples" target="_blank" rel="noopener">single-spa-examples</a> 中，single-spa 提供了便捷的引导、挂载、卸载工具（如 single-spa-angular、single-spa-angularjs、single-spa-ember、single-spa-inferno、single-spa-preact、single-spa-react、single-spa-svelte、single-spa-vue），便于对接各种框架。具体可参考官方的示例项目或官方文档 <a href="https://single-spa.js.org/docs/starting-from-scratch" target="_blank" rel="noopener">Starting From Scratch</a>。以下为 single-spa-react 的使用示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> singleSpaReact <span class="keyword">from</span> <span class="string">'single-spa-react'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./containers/App.js'</span>;</span><br><span class="line"><span class="keyword">const</span> reactLifecycles = singleSpaReact(&#123;</span><br><span class="line">  React,</span><br><span class="line">  ReactDOM,</span><br><span class="line">  rootComponent: App,<span class="comment">// 应用顶层组件</span></span><br><span class="line">  domElementGetter,<span class="comment">// 挂载应用的页面 dom 元素</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> bootstrap = [</span><br><span class="line">  reactLifecycles.bootstrap,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mount = [</span><br><span class="line">  reactLifecycles.mount,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> unmount = [</span><br><span class="line">  reactLifecycles.unmount,</span><br><span class="line">];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">domElementGetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="拆分部署"><a href="#拆分部署" class="headerlink" title="拆分部署"></a>拆分部署</h3><p>single-app 推荐的应用拆分部署策略有如下三种：</p>
<ol>
<li>将所有应用置于同一个包下。构建时间将会变慢，构建和部署都绑定在一起，这就需要固定的发布计划，而不是临时发布。</li>
<li>创建根应用程序，以 npm 方式安装子应用。子应用程序有单独的存储仓库，每次更新时需要发版。根应用在单个 spa 应用更改时都需要重新安装、重建和重新部署。根应用和各个子应用也可以使用 monorepo 方法（借助 lerna 等）组织。</li>
<li>创建根应用程序，以动态模块加载的方式加载子应用。独立发布的子应用提供一个活动 url 资源地址，随后在根应用中借助模块加载器（如 SystemJS）动态加载。</li>
</ol>
<h3 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h3><p>single-app 允许在应用脚本中设置超时时间，一旦超时，应用即予挂死。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params">props</span>) </span>&#123;...&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mount</span>(<span class="params">props</span>) </span>&#123;...&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">unmount</span>(<span class="params">props</span>) </span>&#123;...&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> timeouts = &#123;</span><br><span class="line">  bootstrap: &#123;</span><br><span class="line">    millis: <span class="number">5000</span>,</span><br><span class="line">    dieOnTimeout: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  mount: &#123;</span><br><span class="line">    millis: <span class="number">5000</span>,</span><br><span class="line">    dieOnTimeout: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  unmount: &#123;</span><br><span class="line">    millis: <span class="number">5000</span>,</span><br><span class="line">    dieOnTimeout: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  unload: &#123;</span><br><span class="line">    millis: <span class="number">5000</span>,</span><br><span class="line">    dieOnTimeout: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="动效"><a href="#动效" class="headerlink" title="动效"></a>动效</h3><p>应用挂载、卸载时的动效既可以在应用内部处理，又可以使用 <a href="https://github.com/frehner/singlespa-transitions" target="_blank" rel="noopener">singlespa-transitions</a> 处理。</p>
<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>与应用不同，包没有 activityFunction 激活函数，而是通过手动调用加载。包可以像应用程序一样大，也可以像组件一样小。官方建议在应用程序上下文中装入包，那时包将与应用程序一起卸载。包有四种生命周期：bootstrap、mount、unmount、update。使用包允许我们在跨应用中共享组件。以下是官方示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例 1：普通应用中装入包</span></span><br><span class="line"><span class="keyword">const</span> parcelConfig = &#123;</span><br><span class="line">  bootstrap() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">  &#125;,</span><br><span class="line">  mount() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">  &#125;,</span><br><span class="line">  unmount() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> domElement = <span class="built_in">document</span>.getElementById(<span class="string">'place-in-dom-to-mount-parcel'</span>)<span class="comment">// 挂载点</span></span><br><span class="line"><span class="keyword">const</span> parcelProps = &#123;domElement, <span class="attr">customProp1</span>: <span class="string">'foo'</span>&#125;</span><br><span class="line"><span class="keyword">const</span> parcel = singleSpa.mountRootParcel(parcelConfig, parcelProps)</span><br><span class="line">parcel.mountPromise.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="comment">// 包挂载后触发</span></span><br><span class="line">  parcelProps.customProp1 = <span class="string">'bar'</span></span><br><span class="line">  <span class="keyword">return</span> parcel.update(parcelProps)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> parcel.unmount()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例 2：react 应用中装入包</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDom <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"><span class="keyword">import</span> singleSpaReact <span class="keyword">from</span> <span class="string">'single-spa-react'</span></span><br><span class="line"><span class="keyword">import</span> MyParcelComponent <span class="keyword">from</span> <span class="string">'./my-parcel-component.component.js'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MyParcel = singleSpaReact(&#123;</span><br><span class="line">  React,</span><br><span class="line">  ReactDom,</span><br><span class="line">  rootComponent: MyParcelComponent</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Parcel <span class="keyword">from</span> <span class="string">'single-spa-react/parcel'</span></span><br><span class="line"><span class="keyword">import</span> MyParcel <span class="keyword">from</span> <span class="string">'./myparcel.js'</span></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">myComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="comment">// 以 Parcel 组件形式加载包</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Parcel</span><br><span class="line">        config=&#123;MyParcel&#125;</span><br><span class="line">        &#123; <span class="comment">/* optional props */</span> &#125;</span><br><span class="line">        &#123; <span class="comment">/* and any extra props you want here */</span> &#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例 3：跨应用复用包</span></span><br><span class="line"><span class="comment">// app1</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> AddContactParcel = &#123;</span><br><span class="line">  bootstrap: bootstrapFn,</span><br><span class="line">  mount: mountFn,</span><br><span class="line">  unmount: unmountFn,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app2</span></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">  SystemJS.import(<span class="string">'App1'</span>).then(<span class="function"><span class="params">App1</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> domElement = <span class="built_in">document</span>.body</span><br><span class="line">    App2MountProps.mountParcel(App1.AddContactParcel, &#123;domElement&#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>在实现上，single-spa 约定了应用、包的生命周期，并调度着应用、包生命周期周转（路由匹配机制）的流程。至于应用、包的加载函数、路由匹配策略及其生命周期函数则由开发者手动实现。</p>
<h3 id="应用部分"><a href="#应用部分" class="headerlink" title="应用部分"></a>应用部分</h3><p>single-app 将应用抽象为如下形式：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  name: <span class="built_in">string</span>;<span class="comment">// 应用名</span></span><br><span class="line">  parcels: &#123;&#125;,<span class="comment">// 包</span></span><br><span class="line">  status: NOT_LOADED | LOADING_SOURCE_CODE | NOT_BOOTSTRAPPED | BOOTSTRAPPING | NOT_MOUNTED | </span><br><span class="line">    MOUNTING | UPDATING | LOAD_ERROR | MOUNTED | UNMOUNTING | SKIP_BECAUSE_BROKEN;<span class="comment">// 应用状态</span></span><br><span class="line">  customProps: &#123; [key: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;;<span class="comment">// 自定义属性</span></span><br><span class="line">  loadImpl: <span class="built_in">string</span> | <span class="function">(<span class="params">url: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">Promise</span>;<span class="comment">// 应用模块位置或应用脚本加载函数</span></span><br><span class="line">  activeWhen: <span class="function">(<span class="params">location: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">boolean</span>;<span class="comment">// 应用激活状态判断函数</span></span><br><span class="line">  bootstrap: <span class="function">(<span class="params">props: &#123; customProps, name, mountParcel, singleSpa &#125;</span>) =&gt;</span> <span class="built_in">Promise</span>;<span class="comment">// 引导函数</span></span><br><span class="line">  mount: <span class="function">(<span class="params">props: &#123; customProps, name, mountParcel, singleSpa &#125;</span>) =&gt;</span> <span class="built_in">Promise</span>;<span class="comment">// 挂载函数</span></span><br><span class="line">  unmount: <span class="function">(<span class="params">props: &#123; customProps, name, mountParcel, singleSpa &#125;</span>) =&gt;</span> <span class="built_in">Promise</span>;<span class="comment">// 卸载函数</span></span><br><span class="line">  unload: <span class="function">(<span class="params">props: &#123; customProps, name, mountParcel, singleSpa &#125;</span>) =&gt;</span> <span class="built_in">Promise</span>;<span class="comment">// 卸载脚本函数</span></span><br><span class="line">  timeouts: &#123; bootstrap, mount, unmount, unload &#125;;<span class="comment">// 超时设置</span></span><br><span class="line">  loadErrorTime: <span class="literal">null</span>,<span class="comment">// </span></span><br><span class="line">  devtools: &#123; overlays &#125;,<span class="comment">// 设置 window.__SINGLE_SPA_DEVTOOLS__ 的调试环境中使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>应用的生命周期（这些生命周期都会改变应用的状态）（如果设置了超时时间且 dieOnTimeout 为 true 时，bootstrap、mount、unmount 执行超时时会通过 Promise.reject 机制阻断后续流程）：</p>
<ul>
<li>load: 调用 app.loadImpl 加载脚本，并将 bootstrap、mount、unmount、unload 转化成异步调用链，设置超时时间。</li>
<li>bootstrap: 调用 app.bootstrap 作引导处理。</li>
<li>mount: 调用 app.mount 挂载内容，失败时 unmount。</li>
<li>unmount: 首先对应用中的包执行 unmountThisParcel 方法，其次调用 app.unmount 卸载内容。</li>
<li>unload: 调用 app.unload 卸载脚本，卸载后移除 app.bootstrap、app.mount、app.unmount、app.unload 等属性。unload 周期在开发者手动调用 unloadApplication 函数时触发，应用会重新退回到 NOT_LOADED 状态，需要再次执行 bootstrap 流程。</li>
</ul>
<p>从全局层面看，single-app 按以下流程处理应用：</p>
<ol>
<li>全局劫持 hashchange、popstate 事件，绑定 reroute 函数；并捕获单页应用中的绑定函数，以备后续处理。</li>
<li>registerApplication(appName, applicationOrLoadingFn, activityFn, customProps) 注册应用。该过程将调用 reroute 函数加载应用脚本；其他使用 registerApplication 注册的应用将在等待状态，直到 reroute 递归调用时才予加载。备注：registerApplication 期间，single-app 会通过调用 ensureJQuerySupport 改写 $.on 绑定 hashchange、popstate 事件的功能，以便支持使用 window.$。</li>
<li>start() 启动应用，该过程也将调用 reroute 函数。start 若未执行，reroute 将只加载应用脚本，但不会调用应用脚本内的 bootstrap、mount、unmount 等生命周期函数。</li>
<li>监听到 hashchange、popstate 事件，触发 reroute 函数卸载、挂载应用。对于挂载的应用，捕获到的绑定函数会在 reroute 尾端手动调用。</li>
</ol>
<p>single-app 最核心的模块是 reroute，其负责调控应用脚本加载、卸载，应用内容挂载、卸载的流程。reroute 函数额外会使用 window.dispatchEvent 发送事件，以便于实现事件监听。</p>
<ul>
<li>若应用未启动，通过 loadApps 加载匹配路由的应用脚本。加载完成后，若有其他应用脚本在排队注册中，递归调用 reroute 加载之。</li>
<li>若应用已启动，首先对不在用的应用脚本执行 unload、unmount 操作；然后对在用的但是未加载的应用脚本执行 load、bootstrap 操作，等到不在用的脚本 unmount 完成，再执行 mount 操作；其次对在用的同时已加载的应用脚本执行 bootstrap、mount 操作（mount 操作也要等到不在用的脚本 unmount 完成）。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * reroute 或者由 registerApplication 触发调用，或者由 hashchange、popstate 事件触发调用。多个 registerApplication 会引起 reroute 递归调用；或者路由多次变更，reroute 未执行完成，也会导致 reroute 递归调动</span></span><br><span class="line"><span class="comment"> * reroute 作为编程接口，也可以后接 then 方法拿取已挂载的应用</span></span><br><span class="line"><span class="comment"> * @param &#123;array&#125; pendingPromises reroute 在执行期间，调用 registerApplication 或变更路由，pendingPromises 非空数组</span></span><br><span class="line"><span class="comment"> * @param &#123;event&#125; eventArguments 事件对象，hashchange、popstate 事件时携带</span></span><br><span class="line"><span class="comment"> * @state appChangeUnderway 指明 reroute 在一次执行周期中，其他 reroute 将被挂起，直到本次 reroute 递归调用才予以执行</span></span><br><span class="line"><span class="comment"> * @state wasNoOp 应用是否发生变更，如加载了一个应用，卸载了一个应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">reroute</span>(<span class="params">pendingPromises = [], eventArguments</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (appChangeUnderway) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      peopleWaitingOnAppChange.push(&#123;</span><br><span class="line">        resolve,</span><br><span class="line">        reject,</span><br><span class="line">        eventArguments,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  appChangeUnderway = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">let</span> wasNoOp = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// single-app 是否已 start。start 意味应用变更由路由变更引起</span></span><br><span class="line">  <span class="keyword">if</span> (isStarted()) &#123;</span><br><span class="line">    <span class="keyword">return</span> performAppChanges();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> loadApps();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 筛选出待加载的脚本并加载之。所有加载完成后，调用 finishUpAndReturn</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loadApps</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> loadPromises = getAppsToLoad().map(toLoadPromise);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (loadPromises.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        wasNoOp = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span></span><br><span class="line">        .all(loadPromises)</span><br><span class="line">        .then(finishUpAndReturn)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          callAllEventListeners();<span class="comment">// 执行所有捕获的路由变更时间</span></span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理路由变更引起的应用变更</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">performAppChanges</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.dispatchEvent(<span class="keyword">new</span> CustomEvent(<span class="string">"single-spa:before-routing-event"</span>, getCustomEventDetail()));</span><br><span class="line">      <span class="keyword">const</span> unloadPromises = getAppsToUnload().map(toUnloadPromise);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> unmountUnloadPromises = getAppsToUnmount()</span><br><span class="line">        .map(toUnmountPromise)</span><br><span class="line">        .map(<span class="function"><span class="params">unmountPromise</span> =&gt;</span> unmountPromise.then(toUnloadPromise));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> allUnmountPromises = unmountUnloadPromises.concat(unloadPromises);</span><br><span class="line">      <span class="keyword">if</span> (allUnmountPromises.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        wasNoOp = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> unmountAllPromise = <span class="built_in">Promise</span>.all(allUnmountPromises);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 先 load，再 bootstrap，然后等待其他应用 unmount、unload 完成，再 mount</span></span><br><span class="line">      <span class="keyword">const</span> appsToLoad = getAppsToLoad();</span><br><span class="line">      <span class="keyword">const</span> loadThenMountPromises = appsToLoad.map(<span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> toLoadPromise(app)</span><br><span class="line">          .then(toBootstrapPromise)</span><br><span class="line">          .then(<span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> unmountAllPromise</span><br><span class="line">              .then(<span class="function"><span class="params">()</span> =&gt;</span> toMountPromise(app))</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">if</span> (loadThenMountPromises.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        wasNoOp = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 已 bootstrap 过，再次 bootstrap，然后等待其他应用 unmount、unload 完成，再 mount</span></span><br><span class="line">      <span class="keyword">const</span> mountPromises = getAppsToMount()</span><br><span class="line">        .filter(<span class="function"><span class="params">appToMount</span> =&gt;</span> appsToLoad.indexOf(appToMount) &lt; <span class="number">0</span>)</span><br><span class="line">        .map(<span class="function"><span class="params">appToMount</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> toBootstrapPromise(appToMount)</span><br><span class="line">            .then(<span class="function"><span class="params">()</span> =&gt;</span> unmountAllPromise)</span><br><span class="line">            .then(<span class="function"><span class="params">()</span> =&gt;</span> toMountPromise(appToMount))</span><br><span class="line">        &#125;)</span><br><span class="line">      <span class="keyword">if</span> (mountPromises.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        wasNoOp = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> unmountAllPromise</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          callAllEventListeners();</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 非必须的应用已卸载，可以安心调用挂载应用的 hashchange、popstate 绑定函数</span></span><br><span class="line">          callAllEventListeners();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">Promise</span></span><br><span class="line">            .all(loadThenMountPromises.concat(mountPromises))</span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">              pendingPromises.forEach(<span class="function"><span class="params">promise</span> =&gt;</span> promise.reject(err));</span><br><span class="line">              <span class="keyword">throw</span> err;</span><br><span class="line">            &#125;)</span><br><span class="line">            .then(<span class="function"><span class="params">()</span> =&gt;</span> finishUpAndReturn(<span class="literal">false</span>))</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">finishUpAndReturn</span>(<span class="params">callEventListeners=true</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> returnValue = getMountedApps();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (callEventListeners) &#123;</span><br><span class="line">      callAllEventListeners();</span><br><span class="line">    &#125;</span><br><span class="line">    pendingPromises.forEach(<span class="function"><span class="params">promise</span> =&gt;</span> promise.resolve(returnValue));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> appChangeEventName = wasNoOp ? <span class="string">"single-spa:no-app-change"</span>: <span class="string">"single-spa:app-change"</span>;</span><br><span class="line">      <span class="built_in">window</span>.dispatchEvent(<span class="keyword">new</span> CustomEvent(appChangeEventName, getCustomEventDetail()));</span><br><span class="line">      <span class="built_in">window</span>.dispatchEvent(<span class="keyword">new</span> CustomEvent(<span class="string">"single-spa:routing-event"</span>, getCustomEventDetail()));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="comment">// single-spa:no-app-change 事件监听器报错，single-spa 不予处理</span></span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reroute 单次执行结束，无挂起的 reroute 时，调用 reroute 将直接执行</span></span><br><span class="line">    appChangeUnderway = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 被挂起的 reroute，需要手动触发之</span></span><br><span class="line">    <span class="keyword">if</span> (peopleWaitingOnAppChange.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> nextPendingPromises = peopleWaitingOnAppChange;</span><br><span class="line">      peopleWaitingOnAppChange = [];</span><br><span class="line">      reroute(nextPendingPromises);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> returnValue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 手动调用挂载应用中被阻断的 haschange、popstate 绑定函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">callAllEventListeners</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    pendingPromises.forEach(<span class="function"><span class="params">pendingPromise</span> =&gt;</span> &#123;</span><br><span class="line">      callCapturedEventListeners(pendingPromise.eventArguments);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    callCapturedEventListeners(eventArguments);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getCustomEventDetail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = &#123;<span class="attr">detail</span>: &#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (eventArguments &amp;&amp; eventArguments[<span class="number">0</span>]) &#123;</span><br><span class="line">      result.detail.originalEvent = eventArguments[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="包部分"><a href="#包部分" class="headerlink" title="包部分"></a>包部分</h3><p>single-app 将包抽象为如下内部表现形式：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  id: <span class="built_in">number</span>;<span class="comment">// id</span></span><br><span class="line">  name: <span class="built_in">string</span>;<span class="comment">// 包名</span></span><br><span class="line">  parentName: <span class="built_in">string</span>;<span class="comment">// 父包名或应用名</span></span><br><span class="line">  parcels: &#123;&#125;,<span class="comment">// 包，以 &#123; id: parcel &#125; 形式存储</span></span><br><span class="line">  status: NOT_LOADED | LOADING_SOURCE_CODE | NOT_BOOTSTRAPPED | BOOTSTRAPPING | NOT_MOUNTED | </span><br><span class="line">    MOUNTING | UPDATING | LOAD_ERROR | MOUNTED | UNMOUNTING | SKIP_BECAUSE_BROKEN;<span class="comment">// 状态</span></span><br><span class="line">  customProps: &#123; [key: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;;<span class="comment">// 自定义属性，包含 domElement 挂载节点</span></span><br><span class="line">  bootstrap: <span class="function">(<span class="params">props: &#123; customProps, name, mountParcel, singleSpa &#125;</span>) =&gt;</span> <span class="built_in">Promise</span>;<span class="comment">// 引导函数</span></span><br><span class="line">  mount: <span class="function">(<span class="params">props: &#123; customProps, name, mountParcel, singleSpa &#125;</span>) =&gt;</span> <span class="built_in">Promise</span>;<span class="comment">// 挂载函数</span></span><br><span class="line">  update: <span class="function">(<span class="params">props: &#123; customProps, name, mountParcel, singleSpa &#125;</span>) =&gt;</span> <span class="built_in">Promise</span>;<span class="comment">// 更新函数</span></span><br><span class="line">  unmountThisParcel: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Promise</span>;<span class="comment">// 卸载接口，内部会调用 parcel.unmount 方法</span></span><br><span class="line">  unmount: <span class="function">(<span class="params">props: &#123; customProps, name, mountParcel, singleSpa &#125;</span>) =&gt;</span> <span class="built_in">Promise</span>;<span class="comment">// 卸载函数</span></span><br><span class="line">  unload: <span class="function">(<span class="params">props: &#123; customProps, name, mountParcel, singleSpa &#125;</span>) =&gt;</span> <span class="built_in">Promise</span>;<span class="comment">// 卸载脚本函数</span></span><br><span class="line">  timeouts: &#123; bootstrap, mount, unmount, unload &#125;;<span class="comment">// 超时设置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>singleSpa.mountRootParcel(config, customProps)、singleSpa.mountParcel(config, customProps) 方法能将外部配置项 [config.name]、config.bootstrap、config.mount、[config.update]、config.unmount、customProps.domElement 转化成内部表现形式（config 可以包模块的加载函数）。在 singleSpa.mountRootParcel、singleSpa.mountParcel 调用期间，single-spa 会加载包模块，并为内部表现形式添加 name、bootstrap、mount、update、unmount、timeouts 等属性，并返回 { mount, unmount, getStatus, loadPromise, bootstrapPromise, mountPromise, unmountPromise } 对象，用于手动挂载或卸载包。</p>
<p>特别注意，singleSpa.mountRootParcel 将包挂在顶部；singleSpa.mountParcel 一般以应用的 props.mountParcel 形式使用，也即作为应用下的包，其将会随着应用的销毁而销毁。</p>
<p>从总体层面看，包加载、卸载的机制与应用相同，只是多了一个 update 生命周期，以及包的存活空间限制、包需要手动渲染。</p>
<h3 id="single-spa-react"><a href="#single-spa-react" class="headerlink" title="single-spa-react"></a>single-spa-react</h3><p><a href="https://github.com/single-spa/single-spa-react" target="_blank" rel="noopener">single-spa-react</a> 便于 react 应用快速对接 single-app。</p>
<p>singleSpaReact(opts) 函数能指定顶层组件及其渲染位置、渲染方式，其返回内容可作为应用或包脚本的 bootstrap、mount、unmount、update 导出。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">singleSpaReact(opts: &#123; </span><br><span class="line">  React: React;</span><br><span class="line">  ReactDOM: ReactDOM;</span><br><span class="line">  rootComponent: React.Component;<span class="comment">// 顶层组件，通过 React.createElement 加载元素</span></span><br><span class="line">  loadRootComponent: <span class="function"><span class="params">()</span> =&gt;</span> React.Component;<span class="comment">// 顶层组件加载函数，与 rootComponent 选填一项即可</span></span><br><span class="line">  suppressComponentDidCatchWarning: boolean;<span class="comment">// react16 以上版本，若 rootComponent 未实现 componentDidCatch 方法，予以警告</span></span><br><span class="line">  domElementGetter?: <span class="function"><span class="params">()</span> =&gt;</span> DOMElement;<span class="comment">// 获取挂载节点，不填会创建 id 为 `single-spa-application:$&#123;appName&#125;` 的节点进行挂载</span></span><br><span class="line">  parcelCanUpdate: boolean;<span class="comment">// 包是否可渲染</span></span><br><span class="line">  renderType?: <span class="string">'createRoot'</span> | <span class="string">'createBlockingRoot'</span> | <span class="string">'hydrate'</span>;<span class="comment">// 渲染方式，分别使用 ReactDOM.createRoot、ReactDOM.createBlockingRoot、ReactDOM.hydrate、ReactDOM.render 方法渲染</span></span><br><span class="line">&#125;): &#123;</span><br><span class="line">  bootstrap: <span class="function">(<span class="params">props</span>) =&gt;</span> <span class="built_in">Promise</span>;<span class="comment">// 加载顶层组件脚本</span></span><br><span class="line">  mount: <span class="function">(<span class="params">props</span>) =&gt;</span> <span class="built_in">Promise</span>;<span class="comment">// 将顶层组件渲染到页面上</span></span><br><span class="line">  unmount: <span class="function">(<span class="params">props</span>) =&gt;</span> <span class="built_in">Promise</span>;<span class="comment">// 使用 ReactDOM.unmountComponentAtNode 移除顶层组件</span></span><br><span class="line">  update: <span class="function">(<span class="params">props</span>) =&gt;</span> <span class="built_in">Promise</span>;<span class="comment">// 指定 parcelCanUpdate 前提下，刷新 rootComponent</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>特别的，当以 React.createContext 机制赋值 SingleSpaContext 导出时，single-spa-react 会为所有应用、包添加上下文容器 SingleSpaContext.Providev，其 value 值为 mount 生命周期的 props（包含 mountParcel 方法，指定在当前应用或包中渲染其他包）。</p>
<p>single-spa-react 额外提供了 Parcel 组件，其接受 props.config 为包的生命周期导出模块（即 singleSpaReact 函数返回值），默认会将包渲染到组件树中；当指定 props.appendTo 属性，则会将包渲染到 props.appendTo 元素上。渲染的前提是它能获得 SingleSpaContext 传递的 mountParcel 函数（即包挂载在应用或其他包的 rootComponent 下），否则需要开发者显式指定 props.mountParcel 方法。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>造物必有迹可循，只是曲折的历史会把它打扮得较难领会。创造者不只创造为外部所用的产物，还有对内部加倍透明的历史。如果只是使用，不是创造，何必知晓历史之古。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>architecture</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>DatePicker</title>
    <url>/2020/02/13/frontend/antd/DatePicker/</url>
    <content><![CDATA[<p>新版的 <a href="http://github.com/react-component/picker" target="_blank" rel="noopener">DatePicker</a> 基于 react-hooks 制作，让我们一步步揭开它的面纱。</p>
<p>DatePicker 分为 Picker 单值选择器、RangePicker 范围选择器两类。</p>
<h2 id="公共模块"><a href="#公共模块" class="headerlink" title="公共模块"></a>公共模块</h2><p>除了时间处理模块可切换使用 day.js 或 moment 以外。Picker、RangePicker 复用了以下三个组件：</p>
<ul>
<li>PickerTrigger: 抽象了弹层展示逻辑的组件，基于 <a href="https://github.com/react-component/trigger" target="_blank" rel="noopener">rc-trigger</a> 制作，可设置 PickerPanel 的样式和对齐位置等。</li>
<li>PanelContext: 传递给 PickerPanel 的 context 内容包含 operationRef 面板操作的 ref 值、hideHeader 是否隐藏头部、panelRef 存储面板的 dom 元素、hidePrevBtn、hideNextBtn、onDateMouseEnter、onDateMouseLeave、onSelect 拣选日期时间后回调、hideRanges、open 面板展开状态、defaultOpenValue 面板默认值。</li>
<li>PickerPanel: 作为弹层内容的公共容器，向上对接 Picker、RangePicker，获得 panelContext、rangeContext；向下对接实际面板 DecadePanel、YearPanel、MonthPanel、WeekPanel、DatePanel、DatetimePanel、TimePanel 等组件。</li>
</ul>
<p>PickerTrigger、PanelContext 不作介绍。以下仅介绍 PickerPanel。</p>
<h3 id="PickerPanel"><a href="#PickerPanel" class="headerlink" title="PickerPanel"></a>PickerPanel</h3><img src="/2020/02/13/frontend/antd/DatePicker/DatePanel.png">
<p>以 DatePanel 为例，面板既可选择时间，又可切换展示模式（切换为年面板或月面板）。因此，PickerPanel 内置了四种状态值：innerMode 用于记录面板当前的模式（由模式获得实际的展示面板）；sourceMode 用于记录面板之前的模式；mergedValue 用于存储面板的选中值；viewDate 用于存储当前面板的展示值。</p>
<p>当 DatePanel 等实际面板调用 props.onPanelChange 时，就会执行 PickerPanel 中的 onInternalPanelChange 方法，切换 innerMode 面板模式，并记录历史值 sourceMode，并将时间值和面板模式传递给外围。</p>
<p>当 DatePanel 等实际面板调用 props.onSelect 时，就会执行 PickerPanel 中的 setViewDate、triggerSelect 方法，同步更新 mergedValue、viewDate，并将时间值传递给外围。</p>
<p>PickerPanel 通过赋值 operationRef.current 属性，允许上游的 Picker、RangePicker 组件间接调用实际面板的 onKeyDown、onClose 方法。</p>
<p>PickerPanel 额外负责绘制面板尾部内容。</p>
<h3 id="DatePanel"><a href="#DatePanel" class="headerlink" title="DatePanel"></a>DatePanel</h3><p>实际面板仅以 DatePanel 举例说明。</p>
<p>DatePanel 面板中 Header 头部使用公共的组件。通过传递 props.onSuperPrev、props.onPrev、props.onNext、props.onSuperNext 控制 Header 头部是否显示上、下一步等按钮。Header 头部文本通过格式化 viewDate 计算获得。</p>
<p>DatePanel 面板中 DateBody 内容基于 viewDate 计算起始日期，然后步进计算展示单元内容。每个单元都会与对应的日期挂钩，点击时会调用 props.onSelect 方法将日期透出外围。</p>
<h2 id="Picker"><a href="#Picker" class="headerlink" title="Picker"></a>Picker</h2><p>Picker 主要负责组织顶层逻辑、渲染实际的触发器。触发器为 input 输入框，可以包含后缀图标、clearNode 清除图标。</p>
<p>作为顶层容器，Picker 包含四种状态：mergedValue 记录受控模式下的外部传入值以及日期选择器的最终值；selectedValue 记录由 PickerPanel、input、clearNode 引起的动态变更值（表现值），初始值与 mergedValue 等值；text 记录输入框中的展示值，通过 selectedValue 格式化处理后获得；mergedOpen 记录 PickerPanel 的展开折叠状态。</p>
<p>selectedValue 初始值与 mergedValue 等值。当 mergedValue 变更或 mergedOpen 变更为否值时，selectedValue 将被刷新为 mergedValue；PickerPanel、input、clearNode 都将刷新 selectedValue 以及 mergedValue。triggerChange(newValue) 即作为变更 selectedValue、mergedValue 的同一调用接口，它会将选中的时间值以及格式化后的时间值传递给外围。PickerPanel 变更面板表现值时，将调用 </p>
<p>triggerOpen(newOpen, preventChangeEvent) 负责变更 mergedOpen。若 newOpen、preventChangeEvent 同时为否值，triggerOpen 内部会调用 triggerChange 更新选中值。</p>
<p>input 与 Picker 的对接较为复杂，需要支持的交互行为包含：鼠标点击时获得焦点并展示 PickerPanel；一般按键时展示 PickerPanel，直到按键结束时调用 triggerChange（Tab 按键行为可传递给 PickerPanel）；失焦时隐藏 PickerPanel，（如果点击发生在输入框外围）调用 setSelectedValue 将 selectedValue 更新为 mergedValue，重新计算输入框展示值。以下为其源码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [inputProps, &#123; focused, typing &#125;] = usePickerInput(&#123;</span><br><span class="line">  blurToCancel: needConfirmButton,</span><br><span class="line">  open: mergedOpen,</span><br><span class="line">  triggerOpen,</span><br><span class="line">  forwardKeyDown,</span><br><span class="line">  isClickOutside: <span class="function"><span class="params">target</span> =&gt;</span></span><br><span class="line">    !elementsContains(</span><br><span class="line">      [panelDivRef.current, inputDivRef.current],</span><br><span class="line">      target <span class="keyword">as</span> HTMLElement,</span><br><span class="line">    ),</span><br><span class="line">  onSubmit: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    triggerChange(selectedValue);</span><br><span class="line">    triggerOpen(<span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    resetText();</span><br><span class="line">  &#125;,</span><br><span class="line">  onCancel: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    triggerOpen(<span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    setSelectedValue(mergedValue);</span><br><span class="line">    resetText();</span><br><span class="line">  &#125;,</span><br><span class="line">  onFocus,</span><br><span class="line">  onBlur,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">usePickerInput</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  open,</span></span></span><br><span class="line"><span class="function"><span class="params">  isClickOutside,</span></span></span><br><span class="line"><span class="function"><span class="params">  triggerOpen,</span></span></span><br><span class="line"><span class="function"><span class="params">  forwardKeyDown,</span></span></span><br><span class="line"><span class="function"><span class="params">  blurToCancel,</span></span></span><br><span class="line"><span class="function"><span class="params">  onSubmit,</span></span></span><br><span class="line"><span class="function"><span class="params">  onCancel,</span></span></span><br><span class="line"><span class="function"><span class="params">  onFocus,</span></span></span><br><span class="line"><span class="function"><span class="params">  onBlur,</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;: &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  open: boolean;</span></span></span><br><span class="line"><span class="function"><span class="params">  isClickOutside: (clickElement: EventTarget | null</span>) =&gt; <span class="title">boolean</span>;</span></span><br><span class="line"><span class="function">  <span class="title">triggerOpen</span>: (<span class="params">open: boolean</span>) =&gt; <span class="title">void</span>;</span></span><br><span class="line"><span class="function">  <span class="title">forwardKeyDown</span>: (<span class="params">e: React.KeyboardEvent&lt;HTMLInputElement&gt;</span>) =&gt; <span class="title">boolean</span>;</span></span><br><span class="line"><span class="function">  <span class="title">blurToCancel</span>?: <span class="title">boolean</span>;</span></span><br><span class="line"><span class="function">  <span class="title">onSubmit</span>: (<span class="params"></span>) =&gt; <span class="title">void</span>;</span></span><br><span class="line"><span class="function">  <span class="title">onCancel</span>: (<span class="params"></span>) =&gt; <span class="title">void</span>;</span></span><br><span class="line"><span class="function">  <span class="title">onFocus</span>?: <span class="title">React</span>.<span class="title">FocusEventHandler</span>&lt;<span class="title">HTMLInputElement</span>&gt;;</span></span><br><span class="line"><span class="function">  <span class="title">onBlur</span>?: <span class="title">React</span>.<span class="title">FocusEventHandler</span>&lt;<span class="title">HTMLInputElement</span>&gt;;</span></span><br><span class="line">&#125;): [</span><br><span class="line">  React.DOMAttributes&lt;HTMLInputElement&gt;,</span><br><span class="line">  &#123; <span class="attr">focused</span>: boolean; typing: boolean &#125;,</span><br><span class="line">] &#123;</span><br><span class="line">  <span class="keyword">const</span> [typing, setTyping] = React.useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [focused, setFocused] = React.useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> preventBlurRef = React.useRef&lt;boolean&gt;(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> inputProps: React.DOMAttributes&lt;HTMLInputElement&gt; = &#123;</span><br><span class="line">    onMouseDown: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setTyping(<span class="literal">true</span>);</span><br><span class="line">      triggerOpen(<span class="literal">true</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    onKeyDown: <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> (e.which) &#123;</span><br><span class="line">        <span class="keyword">case</span> KeyCode.ENTER: &#123;</span><br><span class="line">          <span class="keyword">if</span> (!open) &#123;</span><br><span class="line">            triggerOpen(<span class="literal">true</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            onSubmit();</span><br><span class="line">            setTyping(<span class="literal">true</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          e.preventDefault();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> KeyCode.TAB: &#123;</span><br><span class="line">          <span class="keyword">if</span> (typing &amp;&amp; open &amp;&amp; !e.shiftKey) &#123;</span><br><span class="line">            setTyping(<span class="literal">false</span>);</span><br><span class="line">            e.preventDefault();</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!typing &amp;&amp; open) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!forwardKeyDown(e) &amp;&amp; e.shiftKey) &#123;</span><br><span class="line">              setTyping(<span class="literal">true</span>);</span><br><span class="line">              e.preventDefault();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> KeyCode.ESC: &#123;</span><br><span class="line">          setTyping(<span class="literal">true</span>);</span><br><span class="line">          onCancel();</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!open &amp;&amp; ![KeyCode.SHIFT].includes(e.which)) &#123;</span><br><span class="line">        triggerOpen(<span class="literal">true</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!typing) &#123;</span><br><span class="line">        forwardKeyDown(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onFocus: <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      setTyping(<span class="literal">true</span>);</span><br><span class="line">      setFocused(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (onFocus) &#123;</span><br><span class="line">        onFocus(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    onBlur: <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (preventBlurRef.current || !isClickOutside(<span class="built_in">document</span>.activeElement)) &#123;</span><br><span class="line">        preventBlurRef.current = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (blurToCancel) &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (isClickOutside(<span class="built_in">document</span>.activeElement)) &#123;</span><br><span class="line">            onCancel();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        triggerOpen(<span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      setFocused(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (onBlur) &#123;</span><br><span class="line">        onBlur(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  React.useEffect(<span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">    addGlobalMouseDownEvent(<span class="function">(<span class="params">&#123; target &#125;: MouseEvent</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (open) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isClickOutside(target)) &#123;</span><br><span class="line">          preventBlurRef.current = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">          <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            preventBlurRef.current = <span class="literal">false</span>;</span><br><span class="line">          &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!focused) &#123;</span><br><span class="line">          triggerOpen(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [inputProps, &#123; focused, typing &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="RangePicker"><a href="#RangePicker" class="headerlink" title="RangePicker"></a>RangePicker</h2><p>RangePicker 包含以下内部状态：activePickerIndex 当前激活的面板；mergedValue 实际值；selectedValue 选中的时间（可能包含不可选的时间）；mergedDisabled、disabledStartDate、disabledEndDate 不可选时间；rangeHoverValue 选中值范围；hoverRangedValue 鼠标悬浮选中范围；mergedModes 面板模式；mergedOpen 面板展开折叠状态。状态或方法会经由 RangeContext、PanelContext 传递给下游的实际面板 DatePanel 等。此处不作详解。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>因笔者精力有限，这篇文章仅点到为止，以备查用。个中不足处，还望包涵。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>antd</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>前端规范</title>
    <url>/2020/02/08/frontend/architecture/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install -g commitizen <span class="comment"># cli 工具</span></span><br><span class="line">cnpm install -g conventional-changelog <span class="comment"># 基于 commit message 生成 change log</span></span><br><span class="line">cnpm install validate-commit-msg --save-dev <span class="comment"># 检查项目的 commit message 是否符合 Angular 规范。基于 husky 添加配置 package.json#scripts -&gt; "commitmsg": "validate-commit-msg"</span></span><br><span class="line">commitizen init cz-conventional-changelog --save --save-exact <span class="comment"># 项目目录，支持 Angular 的 commit message 格式</span></span><br><span class="line">git cz <span class="comment"># 提交 commit message，替代 git commit</span></span><br><span class="line">conventional-changelog -p angular -i CHANGELOG.md -w <span class="comment"># 生成 change log</span></span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/201bd81e7dc9?utm_source=oschina-app" target="_blank" rel="noopener">git commit 规范指南</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>architecture</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>钉钉对接启示录</title>
    <url>/2020/02/05/%E8%B8%A9%E5%9D%91/%E9%92%89%E9%92%89%E5%AF%B9%E6%8E%A5%E5%90%AF%E7%A4%BA%E5%BD%95/</url>
    <content><![CDATA[<p>前端部分须安装 <a href="https://www.npmjs.com/package/dingtalk-jsapi" target="_blank" rel="noopener">dingtalk-jsapi</a>。</p>
<h2 id="内部应用"><a href="#内部应用" class="headerlink" title="内部应用"></a>内部应用</h2><h3 id="免登"><a href="#免登" class="headerlink" title="免登"></a>免登</h3><p>钉钉免登总流程：</p>
<ol>
<li>使用 dingtalk-jsapi 获取<a href="https://ding-doc.dingtalk.com/doc#/dev/about" target="_blank" rel="noopener">免登授权码 auth_code</a>。</li>
<li>通过应用的唯一标识 appkey 和应用密钥 appsecret <a href="https://open-dev.dingtalk.com/apiExplorer#/?devType=org&amp;api=/gettoken" target="_blank" rel="noopener">获取 access_token</a>。</li>
<li>通过 auth_code 和 access_token <a href="https://open-dev.dingtalk.com/apiExplorer#/?devType=org&amp;api=/user/getuserinfo" target="_blank" rel="noopener">获取 userid</a>。</li>
<li>通过 userid 和 access_token <a href="https://open-dev.dingtalk.com/apiExplorer#/?devType=org&amp;api=/user/get" target="_blank" rel="noopener">获取 userinfo</a>。</li>
</ol>
<p>前端流程：</p>
<ol>
<li>获取 auth_code。</li>
<li>auth_code 发送到后台，换区 userinfo。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dd.runtime.permission.requestAuthCode(&#123;</span><br><span class="line">  corpId, <span class="comment">// 企业ID</span></span><br><span class="line">  onSuccess(result) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125;,</span><br><span class="line">  onFail(error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h3><p><a href="https://ding-doc.dingtalk.com/doc#/dev/uwa7vs" target="_blank" rel="noopener">钉钉总流程</a>：</p>

<ol>
<li>通过应用的唯一标识 appkey 和应用密钥 appsecret <a href="https://open-dev.dingtalk.com/apiExplorer#/?devType=org&amp;api=/gettoken" target="_blank" rel="noopener">获取 access_token</a>。</li>
<li>根据 access_token <a href="https://open-dev.dingtalk.com/apiExplorer#/?devType=org&amp;api=/get_jsapi_ticket" target="_blank" rel="noopener">获取 jsapi_ticket</a>。</li>
<li>根据 jsapi_ticket, 随机串 nonceStr, 时间戳 timeStamp, 页面 url 计算签名 signature。</li>
<li>根据 随机串 nonceStr，应用标识 agentId，时间戳 timeStamp，企业ID corpId，签名 signature 进行鉴权（调用 dd.config）。</li>
</ol>
<p>鉴权后，可调用 dingtalk-jsapi 中的方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dd.config(&#123;</span><br><span class="line">  agentId: <span class="string">''</span>, <span class="comment">// 必填，微应用ID</span></span><br><span class="line">  corpId: <span class="string">''</span>,<span class="comment">//必填，企业ID</span></span><br><span class="line">  timeStamp: <span class="string">''</span>, <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">  nonceStr: <span class="string">''</span>, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">  signature: <span class="string">''</span>, <span class="comment">// 必填，签名</span></span><br><span class="line">  type: <span class="number">0</span>, <span class="comment">// 选填。0表示微应用的jsapi,1表示服务窗的jsapi；不填默认为0</span></span><br><span class="line">  jsApiList: [</span><br><span class="line">    <span class="string">'runtime.info'</span>,</span><br><span class="line">    <span class="string">'biz.contact.choose'</span>,<span class="comment">// 鉴权后可调用</span></span><br><span class="line">    <span class="string">'device.notification.confirm'</span>,</span><br><span class="line">    <span class="string">'device.notification.alert'</span>,</span><br><span class="line">    <span class="string">'device.notification.prompt'</span>,</span><br><span class="line">    <span class="string">'biz.ding.post'</span>,</span><br><span class="line">    <span class="string">'biz.util.openLink'</span>,</span><br><span class="line">  ]<span class="comment">// 必填，需要使用的jsapi列表，注意：不要带dd。</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="钉钉机器人对接"><a href="#钉钉机器人对接" class="headerlink" title="钉钉机器人对接"></a>钉钉机器人对接</h2><p>可使用 <a href="https://github.com/x-cold/dingtalk-robot.git" target="_blank" rel="noopener">dingtalk-robot-sender</a> 发送钉钉机器人消息。消息展示可参考<a href="https://open-doc.dingtalk.com/microapp/serverapi3/iydd5h" target="_blank" rel="noopener">钉钉官方文档</a>，调用方式可参考 <a href="https://github.com/x-cold/dingtalk-robot/blob/master/lib/bot.js" target="_blank" rel="noopener">bot.js</a>。须注意，当发送的数据内容不符合钉钉消息格式时（如 link 消息缺失 text），响应不会报错。</p>
]]></content>
      <categories>
        <category>踩坑</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>maven</title>
    <url>/2020/02/04/backend/java%20%E5%B7%A5%E7%A8%8B/maven/</url>
    <content><![CDATA[<p>maven 使用 pom.xml 文件声明依赖；jar 包资源使用 groupId、artifactId、version 定位。maven 下载依赖会先从本地找起，然后私服镜像，最后是 maven 官方的中央仓库。</p>
<p>maven 命令（maven 项目的根目录下执行）如下：</p>
<ul>
<li>mvn compile –src/main/java 编译生成 class（target 目录下）</li>
<li>mvn test –src/test/java 编译</li>
<li>mvn clean 删除 target 目录</li>
<li>mvn package　生成压缩文件，java 项目 jar 包，web 项目 war 包（target 目录下）</li>
<li>mvn install　将压缩文件（jar 或 war 包）上传到本地仓库</li>
<li>mvn deploy 将压缩文件上传私服</li>
<li>mvn eclipse:eclipse 将 maven java 或 web 项目转成 eclipse 工程</li>
<li>mvn eclipse:clean 清除 eclipse 配置，将 eclipse 工程转成 maven 项目</li>
<li>mvn idea:idea 将 maven java 或 web 项目转成 idea 工程</li>
<li>mvn idea:clean 清除 idea 配置，将 idea 工程转成 maven 项目</li>
</ul>
<h2 id="idea-配置-maven"><a href="#idea-配置-maven" class="headerlink" title="idea 配置 maven"></a>idea 配置 maven</h2><ol>
<li>下载 <a href="http://mirror.bit.edu.cn/apache/maven/maven-3/3.5.0/binaries/apache-maven-3.5.0-bin.zip" target="_blank" rel="noopener">apache-maven</a>。</li>
<li>配置 maven 环境变量。</li>
<li>配置 setting.xml 配置，添加 maven 镜像。</li>
<li>修改 idea 配置（通过 setting 面板），应用本地 maven 和 setting.xml。</li>
<li>idea 操作 reimport 导入依赖、</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/whgk/p/7112560.html" target="_blank" rel="noopener">maven 到底是个啥玩意</a><br><a href="https://www.jianshu.com/p/4ae682e679ad" target="_blank" rel="noopener">maven生命周期</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>java 工程</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>感悟</title>
    <url>/2020/01/31/%E9%9A%8F%E7%AC%94/%E6%84%9F%E6%82%9F/</url>
    <content><![CDATA[<h2 id="清晰的定义"><a href="#清晰的定义" class="headerlink" title="清晰的定义"></a>清晰的定义</h2><p>有人认为，好的电影可以用一句话概括它所要表达的主题。与此相类，为产品下一个有效的定义能使我们足够聚焦于解决问题的本质，滤除细节上的干扰。</p>
<h3 id="生命周期的视角"><a href="#生命周期的视角" class="headerlink" title="生命周期的视角"></a>生命周期的视角</h3><h4 id="取舍"><a href="#取舍" class="headerlink" title="取舍"></a>取舍</h4><p>俗话说，“不以结婚为目的的恋爱都是耍流氓”。事实证明，在工作环境上，技术产物的试金石是，能否高效地解决业务问题。刻意追求技术手段的自主或高明，脱离解决业务问题这个导向标，都是多余的奇技淫巧。这话同样适用于纯技术产物。切回电影这个上下文，能表达同一个意思的说法是：工业化的好莱坞不是新浪潮电影的发祥地；好莱坞也不会给拍摄决斗时的斯皮尔伯格拉排场。工程师不是名声在望的艺术家，他为组织提供合适的技术方案及实现。最好的也许是科学的，但未必是合适的；合适的也许不够科学，却能有效地解决问题。</p>
<h4 id="愿景"><a href="#愿景" class="headerlink" title="愿景"></a>愿景</h4><p>简单地说，科学是有条理、可验证地表达观点或方法，因此它需要完善闭环流程。但是在企业环境中，光是有限的开发时间这一项就会让我们不得不退而取其次 —— 置于首位的照常是功能实现，而富有远见的规划布景、良好的验收流程总被弃之一边。为此，好的定义可以是指引明媚前路的愿景，不只是崎岖山路上的一种妥协。在艰难开拓的早期，不够优雅的实现往往屈从于技术、时间、人力、环境等要素的制约，但这只是阶段性产物的特征。毕竟市场也有狂热趋于理性的一面，以规划为基石的愿景不至于使我们最终选择在粗制滥造面前缴械。</p>
<h4 id="战略"><a href="#战略" class="headerlink" title="战略"></a>战略</h4><p>像人类有自我纠错、自我完善的动力，有责任的建设者会为产品赋予生命，他们会在已成型的产品中寻找待解决的问题、寻找演进的策略，直到另一张高维度的画布使它最终变得无从发挥。技术产品的淘汰尤其如此。“吾尝终日不食，终夜不寝，以思，无益，不如学也。” 战略需要跨域，非到高维度的视角最难揣摩，到了高维度的视角也最容易领会。实体经济转向网商经济在今天是耳熟能详的事情，马老师提出的“新制造” —— 将数字化物流的手段带入工业生产，即在于技术手段的可迁移性。遥远的未来是不可知的，懂得弃守舒适区也许是种好的态度。</p>
<p>以上三条的视点大体在于产品生命周期的短期、中长期和遥远的未来。</p>
<p>清晰的定义能设定问题的本源及边界，</p>
<ul>
<li>限定问题域</li>
<li>限定解空间</li>
<li></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://yq.aliyun.com/articles/743101?spm=a2c4e.11155472.0.0.24fd9d43VEoTKW" target="_blank" rel="noopener">阿里高级技术专家：整洁的应用架构“长”什么样？</a><br><a href="https://blog.csdn.net/csdn_bang/article/details/97993881" target="_blank" rel="noopener">学阿里中台，80%的人只学到了皮毛！揭秘阿里中台的12个架构思维和原则</a><br><a href="https://m.aliyun.com/yunqi/articles/291244?spm=5176.100239.0.0.2cc5e03f1rE0ld" target="_blank" rel="noopener">2017双11交易系统TMF2.0技术揭秘，实现全链路管理</a><br><a href="http://blog.itpub.net/31562044/viewspace-2639289/" target="_blank" rel="noopener">跳开 DDD 和中台概念看阿里巴巴交易平台的问题及解决思路</a><br><a href="https://www.sohu.com/a/325162749_463994" target="_blank" rel="noopener">阿里技术大牛：一份架构师成神路线图！</a></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>spring cloud 踩点</title>
    <url>/2020/01/31/backend/spring/spring%20cloud%20%E8%B8%A9%E7%82%B9/</url>
    <content><![CDATA[<p>spring cloud 是一个基于 spring boot 的服务治理框架，它由众多服务治理组件构成：</p>
<ul>
<li>注册中心：Erueka、Zookeeper、Consul 等用于注册、发现服务。</li>
<li>配置中心：Spring Cloud Config 提供分布式系统的配置管理功能（运行时更新配置文件需要 refresh 才能重新加载配置）。</li>
<li>网关（外部调用）：Zuul、Spring Cloud Gateway 为动态实例提供外部调用入口，可以基于横切关注点实现权限校验、监控指标、负载均衡等功能。</li>
<li>内部调用：OpenFeign 声明式 RESTful 网络请求客户端。</li>
<li>断路器：Hystrix 隔离调用 N 次失败的不可用服务，避免服务级联雪崩。Hystrix-dashboard 查看各 Hystrix Command 的请求响应时间，请求成功率等数据，只能查看单个应用的服务信息。Turbine 能查看系统内多个服务的调用数据。</li>
<li>负载均衡：Ribbon。</li>
<li>分布式消息：Spring Cloud Stream、Spring Cloud Bus。Spring Cloud Bus 可用于促使客户端重新拉取配置，即 Spring Cloud Config 相关配置文件提交到代码库时，webhook 通知 Spring Cloud Bus；由 Spring Cloud Bus 促使订阅消息的客户端重新从 ConfigServer 拉取配置。</li>
<li>安全控件：Spring Cloud Security 基于 OAuth2.0 的安全控件。</li>
<li>链路监控：Zipkin、Dapper、Eagleeye、Spring Cloud Sleuth 通过数据埋点监控微服务性能及调用链路。</li>
</ul>
<img src="/2020/01/31/backend/spring/spring%20cloud%20踩点/spring_cloud.jpg">
<h2 id="spring-cloud-公共库"><a href="#spring-cloud-公共库" class="headerlink" title="spring cloud 公共库"></a>spring cloud 公共库</h2><h3 id="spring-cloud-上下文"><a href="#spring-cloud-上下文" class="headerlink" title="spring cloud 上下文"></a>spring cloud 上下文</h3><p>spring cloud 有两个上下文：application.yml 应用上下文、bootstrap.yml 引导上下文。依据 spring 层级上下文机制，引导上下文作为应用上下文的父级，具有较低的优先级。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/powerwu/articles/9776357.html" target="_blank" rel="noopener">基于 Spring Cloud 的分布式架构体系</a><br><a href="https://www.cnblogs.com/edisonchou/p/java_spring_cloud_foundation_sample_list.html" target="_blank" rel="noopener">Spring Cloud 微服务架构学习笔记与示例</a><br><a href="http://www.mamicode.com/info-detail-2274944.html" target="_blank" rel="noopener">深入理解 Spring Cloud 引导上下文</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>spring</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>从 nacos 看领域驱动设计</title>
    <url>/2020/01/23/backend/%E6%9E%B6%E6%9E%84/%E4%BB%8E%20nacos%20%E7%9C%8B%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>按 <a href="https://nacos.io/zh-cn/index.html" target="_blank" rel="noopener">Nacos 官网</a> 的说法，它是一个提供便捷的服务发现、管理和配置平台。推敲 Nacos 的出产，首先它基于问题域思考所需实现的功能特性和非功能特性；再由特性思忖到逻辑架构图、领域模型、部署架构图、类视图等架构层面；再结合特性和架构图深入业务场景，完善功能实现策略；然后从开发生态这个宏观视角寻味 Nacos 需要支持的语言、技术栈；最后从市场投放这个目标视角总结 Nacos 的各种优势，并予以战略上的肯定。可以推想，Nacos 基于领域模型设计，比领域模型走得更远。</p>
<img src="/2020/01/23/backend/架构/从%20nacos%20看领域驱动设计/nacosMap.jpg">
<h2 id="一句话需求"><a href="#一句话需求" class="headerlink" title="一句话需求"></a>一句话需求</h2><p><a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener">Nacos</a> 充当微服务中的注册中心和配置中心。</p>
<p>当巨石项目被切割成多个支持动态扩展的微服务后，各个微服务的调用地址和数量都是动态可变的，注册中心的核心功能就是维护可调用的服务清单。遵循 C/S 架构，server 服务器维护着 client 可调用服务清单，并提供接口给 client 以查询其他服务信息；client 客户端一方面会将自己注册到 server 上，另一方面会从 server 上获取依赖的其他服务信息。常见的注册中心有 Eureka、Zookeeper、Consul、Dubbo。应用在不同环境中会有不同的配置，配置中心的目的即在于提供不同的配置能力。常见的配置中心有 spring cloud config、Apollo、Disconf、Diamond。</p>
<h2 id="领域模型"><a href="#领域模型" class="headerlink" title="领域模型"></a>领域模型</h2><h3 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h3><p>注册中心基于以下概念：Service 服务、Service Provider 服务提供者、Service Consumer 服务消费者、Service Metadata 服务元数据、Service Registry 服务注册中心。由服务提供者提供服务、实例和元数据信息，并将这些内容添加到注册中心，再由服务消费者查询消费。服务下割集群，集群下挂载指定 ip、port 的实例（实例默认挂载在默认集群下，也可以创建虚拟集群管理实例）；服务上设分组。元数据包含服务端点、服务标签、服务版本号、服务实例权重、路由规则、安全策略等。Nacos 会对实例进行健康检查；当健康的实例占服务总实例比重小于指定阈值时，Nacos 将不会应用实例权重和路由规则，而是将可能不健康的实例推送给消费者。Nacos 团队在 <a href="https://nacos.io/en-us/blog/discovery-console.html" target="_blank" rel="noopener">Nacos服务发现控制台预览 2018.10.2</a> 这篇文章中点明了服务 - 集群 - 实例模型的界面设计。下图是包含模型结构和主要功能的领域模型。</p>
<img src="/2020/01/23/backend/架构/从%20nacos%20看领域驱动设计/service.jpeg">
<h3 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h3><p>配置中心基于以下概念：Configuration 配置、Configuration Management 配置管理。配置中心的主要功能在于管理应用所需的配置。单条配置（如日志级别）构成一个配置项；多个配置项通过配置集统筹；一个配置集通过配置集 id 定位；配置集上设分组，以便多个应用使用相同的配置集。对于配置管理，Nacos 还提供或规划了灰度发布、版本管理、快速回滚、监听查询、推送轨迹、权限控制、敏感配置的加密存储等功能。当配置被 client 拉取到时，Nacos 的客户端 SDK 会在本地生成配置快照，以作容灾处理；配置快照会在特定时间进行更新，但不会过期。[Nacos 帮我们解决什么问题？—— 配置管理篇] 这篇文章道明了配置中心的存在价值，上文也有简要说明。下图是包含模型结构和主要功能的领域模型。</p>
<img src="/2020/01/23/backend/架构/从%20nacos%20看领域驱动设计/configuration.jpeg">
<h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>namespace 命名空间用于区分不同租户和不同环境。命名空间下挂服务分组、配置分组。默认的命名空间为 public，分组默认是 DEFAULT_GROUP。Nacos 控制台可以添加新的命名空间，随后在 client 中即可配置命名空间的 id（id 须经解析以获得实际的命名空间名，然后从 server 中获得配置），指定服务所属哪个命名空间或服务使用哪个命名空间的配置。<a href="https://nacos.io/zh-cn/blog/namespace-endpoint-best-practices.html" target="_blank" rel="noopener">Namespace, endpoint 最佳实践</a> 描述着命名空间的设计背景和方案。下图是命名空间的模型结构。</p>
<img src="/2020/01/23/backend/架构/从%20nacos%20看领域驱动设计/namespace.jpeg">
<h2 id="逻辑流程"><a href="#逻辑流程" class="headerlink" title="逻辑流程"></a>逻辑流程</h2><p>上节所能感知的是 Nacos 控制台的界面形式（实现了什么），但不能感知 Nacos 的内部（怎么实现的）。本节结合下一节，所要表述的是 Nacos 是怎么实现。本节仅介绍注册中心的逻辑流程。</p>
<p>注册中心的功能分为两部分：服务注册、服务发现。下图下半部分即服务注册的流程，标名的客户端作为服务提供者将自己注册到 Nacos，Nacos 注册中心即会生成对应的一份实例配置；服务注册成功后，服务提供者与注册中心维持心跳，以保证将最新的服务信息推送到注册中心。上半部分即服务发现的流程，其一标名的客户端作为服务消费者可以从注册中心主动获取服务实例信息；其二消费者可以订阅注册中心的服务，那样会在客户端本地维护一份服务列表（通过事件机制予以更新），客户端从本地获取服务实例信息。<a href="https://www.jianshu.com/p/61608ff86344" target="_blank" rel="noopener">Nacos 服务注册与发现原理分析</a> 这篇文章道明了服务注册与发现的主流程。</p>
<img src="/2020/01/23/backend/架构/从%20nacos%20看领域驱动设计/service_register.png">
<p><a href="https://www.infoq.cn/article/B*6vyMIKao9vAKIsJYpE?from=timeline&amp;isappinstalled=0" target="_blank" rel="noopener">Nacos 注册中心的设计原理详解</a> 这篇文章道明了 Nacos 在数据隔离、数据一致性（多注册中心的前提下）、负载均衡、健康检查、集群扩展性上的设计原理。</p>
<h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><img src="/2020/01/23/backend/架构/从%20nacos%20看领域驱动设计/jiagou.png">
<p>在 nacos-core 核心中，与上文相关的模块有：</p>
<ul>
<li>插件机制：实现服务管理、配置管理、元数据管理三个模块可分可合能力，实现扩展点 <a href="http://blog.itpub.net/69912579/viewspace-2656555/" target="_blank" rel="noopener">SPI 服务提供发现机制</a>。</li>
<li>事件机制：实现异步化事件通知，sdk 数据变化异步通知等逻辑。</li>
<li>回调机制：sdk 通知数据，通过统一的模式回调用户处理。接口和数据结构需要具备可扩展性。</li>
<li>推送通道：解决 server 与存储、server 间、server 与 sdk 间推送性能问题。</li>
<li>寻址模式：解决 ip、域名、nameserver、广播等多种寻址模式，需要可扩展。</li>
<li>流量管理：按照租户，分组等多个维度对请求频率，长链接个数，报文大小，请求流控进行控制。</li>
</ul>
<p>这些核心模块撑起了上文所说的功能模块的逻辑流程。</p>
<p>在接口层之上、数据层之下，是 Nacos 所要支持的生态。</p>
<img src="/2020/01/23/backend/架构/从%20nacos%20看领域驱动设计/shengtai.png">
<p><a href="https://nacos.io/zh-cn/blog/alibaba-configserver.html" target="_blank" rel="noopener">阿里巴巴服务注册中心产品ConfigServer 10年技术发展回顾</a> 这篇文章道明了 Nacos 的前世今生，各阶段致力于解决的问题。<a href="https://nacos.io/zh-cn/docs/roadmap.html" target="_blank" rel="noopener">Nacos 规划</a> 简述了 Nacos 今后的发展。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>项目使用了 Nacos，我发现在了解 Nacos 的过程中，最有意思的是探究其破土出芽的过程。虽然这一过程有点自不量力，很多东西都不能消化吸收，但是却能助我看见领域驱动设计的应用。正好最近在看《领域驱动设计 —— 软件核心复杂性的应对之道》，工作中也在接触一个探索型项目，总结一套可交流的建模语言、构建产品的一般流程很有价值似的。通过上述文字，我所能领会到的构建产品的一般流程为：</p>
<ul>
<li>一句话描述需求，阐明核心功能模块。</li>
<li>构造领域模型，剖析核心流程。</li>
<li>统筹整体架构，宏观上挖掘生态、市场。</li>
<li>分解功能模块，分工、规划、细化。</li>
</ul>
<p>我觉得这样的流程可以应用工程实践上。整理这篇文章的目的大概在于此吧。至于“细节处见真章”方面，还真是让人愧不自啊。而 Nacos 在 spring 项目中的应用，可以参考官方文档 <a href="https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html" target="_blank" rel="noopener">Nacos Spring Cloud 快速开始</a>，这里不作说明。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://nacos.io" target="_blank" rel="noopener">Nacos 官网</a><br><a href="https://www.jianshu.com/p/61608ff86344" target="_blank" rel="noopener">Nacos 服务注册与发现原理分析</a><br><a href="https://www.infoq.cn/article/B*6vyMIKao9vAKIsJYpE?from=timeline&amp;isappinstalled=0" target="_blank" rel="noopener">Nacos 注册中心的设计原理详解</a><br><a href="https://nacos.io/zh-cn/blog/address-server.html" target="_blank" rel="noopener">Nacos 环境隔离</a><br><a href="http://blog.itpub.net/69922229/viewspace-2644195/" target="_blank" rel="noopener">Nacos Sync 的设计原理和规划</a><br><a href="https://nacos.io/zh-cn/blog/access%20control%20design.html" target="_blank" rel="noopener">Nacos 权限控制设计方案</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>架构</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>异步消息</title>
    <url>/2020/01/21/backend/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/</url>
    <content><![CDATA[<p>使用 RMI、Hession、Burlap、Http invoker、web 服务等的同步消息需要等待阻塞任务完成，才能运行其他程序。同时，在同步消息模式下，接受消息的客户端与远程服务耦合：客户端需要远程服务接口的变更而变更；客户端需要感知远程服务的网络地址；客户端会随着远程服务的不可用而不可用。异步消息是无阻塞的，且不会造成消息发送者和接受者的强耦合。异步消息通常基于 message broker 消息代理实现，通过代理将消息投放到 destination 目的地。在这过程中，消息发送者会被解析出来，可以处理其他任务。异步消息一般用于四种场景：异步处理（如注册账户后发送邮件）、应用解耦（如下单业务中库存系统通过 MQ 与订单系统关联）、流量削峰（如秒杀系统先将前端消息存入 MQ）、日志处理（如 kafka 缓存采集日志）。</p>
<h2 id="消息代理"><a href="#消息代理" class="headerlink" title="消息代理"></a>消息代理</h2><p>常见的消息代理有 ActiveMQ、RabbitMQ、Kafka、RocketMQ、ZeroMQ，它们也称为消息中间件。</p>
<h3 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h3><p>ActiveMQ 使用 Java 语言编写，遵循 JMS 规范。它支持两种消息模型：点对点模型（即队列）、发布/订阅模型（主题）。在这两种模型中，消息发送者均不会关心消息最终会被那个接受者取走。点对点模型可以有多个接受者（通过轮询依次发送向接受者发送消息），因为不知道存储在队列中的消息会被哪个接受者取走，也就意味着接受者必须有相同的实现。发布/订阅模型会将消息发送到一个主题下，订阅该主题的接受者都会接受到消息。ActiveMQ 只支持 KahaDB message store、AMQ message store、JDBC message store、Memory message store 等少量的存储器，不支持 hadoop、hdfs、hbase 等分布式系统。</p>
<p>JMS（Java Message Service） 规范定义了使用消息代理的通用接口，其意义类似于 JDBC。</p>
<img src="/2020/01/21/backend/异步消息/异步消息/jms.png">
<p>spring 抽象了 JmsTemplate 模板。在配置类中以 ConnectionFactory 为参数，创建 JmsTemplate 实例，并作为 bean 装填在上下文中。应用中即可使用 jmsOperations.send、jmsOperations.receive 收发消息，且可对消息进行转换。spring 又提供了消息驱动的 POJO，允许以消息监听器的形式调用这个 bean 中的方法。详情可以参考 《spring 实战》。</p>
<h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p>RabbitMQ 使用 Erlang 语言编写，遵循 AMQP 高级消息队列协议（Advanced Message Queuing Protocol）（一个网络协议）。在 AMQP 协议中，发布者发送的消息会经由交换机转交给消息队列（基于路由规则转发消息），最终消息会被订阅了该消息队列的消费者获取或者主动推送给消息者。此处队列可视为消息通道。交换机有多种类型，并且一个消息队列会和一个交换机进行绑定（同一个交换机可以绑定多个消息队列），再由交换机路由到特定的消息队列中。有直连交换机，通过指定路由键将消息推送到消息队列上；有扇型交换机，将消息广播到与交换机绑定的所有消息队列上；有主题交换机，主题键允许模糊匹配；头交换机，作为路由策略的头属性值可以是整数或字典等。消息队列有两种：持久化队列能将消息固化到磁盘中；暂存队列在消息使用完成后会被销毁。为了避免丢包现象，AMQP 允许使用消息确认机制，在消费者输送确认回执后，才将消息从队列中删除。</p>
<img src="/2020/01/21/backend/异步消息/异步消息/amqp.jpeg">
<p>AMQP 是一个线路层级的协议，指定消息的格式，这样消息就能跨 AMQP 实现以及跨语言和平台；JMS 只是一个 API 规范。spring AMQP 抽象了 RabbitTemplate 模板用于收发消息。在 spring boot 项目中发送消息时，首先需要在配置类中装配队列、交换机，并将队列和交换机进行绑定；然后通过自动装配的 RabbitTemplate#convertAndSend 发送消息。接受消息既可以通过 RabbitTemplate#receive 或 AMQP POJO，又可以通过 @RabbitListener 注解实现。详情可以参看 <a href="https://blog.csdn.net/qq_35387940/article/details/100514134" target="_blank" rel="noopener">Springboot 整合 RabbitMQ</a>。</p>
<h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><p>Kafka 依赖 Zookeeper 注册中心协调生产者和消费者。它自有一套协议，使用 pull 模式处理消息，追求高吞吐量，不支持事务，适合数据采集作业，可视为一个日志系统。消息按主题发送，每个主题可以有多个分区，对应的消息者也以 ConsumerGroup 组合呈现。一个组合下的消费者可以读取多个主题分区，但是一个主题分区在同一个消费者组合中只能被一个消费者处理。kafka 队列中的内容按策略存储一定时间，消费者可以指定偏移量来读取数据，即下次可以接着上次内容后读取。</p>
<img src="/2020/01/21/backend/异步消息/异步消息/kafka.png">
<h3 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h3><p><a href="https://github.com/apache/rocketmq" target="_blank" rel="noopener">RocketMQ</a> 是阿里开源的消息中间件，前身是 MetaQ，今生是 Aliware MQ（可参考 <a href="https://blog.csdn.net/cainiao_xiaowu/article/details/94554771" target="_blank" rel="noopener">MetaMQ RocketMQ的前世今生</a>）。它使用 Java 编程，具有高吞吐量、高可用性、适合大规模分布式系统应用等特点。在阿里内部，它被广泛用于交易、充值等业务系统，以及日志流式处理、binglog 分发等数据采集场景。RocketMQ 以 name server 作为注册中心，broker 代理采用主从模式部署，无论 producer 还是 consumer 都会通过发送心跳包的方式从 name server 中读写信息。</p>
<p>RocketMQ 的最大特点是支持分布式事务。首先 RocketMQ 支持事务性消息，即该消息在抵达 consumer 时能保证其与 producer 有相同的数据一致性，实现上是等待 producer 执行完成，consumer 才进行 db 操作。事务开始阶段，producer 会发送半消息给 MQ，执行成功时发送 Commit 全消息或 Rollback 回滚消息。MQ 接受 Commit 全消息时，将消息推送给 consumer；MQ 接受 Rollback 回滚消息时，隔三天删除消息；如果因为网络问题导致 MQ 接受到 Commit 全消息或 Rollback 回滚消息，调用 MQ 的事务状态服务询问 producer 事务执行状态，条件提交或回滚。</p>
<img src="/2020/01/21/backend/异步消息/异步消息/transcation.jpg">
<p>其次，若一个主业务系统的操作会通过异步消息引起多个辅业务系统的 db 操作，那么在常规的异步消息之外，RocketMQ 会在这一系列业务操作的预期执行时间之后再发送一个异步消息，以便创建一个用于回滚的任务。该任务会询问主业务系统的事务执行状态，若失败，进一步促使辅业务系统执行回滚操作。</p>
<img src="/2020/01/21/backend/异步消息/异步消息/transcation2.png">
<p>在 spring boot 中使用 RocketMQ 可参考 <a href="https://github.com/apache/rocketmq-spring/tree/master/rocketmq-spring-boot-samples" target="_blank" rel="noopener">rocketmq-spring-boot-samples</a>。</p>
<h3 id="ZeroMQ"><a href="#ZeroMQ" class="headerlink" title="ZeroMQ"></a>ZeroMQ</h3><p>ZeroMQ 在 socket 之上、MQ 之下，它更是一个处理消息传输的库，适用于作为分布式系统的消息通信工具。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/weixin_37641832/article/details/83270778" target="_blank" rel="noopener">深入理解 AMQP 协议</a><br><a href="http://www.yidianzixun.com/article/0KCbUbSL" target="_blank" rel="noopener">MQ概览：ActiveMQ，Kafka，MetaMQ，RocketMQ 消息中间件应用场景</a><br><a href="https://blog.csdn.net/konglongaa/article/details/52208273" target="_blank" rel="noopener">关于消息队列的使用—-ActiveMQ，RabbitMQ，ZeroMQ，Kafka，MetaMQ，RocketMQ</a><br><a href="https://blog.csdn.net/lifaming15/article/details/79942793" target="_blank" rel="noopener">activemq、rabbitmq、kafka 原理和比较</a><br><a href="https://www.cnblogs.com/Zender/p/9098410.html" target="_blank" rel="noopener">Java 消息服务-JMS</a><br><a href="https://www.cnblogs.com/wuhenzhidu/p/10781101.html" target="_blank" rel="noopener">RabbitMQ 指南</a><br><a href="https://www.cnblogs.com/williamjie/p/9481774.html" target="_blank" rel="noopener">RabbitMQ基础概念详细介绍</a><br><a href="https://blog.csdn.net/frank1998819/article/details/84767357" target="_blank" rel="noopener">MetaMQ 架构原理</a><br><a href="https://www.jianshu.com/p/2838890f3284" target="_blank" rel="noopener">Rocketmq 原理&amp;最佳实践</a><br><a href="http://www.sohu.com/a/149487721_610275" target="_blank" rel="noopener">Aliware-MQ 技术架构与最佳实践</a><br><a href="https://www.cnblogs.com/qdhxhz/p/11191399.html" target="_blank" rel="noopener">分布式事务(3)—RocketMQ实现分布式事务原理</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>异步消息</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>数据技术</title>
    <url>/2020/01/18/%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF/%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p>数据仓库（Data Warehouse）是一个面向主题的（Subject Oriented）、集成的（Integrate）、相对稳定的（Non-Volatile）、反映历史变化（Time Variant）的数据集合，用于支持管理决策。</p>
<ul>
<li>OLTP：On-Line Transaction Processing，联机事务处理，辅助业务操作，用于产生数据。OLTP 能将源数据即时传送到计算中心进行处理，并在短时间内给出结果。</li>
<li>OLAP：On-Line Analytical Processing，联机分析处理，辅助决策分析，用于分析数据。</li>
<li>ETL：Extract-Transform-Load，数据从来源端经过抽取（extract）、转换（transform）、加载（load）至目的端的过程。</li>
</ul>
<img src="/2020/01/18/数据技术/数据技术/lambda.png">
<p>上图为数据仓库架构发展过程中的第二阶段 —— Lambda 架构。第三阶段 Kappa 架构借助 Flink 等实时流处理引擎，移除了离线批处理 etl 任务。数据仓库构架的发展过程可以参看 <a href="https://yq.aliyun.com/articles/691541" target="_blank" rel="noopener">数据仓库介绍与实时数仓案例</a>。</p>
<ul>
<li>ODS：OperationalData Store，操作数据层，保存从业务系统或埋点系统采集过来的原始数据。</li>
<li>DWD：Data Warehouse Detail，明细数据层，根据主题定义好事实与维度表，保存最细粒度的事实数据。该层数据的生产作业包含：字段名、枚举等数据标准统一；数据脱敏，专门建设敏感数据库存储敏感数据；分库分表等多源数据整合；数据模型统基于业务流程建模。</li>
<li>DWS：Data Warehouse Summary，汇总数据层，在 DWD 层基础上根据不同的业务需求分主题轻度汇总。DWS 层可拆分为 DWB 轻度汇总数据和 DWS 重度汇总数据。</li>
<li>DM：Data Market，数据集市层，主要为业务需求提供服务，其包含应用产品所需数据、需求报表、指标等，DM 层还可为业务部门创建专用数据库以及数据探索库。</li>
</ul>
<p>下图为阿里大数据系统的架构图：</p>
<img src="/2020/01/18/数据技术/数据技术/ali.jpg">
<h2 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h2><p>数据同步的方式：</p>
<ul>
<li>直连同步：通过 ODBC、JDBC 等标准接口将源系统的数据导入到目标系统，对业务系统的性能影响较大（虽然业务系统可以采用主备分离的模式）。</li>
<li>数据文件同步：通过 FTP 服务器将源系统的数据导入到目标系统。为避免丢包或传输错误，业务系统一般还会发送校验文件，并对数据增加压缩和加密功能。</li>
<li>数据库日志解析同步：在操作系统层面获取归档日志，将其解析到目标文件数据文件中，可用于增量更新。日志解析同步需要部署一个 agent 系统从源系统抽取数据。该同步机制会导致增量更新的数据丢失调凌晨附近的数据，即数据飘逸和遗漏。</li>
</ul>
<h3 id="DataX"><a href="#DataX" class="headerlink" title="DataX"></a>DataX</h3><p>阿里内部使用 <a href="https://github.com/alibaba/DataX" target="_blank" rel="noopener">DataX</a> 作离线数据同步。它能实现包括 MySQL、Oracle、SqlServer、Postgre、HDFS、Hive、ADS、HBase、TableStore(OTS)、MaxCompute(ODPS)、DRDS 等各种异构数据源之间高效的数据同步功能。DataX 面对的主要问题是，从源系统到数仓或从数仓到目标系统，数据流进各个系统时的格式并不统一，因此 Datax 需要将数据转换成格式统一的中间状态。</p>
<p>DataX 采用 Framework + Plugin 开放式架构实现。Plugin 用于转换不同数据库或文件系统的数据格式，包含 ReadPlugin、WritePlugin 两类，作为 Reader 数据采集模块和 Writer 数据写入模块的实现内容。Framework 将数据同步作业拆分成多个子任务，并处理缓冲、流程控制、并发、上下文加载等高速数据交换等技术问题，再通过 Chanel 交换 Reader、Writer 的数据。</p>
<img src="/2020/01/18/数据技术/数据技术/datax.jpeg">
<p>更多内容可参考 <a href="https://blog.csdn.net/u014646662/article/details/82792725" target="_blank" rel="noopener">DataX3.0 简介</a>。</p>
<h3 id="TimeTunnel"><a href="#TimeTunnel" class="headerlink" title="TimeTunnel"></a>TimeTunnel</h3><p>阿里内部使用 TimeTunnel 作实时数据同步。它所实现的主要功能包含，通过消息订阅模式从源系统的 binlog 日志读取出增量数据，随后订阅数据的目标系统将读取这些数据。</p>
<p>TimeTunnel 是基于生产者、消费者和 Topic 消息标识实现的消息中间件。它通过 <a href="https://www.jianshu.com/p/53864dc3f7b4" target="_blank" rel="noopener">HBase</a> 持久化消息数据。在下图的组件架构中：TTManager 负责对外提供队列申请、删除、查询和集群的管理接⼝；对内发现故障，发起队列迁移。Client 是一组访问接口，包含安全认证 api、发布 api 和订阅 api。Router 为 Client、Broker 提供路由服务，路由到 Broker 时须鉴权。Zookeeper 提供状态同步功能，存储 Client、Broker 的状态。Broker 负责消息队列的读写操作，承担实际的流量，它会从 HBase 取发数据。</p>
<img src="/2020/01/18/数据技术/数据技术/TimeTunnel.png">
<p>更多内容可参考 <a href="https://blog.csdn.net/pelick/article/details/26265663" target="_blank" rel="noopener">淘宝实时数据传输平台: TimeTunnel介绍</a>。</p>
<h2 id="数据计算"><a href="#数据计算" class="headerlink" title="数据计算"></a>数据计算</h2><p>收集到原始数据后，数据还需要被整合和计算，才能发挥大数据的商业和业务价值。阿里为数据计算层提供了两大体系：MaxCompute 离线存储及计算平台、StreamCompute 实时计算平台。</p>
<h3 id="MaxCompute"><a href="#MaxCompute" class="headerlink" title="MaxCompute"></a>MaxCompute</h3><p><a href="https://helpcdn.aliyun.com/document_detail/27800.html" target="_blank" rel="noopener">MaxCompute</a> 采用分布式计算模型，能满足 100GB 以上规模的存储及计算需求。它支持 SQL 查询、UDF 用户自定义函数、Java MapReduce 编程模型、Graph 图计算处理框架。</p>
<img src="/2020/01/18/数据技术/数据技术/maxcompute.png">
<p>MaxCompute 由四部分组成：MaxCompute Client 客户端；MaxCompute Front End 接入层；MaxCompute Server 逻辑层；MaxCompute Core 存储与计算层。其中，客户端提供了 RESTful API、Java SDK、Command Line Tool、为 ETL/BI 提供的可视化 IDE 工具。接入层提供 HTTP 服务、缓存、负载均衡、用户认证等功能。逻辑层负责实现用户空间和对象的管理、命令的解析与执行逻辑、数据对象的访问控制和授权等功能。它有三种角色：Worker 对接 RESTful API、SQL 等，生成 MaxCompute Instance 并交由 Scheduler 处理；Scheduler 负责 MaxCompute Instance 的调度和拆解，询问计算层的资源占用情况；Exector 负责 MaxCompute Instance 的执行，向计算层提交计算任务。计算层即 Apsara Core 飞天内核，运行在和控制层相互独立的计算集群上，它包含 Pangu 分布式文件系统、Fuxi 资源调度系统、Nuwa 命名空间服务、Zhongkui 安全服务、Shennong 监控模块、Open Table Service 开放结构化数据服务（用于存储元数据）等。</p>
<img src="/2020/01/18/数据技术/数据技术/apsara.png">
<p>更多内容可参考 <a href="https://yq.aliyun.com/articles/78108" target="_blank" rel="noopener">阿里巴巴飞天大数据平台MaxCompute（原名ODPS）全套攻略</a>、<a href="https://yq.aliyun.com/articles/61529?spm=a2c4e.11153940.0.0.4f886797FazeNv" target="_blank" rel="noopener">MaxCompute 2.0 生态开放之路及最新发展</a>、<a href="http://www.sohu.com/a/129170041_612370" target="_blank" rel="noopener">MaxCompute 2.0 性能优化揭秘</a>、<a href="https://yq.aliyun.com/articles/690510?spm=a2c4e.11153940.0.0.737b1ffbAsWx17" target="_blank" rel="noopener">MaxCompute，基于Serverless的高可靠大数据服务</a>、<a href="https://www.cnblogs.com/barrywxx/p/10739834.html" target="_blank" rel="noopener">阿里云大数据计算服务 - MaxCompute (原名 ODPS)</a>、<a href="https://www.jianshu.com/p/4104e7d5316f" target="_blank" rel="noopener">当我们用 MaxCompute 的时候，我们在用什么？</a>。</p>
<h3 id="实时计算"><a href="#实时计算" class="headerlink" title="实时计算"></a>实时计算</h3><p>数据时效性一般分为三种：延迟以天计算的离线数据、延迟以小时计算的准实时数据、延迟以秒计算的实时数据。离线数据和准实时数据都可以在批处理系统（如 Hadoop、MaxCompute、Spark 等系统）中实现；实时数据则需要流处理系统（如 Storm、S4、Spark Streaming、Flink、StreamCompute 等系统）来实现。区别于批处理系统周期性调度任务，流处理系统的任务是常驻的，并需要满足高时效性、高性能的要求。流处理系统不能完全替代批处理系统，因为它的计算成本加大，且需要解决复杂的业务逻辑（数据处理需要上下文关系，数据抵达时间的不确定性导致流处理系统可能获取不到前置数据）。</p>
<p>流处理系统所需要的数据可以通过 TimeTunnel、Kafka 等数据中间件或 MetaQ、Notify 等消息系统实现。其中，使用数据中间件能获得较高的吞吐量，一般用于应对数据量较大的业务系统；消息系统一般用作业务系统数据库变更的消息中转。</p>
<p>下图是 flink 的架构图：</p>
<img src="/2020/01/18/数据技术/数据技术/flink.png">
<p>更多内容可参考 <a href="https://help.aliyun.com/document_detail/110778.html?spm=a2c4g.11186623.6.554.2c6d15eaTRijei" target="_blank" rel="noopener">什么是阿里云实时计算</a>、<a href="https://yq.aliyun.com/articles/674448?spm=a2c4e.11153959.teamhomeleft.33.27f717f74CDX29" target="_blank" rel="noopener">Streaming System 第一章：Streaming 101</a>、<a href="https://www.cnblogs.com/code2one/p/10123112.html" target="_blank" rel="noopener">Flink架构及其工作原理</a>。</p>
<h2 id="数据服务"><a href="#数据服务" class="headerlink" title="数据服务"></a>数据服务</h2><p>阿里的数据开放服务经历了四个阶段：DWSOA、OpenAPI、SmartDQ 和 OneService。</p>
<img src="/2020/01/18/数据技术/数据技术/dataservice.jpg">
<ul>
<li>DWSOA：烟囱式一个需求一个或者几个接口。</li>
<li>OpenApi：同类数据（如会员数据）合并成一张逻辑表，对外透出一个接口，通过接口参数定位具体数据。</li>
<li>SmartDQ：逻辑表的取数据逻辑通过 SQL （作为领域专用语言 DSL）描述，SmartDQ 通过解析 SQL、生成执行计划、执行 SQL、合并数据、限制结果，最终透出数据。</li>
<li>OneService：在 SmartDQ 基础上，满足不同场景的数据需求，OneService-SmartDQ 简单的查询场景、OneService-Lego 个性化业务场景、 OneService-iPush 实时数据推送场景、OneService-uTiming 定时任务场景。</li>
</ul>
<p>在 SmartDQ 中，逻辑表通过多个数据源的物理表汇总而成，多个逻辑表挂在一个主题下。服务层主要包含两大模块：元数据配置维护物理表到逻辑表的映射；主处理模块会解析 DSL、构建逻辑 Query、构建物理 Query、拆分 Query、执行 SQL、合并结果。</p>
<img src="/2020/01/18/数据技术/数据技术/smartdq.png">
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《大数据之路——阿里巴巴大数据实践》<br><a href="https://www.cnblogs.com/shengyang17/p/10527700.html" target="_blank" rel="noopener">数仓</a><br><a href="https://www.jianshu.com/p/da62fb0c6a0b" target="_blank" rel="noopener">说说数仓</a><br><a href="https://blog.51cto.com/abezoo/2399546" target="_blank" rel="noopener">大数据环境下数仓设计</a></p>
]]></content>
      <categories>
        <category>数据技术</category>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>我看 spring beans</title>
    <url>/2020/01/12/backend/spring/%E6%88%91%E7%9C%8B%20spring%20beans/</url>
    <content><![CDATA[<p>先介绍两个重要的概念（详情可以参看 <a href="https://www.cnblogs.com/xingzc/p/9138256.html" target="_blank" rel="noopener">BeanFactory 和 FactoryBean 的区别</a>）：</p>
<ul>
<li>BeanFactory：作为接口，定义了 Spring IOC 容器最底层的编程规范，职能包含实例化、定位、配置应用程序中的 bean 及建立 bean 之间的依赖。</li>
<li>FactoryBean：用于实例化 bean。Spring 有两种 bean：通过反射机制使用 class 创建的 bean，如添加了 @Component 注解的 bean；通过实现了 FactoryBean 接口的类创建 bean，在 FactoryBean#getObject 会创建所需要的类实例。</li>
</ul>
<p>在 spring 中，应用上下文 ApplicationContext 在 refresh 方法执行期间，会创建 BeanFactory 实例并注册 BeanDefiniton（定义了 bean 的基础属性：scope 是否单例、lazyInit 是否懒加载等）；然后通过调用 BeanFactory#getBean 方法可以创建 bean。ApplicationContext#getBeanFactory 可用于获取 BeanFactory 实例；ApplicationContext#getBean 可用于获取 bean。</p>
<img src="/2020/01/12/backend/spring/我看%20spring%20beans/bean.png">
<h2 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h2><p>作为应用上下文，ApplicationContext#refresh 执行过程既会创建 BeanFactory、注册 BeanDefiniton，又集成了国际化、事件广播机制。该接口有以下实现类：</p>
<ul>
<li>AnnotationConfigApplicationContext：从一或多个配置类中加载上下文定义，适用于 java 注解方式加载 bean</li>
<li>ClassPathXmlApplicationContext：从类路径下的一或多个 xml 配置文件中加载上下文定义，适用于 xml 配置方式</li>
<li>FileSystemXmlApplicationContext：从文件系统下的一或多个 xml 配置文件中加载上下文定义</li>
<li>AnnotationConfigWebApplicationContext：专门为 web 应用准备的，适用于注解方式</li>
<li>XmlWebApplicationContext：从 web 应用下的一或多个xml配置文件加载上下文定义，适用于 xml 配置方式</li>
</ul>
<p>以下是 AnnotationConfigApplicationContext 的使用情形：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManConfig</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Man <span class="title">man</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Man();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 调用 ApplicationContext#refresh 方法，注册 BeanDefiniton</span></span><br><span class="line">		ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(ManConfig.class);</span><br><span class="line">		<span class="comment">// 获取 bean</span></span><br><span class="line">		Man man = context.getBean(Man.class);</span><br><span class="line">		man.driveCar();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际上，在 AnnotationConfigApplicationContext 实例化过程中，即会调用 refresh 方法。对于非懒加载的 bean，refresh 方法执行期间即会予以加载。当然，在 AnnotationConfigApplicationContext 实例化过程中，它会扫描 basePackages 以便筛选出添加了 @Component 注解的类。refresh 源码见下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title">DefaultResourceLoader</span></span></span><br><span class="line"><span class="class">		<span class="keyword">implements</span> <span class="title">ConfigurableApplicationContext</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">			<span class="comment">// 设置环境变量、容器开关和激活标志等</span></span><br><span class="line">			prepareRefresh();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 调用子类实现的 refreshBeanFactory 方法创建 BeanFactory 实例，并加载 BeanDefiniton</span></span><br><span class="line">      <span class="comment">// BeanFactory 实例如 AbstractRefreshableApplicationContext 中的 DefaultListableBeanFactory 实例</span></span><br><span class="line">			ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 配置 BeanFactory 所用的类加载器、bean 表达式解析器、属性编辑器等</span></span><br><span class="line">			prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="comment">// 执行子类的 postProcessBeanFactory，可用于（通过应用的配置文件）修改 BeanDefiniton</span></span><br><span class="line">				postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 执行 BeanFactoryPostProcessor#postProcessBeanFactory，可用于修改 BeanDefiniton</span></span><br><span class="line">				invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 注册 bean 初始化钩子 BeanPostProcessor</span></span><br><span class="line">				registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 加载 MessageSource 这个特殊的 bean，用于国际化处理</span></span><br><span class="line">				initMessageSource();</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 初始化 ApplicationEventMulticaster 这个特殊的 bean，用于事件广播</span></span><br><span class="line">				initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 执行子类的 onRefresh 方法，初始化特殊的 bean</span></span><br><span class="line">				onRefresh();</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 加载 ApplicationListener（特殊的 bean 或通过上下文加载），执行 earlyApplicationEvents 前置事件</span></span><br><span class="line">				registerListeners();</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 加载 ConversionService 这个特殊的 bean</span></span><br><span class="line">				<span class="comment">// BeanFactory 添加 EmbeddedValueResolver，用于解析配置文件的属性</span></span><br><span class="line">				<span class="comment">// 加载 LoadTimeWeaverAware 这个特殊的 bean，允许织入第三方模块，如 AspectJ</span></span><br><span class="line">				<span class="comment">// 将 BeanFactory 中的 TempClassLoader 置为 null，终止其工作</span></span><br><span class="line">				<span class="comment">// 执行 BeanFactory#freezeConfiguration，冻结 BeanDefiniton</span></span><br><span class="line">				<span class="comment">// 执行 BeanFactory#preInstantiateSingletons，调用 getBean 方法提前加载无需懒加载的 bean</span></span><br><span class="line">				finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 完成刷新过程，发布应用事件</span></span><br><span class="line">				finishRefresh();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">				<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">					logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">							<span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				destroyBeans();</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 将容器激活标识置为否值</span></span><br><span class="line">				cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">throw</span> ex;</span><br><span class="line">			&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">				<span class="comment">// 重置缓存，因为 bean 所用及的元数据将不必使用</span></span><br><span class="line">				resetCommonCaches();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h2><p>BeanFactory 接口的默认实现类的 DefaultListableBeanFactory。以下是相关类图：</p>
<img src="/2020/01/12/backend/spring/我看%20spring%20beans/beanfactory.png">
<p>AbstractBeanFactory 类是 BeanFactory 接口的抽象实现类，在它的 getBean 方法执行期间，如果 bean 还没创建，它就会创建这个 bean；如果已经创建了这个 bean，并且这个 bean 是单例，spring 就会从缓存中获取这个 bean。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public abstract <span class="class"><span class="keyword">class</span> <span class="title">AbstractBeanFactory</span> <span class="keyword">extends</span> <span class="title">FactoryBeanRegistrySupport</span> <span class="title">implements</span> <span class="title">ConfigurableBeanFactory</span> </span>&#123;</span><br><span class="line">	@Override</span><br><span class="line">	public <span class="built_in">Object</span> getBean(<span class="built_in">String</span> name) throws BeansException &#123;</span><br><span class="line">		<span class="keyword">return</span> doGetBean(name, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	protected &lt;T&gt; T doGetBean(final <span class="built_in">String</span> name, @Nullable final Class&lt;T&gt; requiredType,</span><br><span class="line">			@Nullable final <span class="built_in">Object</span>[] args, boolean typeCheckOnly) throws BeansException &#123;</span><br><span class="line">		final <span class="built_in">String</span> beanName = transformedBeanName(name);</span><br><span class="line">		<span class="built_in">Object</span> bean;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 获取缓存的单例 bean</span></span><br><span class="line">		<span class="built_in">Object</span> sharedInstance = getSingleton(beanName);</span><br><span class="line">		<span class="keyword">if</span> (sharedInstance != <span class="literal">null</span> &amp;&amp; args == <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">				<span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">					logger.trace(<span class="string">"Returning eagerly cached instance of singleton bean '"</span> + beanName +</span><br><span class="line">							<span class="string">"' that is not fully initialized yet - a consequence of a circular reference"</span>);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					logger.trace(<span class="string">"Returning cached instance of singleton bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// （完成 FactoryBean 相关处理，）获取 bean 实例</span></span><br><span class="line">			bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// 单例正在（循环引用）创建过程中，报错</span></span><br><span class="line">			<span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 当 IOC 容器 BeanFactory 中不存在 BeanDefinition，向上查找祖先容器</span></span><br><span class="line">			BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line">			<span class="keyword">if</span> (parentBeanFactory != <span class="literal">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">				<span class="built_in">String</span> nameToLookup = originalBeanName(name);</span><br><span class="line">				<span class="keyword">if</span> (parentBeanFactory <span class="keyword">instanceof</span> AbstractBeanFactory) &#123;</span><br><span class="line">					<span class="keyword">return</span> ((AbstractBeanFactory) parentBeanFactory).doGetBean(</span><br><span class="line">							nameToLookup, requiredType, args, typeCheckOnly);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (args != <span class="literal">null</span>) &#123;</span><br><span class="line">					<span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (requiredType != <span class="literal">null</span>) &#123;</span><br><span class="line">					<span class="keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (!typeCheckOnly) &#123;</span><br><span class="line">				markBeanAsCreated(beanName);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="comment">// 合并祖先容器的 BeanDefinition</span></span><br><span class="line">				final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">				checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 获取（或创建）依赖 bean</span></span><br><span class="line">				<span class="built_in">String</span>[] dependsOn = mbd.getDependsOn();</span><br><span class="line">				<span class="keyword">if</span> (dependsOn != <span class="literal">null</span>) &#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="built_in">String</span> dep : dependsOn) &#123;</span><br><span class="line">						<span class="keyword">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class="line">							<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">									<span class="string">"Circular depends-on relationship between '"</span> + beanName + <span class="string">"' and '"</span> + dep + <span class="string">"'"</span>);</span><br><span class="line">						&#125;</span><br><span class="line">						registerDependentBean(dep, beanName);</span><br><span class="line">						<span class="keyword">try</span> &#123;</span><br><span class="line">							getBean(dep);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">							<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line">									<span class="string">"'"</span> + beanName + <span class="string">"' depends on missing bean '"</span> + dep + <span class="string">"'"</span>, ex);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 创建单例 bean</span></span><br><span class="line">				<span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">					sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class="line">						<span class="keyword">try</span> &#123;</span><br><span class="line">							<span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">							destroySingleton(beanName);</span><br><span class="line">							<span class="keyword">throw</span> ex;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;);</span><br><span class="line">					bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;</span><br><span class="line">					<span class="built_in">Object</span> prototypeInstance = <span class="literal">null</span>;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						beforePrototypeCreation(beanName);</span><br><span class="line">						prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">finally</span> &#123;</span><br><span class="line">						afterPrototypeCreation(beanName);</span><br><span class="line">					&#125;</span><br><span class="line">					bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="built_in">String</span> scopeName = mbd.getScope();</span><br><span class="line">					final Scope scope = <span class="keyword">this</span>.scopes.get(scopeName);</span><br><span class="line">					<span class="keyword">if</span> (scope == <span class="literal">null</span>) &#123;</span><br><span class="line">						<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No Scope registered for scope name '"</span> + scopeName + <span class="string">"'"</span>);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						<span class="built_in">Object</span> scopedInstance = scope.get(beanName, () -&gt; &#123;</span><br><span class="line">							beforePrototypeCreation(beanName);</span><br><span class="line">							<span class="keyword">try</span> &#123;</span><br><span class="line">								<span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">							&#125;</span><br><span class="line">							<span class="keyword">finally</span> &#123;</span><br><span class="line">								afterPrototypeCreation(beanName);</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;);</span><br><span class="line">						bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">						<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName,</span><br><span class="line">								<span class="string">"Scope '"</span> + scopeName + <span class="string">"' is not active for the current thread; consider "</span> +</span><br><span class="line">								<span class="string">"defining a scoped proxy for this bean if you intend to refer to it from a singleton"</span>,</span><br><span class="line">								ex);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">				cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">				<span class="keyword">throw</span> ex;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 类型转换</span></span><br><span class="line">		<span class="keyword">if</span> (requiredType != <span class="literal">null</span> &amp;&amp; !requiredType.isInstance(bean)) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				T convertedBean = getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class="line">				<span class="keyword">if</span> (convertedBean == <span class="literal">null</span>) &#123;</span><br><span class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> convertedBean;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (TypeMismatchException ex) &#123;</span><br><span class="line">				<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">					logger.trace(<span class="string">"Failed to convert bean '"</span> + name + <span class="string">"' to required type '"</span> +</span><br><span class="line">							ClassUtils.getQualifiedName(requiredType) + <span class="string">"'"</span>, ex);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> (T) bean;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.codercto.com/a/3624.html" target="_blank" rel="noopener">Spring 源码解析：高级容器的扩展内幕</a><br><a href="https://www.cnblogs.com/yoci/p/10642553.html" target="_blank" rel="noopener">SpringBean 工作原理详解</a><br><a href="https://www.cnblogs.com/Jolivan/p/9168108.html" target="_blank" rel="noopener">Spring-BeanFactory基本工作流程</a><br><a href="https://www.cnblogs.com/Jolivan/p/9226289.html" target="_blank" rel="noopener">Spring 创建 bean 机制</a><br><a href="https://www.jianshu.com/p/39edfa250e4e" target="_blank" rel="noopener">spring容器之创建bean实例</a><br><a href="https://blog.csdn.net/zwjyyy1203/article/details/89576084" target="_blank" rel="noopener">使用 BeanPostProcessor 制作 ab 脚本的 bean</a><br><a href="https://www.jianshu.com/p/3d099ea43b0e" target="_blank" rel="noopener">使用BeanFactoryPostProcessor——这种姿势不要用</a><br><a href="https://blog.csdn.net/cgj296645438/article/details/80119319" target="_blank" rel="noopener">postProcessBeanFactory方法分析</a><br><a href="https://blog.csdn.net/sid1109217623/article/details/84065725" target="_blank" rel="noopener">Spring源码分析-MessageSource</a><br><a href="https://www.cnblogs.com/jyyzzjl/p/5476546.html" target="_blank" rel="noopener">ApplicationEventMulticaster 事件广播</a><br><a href="https://www.jianshu.com/p/151e0b67c5b6" target="_blank" rel="noopener">Spring 事件机制初始化流程</a><br><a href="https://www.jianshu.com/p/9d8e4fb5b162" target="_blank" rel="noopener">Spring源码finishBeanFactoryInitialization和getBean</a><br><a href="https://www.cnblogs.com/arax/p/8551720.html" target="_blank" rel="noopener">Spring数据转换–ConversionService</a><br><a href="https://www.cnblogs.com/wade-luffy/p/6078446.html" target="_blank" rel="noopener">AOP静态代理-代码织入</a><br><a href="https://www.jianshu.com/p/7e845db823cf" target="_blank" rel="noopener">DetaultListableBeanFactory分层关系解析一</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>spring</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>我看 spring mvc</title>
    <url>/2020/01/04/backend/spring/%E6%88%91%E7%9C%8B%20spring%20mvc/</url>
    <content><![CDATA[<p>spring mvc 基于 <a href="https://www.jianshu.com/p/11cbdc87900c" target="_blank" rel="noopener">前端控制器模式</a> 设计，通过 DispatcherServlet 这个前端控制器将请求交给可配置的委托组件处理，这就能支持请求处理的灵活性。DispatcherServlet 中请求映射、视图解析、异常处理等功能所使用的组件都通过 spring 机制发现。</p>
<h2 id="DispatcherServlet-初始化"><a href="#DispatcherServlet-初始化" class="headerlink" title="DispatcherServlet 初始化"></a>DispatcherServlet 初始化</h2><p>Servlet3 会主动查询 WebApplicationInitializer 接口的实现类，同时会执行 WebApplicationInitializer 实现类的 onStartup 方法。通过该方法，它会创建 spring 应用上下文并加载 bean（两个应用上下文：一个为 DispatcherServlet 加载控制器、视图解析器等 web 组件；一个加载中间层和数据层等非 web 组件），它同时会创建 DispatcherServlet 实例，且将 DispatcherServlet 实例和 web 过滤器挂载到 ServletContext 上。</p>
<img src="/2020/01/04/backend/spring/我看%20spring%20mvc/dispatchservlet2.png">
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>以下示例单纯使用 spring + spring webmvc 的场景，没有使用 spring boot。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebAppInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 为其中一个 spring 应用上下文（加载数据层组件）指定 RootConfig 配置类或组件</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 为其中一个 spring 应用上下文（加载控制器）指定 WebConfig 配置类或组件</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Class&lt;?&gt;[] &#123; MyWebConfig.class &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指定 DispatcherServlet 处理的路由</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String[] &#123; <span class="string">"/"</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指定过滤器</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Filter[] &#123; <span class="keyword">new</span> HiddenHttpMethodFilter() &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="EnableWebMvc"><a href="#EnableWebMvc" class="headerlink" title="@EnableWebMvc"></a>@EnableWebMvc</h2><p>@EnableWebMvc 注解会通过 @Import 加载配置类，配置类又会主动查找 Controller 等 bean，并注册到 HandlerMapping 中，以便在请求触达时使用。</p>
<img src="/2020/01/04/backend/spring/我看%20spring%20mvc/enablewebmvc.png">
<h3 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h3><p>配置类可以继承 WebMvcConfigurer，以便配置转换器、拦截器、 cors 映射规则等。以下示例仅展示 cors 规则的配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"demo.web"</span>)<span class="comment">// 通过组件扫描加载 Controller 等 web 组件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addMapping(<span class="string">"/api/**"</span>)</span><br><span class="line">      .allowedOrigins(<span class="string">"https://domain2.com"</span>)</span><br><span class="line">      .allowedMethods(<span class="string">"PUT"</span>, <span class="string">"DELETE"</span>)</span><br><span class="line">      .allowedHeaders(<span class="string">"header1"</span>, <span class="string">"header2"</span>, <span class="string">"header3"</span>)</span><br><span class="line">      .exposedHeaders(<span class="string">"header1"</span>, <span class="string">"header2"</span>)</span><br><span class="line">      .allowCredentials(<span class="keyword">true</span>).maxAge(<span class="number">3600</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 附注 RootConfig 配置类</span></span><br><span class="line"><span class="comment">// @Configuration</span></span><br><span class="line"><span class="comment">// @ComponentScan(basePackages=&#123;"demo.web"&#125;,// 通过组件扫描加载中间层、数据层等非 web 组件</span></span><br><span class="line"><span class="comment">//   excludeFilters=&#123;</span></span><br><span class="line"><span class="comment">//     @Filter(type=FilterType.ANNOTATION, value=EnableWebMvc.class)</span></span><br><span class="line"><span class="comment">//   &#125;)</span></span><br><span class="line"><span class="comment">// public class RootConfig &#123;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="DispatcherServlet-处理请求"><a href="#DispatcherServlet-处理请求" class="headerlink" title="DispatcherServlet 处理请求"></a>DispatcherServlet 处理请求</h2><p>DispatcherServlet 作为处理请求的中央调度器。它会使用 HandlerMapping 将请求路由到指定的处理器 handler，HandlerMapping 的默认实现类为 BeanNameUrlHandlerMapping 以及 RequestMappingHandlerMapping。它会使用 HandlerAdapter 在 handlerMethod 之前或之后处理请求或响应，默认实现类 RequestMappingHandlerAdapter 能够解析 Controller 上的注解。ViewResolver 可用于指定视图解析策略；在没有指定视图名的情况下，RequestToViewNameTranslator 用于通过请求获取视图名。MultipartResolver 用于解析文件；LocaleResolver 用于实现国际化。错误处理由 HandlerExceptionResolver 完成，它会将错误转交给 handler 或 view。上述 bean（如添加了 @Controller、@RequestMapping 注解的控制器），DispatcherServlet 均通过 applicationContext#refresh 阶段从已加载的 bean 中获取。</p>
<ol>
<li>请求触达，DispatcherServlet#doGet 等方法接受到请求。</li>
<li>DispatcherServlet#doDispatch 阶段，路由到 Handler（即添加了 @RequestMapping 注解的 Controller）。</li>
<li>DispatcherServlet#doDispatch 阶段，通过 HandlerAdapter 处理请求、执行 handler、转化响应。</li>
<li>DispatcherServlet#doDispatch 阶段，渲染视图（包含 html、xml、pdf、json 等）或错误。</li>
</ol>
<img src="/2020/01/04/backend/spring/我看%20spring%20mvc/dispatchservlet.png">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DispatcherServlet 间接实现了 ApplicationContextAware，可以获得 applicationContext</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title">FrameworkServlet</span> </span>&#123;</span><br><span class="line">  <span class="comment">// applicationContext#refresh 阶段从 bean 中获取 HandlerMapping 等 bean</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">		initStrategies(context);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 其他 doPost、doPut、doDelete 等方法最终都会调用 doDispatch</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		HttpServletRequest processedRequest = request;</span><br><span class="line">		HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">			Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="comment">// 从 HandlerMapping 中获取 handler</span></span><br><span class="line">				mappedHandler = getHandler(processedRequest);</span><br><span class="line">				<span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">					noHandlerFound(processedRequest, response);</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用拦截器 interceptor.preHandle 方法进行处理</span></span><br><span class="line">				<span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 通过 HandlerAdapter 处理请求、执行 handler、转化响应</span></span><br><span class="line">				mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				applyDefaultViewName(processedRequest, mv);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用拦截器 interceptor.postHandle 方法进行处理</span></span><br><span class="line">				mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">				dispatchException = ex;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">				<span class="comment">// As of 4.3, we're processing Errors thrown from handler methods as well,</span></span><br><span class="line">				<span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">				dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">"Handler dispatch failed"</span>, err);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 渲染视图或错误</span></span><br><span class="line">			processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><p>RequestMappingHandlerAdapter 实现了 BeanFactoryAware, InitializingBean 接口。依循 spring bean 的生命周期，RequestMappingHandlerAdapter 首先会找到添加了 @ControllerAdvice 注解的类，并将该类中添加了 @RequestMapping、@ModelAttribute、@InitBinder 等注解的方法存入指定的 cache 中；加载参数解析器、绑定数据解析器、返回值处理器。等到请求触达时，它会按照参数解析器、handlerMethod、返回值处理器的方式处理请求和响应，最终响应以 ModelAndView 实例的形式对外输出。</p>
<img src="/2020/01/04/backend/spring/我看%20spring%20mvc/requestmapping.png">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractHandlerMethodAdapter</span></span></span><br><span class="line"><span class="class">		<span class="keyword">implements</span> <span class="title">BeanFactoryAware</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">			HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">		ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 从 cache 中获取 @InitBinder 注解的方法以及数据绑定解析器，构建 WebDataBinderFactory 实例</span></span><br><span class="line">      <span class="comment">// binderFactory 既在 InvocableHandlerMethod#getMethodArgumentValues 阶段处理参数</span></span><br><span class="line">      <span class="comment">// 又在 ModelFactory#updateModel 阶段处理响应</span></span><br><span class="line">			WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 从 cache 中获取 @RequestMapping、@ModelAttribute 注解的方法，构建 ModelFactory 实例</span></span><br><span class="line">      <span class="comment">// binderFactory 既在 InvocableHandlerMethod#getMethodArgumentValues 阶段处理参数</span></span><br><span class="line">			ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</span><br><span class="line"></span><br><span class="line">			ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</span><br><span class="line">      <span class="comment">// 添加参数解析器</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers != <span class="keyword">null</span>) &#123;</span><br><span class="line">				invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</span><br><span class="line">			&#125;</span><br><span class="line">      <span class="comment">// 添加返回值处理器</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.returnValueHandlers != <span class="keyword">null</span>) &#123;</span><br><span class="line">				invocableMethod.setHandlerMethodReturnValueHandlers(<span class="keyword">this</span>.returnValueHandlers);</span><br><span class="line">			&#125;</span><br><span class="line">      <span class="comment">// 添加数据绑定工厂类</span></span><br><span class="line">			invocableMethod.setDataBinderFactory(binderFactory);</span><br><span class="line">      <span class="comment">// 添加参数名辨识器，用于判断参数是否需要经由 binderFactory 处理等</span></span><br><span class="line">			invocableMethod.setParameterNameDiscoverer(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 管理请求处理过程中所使用到的数据</span></span><br><span class="line">			ModelAndViewContainer mavContainer = <span class="keyword">new</span> ModelAndViewContainer();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在重定向之前从请求返回只读“输入”闪存属性</span></span><br><span class="line">			mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</span><br><span class="line">      <span class="comment">// 按照以下的顺序填充 mavContainer#defaultModel（ModelMap实例）中</span></span><br><span class="line">      <span class="comment">// a. 填充 @SessionAttributes 注解的可使用的会话属性</span></span><br><span class="line">      <span class="comment">// b. 通过执行 @ModelAttribute 注解的方法填充数据</span></span><br><span class="line">      <span class="comment">// c. 从 @ModelAttribute 注解的参数上找到 @SessionAttributes 指定属性并填充</span></span><br><span class="line">			modelFactory.initModel(webRequest, mavContainer, invocableMethod);</span><br><span class="line">      <span class="comment">// 是否在重定向时忽略默认，默认 false</span></span><br><span class="line">			mavContainer.setIgnoreDefaultModelOnRedirect(<span class="keyword">this</span>.ignoreDefaultModelOnRedirect);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 处理异步请求</span></span><br><span class="line">			AsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);</span><br><span class="line">			asyncWebRequest.setTimeout(<span class="keyword">this</span>.asyncRequestTimeout);</span><br><span class="line"></span><br><span class="line">			WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">			asyncManager.setTaskExecutor(<span class="keyword">this</span>.taskExecutor);</span><br><span class="line">			asyncManager.setAsyncWebRequest(asyncWebRequest);</span><br><span class="line">			asyncManager.registerCallableInterceptors(<span class="keyword">this</span>.callableInterceptors);</span><br><span class="line">			asyncManager.registerDeferredResultInterceptors(<span class="keyword">this</span>.deferredResultInterceptors);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果有并发结果</span></span><br><span class="line">			<span class="keyword">if</span> (asyncManager.hasConcurrentResult()) &#123;</span><br><span class="line">				Object result = asyncManager.getConcurrentResult();</span><br><span class="line">				mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[<span class="number">0</span>];</span><br><span class="line">				asyncManager.clearConcurrentResult();</span><br><span class="line">				LogFormatUtils.traceDebug(logger, traceOn -&gt; &#123;</span><br><span class="line">					String formatted = LogFormatUtils.formatValue(result, !traceOn);</span><br><span class="line">					<span class="keyword">return</span> <span class="string">"Resume with async result ["</span> + formatted + <span class="string">"]"</span>;</span><br><span class="line">				&#125;);</span><br><span class="line">				invocableMethod = invocableMethod.wrapConcurrentResult(result);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 依次调用参数解析器、handlerMethod、返回值处理</span></span><br><span class="line">			invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 使用数据绑定解析器处理响应，响应内容有二：视图 view；视图中使用的模型 model（即 mavContainer#defaultModel）</span></span><br><span class="line">			<span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			webRequest.requestCompleted();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参数解析器"><a href="#参数解析器" class="headerlink" title="参数解析器"></a>参数解析器</h3><p>参数解析器均需实现 HandlerMethodArgumentResolver 接口，该接口约定了两个方法：supportsParameter 是否解析器可处理的参数；resolveArgument 解析参数。AbstractNamedValueMethodArgumentResolver 是其抽象实现类。@PathVariable、@MatrixVariable、@RequestParam、@RequestHeader、@CookieValue、@RequestBody、@RequestPart、@ModelAttribute、@SessionAttribute、@SessionAttributes、@RequestAttribute 等注解均基于这个抽象类上解析实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractNamedValueMethodArgumentResolver</span> <span class="keyword">implements</span> <span class="title">HandlerMethodArgumentResolver</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">			NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// RequestParam(name = "a", required = true, defaultValue = "3") =&gt; NamedValueInfo&#123;name="a",required=true,defaultValue="3"&#125;</span></span><br><span class="line">		NamedValueInfo namedValueInfo = getNamedValueInfo(parameter);</span><br><span class="line">		MethodParameter nestedParameter = parameter.nestedIfOptional();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 name，因为它可能是表达式或占位符</span></span><br><span class="line">		Object resolvedName = resolveStringValue(namedValueInfo.name);</span><br><span class="line">		<span class="keyword">if</span> (resolvedName == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">					<span class="string">"Specified name must not resolve to null: ["</span> + namedValueInfo.name + <span class="string">"]"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 webRequest 装填实际的参数值，由子类实现</span></span><br><span class="line">		Object arg = resolveName(resolvedName.toString(), nestedParameter, webRequest);</span><br><span class="line">		<span class="keyword">if</span> (arg == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (namedValueInfo.defaultValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">				arg = resolveStringValue(namedValueInfo.defaultValue);</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (namedValueInfo.required &amp;&amp; !nestedParameter.isOptional()) &#123;</span><br><span class="line">				handleMissingValue(namedValueInfo.name, nestedParameter, webRequest);</span><br><span class="line">			&#125;</span><br><span class="line">			arg = handleNullValue(namedValueInfo.name, arg, nestedParameter.getNestedParameterType());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">""</span>.equals(arg) &amp;&amp; namedValueInfo.defaultValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">			arg = resolveStringValue(namedValueInfo.defaultValue);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过数据绑定器转换值</span></span><br><span class="line">		<span class="keyword">if</span> (binderFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">			WebDataBinder binder = binderFactory.createBinder(webRequest, <span class="keyword">null</span>, namedValueInfo.name);</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				arg = binder.convertIfNecessary(arg, parameter.getParameterType(), parameter);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (ConversionNotSupportedException ex) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> MethodArgumentConversionNotSupportedException(arg, ex.getRequiredType(),</span><br><span class="line">						namedValueInfo.name, parameter, ex.getCause());</span><br><span class="line">			&#125; <span class="keyword">catch</span> (TypeMismatchException ex) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> MethodArgumentTypeMismatchException(arg, ex.getRequiredType(),</span><br><span class="line">						namedValueInfo.name, parameter, ex.getCause());</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用子类钩子</span></span><br><span class="line">		handleResolvedValue(arg, namedValueInfo.name, parameter, mavContainer, webRequest);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> arg;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="应用-2"><a href="#应用-2" class="headerlink" title="应用"></a>应用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/spittles"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpittleController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Resource</span></span><br><span class="line">  SpittleRepository spittleRepository;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;spittleId&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">spittles</span><span class="params">(@PathVariable <span class="keyword">long</span> spittleId, Model model)</span></span>&#123;</span><br><span class="line">    Spittle spittle = spittleRepository.findOne(spittleId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (spittle == <span class="keyword">null</span>)&#123;<span class="comment">// 由 spring mvc 为 404 异常添加 http 状态码</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> SpittleNotFoundException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为 spittle 视图传入模型数据</span></span><br><span class="line">    model.addAttributes(spittle);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"spittle"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseStatus</span>(value=HttpStatus.NOT_FOUND, reason=<span class="string">"Spittle Not Found"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpittleNotFoundException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldShowSpittle</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  SpittleController controller = <span class="keyword">new</span> SpittleController();</span><br><span class="line">  MockMvc mockMvc = standaloneSetup(controller).build();</span><br><span class="line"></span><br><span class="line">  mockMvc.perform(get(<span class="string">"/spittles/10086"</span>))</span><br><span class="line">    .addExcept(view().name(<span class="string">"spittle"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">spring 官方文档</a><br><a href="https://www.jianshu.com/p/6433a07f909c" target="_blank" rel="noopener">理解SpringMvc架构以及流程</a><br><a href="https://blog.csdn.net/u010013573/article/details/86550326" target="_blank" rel="noopener">Spring MVC源码分析（四）：SpringMVC的HandlerMapping和HandlerAdapter的体系结构设计与实现</a><br><a href="https://blog.csdn.net/qq_32328959/article/details/90247411" target="_blank" rel="noopener">Spring Web MVC（一）|前端控制器-DispatcherServlet</a><br><a href="https://blog.csdn.net/zknxx/article/details/78336199" target="_blank" rel="noopener">SpringMVC之分析RequestMappingHandlerAdapter（一）</a><br><a href="https://blog.csdn.net/u013076044/article/details/88086156" target="_blank" rel="noopener">流程图解Spring Framework（十三）Spring MVC RequestMappingHandlerAdapter 是如何处理@RequestMapping的？</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>spring</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>TDDL &amp; DRDS</title>
    <url>/2019/12/30/backend/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF/TDDL%20&amp;%20DRDS/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有三种技术可以应对不断增大的数据量：</p>
<ol>
<li>读写分离：将数据库设置成读写分离状态，一个 Master 节点对应多个 Salve 节点，Master 节点数据会离线同步到 Salve 节点。</li>
<li>垂直分区：将不同的业务表拆散，分别存储到不同的数据库中，仍保持 Master/Salve 模式。</li>
<li>水平分区（分库 or 分表，sharding）：将同一个业务表（或库）中的数据按 hash 取模等方式拆解成多个子表（或库），比如 db0、db1。</li>
</ol>
<p><a href="https://www.cnblogs.com/jpfss/p/11577780.html" target="_blank" rel="noopener">数据库中间件详解</a> 这篇文章不只介绍了上述三种技术，还道明了数据库中间件设计的两种方案：基于代理服务器的 proxy 模式（需要对接不同数据源、不同应用技术栈的通信协议，必须保持高可用，隔离租户）；基于封装 连接池或者 driver 为 sdk 的 smart-client 模式（需要对接不同数据源的通信协议，不需要对接不同应用技术栈的通信协议，天然去中心化）。TDDL 基于 smart-client 模式。DRDS 基于 proxy 模式。</p>
<h2 id="TDDL"><a href="#TDDL" class="headerlink" title="TDDL"></a>TDDL</h2><img src="/2019/12/30/backend/数据库技术/TDDL%20&%20DRDS/tddl.png">
<p>淘宝分布式数据层 Taobao Distributed Data Layer 位于持久层和数据库之间（持久层只关心对数据源的 CRUD 操作，而多数据源的访问并不应该由它来关心），它直接与数据库进行通信。它属于数据访问层（DAL 层），同类产品有 Hibernate Shards、Ibatis-Sharding 等。它基于集中式配置的 JDBC DataSource 实现，对持久层提交的 sql 只拼装不解析。TDDL 主要解决了以下问题：</p>
<ol>
<li>数据访问路由，将数据的读写请求发送到对应的数据库。</li>
<li>集中式数据源信息管理和动态变更，支持数据存储的自由扩展。</li>
<li>遵守 JDBC 规范，支持 mysql 和 oracle 等多数据源。</li>
<li>带权重的读写分离，支持分库分表（TDDL 会创建中间状态的逻辑表来整合统一分库分表的访问）。</li>
</ol>
<img src="/2019/12/30/backend/数据库技术/TDDL%20&%20DRDS/tddl2.png">
<p>TDDL 是一个客户端 jar，它的结构主要分为三层：</p>
<ol>
<li>Matrix 层：核心是规则引擎，实现了分库分表逻辑，持有多个 Group 实例。主要功能逻辑为：sql 解析 =&gt; 规则引擎计算（路由） =&gt; 执行 =&gt; 合并结果集。</li>
<li>Group 层：实现了数据库的主备分离逻辑，持有多个 Atom 实例。Group 层和 Atom 层共同组成了动态数据源。主要功能逻辑为：读写分离 =&gt; 权重计算 =&gt; 写 HA 切换（预防节点宕机，需要配置中心配合） =&gt; 读 HA 切换 =&gt; 动态新增 slave 节点（根据访问压力？）。</li>
<li>Atom（TAtomDataSource）层：可以理解为一个数据库。主要功能逻辑为：ip, port, password, connectionProperties 等信息动态修改，动态化 jboss 数据源 =&gt; try catch 模式对线程计数，保护业务处理线程 =&gt; 动态阻止某些 sql 的执行 =&gt; 执行次数的统计和限制。</li>
</ol>
<img src="/2019/12/30/backend/数据库技术/TDDL%20&%20DRDS/tddl3.png">
<p>其他结构包含：</p>
<ul>
<li>tddl-client：应用启动时初始化配置信息（规则信息，各层数据源拓扑结构）</li>
<li>tddl-rule：分库分表规则解析</li>
<li>tddl-sequence：统一管理和分配全局唯一 sequence（序列号）</li>
<li>tddl-druid-datasource：数据库连接池（高效，可扩展性好），类 dbcp、c3p0</li>
</ul>
<p><a href="https://www.cnblogs.com/kaleidoscope/p/9756845.html" target="_blank" rel="noopener">TDDL剖析</a> 这篇文章介绍了基于 TDDL 已开源的模块以及 diamond 实现主备分离、分库分表逻辑的方法。</p>
<h2 id="DRDS"><a href="#DRDS" class="headerlink" title="DRDS"></a>DRDS</h2><p>分布式关系型数据库服务 Distributed Relational Database Service 的前身是 TDDL。它支持垂直拆分和水平拆分，因此有良好的扩展性；它通过两阶段提交支持分布式事务（此时 DRDS 服务器作为事务管理器，首先等待所有 MySQL 服务器 PREPARE 成功，然后再向各个 MySQL 服务器发送 COMMIT 请求。如果事务中的 SQL 仅涉及单个分片，DRDS 会将其作为单机事务直接下发给 MySQL；反之才会升级为分布式事务）；它允许增加 RDS 实例的数量，以达到平滑扩容的效果；它支持读写分离，强读（显式事务中的读请求和写入操作将在主实例中执行，弱读在只读实例中执行；它支持通过全局二级索引能力创建二级索引表，以应对业务上的快速索引查询需求。计算能力上，DRDS 额外扩展了单机并行处理器（SMP，Symmetric Multi-Processing）和多机并行处理器（DAG），前者完全集成在 DRDS 内核中，后者，DRDS 构建了一个计算集群，运行时动态获取执行计划进行分布式计算，通过增加节点提升计算能力。</p>
<img src="/2019/12/30/backend/数据库技术/TDDL%20&%20DRDS/drds.png">
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/jpfss/p/11577780.html" target="_blank" rel="noopener">数据库中间件详解</a><br><a href="https://www.cnblogs.com/kaleidoscope/p/9757043.html" target="_blank" rel="noopener">TDDL调研笔记</a><br><a href="https://www.cnblogs.com/kaleidoscope/p/9756845.html" target="_blank" rel="noopener">TDDL剖析</a><br><a href="https://www.jianshu.com/p/ed54162d720c" target="_blank" rel="noopener">分布式数据库中间件TDDL、Amoeba、Cobar、MyCAT架构比较</a><br><a href="https://gitee.com/justwe9891/TDDL" target="_blank" rel="noopener">TDDL</a><br><a href="https://help.aliyun.com/product/29657.html" target="_blank" rel="noopener">分布式关系型数据库 DRDS</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>数据库技术</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>我看 spring 事务机制</title>
    <url>/2019/12/29/backend/spring/%E6%88%91%E7%9C%8B%20spring%20%E4%BA%8B%E5%8A%A1%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="what"><a href="#what" class="headerlink" title="what"></a>what</h2><p>spring 事务机制提供了统一的编程模型来处理不同数据访问操作（local transactions by using JDBC, JPA, or Hibernate），同时支持分布式事务（JTA transactions）；支持声明式事务编程和编程式事务编程，声明式事务编程对代码无侵入性，只需要改变配置类即可应对不同的数据访问技术；与 spring 数据访问抽象完美集成。对于 spring boot 项目，只要显式地对启动类添加 @EnableTransactionManagement 注解，即能为应用注入 PlatformTransactionManager 实例；然后在需要事务支持的方法或类上添加 @Transactional 注解（该注解推荐使用在类和类的公共方法上。如果在保护方法和私有方法上使用，需要配合 AspectJ），spring 就能基于 AOP 机制开启一个事务，当调用无异常时，事务就会被提交了。</p>
<h2 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h2><h3 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h3><p>样例来自 <a href="https://spring.io/guides/gs/managing-transactions/" target="_blank" rel="noopener">Managing Transactions</a>，基于 spring boot 作了改造：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">// 启注解事务管理</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProfiledemoApplication</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">testBean</span><span class="params">(PlatformTransactionManager platformTransactionManager)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span> + platformTransactionManager.getClass().getName());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Object();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(ProfiledemoApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookingService</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(BookingService.class);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BookingService</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Transactional</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">book</span><span class="params">(String... persons)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (String person : persons) &#123;</span><br><span class="line">      logger.info(<span class="string">"Booking "</span> + person + <span class="string">" in a seat..."</span>);</span><br><span class="line">      jdbcTemplate.update(<span class="string">"insert into BOOKINGS(FIRST_NAME) values (?)"</span>, person);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">findAllBookings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> jdbcTemplate.query(<span class="string">"select FIRST_NAME from BOOKINGS"</span>,</span><br><span class="line">        (rs, rowNum) -&gt; rs.getString(<span class="string">"FIRST_NAME"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="multiple-management"><a href="#multiple-management" class="headerlink" title="multiple management"></a>multiple management</h3><p>当应用中有多种数据库连接方式时，<a href="https://blog.csdn.net/u010963948/article/details/79208328" target="_blank" rel="noopener">Spring Boot的事务管理注解@EnableTransactionManagement的使用</a> 这篇文章指明了该如何使用声明式事务：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProfiledemoApplication</span> <span class="keyword">implements</span> <span class="title">TransactionManagementConfigurer</span> </span>&#123;<span class="comment">// 实现 TransactionManagementConfigurer，指定事务管理器</span></span><br><span class="line">  <span class="meta">@Resource</span>(name=<span class="string">"txManager2"</span>)</span><br><span class="line">  <span class="keyword">private</span> PlatformTransactionManager txManager2;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建事务管理器1，以数据源 DataSource 为参数</span></span><br><span class="line">  <span class="meta">@Bean</span>(name = <span class="string">"txManager1"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">txManager</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 创建事务管理器2，不需要指定数据库，需要指定 EntityManagerFactory</span></span><br><span class="line">  <span class="meta">@Bean</span>(name = <span class="string">"txManager2"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">txManager2</span><span class="params">(EntityManagerFactory factory)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> JpaTransactionManager(factory);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现接口 TransactionManagementConfigurer 方法，设置默认的事务管理器</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">annotationDrivenTransactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> txManager2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(ProfiledemoApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevSendMessage</span> <span class="keyword">implements</span> <span class="title">SendMessage</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 使用 value 指定事务管理器</span></span><br><span class="line">  <span class="meta">@Transactional</span>(value=<span class="string">"txManager1"</span>)</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用默认的事务管理器；如果没有默认的事务管理器，就必须制定 value，否则会抛出异常</span></span><br><span class="line">  <span class="meta">@Transactional</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式，使用 @TxManager1 注解</span></span><br><span class="line"><span class="comment">// @Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="comment">// @Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="comment">// @Transactional("txManager1")</span></span><br><span class="line"><span class="comment">// public @interface TxManager1 &#123;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="how"><a href="#how" class="headerlink" title="how"></a>how</h2><p>spring 事务通过 AOP 面向切面编程机制实现，首先从 @Transactional 注解中获取必要的元数据信息，然后构建一个 AOP 代理（spring 事务也支持基于 AspectJ 切面），它使用 TransactionInterceptor 事务拦截器和 PlatformTransactionManager 接口实现类（对接不同数据访问技术的事务操作）来驱动事务。</p>
<h3 id="EnableTransactionManagement"><a href="#EnableTransactionManagement" class="headerlink" title="EnableTransactionManagement"></a>EnableTransactionManagement</h3><p>@EnableTransactionManagement 注解既会注入默认的 PlatformTransactionManager 实例，又会通过 Spring 的自动机制添加切面（装配 TransactionInterceptor 事务拦截器），自动查询应用上下文中的 @Transactional 注解，并构建 AOP 代理执行事务流程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(TransactionManagementConfigurationSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableTransactionManagement &#123;</span><br><span class="line">  <span class="comment">// 代理模式，基于子类或基于 java 接口</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">proxyTargetClass</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 切面模式，默认基于代理，可以切换成基于 AspectJ</span></span><br><span class="line">	<span class="function">AdviceMode <span class="title">mode</span><span class="params">()</span> <span class="keyword">default</span> AdviceMode.PROXY</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拦截器顺序</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">order</span><span class="params">()</span> <span class="keyword">default</span> Ordered.LOWEST_PRECEDENCE</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManagementConfigurationSelector</span> <span class="keyword">extends</span> <span class="title">AdviceModeImportSelector</span>&lt;<span class="title">EnableTransactionManagement</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 通过 AnnotationMetadata 接口获取注解的元数据</span></span><br><span class="line">  <span class="comment">// 由元数据 mode 获取 ProxyTransactionManagementConfiguration 类名等，使用 spring 机制自动装配</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> String[] selectImports(AdviceMode adviceMode) &#123;</span><br><span class="line">		<span class="keyword">switch</span> (adviceMode) &#123;</span><br><span class="line">			<span class="keyword">case</span> PROXY:</span><br><span class="line">        <span class="comment">// AutoProxyRegistrar 实现 ImportBeanDefinitionRegistrar 接口，会在注册 bean 的时候设置 AOP 代理的方式，基于子类或基于接口</span></span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">new</span> String[] &#123;AutoProxyRegistrar.class.getName(),</span><br><span class="line">        <span class="comment">// ProxyTransactionManagementConfiguration 间接实现 ImportAware 接口，可以通过 setImportMetadata 方法获取注解元数据</span></span><br><span class="line">        <span class="comment">// ProxyTransactionManagementConfiguration 属性中包含默认的 PlatformTransactionManager 实例</span></span><br><span class="line">        <span class="comment">// 通过 ProxyTransactionManagementConfiguration 自动加载 TransactionInterceptor 拦截器</span></span><br><span class="line">						ProxyTransactionManagementConfiguration.class.getName()&#125;;</span><br><span class="line">			<span class="keyword">case</span> ASPECTJ:</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">new</span> String[] &#123;determineTransactionAspectClass()&#125;;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 ProxyTransactionManagementConfiguration 自动加载 TransactionInterceptor 拦截器</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTransactionManagementConfiguration</span> <span class="keyword">extends</span> <span class="title">AbstractTransactionManagementConfiguration</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 设置切点、建言等</span></span><br><span class="line">	<span class="meta">@Bean</span>(name = TransactionManagementConfigUtils.TRANSACTION_ADVISOR_BEAN_NAME)</span><br><span class="line">	<span class="meta">@Role</span>(BeanDefinition.ROLE_INFRASTRUCTURE)<span class="comment">// 声明 Bean 的分类</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> BeanFactoryTransactionAttributeSourceAdvisor <span class="title">transactionAdvisor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		BeanFactoryTransactionAttributeSourceAdvisor advisor = <span class="keyword">new</span> BeanFactoryTransactionAttributeSourceAdvisor();</span><br><span class="line">		advisor.setTransactionAttributeSource(transactionAttributeSource());</span><br><span class="line">		advisor.setAdvice(transactionInterceptor());</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.enableTx != <span class="keyword">null</span>) &#123;</span><br><span class="line">			advisor.setOrder(<span class="keyword">this</span>.enableTx.&lt;Integer&gt;getNumber(<span class="string">"order"</span>));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> advisor;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解析 @Transactional 注解</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@Role</span>(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> TransactionAttributeSource <span class="title">transactionAttributeSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> AnnotationTransactionAttributeSource();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 事务拦截器</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@Role</span>(BeanDefinition.ROLE_INFRASTRUCTURE)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> TransactionInterceptor <span class="title">transactionInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		TransactionInterceptor interceptor = <span class="keyword">new</span> TransactionInterceptor();</span><br><span class="line">		interceptor.setTransactionAttributeSource(transactionAttributeSource());</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.txManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">			interceptor.setTransactionManager(<span class="keyword">this</span>.txManager);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> interceptor;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="TransactionInterceptor"><a href="#TransactionInterceptor" class="headerlink" title="TransactionInterceptor"></a>TransactionInterceptor</h3><p>TransactionInterceptor 事务拦截器的简要实现原理如下：</p>
<img src="/2019/12/29/backend/spring/我看%20spring%20事务机制/transcational.png">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionInterceptor</span> <span class="keyword">extends</span> <span class="title">TransactionAspectSupport</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		Class&lt;?&gt; targetClass = (invocation.getThis() != <span class="keyword">null</span> ? AopUtils.getTargetClass(invocation.getThis()) : <span class="keyword">null</span>);</span><br><span class="line">		<span class="keyword">return</span> invokeWithinTransaction(invocation.getMethod(), targetClass, invocation::proceed);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionAspectSupport</span> <span class="keyword">implements</span> <span class="title">BeanFactoryAware</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> Object <span class="title">invokeWithinTransaction</span><span class="params">(Method method, @Nullable Class&lt;?&gt; targetClass,</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="keyword">final</span> InvocationCallback invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 获取 @transactional 注解属性</span></span><br><span class="line">    <span class="comment">// txAttr 与 TranscationStatus 挂钩，作为 PlatformTransactionManager#getTranscation 的参数，返回 TranscationStatus</span></span><br><span class="line">		TransactionAttributeSource tas = getTransactionAttributeSource();</span><br><span class="line">		<span class="keyword">final</span> TransactionAttribute txAttr = (tas != <span class="keyword">null</span> ? tas.getTransactionAttribute(method, targetClass) : <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 通过 beanFactory 以及 @transactional 注解上的 value 元数据获取 PlatformTransactionManager 实例</span></span><br><span class="line">		<span class="keyword">final</span> PlatformTransactionManager tm = determineTransactionManager(txAttr);</span><br><span class="line">		<span class="keyword">final</span> String joinpointIdentification = methodIdentification(method, targetClass, txAttr);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (txAttr == <span class="keyword">null</span> || !(tm <span class="keyword">instanceof</span> CallbackPreferringPlatformTransactionManager)) &#123;</span><br><span class="line">			<span class="comment">// 构建 TransactionInfo，保存在本地线程中</span></span><br><span class="line">			TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification);</span><br><span class="line">			Object retVal = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="comment">// 继续执行拦截器链,当有其他拦截器 match 待执行方法时，则执行该拦截器方法，然后 return</span></span><br><span class="line">				retVal = invocation.proceedWithInvocation();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">				<span class="comment">// 根据 @transactional 元数据 rollbackOn 进行回滚或调用 PlatformTransactionManager#commit 提交</span></span><br><span class="line">				completeTransactionAfterThrowing(txInfo, ex);</span><br><span class="line">				<span class="keyword">throw</span> ex;</span><br><span class="line">			&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">				cleanupTransactionInfo(txInfo);</span><br><span class="line">			&#125;</span><br><span class="line">      <span class="comment">// 调用 PlatformTransactionManager#commit 提交</span></span><br><span class="line">			commitTransactionAfterReturning(txInfo);</span><br><span class="line">			<span class="keyword">return</span> retVal;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">final</span> ThrowableHolder throwableHolder = <span class="keyword">new</span> ThrowableHolder();</span><br><span class="line"></span><br><span class="line">			<span class="comment">// It's a CallbackPreferringPlatformTransactionManager: pass a TransactionCallback in.</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Object result = ((CallbackPreferringPlatformTransactionManager) tm).execute(txAttr, status -&gt; &#123;</span><br><span class="line">					TransactionInfo txInfo = prepareTransactionInfo(tm, txAttr, joinpointIdentification, status);</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						<span class="keyword">return</span> invocation.proceedWithInvocation();</span><br><span class="line">					&#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">						<span class="keyword">if</span> (txAttr.rollbackOn(ex)) &#123;</span><br><span class="line">							<span class="comment">// A RuntimeException: will lead to a rollback.</span></span><br><span class="line">							<span class="keyword">if</span> (ex <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">								<span class="keyword">throw</span> (RuntimeException) ex;</span><br><span class="line">							&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">								<span class="keyword">throw</span> <span class="keyword">new</span> ThrowableHolderException(ex);</span><br><span class="line">							&#125;</span><br><span class="line">						&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">							throwableHolder.throwable = ex;</span><br><span class="line">							<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">						cleanupTransactionInfo(txInfo);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (throwableHolder.throwable != <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="keyword">throw</span> throwableHolder.throwable;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> result;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (ThrowableHolderException ex) &#123;</span><br><span class="line">				<span class="keyword">throw</span> ex.getCause();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (TransactionSystemException ex2) &#123;</span><br><span class="line">				<span class="keyword">if</span> (throwableHolder.throwable != <span class="keyword">null</span>) &#123;</span><br><span class="line">					logger.error(<span class="string">"Application exception overridden by commit exception"</span>, throwableHolder.throwable);</span><br><span class="line">					ex2.initApplicationException(throwableHolder.throwable);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">throw</span> ex2;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (Throwable ex2) &#123;</span><br><span class="line">				<span class="keyword">if</span> (throwableHolder.throwable != <span class="keyword">null</span>) &#123;</span><br><span class="line">					logger.error(<span class="string">"Application exception overridden by commit exception"</span>, throwableHolder.throwable);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">throw</span> ex2;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h3><p>PlatformTransactionManager 接口定义了事务执行的策略。不同的数据访问技术有各自的实现，如 JDBC 实现了 DataSourceTranscationManager；JPA 实现了 JPATranscationManager；Hibernate 实现了 HibernateTranscationManager；JDO 实现了 JdoTranscationManager；分布式事务实现了 JtaTranscationManager。在 spring boot 项目中，spring-boot-starter-jdbc 会为应用自动注入 DataSourceTransactionManager 实例；spring-boot-starter-data-jpa 会为应用自动注入 JpaTransactionManager 实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PlatformTransactionManager</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 如果当前调用堆栈存在匹配事务，就返回新事务或当前的事务</span></span><br><span class="line">  <span class="comment">// TransactionDefinition 定义了事务的元数据，基本与 @Transactional 注解上的元数据相同</span></span><br><span class="line">  <span class="function">TransactionStatus <span class="title">getTransaction</span><span class="params">(TransactionDefinition definition)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionStatus</span> <span class="keyword">extends</span> <span class="title">SavepointManager</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isNewTransaction</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">hasSavepoint</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用 TransactionAspectSupport.currentTransactionStatus().setRollbackOnly() 实现回滚</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setRollbackOnly</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isRollbackOnly</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isCompleted</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Transactional"><a href="#Transactional" class="headerlink" title="Transactional"></a>Transactional</h3><p>@Transactional 注解元数据包含：</p>
<ul>
<li>propagation（事务传播）：默认值为 REQUIRED，事务方法 A 调用事务方法 B，B 将使用与 A 相同的事务，而不创建新事务；当方法 B 发生异常时，整个事务将回滚。当值为 REQUIRED_NEW 时，方法 B 将构建新的事务，异常只导致 B 事务回滚。当值为 NESTED 时，效果与 REQUIRED_NEW 类似，但只支持 JDBC，不支持 JPA、Hibernate。当赋值为 SUPPORTS 时，声明方法调用时有事务就用事务，没有事务就不用事务（比如某方法没有事务，调用它的方法可能有事务）。当赋值为 NOT_SUPPORTS 时，声明方法不在事务中执行，若有事务，在方法调用结束阶段事务都会被挂起。当赋值为 NEVER 时，声明方法不在事务中执行，若有事务则抛出异常。当赋值为 MANDATORY 时，声明方法在事务中执行，若没有事务则抛出异常。</li>
<li>isolation：指定事务之间的隔离程度。默认值为 DEFAULT，使用当前数据库的默认隔离级别，Oracle、SQL Server 为 READ_COMMITTED，Mysql 为 REPEATABLE_READ。当值为 READ_UNCOMMITTED 时，B 事务可以读取到 A 事务修改但未提交的事务，可能导致脏读、不可重复读、幻读。当值为 READ_COMMITTED 时，B 事务可以读取到 A 事务修改的事务，可能导致不可重复读、幻读，不会导致脏读。当值为 REPEATABLE_READ 时，B 事务可以读取到 A 事务修改的事务，但不可以读取 A 事务已经读取的事务，可能导致不可重复读，不会导致幻读、脏读。当值为 SERIALIZABLE 时，事务顺序执行，不会导致不可重复读、幻读、脏读，但是开销较大。</li>
<li>timeout：指定事务过期时间，默认为当前数据库的事务过期时间。超过超时时间的事务将会被回滚。</li>
<li>readOnly：指定当前事务是否为只读事务，即添加 @Transactional 注解的方法只会读取数据库的值，而不会修改数据库的值。</li>
<li>rollbackFor：指定哪些异常可以引起事务回滚，值为 Throwable 的子类。</li>
<li><p>noRollbackFor：指定哪些异常不会引起事务回滚，值为 Throwable 的子类。</p>
</li>
<li><p>自定义事务行为。</p>
</li>
<li>不支持通过远程调用传播事务上下文。</li>
</ul>
<h3 id="TransactionTemplate"><a href="#TransactionTemplate" class="headerlink" title="TransactionTemplate"></a>TransactionTemplate</h3><p>同常见的数据访问技术实现了了两种抽象一样（如较低水平的抽象 DataSourceUtils、较高水平的抽象 JDBCTemplate），spring 事务机制既支持使用 @Transactional 注解作声明式编程，又支持使用 TransactionTemplate 或 PlatformTransactionManager 实现类作编程式编程。除了使用 TransactionTemplate 约束事务的行为以外，spring 事务机制也允许使用 TransactionalEventListener 在事务执行的某个阶段定制事件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleService</span> <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> TransactionTemplate transactionTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SimpleService</span><span class="params">(PlatformTransactionManager transactionManager)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.transactionTemplate = <span class="keyword">new</span> TransactionTemplate(transactionManager);</span><br><span class="line">    <span class="keyword">this</span>.transactionTemplate.setIsolationLevel(TransactionDefinition.ISOLATION_READ_UNCOMMITTED);</span><br><span class="line">    <span class="keyword">this</span>.transactionTemplate.setTimeout(<span class="number">30</span>); <span class="comment">// 30 seconds</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">someServiceMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> transactionTemplate.execute(<span class="keyword">new</span> TransactionCallbackWithoutResult() &#123;</span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doInTransactionWithoutResult</span><span class="params">(TransactionStatus status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          updateOperation1();</span><br><span class="line">          updateOperation2();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SomeBusinessException ex) &#123;</span><br><span class="line">          status.setRollbackOnly();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/data-access.html#transaction" target="_blank" rel="noopener">spring 事务官方文档</a><br><a href="https://blog.csdn.net/w372426096/article/details/78574161" target="_blank" rel="noopener">Java中的事务——全局事务与本地事务</a><br><a href="https://www.jianshu.com/p/befc2d73e487" target="_blank" rel="noopener">Spring 事务 – @Transactional的使用</a><br><a href="https://www.jianshu.com/p/b33c4ff803e0" target="_blank" rel="noopener">@Transactional原理</a><br><a href="https://www.javaworld.com/article/2077963/distributed-transactions-in-spring--with-and-without-xa.html" target="_blank" rel="noopener">Distributed transactions in Spring, with and without XA</a><br><a href="https://www.infoq.com/minibooks/JTDS/" target="_blank" rel="noopener">Java Transaction Design Strategies</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>spring</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2019/12/29/backend/%E9%83%A8%E7%BD%B2/docker/</url>
    <content><![CDATA[<h2 id="虚拟机和容器"><a href="#虚拟机和容器" class="headerlink" title="虚拟机和容器"></a>虚拟机和容器</h2><p>虚拟机和容器都是为了将实体机拆分成多块，以便分块运行不同的应用。</p>
<img src="/2019/12/29/backend/部署/docker/vm&container.png">
<p>虚拟机技术（xem、kvm、vmware、virtualbox）需要模拟整台机器，包括硬件、操作系统等。虚拟机一旦开启，预分配给它的资源将全部被占用。虚拟机上再运行应用，并安装必要的二进制包和库。</p>
<p>容器技术能和宿主机共享硬件资源及操作系统，能实现资源的动态分配。容器内部安装依赖和应用，在宿主机中以分离的进程运行。Docker 基于 Linux 容器封装。Linux 容器没有模拟一个操作系统，而是对进程套了一层保护层，它所使用的资源都是虚拟的，这样就能与底层系统进行隔离。Docker 支持将软件编译成镜像（image）（镜像是一个包含一堆只读层的文件系统），并在镜像中做好对软件的配置，镜像经发布后，使用者就可以下载并运行这个镜像（运行中的镜像也被称为容器 Container）（容器也是多层机构的文件系统，只是最上面那层支持读写操作）。通过镜像可以实现交付环境的一致性；Dockerfile 用于记录容器构建过程，可以在集群中实现快速分发和部署。</p>
<p>各大云计算平台（PaaS 平台即服务，提供存储、数据库、网络、负载均衡、自动扩展等功能）均支持 Docker 容器技术，比如阿里云、百度云、Cloud Foundry、HeroKu、DigitalOcean、OpenShift、Apache Stratos、Apache MesOS、Deis、Windows Server、Azure 等。</p>
<h2 id="Docker-命令"><a href="#Docker-命令" class="headerlink" title="Docker 命令"></a>Docker 命令</h2><p>Docker 使用 C/S 结构（客户端/服务器）打造。客户端和服务器可以运行在同一个 Host 上，客户端也可以通过 socket 或 REST API 与远程的服务器通信。典型的客户端就是命令行工具。服务端接受到请求后，会使用路由分发工具请求交给具体的处理器，如 graphdriver 用来执行容器镜像的本地化操作；networkdriver 用来执行容器网络环境的配置；execdriver 用来执行容器内部运行的执行工作；或者从 Docker Registry 上获取镜像。</p>
<img src="/2019/12/29/backend/部署/docker/CS.png">
<img src="/2019/12/29/backend/部署/docker/client-server.jpg">
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CentOS 安装 docker</span></span><br><span class="line">sudo yum update</span><br><span class="line">sudo yum install docker</span><br><span class="line"><span class="comment"># Ubuntu 安装 docker</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get docker.io</span><br><span class="line"></span><br><span class="line">docker -v</span><br><span class="line">docker search image-name <span class="comment"># 检索镜像 https://registry.hub.docker.com</span></span><br><span class="line">docker pull image-name <span class="comment"># 下载镜像</span></span><br><span class="line">docker images <span class="comment"># 本地镜像列表，包含镜像 id</span></span><br><span class="line">docker rmi image-id <span class="comment"># 通过镜像 id 删除镜像</span></span><br><span class="line">docker rmi <span class="variable">$&#123;docker images -g&#125;</span> <span class="comment"># 删除所有镜像</span></span><br><span class="line">docker run --name container-name -d image-name <span class="comment"># 以指定容器名运行镜像</span></span><br><span class="line">docker ps <span class="comment"># 容器列表，包含容器 id、占用端口号</span></span><br><span class="line">docker stop container-name <span class="comment"># 停止容器</span></span><br><span class="line">docker stop container-id <span class="comment"># 停止容器</span></span><br><span class="line">docker start container-name <span class="comment"># 启动容器</span></span><br><span class="line">docker start container-id <span class="comment"># 启动容器</span></span><br><span class="line">docker run -d -p 6378:6379 --name port-redis redis <span class="comment"># 将 docker 容器的端口映射到宿主机端口 6378，容器端口无法对外提供访问</span></span><br><span class="line">docker rm container-id <span class="comment"># 删除容器</span></span><br><span class="line">docker rm <span class="variable">$&#123;docker ps -a -q&#125;</span> <span class="comment"># 删除所有容器</span></span><br><span class="line">docker logs container-name <span class="comment"># 容器日志</span></span><br><span class="line">docker logs container-id <span class="comment"># 容器日志</span></span><br><span class="line">docker <span class="built_in">exec</span> -it container-id bash <span class="comment"># 登录容器，执行常规的 linux 操作</span></span><br><span class="line">docker <span class="built_in">exec</span> -it container-name bash <span class="comment"># 登录容器，执行常规的 linux 操作</span></span><br></pre></td></tr></table></figure>
<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Dockerfile 配置文件用于构建 Docker 镜像，包含四大内容：</p>
<ul>
<li>FROM：基础镜像（父镜像）信息指令</li>
<li>MAINTAINER：维护者信息指令</li>
<li>RUN、EVN、ADD、WORKDIR 等：镜像操作指令</li>
<li>CMD、ENTRYPOINT、USER 等：容器启动指令</li>
</ul>
<p>典型的 Dockerfile 文件如下（编写完 Dockerfile 后，可以通过 docker build 编译创建镜像）（jar 包也可以在应用中添加 docker-maven-plugin 插件，并指定 DOCKER_HOST 环境变量为服务器地址，再使用 mvn clean package docker:build -DskipTests 构建）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM java:8 <span class="comment"># 拉取基础镜像</span></span><br><span class="line">VOLUME /tmp <span class="comment"># 创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等</span></span><br><span class="line">RUN mkdir /app <span class="comment"># 执行命令</span></span><br><span class="line">ADD config-1.0.0-SNAPSHOT.jar /app/app.jar <span class="comment"># 赋值</span></span><br><span class="line">ADD runboot.sh /app/ <span class="comment"># 赋值</span></span><br><span class="line">RUN bash -c <span class="string">'touch /app/app.jar'</span> <span class="comment"># 执行命令，另一种格式是 RUN ["bash", "-c", "touch /app/app.jar"]</span></span><br><span class="line">WORKDIR /app <span class="comment"># 设置当前工作路径</span></span><br><span class="line">RUN chmod a+x runboot.sh </span><br><span class="line">EXPOSE 8888 <span class="comment"># 指定对外开放的端口</span></span><br><span class="line">CMD /app/runboot.sh <span class="comment"># 启动容器时的默认行为，一个 Dockerfile 里只能有一个 CMD 指令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># /app/runboot.sh</span></span><br><span class="line">sleep 10</span><br><span class="line">java -Djava.security.egd=file:/dev/./urandim -jar /app/app.jar</span><br></pre></td></tr></table></figure>
<h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p>Docker Compose 可用来定义和运行多容器应用，即使用 docker-compose.yml 定义多容器，然后执行 docker-compose up -d 启动多应用。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/deng624796905/article/details/86493330" target="_blank" rel="noopener">这可能是最为详细的Docker入门吐血总结</a><br><a href="https://zhuanlan.zhihu.com/p/89587030" target="_blank" rel="noopener">终于有人把 Docker 讲清楚了，万字详解！</a><br><a href="http://c.biancheng.net/docker/" target="_blank" rel="noopener">Docker教程：Docker入门实践（精讲版）</a><br><a href="http://www.dockerinfo.net/document" target="_blank" rel="noopener">Docker中文文档</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>部署</category>
      </categories>
      <tags>
        <tag>carrier</tag>
      </tags>
  </entry>
  <entry>
    <title>聊聊组件库的测试</title>
    <url>/2019/12/28/frontend/antd/%E8%81%8A%E8%81%8A%E7%BB%84%E4%BB%B6%E5%BA%93%E7%9A%84%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="antd"><a href="#antd" class="headerlink" title="antd"></a>antd</h2><p>ant-design 基于 <a href="https://jestjs.io/docs/zh-Hans/getting-started" target="_blank" rel="noopener">jest 断言库</a>、<a href="https://github.com/airbnb/enzyme" target="_blank" rel="noopener">enzyme</a>、<a href="https://github.com/facebook/react/tree/master/packages/react-test-renderer" target="_blank" rel="noopener">react-test-renderer</a> 作测试。有文章认为，enzyme 包含 react-test-renderer 的能力，并且以类 jquery 的方式提供了更便捷的 api 操作。</p>
<p><a href="https://github.com/ant-design/ant-design/blob/master/.jest.js" target="_blank" rel="noopener">jest 配置</a>：</p>
<ul>
<li>moduleNameMapper：正则到模块名的 map 映射，这些模块将不会被模拟，无论启动自动模拟与否。</li>
<li>transform：在 ant-design 中，jest 配置的转译器主要使用 babel-jest 实现，只是混入了与启动开发服务器相同的 babel 配置，参见 <a href="https://github.com/ant-design/antd-tools/blob/master/lib/jest/codePreprocessor.js" target="_blank" rel="noopener">codePreprocessor.js</a>。对于 markdown 文件，转译器将先使用 mark-twain 进行解析，然后获取 markdown 文件中的代码，然后进行转译，参见 <a href="https://github.com/ant-design/antd-tools/blob/master/lib/jest/demoPreprocessor.js" target="_blank" rel="noopener">demoPreprocessor.js</a>。对于图片，转译器使用 <a href="https://github.com/webpack-contrib/url-loader" target="_blank" rel="noopener">url-loader</a> 进行处理，参见 <a href="https://github.com/ant-design/antd-tools/blob/master/lib/jest/imagePreprocessor.js" target="_blank" rel="noopener">imagePreprocessor.js</a>。</li>
</ul>
<p>setup.js 启动文件配置 Enzyme，即执行 const Adapter = require(‘enzyme-adapter-react-16’); Enzyme.configure({ adapter: new Adapter() })。</p>
<p>ant-design 所做的全局测试包含对导出的模块列表作快照测试（生成的快照均在 <strong>snapshots</strong> 文件夹内）、组件库版本号是否与 package.json 中一致、使用 <a href="https://github.com/benjycui/dekko" target="_blank" rel="noopener">dekko 库</a> 校验打包文件是否正确输出、测试 lib 以及语言包是否正常输出。</p>
<p>组件测试包含功能测试、快照测试。快照测试基于遍历 components 文件夹中的 demo 文档（加载的 markdown 经过 <a href="https://github.com/ant-design/antd-tools/blob/master/lib/jest/demoPreprocessor.js" target="_blank" rel="noopener">demoPreprocessor.js</a> 转译器处理，快照中移除 aria-control 属性。以下是快照测试的主要代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> glob <span class="keyword">from</span> <span class="string">'glob'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'enzyme'</span>;</span><br><span class="line"><span class="keyword">import</span> MockDate <span class="keyword">from</span> <span class="string">'mockdate'</span>;</span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">demoTest</span>(<span class="params">component, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> files = glob.sync(<span class="string">`./components/<span class="subst">$&#123;component&#125;</span>/demo/*.md`</span>);</span><br><span class="line"></span><br><span class="line">  files.forEach(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> testMethod = options.skip === <span class="literal">true</span> ? test.skip : test;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(options.skip) &amp;&amp; options.skip.some(<span class="function"><span class="params">c</span> =&gt;</span> file.includes(c))) &#123;</span><br><span class="line">      testMethod = test.skip;</span><br><span class="line">    &#125;</span><br><span class="line">    testMethod(<span class="string">`renders <span class="subst">$&#123;file&#125;</span> correctly`</span>, () =&gt; &#123;</span><br><span class="line">      MockDate.set(moment(<span class="string">'2016-11-22'</span>));</span><br><span class="line">      <span class="keyword">const</span> demo = <span class="built_in">require</span>(<span class="string">`../.<span class="subst">$&#123;file&#125;</span>`</span>).default;</span><br><span class="line">      <span class="keyword">const</span> wrapper = render(demo);</span><br><span class="line"></span><br><span class="line">      ariaConvert(wrapper);<span class="comment">// 快照移除 aria-control 属性</span></span><br><span class="line"></span><br><span class="line">      expect(wrapper).toMatchSnapshot();</span><br><span class="line">      MockDate.reset();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行组件 demo 测试</span></span><br><span class="line">demoTest(<span class="string">"affix"</span>);</span><br></pre></td></tr></table></figure>
<p>组件的功能测试包含：挂载、设置 props、卸载无异常；基本的快照测试，使用 enzyme 判断是否包含某样式类、交互事件是否正常触发、更新 props 等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 挂载、设置 props、卸载无异常</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">'enzyme'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mountTest</span>(<span class="params">Component</span>) </span>&#123;</span><br><span class="line">  describe(<span class="string">`mount and unmount`</span>, () =&gt; &#123;</span><br><span class="line">    it(<span class="string">`component could be updated and unmounted without errors`</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> wrapper = mount(<span class="xml"><span class="tag">&lt;<span class="name">Component</span> /&gt;</span>);</span></span><br><span class="line"><span class="xml">      expect(() =&gt; &#123;</span></span><br><span class="line"><span class="xml">        wrapper.setProps(&#123;&#125;);</span></span><br><span class="line"><span class="xml">        wrapper.unmount();</span></span><br><span class="line"><span class="xml">      &#125;).not.toThrow();</span></span><br><span class="line"><span class="xml">    &#125;);</span></span><br><span class="line"><span class="xml">  &#125;);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>
<p>以下仅展示 Typography 组件的部分测试脚本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模拟 copy-to-clipboard</span></span><br><span class="line">jest.mock(<span class="string">'copy-to-clipboard'</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'Typography'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 挂载、设置 props、卸载无异常测试</span></span><br><span class="line">  mountTest(Paragraph);</span><br><span class="line">  mountTest(Base);</span><br><span class="line">  mountTest(Title);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> LINE_STR_COUNT = <span class="number">20</span>;</span><br><span class="line">  <span class="comment">// 模拟 console.error</span></span><br><span class="line">  <span class="keyword">const</span> errorSpy = jest.spyOn(<span class="built_in">console</span>, <span class="string">'error'</span>).mockImplementation(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模拟 offsetHeight</span></span><br><span class="line">  <span class="keyword">const</span> originOffsetHeight = <span class="built_in">Object</span>.getOwnPropertyDescriptor(HTMLElement.prototype, <span class="string">'offsetHeight'</span>)</span><br><span class="line">    .get;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(HTMLElement.prototype, <span class="string">'offsetHeight'</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">      <span class="keyword">let</span> html = <span class="keyword">this</span>.innerHTML;</span><br><span class="line">      html = html.replace(<span class="regexp">/&lt;[^&gt;]*&gt;/g</span>, <span class="string">''</span>);</span><br><span class="line">      <span class="keyword">const</span> lines = <span class="built_in">Math</span>.ceil(html.length / LINE_STR_COUNT);</span><br><span class="line">      <span class="keyword">return</span> lines * <span class="number">16</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模拟 getComputedStyle</span></span><br><span class="line">  <span class="keyword">const</span> originGetComputedStyle = <span class="built_in">window</span>.getComputedStyle;</span><br><span class="line">  <span class="built_in">window</span>.getComputedStyle = <span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> style = originGetComputedStyle(ele);</span><br><span class="line">    style.lineHeight = <span class="string">'16px'</span>;</span><br><span class="line">    <span class="keyword">return</span> style;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  beforeAll(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Typography 使用了 raf，模拟 microTask、macroTask</span></span><br><span class="line">    jest.useFakeTimers();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  afterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    errorSpy.mockReset();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  afterAll(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    jest.useRealTimers();<span class="comment">// 重新使用实际的 microTask、macroTask</span></span><br><span class="line">    errorSpy.mockRestore();<span class="comment">// 重置模拟</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(HTMLElement.prototype, <span class="string">'offsetHeight'</span>, &#123;</span><br><span class="line">      <span class="keyword">get</span>: originOffsetHeight,</span><br><span class="line">    &#125;);</span><br><span class="line">    window.getComputedStyle = originGetComputedStyle;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 校验 level 传参必须是 1、2、3、4</span><br><span class="line">  describe('Title', () =&gt; &#123;</span><br><span class="line">    it(<span class="string">'warning if `level` not correct'</span>, () =&gt; &#123;</span><br><span class="line">      mount(<span class="xml"><span class="tag">&lt;<span class="name">Title</span> <span class="attr">level</span>=<span class="string">&#123;false&#125;</span> /&gt;</span>);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      expect(errorSpy).toHaveBeenCalledWith(</span></span><br><span class="line"><span class="xml">        'Warning: Title only accept `1 | 2 | 3 | 4` as `level` value.',</span></span><br><span class="line"><span class="xml">      );</span></span><br><span class="line"><span class="xml">    &#125;);</span></span><br><span class="line"><span class="xml">  &#125;);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  describe('Base', () =&gt; &#123;</span></span><br><span class="line"><span class="xml">    describe('trigger ellipsis update', () =&gt; &#123;</span></span><br><span class="line"><span class="xml">      const fullStr =</span></span><br><span class="line"><span class="xml">        'Bamboo is Little Light Bamboo is Little Light Bamboo is Little Light Bamboo is Little Light Bamboo is Little Light';</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      it('should trigger update', () =&gt; &#123;</span></span><br><span class="line"><span class="xml">        const wrapper = mount(</span></span><br><span class="line">          &lt;Base ellipsis component="p" editable&gt;</span><br><span class="line">            &#123;fullStr&#125;</span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">Base</span>&gt;</span>,</span></span><br><span class="line"><span class="xml">        );</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        jest.runAllTimers();// 执行 microTask、macroTask，以便更新渲染内容</span></span><br><span class="line"><span class="xml">        wrapper.update();// 更新渲染内容</span></span><br><span class="line"><span class="xml">        expect(wrapper.find('span').text()).toEqual('Bamboo is Little ...');</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        wrapper.setProps(&#123; ellipsis: &#123; rows: 2 &#125; &#125;);</span></span><br><span class="line"><span class="xml">        jest.runAllTimers();</span></span><br><span class="line"><span class="xml">        wrapper.update();</span></span><br><span class="line"><span class="xml">        expect(wrapper.find('span').text()).toEqual('Bamboo is Little Light Bamboo is Litt...');</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        wrapper.setProps(&#123; ellipsis: &#123; rows: 99 &#125; &#125;);</span></span><br><span class="line"><span class="xml">        jest.runAllTimers();</span></span><br><span class="line"><span class="xml">        wrapper.update();</span></span><br><span class="line"><span class="xml">        expect(wrapper.find('p').text()).toEqual(fullStr);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        wrapper.unmount();</span></span><br><span class="line"><span class="xml">      &#125;);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      it('should expandable work', () =&gt; &#123;</span></span><br><span class="line"><span class="xml">        const onExpand = jest.fn();</span></span><br><span class="line"><span class="xml">        const wrapper = mount(</span></span><br><span class="line">          &lt;Base ellipsis=&#123;&#123; expandable: true, onExpand &#125;&#125; component="p" copyable editable&gt;</span><br><span class="line">            &#123;fullStr&#125;</span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">Base</span>&gt;</span>,</span></span><br><span class="line"><span class="xml">        );</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        jest.runAllTimers();</span></span><br><span class="line"><span class="xml">        wrapper.update();</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        wrapper.find('.ant-typography-expand').simulate('click');// 模拟点击展开图标</span></span><br><span class="line"><span class="xml">        expect(onExpand).toHaveBeenCalled();</span></span><br><span class="line"><span class="xml">        jest.runAllTimers();</span></span><br><span class="line"><span class="xml">        wrapper.update();</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        expect(wrapper.find('p').text()).toEqual(fullStr);</span></span><br><span class="line"><span class="xml">      &#125;);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      // 测试 css 文本省略</span></span><br><span class="line"><span class="xml">      it('can use css ellipsis', () =&gt; &#123;</span></span><br><span class="line">        const wrapper = mount(&lt;Base ellipsis component="p" /&gt;);</span><br><span class="line">        expect(wrapper.find('.ant-typography-ellipsis-single-line').length).toBeTruthy();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="fusion"><a href="#fusion" class="headerlink" title="fusion"></a>fusion</h2><p>fusion 基于 <a href="https://karma-runner.github.io/latest/index.html" target="_blank" rel="noopener">karma</a>、<a href="https://github.com/mochajs/mocha" target="_blank" rel="noopener">mocha</a>、<a href="https://github.com/airbnb/enzyme" target="_blank" rel="noopener">enzyme</a>、<a href="https://github.com/dequelabs/axe-core" target="_blank" rel="noopener">axe-core</a> 作测试。</p>
<p>启动测试脚本（仅全量测试部分）的过程如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test/index.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; Server &#125; = <span class="built_in">require</span>(<span class="string">'karma'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// karma 配置</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  configFile: join(__dirname, <span class="string">'karma.js'</span>),</span><br><span class="line">  component: componentName,</span><br><span class="line">  runAll: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> runAllTest = <span class="function">(<span class="params">a11y = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">  config.runAll = <span class="literal">true</span>;</span><br><span class="line">  config.a11y = a11y;</span><br><span class="line">  server = <span class="keyword">new</span> Server(config);</span><br><span class="line">  server.start();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test/karam.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    frameworks: [<span class="string">'mocha'</span>],</span><br><span class="line">    browsers: [<span class="string">'Chrome'</span>],</span><br><span class="line">    customLaunchers: &#123;</span><br><span class="line">      ChromeTravis: &#123;</span><br><span class="line">        base: <span class="string">'ChromeHeadless'</span>,</span><br><span class="line">        flags: [<span class="string">'--no-sandbox'</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    reporters: [<span class="string">'spec'</span>, <span class="string">'coverage'</span>],</span><br><span class="line">    <span class="comment">// 全量测试范围为 test 文件夹下 *-spec.js 文件，并作预处理</span></span><br><span class="line">    preprocessors: &#123;</span><br><span class="line">      [specPath]: [<span class="string">'webpack'</span>, <span class="string">'sourcemap'</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    files: [</span><br><span class="line">      path.join(__dirname, <span class="string">'animation-polyfill.js'</span>),</span><br><span class="line">      <span class="built_in">require</span>.resolve(<span class="string">'babel-polyfill/dist/polyfill.js'</span>),</span><br><span class="line">      <span class="built_in">require</span>.resolve(<span class="string">'console-polyfill/index.js'</span>),</span><br><span class="line">      <span class="built_in">require</span>.resolve(<span class="string">'es5-shim/es5-shim.js'</span>),</span><br><span class="line">      <span class="built_in">require</span>.resolve(<span class="string">'es5-shim/es5-sham.js'</span>),</span><br><span class="line">      <span class="built_in">require</span>.resolve(<span class="string">'html5shiv/dist/html5shiv.js'</span>),</span><br><span class="line">      specPath,</span><br><span class="line">    ],</span><br><span class="line">    coverageReporter: &#123;<span class="comment">// 覆盖率报告</span></span><br><span class="line">      dir: coveragePath,</span><br><span class="line">      reporters: [</span><br><span class="line">          &#123; <span class="attr">type</span>: <span class="string">'lcov'</span>, <span class="attr">subdir</span>: <span class="string">'.'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">type</span>: <span class="string">'json'</span>, <span class="attr">subdir</span>: <span class="string">'.'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">type</span>: <span class="string">'text-summary'</span>, <span class="attr">subdir</span>: <span class="string">'.'</span>, <span class="attr">file</span>: <span class="string">'coverage.txt'</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    client: &#123;</span><br><span class="line">        mocha: &#123;</span><br><span class="line">            timeout: <span class="number">10000</span>,</span><br><span class="line">            reporter: <span class="string">'html'</span>,</span><br><span class="line">            ui: <span class="string">'bdd'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    hostname: <span class="string">'localhost'</span>,</span><br><span class="line">    browserNoActivityTimeout: <span class="number">100000</span>,</span><br><span class="line">    port: <span class="number">9877</span>,</span><br><span class="line">    colors: <span class="literal">true</span>,</span><br><span class="line">    autoWatch: !singleRun,</span><br><span class="line">    singleRun: singleRun,</span><br><span class="line">    concurrency: <span class="literal">Infinity</span>,</span><br><span class="line">    <span class="comment">// 在启动开发环境的 webpack 配置的基础上，额外添加 babel-plugin-istanbul、babel-plugin-espower 插件</span></span><br><span class="line">    webpack: getWebpackConfig(componentName, runAll),</span><br><span class="line">    webpackMiddleware: &#123;</span><br><span class="line">      stats: <span class="string">'errors-only'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="string">'karma-chrome-launcher'</span>,</span><br><span class="line">      <span class="string">'karma-mocha'</span>,</span><br><span class="line">      <span class="string">'karma-webpack'</span>,</span><br><span class="line">      <span class="string">'karma-spec-reporter'</span>,</span><br><span class="line">      <span class="string">'karma-sourcemap-loader'</span>,</span><br><span class="line">      <span class="string">'karma-coverage'</span>,</span><br><span class="line">    ],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.TRAVIS) &#123;</span><br><span class="line">    options.browsers = [<span class="string">'ChromeTravis'</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  config.set(options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>fusion 对组件没有快照测试，而是借助 axe-core 做可访问性（a11y）测试，即测试渲染 react 的过程无异常。典型如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 组件的测试脚本</span></span><br><span class="line">describe(<span class="string">'Paragraph A11y'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> wrapper;</span><br><span class="line"></span><br><span class="line">  afterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (wrapper) &#123;</span><br><span class="line">      wrapper.unmount();</span><br><span class="line">      wrapper = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    unmount();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should not have any violations'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    wrapper = <span class="keyword">await</span> testReact(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Paragraph&gt;&#123;content&#125;&lt;<span class="regexp">/Paragraph&gt;</span></span><br><span class="line"><span class="regexp">        &lt;br /</span>&gt;</span><br><span class="line">        &lt;Paragraph size=<span class="string">"small"</span>&gt;&#123;content&#125;&lt;<span class="regexp">/Paragraph&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> wrapper;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 借助 enzyme 将渲染内容挂载到指定节点下，然后作访问性测试</span></span><br><span class="line"><span class="keyword">const</span> testReact = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">node, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> wrapper = <span class="keyword">await</span> mountReact(node, A11Y_ROOT_ID);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> delay(options.delay || <span class="number">200</span>);</span><br><span class="line">  <span class="keyword">await</span> test(<span class="string">`#<span class="subst">$&#123;A11Y_ROOT_ID&#125;</span>`</span>, options);</span><br><span class="line">  <span class="keyword">return</span> wrapper;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 axe-core 测试渲染内容的可访问性</span></span><br><span class="line"><span class="keyword">const</span> test = <span class="function"><span class="keyword">function</span>(<span class="params">selector, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  options.rules = <span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">    <span class="string">'color-contrast'</span>: &#123;</span><br><span class="line">      enabled: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;, options.rules);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Axe.run(selector, &#123; <span class="attr">rules</span>: options.rules &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      assert(!error);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (options.debug) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(formatViolations(results.violations, <span class="literal">true</span>));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (results.violations.length) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(formatViolations(results.violations));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      assert(results.violations.length === <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (options.incomplete) &#123;</span><br><span class="line">        <span class="keyword">if</span> (results.incomplete.length) &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(formatViolations(results.incomplete));</span><br><span class="line">        &#125;</span><br><span class="line">        assert(results.incomplete.length === <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="element"><a href="#element" class="headerlink" title="element"></a>element</h2><p>element 同样使用 <a href="https://karma-runner.github.io/latest/index.html" target="_blank" rel="noopener">karma</a>、<a href="https://github.com/mochajs/mocha" target="_blank" rel="noopener">mocha</a>、<a href="https://github.com/airbnb/enzyme" target="_blank" rel="noopener">enzyme</a> 作测试。只是 element 直接使用 karma 命令行启动测试，fusion 使用 karma.Server 实例启动测试。以下 Button 组件的测试脚本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 vue 实例</span></span><br><span class="line"><span class="keyword">const</span> createVue = <span class="function"><span class="keyword">function</span>(<span class="params">Compo, mounted = false</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(Compo) === <span class="string">'[object String]'</span>) &#123;</span><br><span class="line">    Compo = &#123; <span class="attr">template</span>: Compo &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Vue(Compo).$mount(mounted === <span class="literal">false</span> ? <span class="literal">null</span> : createElm());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建测试组件实例</span></span><br><span class="line"><span class="keyword">const</span> createTest = <span class="function"><span class="keyword">function</span>(<span class="params">Compo, propsData = &#123;&#125;, mounted = false</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (propsData === <span class="literal">true</span> || propsData === <span class="literal">false</span>) &#123;</span><br><span class="line">    mounted = propsData;</span><br><span class="line">    propsData = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> elm = createElm();<span class="comment">// 在 document 下创建节点</span></span><br><span class="line">  <span class="keyword">const</span> Ctor = Vue.extend(Compo);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Ctor(&#123; propsData &#125;).$mount(mounted === <span class="literal">false</span> ? <span class="literal">null</span> : elm);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁</span></span><br><span class="line"><span class="keyword">const</span> destroyVM = <span class="function"><span class="keyword">function</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  vm.$destroy &amp;&amp; vm.$destroy();</span><br><span class="line">  vm.$el &amp;&amp;</span><br><span class="line">  vm.$el.parentNode &amp;&amp;</span><br><span class="line">  vm.$el.parentNode.removeChild(vm.$el);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Button 组件测试</span></span><br><span class="line">describe(<span class="string">'Button'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> vm;</span><br><span class="line">  afterEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    destroyVM(vm);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 样式测试</span></span><br><span class="line">  it(<span class="string">'create'</span>, () =&gt; &#123;</span><br><span class="line">    vm = createTest(Button, &#123;</span><br><span class="line">      type: <span class="string">'primary'</span></span><br><span class="line">    &#125;, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">let</span> buttonElm = vm.$el;</span><br><span class="line">    expect(buttonElm.classList.contains(<span class="string">'el-button--primary'</span>)).to.be.true;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 交互测试</span></span><br><span class="line">  it(<span class="string">'click'</span>, done =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    vm = createVue(&#123;</span><br><span class="line">      template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;el-button @click="handleClick"&gt;&lt;/el-button&gt;</span></span><br><span class="line"><span class="string">      `</span>,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        handleClick(evt) &#123;</span><br><span class="line">          result = evt;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="literal">true</span>);</span><br><span class="line">    vm.$el.click();</span><br><span class="line"></span><br><span class="line">    setTimeout(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">      expect(result).to.exist;</span><br><span class="line">      done();</span><br><span class="line">    &#125;, <span class="number">20</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://echizen.github.io/tech/2017/02-12-jest-enzyme-intro" target="_blank" rel="noopener"> 使用jest+enzyme进行react项目测试 - 介绍篇</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>antd</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>jest测试</title>
    <url>/2019/12/26/frontend/%E5%B7%A5%E7%A8%8B%E5%8C%96/jest%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p><a href="https://jestjs.io/docs/zh-Hans/getting-started" target="_blank" rel="noopener">jest 断言库</a> 支持两种测试模式：功能测试、快照测试。通过添加 <a href="https://github.com/facebook/jest/tree/master/packages/babel-jest" target="_blank" rel="noopener">babel-jest</a> 依赖以及 babel.config.js 配置，可以在工程中使用 babel 转译 es6 语法或者 ts 语法，可参看 <a href="https://jestjs.io/docs/zh-Hans/getting-started" target="_blank" rel="noopener">Getting Started</a>。jest 也可以用于使用 <a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack</a> 来管理资源、 样式和编译的项目，可参看 <a href="https://jestjs.io/docs/zh-Hans/webpack" target="_blank" rel="noopener">Using with webpack</a>。jest 支持的断言方法可参见 <a href="https://jestjs.io/docs/zh-Hans/expect" target="_blank" rel="noopener">Expect</a>。以下仅以异步 async/await 函数说明功能测试用例的编写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">test(<span class="string">'the data is peanut butter'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> fetchData();</span><br><span class="line">  expect(data).toBe(<span class="string">'peanut butter'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'the fetch fails with an error'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  expect.assertions(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> fetchData();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    expect(e).toMatch(<span class="string">'error'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'the data is peanut butter'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> expect(fetchData()).resolves.toBe(<span class="string">'peanut butter'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'the fetch fails with an error'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> expect(fetchData()).rejects.toThrow(<span class="string">'error'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>快照测试的功能在于当期望每次渲染的 ui 内容一致时，可以使用快照进行对比。第一次执行测试时，就会生成一个快照；下次测试时，重新生成的快照就会与之前的快照进行对比，如果两份快照有差别，就表示测试失败；如果无差别，就标识测试成功。为了避免 ui 的实际渲染，可以使用 react-test-renderer 等模拟渲染库来生成虚拟的 react 渲染树。jest –updateSnapshot 命令可用于重新生成快照。快照测试也可以用于测试 json 数据；对于动态 json 数据，可以使用匹配器的方式进行快照测试。快照测试可参看 <a href="https://jestjs.io/docs/zh-Hans/snapshot-testing" target="_blank" rel="noopener">Snapshot Testing</a>、<a href="https://benmccormick.org/2016/09/19/testing-with-jest-snapshots-first-impressions/" target="_blank" rel="noopener">Testing with Jest Snapshots: First Impressions</a>、<a href="https://jestjs.io/blog/2016/07/27/jest-14.html" target="_blank" rel="noopener">Jest 14.0: React Tree Snapshot Testing</a>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'../Link.react'</span>;</span><br><span class="line"><span class="keyword">import</span> renderer <span class="keyword">from</span> <span class="string">'react-test-renderer'</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">'renders correctly'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> tree = renderer</span><br><span class="line">    .create(<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">page</span>=<span class="string">"http://www.facebook.com"</span>&gt;</span>Facebook<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>)</span><br><span class="line">    .toJSON();</span><br><span class="line">  expect(tree).toMatchSnapshot();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>jest 允许使用 beforeEach、afterEach、beforeAll、afterAll 函数在测试之前或之后作一些前置或后置处理。beforeEach、afterEach 在每个测试用例执行前都会调用；beforeAll、afterAll 在每个测试用例执行前只会被调用一次。test 函数可以用来构建测试用例；describe 函数可以用来构建多个 test 构成的测试套件。beforeEach、afterEach、beforeAll、afterAll 函数如果写在 describe 测试套件内，则只对这个测试套件有效。可参考 <a href="https://jestjs.io/docs/zh-Hans/setup-teardown" target="_blank" rel="noopener">Setup and Teardown</a>。</p>
<p>jest.fn 可用于构建一个模拟函数（模拟函数的功能，如 jest.fn(x =&gt; 42 + x)，可作为回调测试功能脚本）；可用于构建一个模拟类（如 new jest.fn()），测试实例；可使用 mockReturnValueOnce、mockReturnValue 直接构建返回值。jest.mock(modulePath) 可用于模拟模块（如 jest.mock(‘axios’).get.mockResolvedValue(resp) 用于模拟 ajax 请求返回值）。可参考 <a href="https://jestjs.io/docs/zh-Hans/mock-functions" target="_blank" rel="noopener">Mock Functions</a>。编写模拟脚本可参考 <a href="https://jestjs.io/docs/zh-Hans/manual-mocks" target="_blank" rel="noopener">Manual Mocks</a>。</p>
<p>jest-changed-files 库可用于查看哪些文件作了修改或项目中包含的 git 仓库。jest-diff 库可用于比较对象。jest-docblock 可抽取并解析 js 脚本头部的注释。jest-get-type 库可用于获取数据的类型。jest-validate 库可用于校验用户提交。jest-worker 库可用于并行化执行任务。pretty-format 库可用于对象格式转换。可参考 <a href="https://jestjs.io/docs/zh-Hans/jest-platform" target="_blank" rel="noopener">Jest Platform</a>。jest 社区提供了 <a href="https://github.com/jest-community/vscode-jest" target="_blank" rel="noopener">vscode-jest</a>、<a href="https://github.com/jest-community/jest-extended" target="_blank" rel="noopener">jest-extended</a>、<a href="https://github.com/jest-community/eslint-plugin-jest" target="_blank" rel="noopener">eslint-plugin-jest</a>、<a href="https://github.com/jest-community/awesome-jest" target="_blank" rel="noopener">awesome-jest</a> 库。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li>verbose：每个测试脚本是否独立打印。</li>
<li>setupFiles：指定测试脚本执行前用于构建测试环境的模块。</li>
<li>moduleFileExtensions：测试脚本所加载的模块扩展名。</li>
<li>modulePathIgnorePatterns：忽略的模块正则。</li>
<li>testPathIgnorePatterns：忽略的测试正则。</li>
<li>testRegex：测试文件正则。</li>
<li>collectCoverageFrom：覆盖率测试所需包含的文件。</li>
<li>moduleNameMapper：正则到模块名的 map 映射，这些模块将不会被模拟，无论启动自动模拟与否。</li>
<li>transform：正则到 transformer 转译器的 map 映射。转译器负责将使用最新语法写成的脚本（包含 ts、es6）转换成 es5 语法。jest 官网提供的自定义转译器如 <a href="https://jestjs.io/docs/zh-Hans/tutorial-react#custom-transformers" target="_blank" rel="noopener">babel-transformer</a>，用于替换 <a href="https://github.com/facebook/jest/tree/master/packages/babel-jest" target="_blank" rel="noopener">babel-jest</a>。</li>
<li>transformIgnorePatterns：转译器忽略的文件正则。</li>
<li>snapshotSerializers：快照序列化模块。</li>
<li>testURL：测试用的 jsdom 环境，应用于获取 location.href。</li>
<li>globals：测试用的全局变量。</li>
</ul>
<h2 id="api"><a href="#api" class="headerlink" title="api"></a>api</h2><h3 id="Globals"><a href="#Globals" class="headerlink" title="Globals"></a>Globals</h3><ul>
<li>beforeAll(fn, timeout)、afterAll(fn, timeout)：测试脚本调用前执行一次。</li>
<li>beforeEach(fn, timeout)、afterEach(fn, timeout)：每个测试脚本调用时均执行一次。</li>
<li>describe(name, fn)、describe.each(table)(name, fn, timeout)、describe.only(name, fn)、describe.only.each(table)(name, fn)、describe.skip(name, fn)、escribe.skip.each(table)(name, fn)：测试套件。</li>
<li>test(name, fn, timeout)、test.each(table)(name, fn, timeout)：编写测试脚本，test 可以使用 it 替换。</li>
<li>test.only(name, fn, timeout)、test.only.each(table)(name, fn)：只执行某测试脚本。</li>
<li>test.skip(name, fn)、test.skip.each(table)(name, fn)：跳过的测试脚本。</li>
<li>test.todo(name)：待添加的测试脚本，高亮显示。</li>
</ul>
<h3 id="Expect"><a href="#Expect" class="headerlink" title="Expect"></a>Expect</h3><ul>
<li>expect.extend(matchers)：设置额外的匹配器 { [matcherName]: () =&gt; ({ message: Function, pass: boolean }) }，匹配器可以是 async 函数。匹配器可以通过 expect(value)[matcherName] 调用。</li>
<li>expect.addSnapshotSerializer(serializer)：添加快照序列化函数。</li>
<li>expect(value)：value 为实际值。</li>
<li>expect(value).resolves、expect(value).rejects：promise 返回值。</li>
<li>expect(value).not：取反，如 expect.not.arrayContaining(array)。</li>
<li>except(mockFn).toBe(value)：判断相符。</li>
<li>except(mockFn).toHaveBeenCalled()、except(mockFn).toBeCalled()：判断模拟函数被调用。</li>
<li>except(mockFn).toHaveBeenCalledTimes(number)、except(mockFn).toBeCalledTimes(number)：判断模拟函数以指定参数被调用次数。</li>
<li>except(mockFn).toHaveBeenCalledWith(arg1, arg2, …)、except(mockFn).toBeCalledWith(arg1, arg2, …)：判断模拟函数以指定参数调用。</li>
<li>except(mockFn).toHaveBeenLastCalledWith(arg1, arg2, …)、except(mockFn).lastCalledWith(arg1, arg2, …)：判断模拟函数最后一次以指定参数调用。</li>
<li>except(mockFn).toHaveBeenNthCalledWith(nthCall, arg1, arg2, ….)、except(mockFn).nthCalledWith(nthCall, arg1, arg2, …)：判断模拟函数以指定参数形式调用。</li>
<li>except(mockFn).toHaveReturned()、except(mockFn).toReturn()：判断模拟函数正常返回。</li>
<li>except(mockFn).toHaveReturnedTimes(number)、except(mockFn).toReturnTimes(number)：判断模拟函数返回值次数。</li>
<li>except(mockFn).toHaveReturnedWith(value)、except(mockFn).toReturnWith(value)：判断模拟函数返回了指定值。</li>
<li>except(mockFn).toHaveLastReturnedWith(value)：判断模拟函数的最后一个返回值。</li>
<li>except(mockFn).toHaveNthReturnedWith(nthCall, value)：判断模拟函数第 n 次返回结果是否为某值。</li>
<li>except(value).toHaveLength(number)：判断长度。</li>
<li>except(value).toHaveProperty(keyPath, value?)：判断对象是否包含某属性。</li>
<li>except(value).toBeCloseTo(number, numDigits?)、except(value).toBeGreaterThan(number)、except(value).toBeGreaterThanOrEqual(number)、except(value).toBeLessThan(number)、except(value).toBeLessThanOrEqual(number)：比较数值。</li>
<li>except(value).toBeInstanceOf(Class)：判断是否实例。</li>
<li>except(value).toBeNull()、except(value).toBeTruthy()、except(value).toBeFalsy()、except(value).toBeDefined()、except(value).toBeUndefined()、except(value).toBeNaN()：匹配 null、true、false、undefined 或 NaN 等。</li>
<li>except(value).toContain(item)、except(value).toContainEqual(item)：判断数组是否包含某元素。</li>
<li>except(value).toMatch(regexpOrString)：匹配正则或字符串。</li>
<li>except(value).toMatchObject(object)：匹配对象。</li>
<li>except(value).toMatchSnapshot(propertyMatchers?, hint?)、except(value).toMatchInlineSnapshot(propertyMatchers?, inlineSnapshot)：匹配快照。</li>
<li>expect(value).toEqual(value)、expect(value).toStrictEqual(value)：期望等值，toStrictEqual 方法额外会比较 undefined 值等。</li>
<li>expect(value).toThrow(error?)：期望报错。</li>
<li>expect(value).toThrowErrorMatchingSnapshot(hint?)、expect(value).toThrowErrorMatchingInlineSnapshot(inlineSnapshot)：期望报错内容与快照相符。</li>
</ul>
<h3 id="Mock-Functions"><a href="#Mock-Functions" class="headerlink" title="Mock Functions"></a>Mock Functions</h3><p>模拟函数 Mock Functions 也被称为 spies，它可用于监控函数的行为，不止于测试输出。jest.fn() 可用于创建模拟函数，如果参数没有传入实现，那么将返回默认值 undefined。以下 api 列表中，mockFn 等价于 jest.fn()：</p>
<ul>
<li>mockFn.mockImplementation(fn)、mockFn.mockImplementationOnce(fn)：设置模拟函数的实现，等价于 jest.fn(fn)。</li>
<li>mockFn.mockReturnThis()：模拟返回 this。</li>
<li>mockFn.mockReturnValue(value)、mockFn.mockReturnValueOnce(value)：模拟返回值。</li>
<li>mockFn.mockResolvedValue(value)、mockFn.mockResolvedValueOnce(value)：模拟 promise 返回值。</li>
<li>mockFn.mockRejectedValue(value)、mockFn.mockRejectedValueOnce(value)：模拟 promise 拒绝值。</li>
<li>mockFn.mockName(value)、mockFn.getMockName()：作为引用替代 jest.fn()。</li>
<li>mockFn.mock.calls：获取 jest.fn 调用时获得的参数，[[ arg1, arg2 ], [arg3]] 形式。</li>
<li>mockFn.mock.results：获取 jest.fn 的返回值，[{ type, value }] 形式。type 值可以是 ‘return’、’throw’、’incomplete’。</li>
<li>mockFn.mock.instances：获取以 jest.fn 作为构造函数的实例。</li>
<li>mockFn.mockClear：重置 mockFn.mock.calls、mockFn.mock.instances。</li>
<li>mockFn.mockReset：重置 mockFn.mock.calls、mockFn.mock.instances 以及返回值或实现 implementation。</li>
<li>mockFn.mockRestore：重置 mockFn.mock.calls、mockFn.mock.instances 以及返回值和实现 implementation。</li>
</ul>
<h3 id="Jest-Object"><a href="#Jest-Object" class="headerlink" title="Jest Object"></a>Jest Object</h3><ul>
<li>jest.disableAutomock、jest.enableAutomock：是否对外部引入的模块开启自动模拟功能。自动模拟功能一旦开启，模块导出方法将包含 _isMockFunction 属性，测试时须为真值；若非真值，则测试失败。</li>
<li>jest.genMockFromModule(modulePath)：加载模块，模块在加载时会按自动模拟机制带上 mock 属性，测试时须为真值。该方法通常可配合制作模拟模块，然后使用该方法进行加载。对于函数，该方法会创建模拟函数（该函数没有形参，且返回值也是 undefined）（该方法对 async 函数也有效）；对于类，该方法会创建新的类，且保留原有接口；对于对象，该方法会以深拷贝的方式模拟该对象；对于数组，该方法会创建一个与原数组长度相同、但元素为空值的数组；对于 string, number, bigint, boolean, null, undefined, symbol 原始类型，该方法会创建相同的模拟值。</li>
<li>jest.mock(moduleName, factory, options)：模拟一个模块，jest 会使用自动模拟机制为模块添加模拟版本号。如果没有传入 factory，模拟模块将是返回 undefined 的函数；factory 可以作为模拟函数。</li>
<li>jest.unmock(moduleName)：加载模块时不会使用自动模拟机制。</li>
<li>jest.doMock(moduleName, factory, options)：当使用 babel-jest 转译时，jest.mock 会提升到测试脚本的顶部，jest.doMock 不会。jest.doMock 适合用于模拟同一模块的不同导出，该模块在测试脚本中仍需要加载。</li>
<li>jest.dontMock(moduleName)：当使用 babel-jest 转译时，jest.unmock 会提升到测试脚本的顶部，jest.dontMock 不会。</li>
<li>jest.setMock(moduleName, moduleExports)：指定模块返回的模拟对象。</li>
<li>jest.requireActual(moduleName)：获取实际的模块，用于构建模拟对象。</li>
<li>jest.requireMock(moduleName)：为模块构建一个模拟对象。</li>
<li>jest.resetModules()：重置所有加载的模块。</li>
<li>jest.isolateModules(fn)：创建沙箱，用于以回调形式加载模块。</li>
<li>jest.fn(implementation)、jest.isMockFunction(fn)：创建模拟函数。</li>
<li>jest.spyOn(object, methodName)：追踪 object[methodName] 方法的调用情况。若想为 object[methodName] 创建模拟函数，可以使用 jest.spyOn(object, methodName).mockImplementation(() =&gt; customImplementation)、object[methodName] = jest.fn(() =&gt; customImplementation)。</li>
<li>jest.spyOn(object, methodName, accessType?)：监听访问器的调用情况，accessType 可以是 get 或者 set。</li>
<li>jest.clearAllMocks()、jest.resetAllMocks()：重置 mock.calls、mock.instances。</li>
<li>jest.restoreAllMocks()：将模拟函数重置为初始值。</li>
<li>jest.useFakeTimers()：模拟 setTimeout, setInterval, clearTimeout, clearInterval, nextTick, setImmediate, clearImmediate。</li>
<li>jest.useRealTimers()：采用实际的 setTimeout, setInterval, clearTimeout, clearInterval, nextTick, setImmediate, clearImmediate。</li>
<li>jest.runAllTicks()：等价于使用 process.nextTick 执行 micro-task 队列。</li>
<li>jest.runAllTimers()：等价于使用 setTimeout, setInterval, setImmediate 执行 macro-task 队列以及  process.nextTick 执行 micro-task 队列。</li>
<li>jest.runAllImmediates()：等价于调用 setImmediate。</li>
<li>jest.advanceTimersByTime(msToRun)、jest.runTimersToTime(msToRun)：等价于使用 setTimeout, setInterval, setImmediate 执行 macro-task 队列。</li>
<li>jest.runOnlyPendingTimers()：等价于使用 setTimeout, setInterval 执行被中断的 macro-task 队列（新添加的 macro-task 依旧不会执行）。</li>
<li>jest.advanceTimersToNextTimer(steps)：提前执行下一个 timeout 或 interval。</li>
<li>jest.clearAllTimers()：中止所有计时器。</li>
<li>jest.getTimerCount()：获取待执行的计时器个数。</li>
<li>jest.setTimeout(timeout)：设置计时。</li>
<li>jest.retryTimes(count)：定时器重试。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.aliued.com/?p=4095" target="_blank" rel="noopener">React应用下的单元测试</a><br><a href="http://www.voidcn.com/article/p-ftetcszg-btt.html" target="_blank" rel="noopener">JavaScript – 使用Jest和Webpack别名进行测试</a><br><a href="https://www.cnblogs.com/zaking/p/10582228.html" target="_blank" rel="noopener">在vue中如何配置Jest</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>前端工程化</category>
      </categories>
      <tags>
        <tag>carrier</tag>
      </tags>
  </entry>
  <entry>
    <title>聊聊组件库中样式文件组织</title>
    <url>/2019/12/22/frontend/antd/%E8%81%8A%E8%81%8A%E7%BB%84%E4%BB%B6%E5%BA%93%E4%B8%AD%E6%A0%B7%E5%BC%8F%E6%96%87%E4%BB%B6%E7%BB%84%E7%BB%87/</url>
    <content><![CDATA[<h2 id="antd"><a href="#antd" class="headerlink" title="antd"></a>antd</h2><p>antd 基于 <a href="https://github.com/necolas/normalize.css" target="_blank" rel="noopener">normalize.css</a> 制作了重置样式 <a href="https://github.com/ant-design/ant-design/blob/master/components/style/core/base.less" target="_blank" rel="noopener">base.less</a>。</p>
<p>按 <a href="https://github.com/ant-design/babel-plugin-import" target="_blank" rel="noopener">babel-plugin-import</a> 按需加载功能的实现机制，样式文件须放在 style 文件夹下，并以 index 文件形式导出。</p>
<h3 id="色彩模式"><a href="#色彩模式" class="headerlink" title="色彩模式"></a>色彩模式</h3><p>antd 定义了一套 <a href="https://ant.design/docs/spec/colors-cn" target="_blank" rel="noopener">色彩模式（Color Palettes）</a>。可以发现，antd 中的 <a href="https://github.com/ant-design/ant-design/blob/master/components/style/color/colorPalette.less" target="_blank" rel="noopener">colorPalette.less</a> 与 <a href="https://github.com/ant-design/ant-design-colors/blob/master/src/generate.ts" target="_blank" rel="noopener">@ant-design/color</a> 有相同的实现：基于 <a href="https://github.com/clearbladeplatform/tinycolor2" target="_blank" rel="noopener">tinycolor2</a> 以 Hue - Saturation - Value （色调-饱和度-明度）模型处理颜色，通过旋转色相、增减饱和度、增减亮度的方式生成色板。基本原理可以参考 <a href="https://blog.csdn.net/weixin_33813128/article/details/88039468" target="_blank" rel="noopener">Ant Design 色板生成算法演进之路</a>。通过这篇文章，也能了解到 antd 中提供 <a href="https://github.com/ant-design/ant-design/blob/master/components/style/color/bezierEasing.less" target="_blank" rel="noopener">颜色的贝塞尔曲线算法</a> 的意义，贝塞尔曲线的算法实现来自于 <a href="https://github.com/gre/bezier-easing" target="_blank" rel="noopener">bezier-easing</a>。。有所差别的是，在 antd 组件库中，基于主色生成色板的 generate 函数使用 less 函数制作。关于 less 函数，可参考 <a href="https://www.cnblogs.com/mabylove/p/8206264.html" target="_blank" rel="noopener">less-mixin 之 @functions 趣谈</a>。</p>
<h3 id="动效"><a href="#动效" class="headerlink" title="动效"></a>动效</h3><p>antd 使用 <a href="https://github.com/ant-design/ant-design/blob/master/components/style/mixins/motion.less" target="_blank" rel="noopener">make-motion(@className, @keyframeName, @duration) 混入</a> 制作动效，动效的样式类为 @{className}-enter、@{className}-enter-active、@{className}-appear、@{className}-appear-active、@{className}-leave、@{className}-leave-active，动画名为 @{keyframeName}In、@{keyframeName}Out。除此之外，make-motion 混入限定了 animation-duration、animation-fill-mode、animation-play-state 样式。在 make-motion 混入之上，antd 提供 <a href="https://github.com/ant-design/ant-design/blob/master/components/style/core/motion/fade.less" target="_blank" rel="noopener">fade 显隐</a>、<a href="https://github.com/ant-design/ant-design/blob/master/components/style/core/motion/move.less" target="_blank" rel="noopener">move 移动</a>、<a href="https://github.com/ant-design/ant-design/blob/master/components/style/core/motion/slide.less" target="_blank" rel="noopener">slide 滑动</a>、<a href="https://github.com/ant-design/ant-design/blob/master/components/style/core/motion/swing.less" target="_blank" rel="noopener">swing 抖动</a>、<a href="https://github.com/ant-design/ant-design/blob/master/components/style/core/motion/zoom.less" target="_blank" rel="noopener">zoom 缩放</a> 动效，以及 loadingCircle 加载、点击动画等。</p>
<h3 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h3><p>除了上文提到的 make-motion 混入以外，antd 还提供了以下混入：clearfix、reset-component、placeholder（用于解决兼容性问题）、iconfont-mixin（字体样式）、operation-uni（可操作的链接文案样式）、size、square、typography-paragraph（段落） 等。</p>
<h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>antd 基于 less 的 <a href="https://ant.design/docs/react/customize-theme-cn" target="_blank" rel="noopener">modifyVars</a> 机制实现了定制主题功能，即将可定制的样式定义为 less 变量，随后以 less-loader 引用外部 less 文件的形式实现定制。可定制的样式见于 <a href="https://github.com/ant-design/ant-design/blob/master/components/style/core/base.less" target="_blank" rel="noopener">base.less</a>。</p>
<h2 id="fusion"><a href="#fusion" class="headerlink" title="fusion"></a>fusion</h2><img src="/2019/12/22/frontend/antd/聊聊组件库中样式文件组织/style.png">
<p>fusion 的重置样式同样来自于 <a href="https://github.com/necolas/normalize.css" target="_blank" rel="noopener">normalize.css</a>。</p>
<p>fusion 的基本样式变量基本如 <a href="https://fusion.design/design/tokens?type=theme&amp;themeid=3" target="_blank" rel="noopener">Design Tokens 设计标注</a> 所示，样式文件可参考 <a href="https://github.com/alibaba-fusion/next/tree/master/src/core/style" target="_blank" rel="noopener">style</a>。</p>
<p>fusion 提供了以下函数：strip-units（移除单位）、is-length（校验是否为合法的 css 长度）、em（将 px 像素转化为 em 单位）、unpack（转化为四值属性，适用于 margin、padding、position）、corner-maker（圆角生成器）、shadow-maker（阴影生成器），可参考 <a href="https://github.com/alibaba-fusion/next/blob/master/src/core/util/_function.scss" target="_blank" rel="noopener">function.scss</a>。</p>
<p>fusion 支持的混入包含 clearfix、ellipsis、multi-line-ellipsis（单多行截取文本）、hide-text、center-tl、center-td、size、position、triangle（三角形生成器）、box-sizing（边框模式）、icon-size、icon-square-size、font-face-handler、button-color、button-size，可参考 <a href="https://github.com/alibaba-fusion/next/blob/master/src/core/util/_mixin.scss" target="_blank" rel="noopener">mixin.scss</a>。</p>
<p>fusion 又定义了表单控件、蒙层、弹层的基本样式，可参考 <a href="https://github.com/alibaba-fusion/next/tree/master/src/core/utility" target="_blank" rel="noopener">utility</a>。</p>
<p>fusion 的组件样式基本由 main.scss、rtl.scss、scss/mixin.scss（混入）、scss/normalize.scss、scss/variable.scss（变量）等文件构成。</p>
<h2 id="element"><a href="#element" class="headerlink" title="element"></a>element</h2><p>element 依循 BEM 规范制作样式。BEN 规范可参考 <a href="https://www.jianshu.com/p/339fdb93e155" target="_blank" rel="noopener">前端领域的BEM到底是什么</a>。</p>
<p>element 将样式单独抽出为 <a href="https://github.com/ElementUI/theme-chalk.git" target="_blank" rel="noopener">element-theme-chalk</a>。element 可定制的样式定义在 <a href="https://github.com/ElemeFE/element/blob/dev/packages/theme-chalk/src/common/var.scss" target="_blank" rel="noopener">var.scss</a> 中。</p>
<p>element 支持的混入包含 res（根据断点作媒体查询）、scroll-bar（滚动条）、placeholder、b、e、m、configurable-m、spec-selector、meb、when、extend-rule、share-rule、pseudo（伪类）；utils-user-select、utils-clearfix、utils-vertical-center、utils-ellipsis；button-plain、button-variant、button-size。</p>
<p>element 支持的动画包含 model 显隐、显隐、zoom 缩放等。</p>
<p>组件的样式均由一个 scss 文件编写。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>antd</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>java 知识点</title>
    <url>/2019/12/21/backend/java/Java%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>java 注解与 js 装饰器拥有相当不同的实现方式：java 有编译过程，因此可以使用语法约定注解的意义，脱离了编译过程，注解将毫无意义；js 引擎却没有对装饰器给予有效支持，因此 js 装饰器在 babel 等工具中表现为使用高阶函数封装原类或方法。java 注解本质上都是集成了 java.lang.Annotation 的接口，接口名前加 @interface 标识声明。有以下四种元注解可以标识注解的目标、生命周期、是否包含在 JavaDoc 文档中、是否允许子类继承，分别是 @Target、@Retention、@Documented、@Inherited。</p>
<p>@Target 注解包含以下值：</p>
<ul>
<li>ElementType.TYPE：允许被修饰的注解作用在类、接口和枚举上</li>
<li>ElementType.FIELD：允许作用在属性字段上</li>
<li>ElementType.METHOD：允许作用在方法上</li>
<li>ElementType.PARAMETER：允许作用在方法参数上</li>
<li>ElementType.CONSTRUCTOR：允许作用在构造器上</li>
<li>ElementType.LOCAL_VARIABLE：允许作用在本地局部变量上</li>
<li>ElementType.ANNOTATION_TYPE：允许作用在注解上</li>
<li>ElementType.PACKAGE：允许作用在包上</li>
</ul>
<p>@Retention 注解包含以下值：</p>
<ul>
<li>RetentionPolicy.SOURCE：当前注解编译期可见，不会写入 class 文件</li>
<li>RetentionPolicy.CLASS：类加载阶段丢弃，会写入 class 文件</li>
<li>RetentionPolicy.RUNTIME：永久保存，可以反射获取</li>
</ul>
<p>更多内容参考 <a href="https://www.cnblogs.com/yangming1996/p/9295168.html" target="_blank" rel="noopener">JAVA 注解的基本原理</a>。</p>
<h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>java 文件经编译器编译成 class 文件，class 文件由虚拟机加载并创建对应的 java.lang.Class 对象实例。虚拟机提供了三种类加载器：Bootstrap 启动类加载器、Extension 扩展类加载器、System 系统类加载器。启动类加载器主要加载的虚拟机自身所需的类（使用 C++ 实现），包含 &lt;JAVA_HOME&gt;/lib 路径下的核心类库以及 -Xbootclasspath 参数指定路径下的 jar 包。扩展类加载器负责加载”标准的扩展“，包含 &lt;JAVA_HOME&gt;/lib/ext 目录下或者由系统变量 -Djava.ext.dir 指定路径中的类库。系统类加载器负责加载系统类路径 java -classpath 或 -D java.class.path 指定路径下的类库。虚拟机对 class 文件采用按需加载的方式，并使用双亲委派模式，即先有父类加载器处理，如果加载失败，再交由子类加载器处理。类加载器的典型使用如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建 URL 资源</span></span><br><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">"file:///path/to/plugin.jar"</span>);</span><br><span class="line"><span class="comment">// 2. 创建 URLClassLoader 实例，URLClassLoader 会通过给定的 URL 加载类</span></span><br><span class="line">URLClassLoader pluginLoader = <span class="keyword">new</span> URLClassLoader(<span class="keyword">new</span> URL[] &#123; url &#125;);</span><br><span class="line"><span class="comment">// 3. 加载指定包下的类</span></span><br><span class="line">Class&lt;?&gt; cl = pluginLoader.loadClass(<span class="string">"mypackage.MyClass"</span>);</span><br></pre></td></tr></table></figure>
<p>自定义的加载器可以通过集成 ClassLoader 实现。ClassLoader#loadClass 方法的职责是将类的加载操作委托给父类加载器，当父类加载器无法加载时，就会转而使用 ClassLoader#findClass。因此自定义的加载逻辑推荐实现在 ClassLoader#findClass 方法中。</p>
<p>每个线程都由对类加载器的引用，称为上下文类加载器。主线程的上下文加载器是系统类加载器。当新线程创建时，它的上下文类加载器会被设置成创建该线程的上下文类加载器。线程的上下文类加载器可以通过 thread#setContextClassLoader 方法改写。</p>
<p>更多内容参考 <a href="https://www.cnblogs.com/mybatis/p/9396135.html" target="_blank" rel="noopener">深入理解Java类加载器</a>。</p>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>java 的反射机制用于动态获取任意一个对象的方法和属性等信息以及动态调用对象方法。更多内容参考 <a href="https://www.jianshu.com/p/9be58ee20dee" target="_blank" rel="noopener">Java高级特性——反射</a>。</p>
<h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2>]]></content>
      <categories>
        <category>backend</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>RMI</title>
    <url>/2019/12/21/backend/%E8%BF%9C%E7%A8%8B%E9%80%9A%E4%BF%A1/RMI/</url>
    <content><![CDATA[<h2 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h2><p>分布式编程即当客户端调用某方法时，产生一个请求发送到服务器上，然后取回响应。RMI（远程方法调用）的实现思路植根于：在客户端和服务端均安装代理，由客户端代理将客户端方法调用转换成请求（包含服务器地址、所调用方法、传参等信息），服务端代理通过请求执行服务端方法，并向客户端发送响应。服务端接口实例（实现 Remote 接口、扩展 UnicastRemoteObject 类）须通过 InitialContext 实例注册到 RMI 注册表中，客户端就可以通过 InitialContext#list 或 InitialContext#lookup 方法获取到代理对象（称为存根）。</p>
<h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><h2 id="web-服务"><a href="#web-服务" class="headerlink" title="web 服务"></a>web 服务</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cloud.tencent.com/developer/article/1353191" target="_blank" rel="noopener">RMI与RPC的区别</a><br><a href="https://blog.csdn.net/mingtianhaiyouwo/article/details/50513577" target="_blank" rel="noopener">Java RMI 简介及其优劣势总结</a><br><a href="https://blog.csdn.net/kouzhaokui/article/details/89176541" target="_blank" rel="noopener">EJB到底是什么？</a><br><a href="https://www.jianshu.com/p/7d6853140e13" target="_blank" rel="noopener">什么是RPC？</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>远程通信</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>聊聊 antd 网站是怎么制作的</title>
    <url>/2019/12/21/frontend/antd/%E8%81%8A%E8%81%8A%20antd%20%E7%BD%91%E7%AB%99%E6%98%AF%E6%80%8E%E4%B9%88%E5%88%B6%E4%BD%9C%E7%9A%84/</url>
    <content><![CDATA[<p>翻看 <a href="https://github.com/ant-design/ant-design" target="_blank" rel="noopener">ant-design</a> 仓库，可以发现以下形式的 markdown 文档，这篇文章旨在于解答这样一个问题：ant design 是怎样把这些文档渲染成页面的。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">// ant-design Button 组件 demo</span><br><span class="line">// 注释：元数据内容</span><br><span class="line">---</span><br><span class="line">order: 0</span><br><span class="line">title:</span><br><span class="line">  zh-CN: 按钮类型</span><br><span class="line">  en-US: Type</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">// 注释：主体内容</span><br><span class="line"><span class="section">## zh-CN</span></span><br><span class="line"></span><br><span class="line">按钮有五种类型：主按钮、次按钮、虚线按钮、危险按钮和链接按钮。主按钮在同一个操作区域最多出现一次。</span><br><span class="line"></span><br><span class="line"><span class="section">## en-US</span></span><br><span class="line"></span><br><span class="line">There are <span class="code">`primary`</span> button, <span class="code">`default`</span> button, <span class="code">`dashed`</span> button, <span class="code">`danger`</span> button and <span class="code">`link`</span> button in antd.</span><br><span class="line"></span><br><span class="line"><span class="code">```jsx</span></span><br><span class="line"><span class="code">import &#123; Button &#125; from 'antd';</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">ReactDOM.render(</span></span><br><span class="line"><span class="code">  &lt;div&gt;</span></span><br><span class="line"><span class="code">    &lt;Button type="primary"&gt;Primary&lt;/Button&gt;</span></span><br><span class="line"><span class="code">    &lt;Button&gt;Default&lt;/Button&gt;</span></span><br><span class="line"><span class="code">    &lt;Button type="dashed"&gt;Dashed&lt;/Button&gt;</span></span><br><span class="line"><span class="code">    &lt;Button type="danger"&gt;Danger&lt;/Button&gt;</span></span><br><span class="line"><span class="code">    &lt;Button type="link"&gt;Link&lt;/Button&gt;</span></span><br><span class="line"><span class="code">  &lt;/div&gt;,</span></span><br><span class="line"><span class="code">  mountNode,</span></span><br><span class="line"><span class="code">);</span></span><br></pre></td></tr></table></figure>
<p>在深入具体实现之前，先简要描述下 ant-design 的大致处理思路。为了将 markdown 文档渲染成静态网页，我们可以使用 webpack 加载器逐个加载 markdown 文件，在加载器中借助 <a href="https://github.com/markdown-it/markdown-it" target="_blank" rel="noopener">markdown-it</a> 解析这些文件（element-ui 就是基于 <a href="https://github.com/ulivz/markdown-it-chain" target="_blank" rel="noopener">markdown-it-chain</a> 实现的）（fusion 通过 node 服务在服务端使用 <a href="https://github.com/gnab/remark" target="_blank" rel="noopener">remark</a> 解析 markdown 文件）。与此不同的是，ant-design 并没有采用显式逐个加载 markdown 文件的方式，而是制作 entry 入口文件。入口文件使用 import 语句导入了占位用的 data.js 文件；在 data.js 文件加载过程中，ant-design 借助 webpack 加载器机制将指定目录的 markdown 文件解析成数据，作为 data.js 占位文件的加载内容。这一部分工作由 <a href="https://github.com/benjycui/bisheng" target="_blank" rel="noopener">bisheng</a> 完成。以下是 bisheng 启动开发服务器的主要流程。</p>
<img src="/2019/12/21/frontend/antd/聊聊%20antd%20网站是怎么制作的/bisheng.png">
<p>我们把 ant-design 网站的渲染机制分为两个部分：markdown 数据生成、markdown 数据渲染。</p>
<h2 id="markdown-数据生成"><a href="#markdown-数据生成" class="headerlink" title="markdown 数据生成"></a>markdown 数据生成</h2><h3 id="mark-twain"><a href="#mark-twain" class="headerlink" title="mark-twain"></a>mark-twain</h3><p><a href="https://github.com/benjycui/mark-twain" target="_blank" rel="noopener">mark-twain</a> 首先借助 <a href="https://github.com/dworthen/js-yaml-front-matter" target="_blank" rel="noopener">yaml-front-matter</a> 将 markdown 解析成 json 对象（该对象的 _content 属性为 markdown 中的主体内容），然后通过 <a href="https://github.com/gnab/remark" target="_blank" rel="noopener">remark</a> 将 _content 内容解析成抽象语法树，最后由 mark-twain 的 <a href="https://github.com/benjycui/mark-twain/blob/master/src/transformer.js" target="_blank" rel="noopener">转换器</a> 将抽象语法树中的 root 等节点替换成可渲染的 html 节点。</p>
<p>yaml-front-matter 自身借助 <a href="https://github.com/nodeca/js-yaml" target="_blank" rel="noopener">js-yaml</a> 实现。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"meta"</span>: &#123;</span><br><span class="line">    <span class="string">"order"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"title"</span>: &#123;</span><br><span class="line">      <span class="string">"zh-CN"</span>: <span class="string">"按钮类型"</span>,</span><br><span class="line">      <span class="string">"en-US"</span>: <span class="string">"Type"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"content"</span>:  [</span><br><span class="line">    <span class="string">"article"</span>,</span><br><span class="line">    [<span class="string">"h2"</span>, <span class="string">"zh-CN"</span>],</span><br><span class="line">    [<span class="string">"p"</span>, <span class="string">"按钮有五种类型：主按钮、次按钮、虚线按钮、危险按钮和链接按钮。主按钮在同一个操作区域最多出现一次。"</span>],</span><br><span class="line">    [<span class="string">"h2"</span>, <span class="string">"en-US"</span>],</span><br><span class="line">    [<span class="string">"p"</span>, <span class="string">"There are `primary` button, `default` button, `dashed` button, `danger` button and `link` button in antd."</span>],</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"pre"</span>,</span><br><span class="line">      &#123; <span class="string">"lang"</span>: <span class="string">"jsx"</span> &#125;,</span><br><span class="line">      &#123; <span class="string">"code"</span>: <span class="string">"import &#123; Button &#125; from 'antd';..."</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="bisheng"><a href="#bisheng" class="headerlink" title="bisheng"></a>bisheng</h3><p><a href="https://github.com/benjycui/bisheng" target="_blank" rel="noopener">bisheng</a> 在 mark-twain 的基础上，使用 child-process 启动多进程解析 markdown 文件，编译任务通过 node 进程的通信机制从主进程流入到子进程中，编译结果也通过 node 进程的通信机制从子进程带出到主进程中，详情可以参看 <a href="https://github.com/benjycui/bisheng/blob/master/packages/bisheng/src/loaders/common/boss.js" target="_blank" rel="noopener">boss.js</a>。实际的编译操作见于 <a href="https://github.com/benjycui/bisheng/blob/master/packages/bisheng/src/utils/source-data.js" target="_blank" rel="noopener">source-data.js</a> 文件，即如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// process 方法会在子进程被使用</span></span><br><span class="line">exports.process = (</span><br><span class="line">  filename,<span class="comment">// markdown 文件名</span></span><br><span class="line">  fileContent,<span class="comment">// markdown 文件内容</span></span><br><span class="line">  plugins,<span class="comment">// 插件</span></span><br><span class="line">  transformers = [],<span class="comment">// 转换函数，包含内置的 transformers/markdown（使用 mark-twain 编译）</span></span><br><span class="line">  isBuild,<span class="comment">// 是否生产环境</span></span><br><span class="line">) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> transformerIndex = <span class="number">-1</span>;</span><br><span class="line">  <span class="comment">// 对于不同的文件使用不同的 transformer</span></span><br><span class="line">  transformers.some(<span class="function">(<span class="params">&#123; test &#125;, index</span>) =&gt;</span> &#123;</span><br><span class="line">    transformerIndex = index;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(test).test(filename); <span class="comment">// eslint-disable-line no-eval</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> transformer = transformers[transformerIndex];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 编译</span></span><br><span class="line">  <span class="keyword">const</span> markdown = <span class="built_in">require</span>(transformer.use)(filename, fileContent);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用插件进行处理，包含内置插件 bisheng-plugin-highlight 用于处理 jsx 等脚本</span></span><br><span class="line">  <span class="comment">// 以及 bisheng-plugin-description、bisheng-plugin-toc、bisheng-plugin-antd、bisheng-plugin-react</span></span><br><span class="line">  <span class="keyword">const</span> parsedMarkdown = plugins.reduce(</span><br><span class="line">    (markdownData, plugin) =&gt;</span><br><span class="line">      <span class="built_in">require</span>(plugin[<span class="number">0</span>])(markdownData, plugin[<span class="number">1</span>], isBuild === <span class="literal">true</span>),</span><br><span class="line">    markdown,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> parsedMarkdown;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>上文解释了 markdown 文件一旦被加载，它就会通过 process 方法被编译成 json 数据并输出。那么，markdown 文件是怎么被加载的呢？我们可以在 <a href="https://github.com/benjycui/bisheng/blob/master/packages/bisheng/src/config/updateWebpackConfig.js" target="_blank" rel="noopener">updateWebpackConfig.js</a> 文件中找到如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">webpackConfig.module.rules.push(&#123;</span><br><span class="line">  test(filename) &#123;</span><br><span class="line">    <span class="keyword">return</span> filename === path.join(bishengLib, <span class="string">'utils'</span>, <span class="string">'data.js'</span>) ||</span><br><span class="line">      filename === path.join(bishengLib, <span class="string">'utils'</span>, <span class="string">'ssr-data.js'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  loader: path.join(bishengLibLoaders, <span class="string">'bisheng-data-loader'</span>),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>即在加载占位用的 data.js 文件时，bisheng 会使用内置的 <a href="https://github.com/benjycui/bisheng/blob/master/packages/bisheng/src/loaders/bisheng-data-loader.js" target="_blank" rel="noopener">bisheng-data-loader</a> 加载器加以处理。这个加载器的作用无他，就是扫描 bishengconfig 配置的 source 源文件夹下的 markdown 文件（bisheng 通过 <a href="http://ramda.cn/" target="_blank" rel="noopener">ramda</a> 将 markdown 文件解析成树形结构），并调用 boss.js 进行解析。这里干脆贴出附带说明的源码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">bishengDataLoader</span>(<span class="params"><span class="regexp">/* content */</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.cacheable) &#123;</span><br><span class="line">    <span class="keyword">this</span>.cacheable();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; bishengConfig, themeConfig &#125; = context;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// markdown 全量文件</span></span><br><span class="line">  <span class="keyword">const</span> markdown = sourceData.generate(bishengConfig.source, bishengConfig.transformers);</span><br><span class="line">  <span class="keyword">const</span> browserPlugins = resolvePlugins(themeConfig.plugins, <span class="string">'browser'</span>);</span><br><span class="line">  <span class="keyword">const</span> pluginsString = browserPlugins</span><br><span class="line">    .map(<span class="function"><span class="params">plugin</span> =&gt;</span> <span class="string">`[require('<span class="subst">$&#123;plugin[<span class="number">0</span>]&#125;</span>'), <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(plugin[<span class="number">1</span>])&#125;</span>]`</span>)</span><br><span class="line">    .join(<span class="string">',\n'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> callback = <span class="keyword">this</span>.async();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> picked = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> pickedPromises = []; <span class="comment">// Flag to remind loader that job is done.</span></span><br><span class="line">  <span class="keyword">if</span> (themeConfig.pick) &#123;</span><br><span class="line">    <span class="keyword">const</span> nodePlugins = resolvePlugins(themeConfig.plugins, <span class="string">'node'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历 markdown 文件并作解析</span></span><br><span class="line">    sourceData.traverse(markdown, (filename) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> fileContent = fs.readFileSync(path.join(process.cwd(), filename)).toString();</span><br><span class="line">      pickedPromises.push(<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        boss.queue(&#123;</span><br><span class="line">          filename,</span><br><span class="line">          content: fileContent,</span><br><span class="line">          plugins: nodePlugins,</span><br><span class="line">          transformers: bishengConfig.transformers,</span><br><span class="line">          isBuild: context.isBuild,</span><br><span class="line">          <span class="comment">// 回调处理解析内容，包含 pick 分块</span></span><br><span class="line">          callback(err, result) &#123;</span><br><span class="line">            <span class="keyword">const</span> parsedMarkdown = <span class="built_in">eval</span>(<span class="string">`(<span class="subst">$&#123;result&#125;</span>)`</span>); <span class="comment">// eslint-disable-line no-eval</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">Object</span>.keys(themeConfig.pick).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (!picked[key]) &#123;</span><br><span class="line">                picked[key] = [];</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">const</span> picker = themeConfig.pick[key];</span><br><span class="line">              <span class="keyword">const</span> pickedData = picker(parsedMarkdown);</span><br><span class="line">              <span class="keyword">if</span> (pickedData) &#123;</span><br><span class="line">                picked[key].push(pickedData);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            resolve();</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将数据内容回写到 data.js 占位文件中</span></span><br><span class="line">  <span class="built_in">Promise</span>.all(pickedPromises)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> sourceDataString = sourceData.stringify(markdown, &#123;</span><br><span class="line">        lazyLoad: themeConfig.lazyLoad,</span><br><span class="line">      &#125;);</span><br><span class="line">      callback(</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        <span class="string">'module.exports = &#123;'</span> +</span><br><span class="line">          <span class="string">`\n  markdown: <span class="subst">$&#123;sourceDataString&#125;</span>,`</span> +</span><br><span class="line">          <span class="string">`\n  picked: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(picked, <span class="literal">null</span>, <span class="number">2</span>)&#125;</span>,`</span> +</span><br><span class="line">          <span class="string">`\n  plugins: [\n<span class="subst">$&#123;pluginsString&#125;</span>\n],`</span> +</span><br><span class="line">          <span class="string">'\n&#125;;'</span>,</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="markdown-数据渲染"><a href="#markdown-数据渲染" class="headerlink" title="markdown 数据渲染"></a>markdown 数据渲染</h2><h3 id="路由信息"><a href="#路由信息" class="headerlink" title="路由信息"></a>路由信息</h3><p>解析后的 markdown 数据会经由入口文件流入到路由信息获取函数中。入口文件负责直接调用路由信息获取函数，以供 react-router 使用。一般情况下，仅需要根据访问路径获取到对用的 markdown 数据，并使用配置约定的 React 组件进行渲染即可；特殊情况下，需要对流入组件的 props 数据进行转换（比如 Button 组件的 demo 数据就需要先添加到 props 中），这时会使用 collector 收集齐加以处理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ant-design 中的路由配置</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  routes: &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    component: <span class="string">'./template/Layout/index'</span>,</span><br><span class="line">    indexRoute: &#123; <span class="attr">component</span>: homeTmpl &#125;,</span><br><span class="line">    childRoutes: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'app-shell'</span>,</span><br><span class="line">        component: appShellTmpl,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'index-cn'</span>,</span><br><span class="line">        component: homeTmpl,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'docs/react/:children'</span>,</span><br><span class="line">        component: contentTmpl,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'changelog'</span>,</span><br><span class="line">        component: contentTmpl,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'changelog-cn'</span>,</span><br><span class="line">        component: contentTmpl,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'components/:children/'</span>,</span><br><span class="line">        component: contentTmpl,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">'docs/spec/:children'</span>,</span><br><span class="line">        component: contentTmpl,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bisheng 中的路由信息获取函数，data 为解析后的 markdown 全量数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRoutes</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 根据路由配置中的渲染组件以及 location 中的路由参数获得渲染函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">templateWrapper</span>(<span class="params">template, dataPath = <span class="string">''</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> Template = <span class="built_in">require</span>(<span class="string">`&#123;&#123; themePath &#125;&#125;/template<span class="subst">$&#123;template.replace(<span class="regexp">/^\.\/template/</span>, <span class="string">''</span>)&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">nextState, callback</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 生成实际访问路径信息</span></span><br><span class="line">      <span class="keyword">const</span> propsPath = calcPropsPath(dataPath, nextState.params);</span><br><span class="line">      <span class="comment">// 从全量的 markdown 数据中获取访问路径对应的 markdown 数据</span></span><br><span class="line">      <span class="keyword">const</span> pageData = exist.get(data.markdown, propsPath.replace(<span class="regexp">/^\//</span>, <span class="string">''</span>).split(<span class="string">'/'</span>));</span><br><span class="line">      <span class="comment">// utils.exist 判断 markdown 数据是否包含指定 key 键的信息</span></span><br><span class="line">      <span class="comment">// utils.toReactComponent 根据 markdown 数据获得渲染组件</span></span><br><span class="line">      <span class="keyword">const</span> utils = generateUtils(data, nextState);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// collector 用于处理 props</span></span><br><span class="line">      <span class="keyword">const</span> collector = (Template.default || Template).collector || defaultCollector;</span><br><span class="line">      <span class="keyword">const</span> dynamicPropsKey = nextState.location.pathname;</span><br><span class="line">      <span class="keyword">const</span> nextProps = &#123;</span><br><span class="line">        ...nextState,</span><br><span class="line">        themeConfig,</span><br><span class="line">        data: data.markdown,<span class="comment">// 全量 markdown 数据</span></span><br><span class="line">        picked: data.picked,<span class="comment">// 分块的 markdown 数据</span></span><br><span class="line">        pageData,</span><br><span class="line">        utils,</span><br><span class="line">      &#125;;</span><br><span class="line">      collector(nextProps)</span><br><span class="line">        .then(<span class="function">(<span class="params">collectedValue</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> Comp = Template.default || Template;</span><br><span class="line">            Comp[dynamicPropsKey] = &#123; ...nextProps, ...collectedValue &#125;;</span><br><span class="line">            callback(<span class="literal">null</span>, Comp);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123; <span class="built_in">console</span>.error(e) &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> Comp = NotFound.default || NotFound;</span><br><span class="line">          Comp[dynamicPropsKey] = nextProps;</span><br><span class="line">          callback(err === <span class="number">404</span> ? <span class="literal">null</span> : err, Comp);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取 theme 配置中的路由配置</span></span><br><span class="line">  <span class="keyword">const</span> themeRoutes = <span class="built_in">JSON</span>.parse(<span class="string">'&#123;&#123; themeRoutes | safe &#125;&#125;'</span>);</span><br><span class="line">  <span class="keyword">const</span> routes = <span class="built_in">Array</span>.isArray(themeRoutes) ? themeRoutes : [themeRoutes];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 基于路由配置生成 react-router 中可用的路由信息</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">processRoutes</span>(<span class="params">route</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(route)) &#123;</span><br><span class="line">      <span class="keyword">return</span> route.map(processRoutes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, route, &#123;</span><br><span class="line">      onEnter: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span> !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">          <span class="comment">// 加载进度条</span></span><br><span class="line">          NProgress.start();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      component: <span class="literal">undefined</span>,</span><br><span class="line">      getComponent: templateWrapper(route.component, route.dataPath || route.path),</span><br><span class="line">      indexRoute: route.indexRoute &amp;&amp; <span class="built_in">Object</span>.assign(&#123;&#125;, route.indexRoute, &#123;</span><br><span class="line">        component: <span class="literal">undefined</span>,</span><br><span class="line">        getComponent: templateWrapper(</span><br><span class="line">          route.indexRoute.component,</span><br><span class="line">          route.indexRoute.dataPath || route.indexRoute.path,</span><br><span class="line">        ),</span><br><span class="line">      &#125;),</span><br><span class="line">      childRoutes: route.childRoutes &amp;&amp; route.childRoutes.map(processRoutes),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> processedRoutes = processRoutes(routes);</span><br><span class="line">  processedRoutes.push(&#123;</span><br><span class="line">    path: <span class="string">'*'</span>,</span><br><span class="line">    getComponents: templateWrapper(<span class="string">'./template/NotFound'</span>),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> processedRoutes;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ant-design 中获取组件文档的 collector</span></span><br><span class="line">collect(<span class="keyword">async</span> nextProps =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; pathname &#125; = nextProps.location;</span><br><span class="line">  <span class="comment">// 访问路径</span></span><br><span class="line">  <span class="keyword">const</span> pageDataPath = pathname.replace(<span class="string">'-cn'</span>, <span class="string">''</span>).split(<span class="string">'/'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据访问路径获取对应的 markdown 数据</span></span><br><span class="line">  <span class="keyword">const</span> pageData = isChangelog(pathname)</span><br><span class="line">    ? nextProps.data.changelog.CHANGELOG</span><br><span class="line">    : nextProps.utils.get(nextProps.data, pageDataPath);</span><br><span class="line">  <span class="keyword">if</span> (!pageData) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="number">404</span>; <span class="comment">// eslint-disable-line no-throw-literal</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> locale = utils.isZhCN(pathname) ? <span class="string">'zh-CN'</span> : <span class="string">'en-US'</span>;</span><br><span class="line">  <span class="keyword">const</span> pageDataPromise =</span><br><span class="line">    <span class="keyword">typeof</span> pageData === <span class="string">'function'</span></span><br><span class="line">      ? pageData()</span><br><span class="line">      : (pageData[locale] || pageData.index[locale] || pageData.index)();</span><br><span class="line">  <span class="keyword">const</span> demosFetcher = nextProps.utils.get(nextProps.data, [...pageDataPath, <span class="string">'demo'</span>]);</span><br><span class="line">  <span class="comment">// 获取组件 demo 数据</span></span><br><span class="line">  <span class="keyword">if</span> (demosFetcher) &#123;</span><br><span class="line">    <span class="keyword">const</span> [localizedPageData, demos] = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([pageDataPromise, demosFetcher()]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123; localizedPageData, demos &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">localizedPageData</span>: <span class="keyword">await</span> pageDataPromise &#125;;</span><br><span class="line">&#125;)(MainContent);</span><br></pre></td></tr></table></figure>
<h3 id="组件面板"><a href="#组件面板" class="headerlink" title="组件面板"></a>组件面板</h3><p>以下仅贴示 ant-design 组件的渲染类源码，不再详作介绍。想要在 codepen 中访问组件 demo，需要把特定数据内容提交到 <a href="https://codepen.io/pen/define；同样的，将特定数据提交到" target="_blank" rel="noopener">https://codepen.io/pen/define；同样的，将特定数据提交到</a> <a href="https://codesandbox.io/api/v1/sandboxes/define，组件" target="_blank" rel="noopener">https://codesandbox.io/api/v1/sandboxes/define，组件</a> demo 就能在 codesandbox 中访问了；通过使用 @stackblitz/sdk 能使组件 demo 在 stackblitz 中访问。在上述三个第三方应用访问组件 demo 的过程中，ant design 会使用 <a href="https://www.googletagmanager.com/gtag/js" target="_blank" rel="noopener">Google Analytics</a> 作记录。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComponentDoc</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 组件 demo 处理</span></span><br><span class="line">    showedDemo</span><br><span class="line">      .sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.meta.order - b.meta.order)</span><br><span class="line">      .forEach(<span class="function">(<span class="params">demoData, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> demoElem = (</span><br><span class="line">          &lt;Demo</span><br><span class="line">            &#123;...demoData&#125;</span><br><span class="line">            key=&#123;demoData.meta.filename&#125;</span><br><span class="line">            utils=&#123;utils&#125;</span><br><span class="line">            expand=&#123;expandAll&#125;</span><br><span class="line">            location=&#123;location&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span> (index % <span class="number">2</span> === <span class="number">0</span> || isSingleCol) &#123;</span><br><span class="line">          leftChildren.push(demoElem);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          rightChildren.push(demoElem);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">        &lt;Row gutter=&#123;<span class="number">16</span>&#125;&gt;</span><br><span class="line">          &#123; <span class="comment">/* 左侧 demo 面板，或者一屏展示 demo */</span> &#125;</span><br><span class="line">          &lt;Col</span><br><span class="line">            span=&#123;isSingleCol ? <span class="number">24</span> : <span class="number">12</span>&#125;</span><br><span class="line">            className=&#123;isSingleCol ? <span class="string">'code-boxes-col-1-1'</span> : <span class="string">'code-boxes-col-2-1'</span>&#125;</span><br><span class="line">          &gt;</span><br><span class="line">            &#123;leftChildren&#125;</span><br><span class="line">          &lt;<span class="regexp">/Col&gt;</span></span><br><span class="line"><span class="regexp">          &#123; /</span>* 右侧 demo 面板 *<span class="regexp">/ &#125;</span></span><br><span class="line"><span class="regexp">          &#123;isSingleCol ? null : (</span></span><br><span class="line"><span class="regexp">            &lt;Col className="code-boxes-col-2-1" span=&#123;12&#125;&gt;</span></span><br><span class="line"><span class="regexp">              &#123;rightChildren&#125;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Col&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">        &lt;<span class="regexp">/Row&gt;</span></span><br><span class="line"><span class="regexp">      &#123; /</span>* ... *<span class="regexp">/ &#125;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Demo extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 组件 demo 文档经 bisheng 插件处理后会生成 preview 渲染函数，渲染函数注入 React, ReactDOM 完成渲染</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 或组件 demo 文档直接输出 src 进行渲染</span></span><br><span class="line"><span class="regexp">    if (!this.liveDemo) &#123;</span></span><br><span class="line"><span class="regexp">      this.liveDemo = meta.iframe ? (</span></span><br><span class="line"><span class="regexp">        &lt;BrowserFrame&gt;</span></span><br><span class="line"><span class="regexp">          &lt;iframe src=&#123;src&#125; height=&#123;meta.iframe&#125; title="demo" /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/BrowserFrame&gt;</span></span><br><span class="line"><span class="regexp">      ) : (</span></span><br><span class="line"><span class="regexp">        preview(React, ReactDOM)</span></span><br><span class="line"><span class="regexp">      );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &#123; /</span>* ... *<span class="regexp">/ &#125;</span></span><br><span class="line"><span class="regexp">        &#123; /</span>* 组件 demo 渲染，ErrorBoundary 组件会使用 componentDidCatch 捕获错误 *<span class="regexp">/ &#125;</span></span><br><span class="line"><span class="regexp">        &lt;section className="code-box-demo"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;ErrorBoundary&gt;&#123;this.liveDemo&#125;&lt;/</span>ErrorBoundary&gt;</span><br><span class="line">          &#123;style ? (</span><br><span class="line">            &lt;style dangerouslySetInnerHTML=&#123;&#123; <span class="attr">__html</span>: style &#125;&#125; /&gt; <span class="comment">// eslint-disable-line</span></span><br><span class="line">          ) : <span class="literal">null</span>&#125;</span><br><span class="line">        &lt;<span class="regexp">/section&gt;</span></span><br><span class="line"><span class="regexp">      &#123; /</span>* ... *<span class="regexp">/ &#125;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="ssr-渲染"><a href="#ssr-渲染" class="headerlink" title="ssr 渲染"></a>ssr 渲染</h3><p>bisheng 会使用启动开发环境同样的流程制作入口文件以及入口 html 模板，与此同时，对于页面级的 markdown 文件，bisheng 会制作 ssr 函数基于 react-router 函数生成其他页面模板。以下是部分源码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打包函数</span></span><br><span class="line">exports.build = <span class="function"><span class="keyword">function</span> <span class="title">build</span>(<span class="params">program, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  webpack(webpackConfig, (err, stats) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 入口文件加载的 js、csss</span></span><br><span class="line">    <span class="keyword">const</span> manifest = getManifest(stats.compilation)[bishengConfig.entryName];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// html 模板</span></span><br><span class="line">    <span class="keyword">const</span> template = fs.readFileSync(bishengConfig.htmlTemplate).toString();</span><br><span class="line">    </span><br><span class="line">    webpack(ssrWebpackConfig, (ssrBuildErr, ssrBuildStats) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (ssrBuildErr) <span class="keyword">throw</span> ssrBuildErr;</span><br><span class="line">      <span class="keyword">if</span> (ssrBuildStats.hasErrors()) <span class="keyword">throw</span> ssrBuildStats.toString(<span class="string">'errors-only'</span>);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">require</span>(<span class="string">'./loaders/common/boss'</span>).jobDone();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> &#123; ssr &#125; = <span class="built_in">require</span>(path.join(tmpDirPath, <span class="string">`<span class="subst">$&#123;entryName&#125;</span>-ssr`</span>));</span><br><span class="line">      <span class="keyword">const</span> fileCreatedPromises = filesNeedCreated.map(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> output = path.join(bishengConfig.output, file);</span><br><span class="line">        mkdirp.sync(path.dirname(output));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> pathname = filenameToUrl(file);</span><br><span class="line">          ssr(pathname, (error, content, params = &#123;&#125;) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (error) &#123;</span><br><span class="line">              <span class="built_in">console</span>.error(error);</span><br><span class="line">              process.exit(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> templateData = <span class="built_in">Object</span>.assign(</span><br><span class="line">              &#123;</span><br><span class="line">                root: bishengConfig.root,</span><br><span class="line">                content,</span><br><span class="line">                hash: bishengConfig.hash,</span><br><span class="line">                manifest,</span><br><span class="line">                ...params,</span><br><span class="line">              &#125;,</span><br><span class="line">              bishengConfig.htmlTemplateExtraData || &#123;&#125;,</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">const</span> fileContent = nunjucks.renderString(template, templateData);</span><br><span class="line">            fs.writeFileSync(output, fileContent);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Created: '</span>, output);</span><br><span class="line">            resolve();</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="built_in">Promise</span>.all(fileCreatedPromises).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">          callback();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ssr</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">  ReactRouter.match(&#123; routes, <span class="attr">location</span>: url &#125;, (error, redirectLocation, renderProps) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      callback(error, <span class="string">''</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (redirectLocation) &#123;</span><br><span class="line">      callback(<span class="literal">null</span>, <span class="string">''</span>); <span class="comment">// TODO</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (renderProps) &#123;</span><br><span class="line">      <span class="keyword">const</span> helmetContext = &#123;&#125;;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> content = ReactDOMServer.renderToString(</span><br><span class="line">          &lt;ReactRouter.RouterContext</span><br><span class="line">            &#123;...renderProps&#125;</span><br><span class="line">            createElement=&#123;(Component, props) =&gt; createElement(Component, &#123; ...props, helmetContext &#125;)&#125;</span><br><span class="line">          /&gt;,</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">const</span> helmet = helmetContext.helmet || Helmet.renderStatic();</span><br><span class="line">        <span class="keyword">const</span> documentTitle = DocumentTitle.rewind();</span><br><span class="line">        <span class="keyword">const</span> helmetTitleTmp = helmet.title.toString();</span><br><span class="line">        <span class="keyword">const</span> htmlAttributes = helmet.htmlAttributes.toString();</span><br><span class="line">        <span class="keyword">const</span> meta = helmet.meta.toString();</span><br><span class="line">        <span class="keyword">const</span> link = helmet.link.toString();</span><br><span class="line">        <span class="keyword">const</span> helmentTitle = helmetTitleTmp.match(<span class="regexp">/&lt;title.*&gt;([^&lt;]+)&lt;\/title&gt;/</span>)</span><br><span class="line">          ? helmetTitleTmp.match(<span class="regexp">/&lt;title.*&gt;([^&lt;]+)&lt;\/title&gt;/</span>)[<span class="number">1</span>]</span><br><span class="line">          : <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 兼容 DocumentTitle ，推荐使用 react-helmet</span></span><br><span class="line">        <span class="keyword">const</span> title = documentTitle || helmentTitle;</span><br><span class="line">        <span class="comment">// params for extension</span></span><br><span class="line">        callback(<span class="literal">null</span>, content, &#123;</span><br><span class="line">          title,</span><br><span class="line">          meta,</span><br><span class="line">          link,</span><br><span class="line">          htmlAttributes,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        callback(e, <span class="string">''</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callback(<span class="literal">null</span>, <span class="string">''</span>); <span class="comment">// TODO</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">Component, props</span>) </span>&#123;</span><br><span class="line">  NProgress.done();</span><br><span class="line">  <span class="keyword">const</span> dynamicPropsKey = props.location.pathname;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125; &#123;<span class="attr">...Component</span>[<span class="attr">dynamicPropsKey</span>]&#125; /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>frontend</category>
        <category>antd</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>我看 spring boot</title>
    <url>/2019/12/14/backend/spring/%E6%88%91%E7%9C%8B%20spring%20boot/</url>
    <content><![CDATA[<h2 id="why-amp-what"><a href="#why-amp-what" class="headerlink" title="why &amp; what"></a>why &amp; what</h2><p>介于 spring 应用配置较为复杂，spring boot 就应运而生了，其目的即在于简化 spring 项目中依赖的配置流程。因此 spring boot 集成了 spring 的以下能力，或者通过定制 starter 的方式简化了以下能力的配置形式：</p>
<ul>
<li>Web Applications：spring boot 内嵌 Tomcat、Jetty、Undertow、Netty 服务器，便于一键启动；支持使用 spring-boot-starter-webflux 模块启动响应式 web 应用。借助于 spring mvc，spring boot 将自动注册 Converter，用于转换请求和响应；支持通过 JsonSerializer、JsonDeserializer 转化 json 数据；支持使用 FreeMarker、Groovy、Thymeleaf、Mustache 等模板引擎；支持通过 WebMvcConfigurer 定制静态资源位、提供 cors 跨域能力等。可参考 <a href="https://docs.spring.io/spring-boot/docs/2.2.1.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc" target="_blank" rel="noopener">文档</a>。</li>
<li>SQL：提供使用 SQL 数据库的广泛支持，从 JDBC 到对象关系映射框架（如 Hibernate、Mybatis）等。</li>
<li>NoSQL：支持 Redis、MongoDB、Neo4j、Elasticssearch、Solr Cassandra、Couchbase、LDAP 等 NoSQL 数据库。</li>
<li>Caching：允许在方法上使用 @Cachable，该注解将根据请求参数作缓存。默认使用内存缓存，也支持 Generic、JCache、EhCache、Hazelcast、Infinispan、Couchbase、Redis、Caffeine、Simple 等缓存服务（spring boot 会自动检测）。</li>
<li>Hazelcast：支持 Hazelcast 基于内存的数据存储方案。</li>
<li>Quartz Scheduler：支持通过引入 spring-boot-starter-quartz 启用定时器任务，详情可参考 <a href="https://blog.csdn.net/jiangyu1013/article/details/81111898" target="_blank" rel="noopener">Quartz 定时任务（Scheduler）的 3 种实现方式</a>。</li>
<li>Task Execution and Scheduling：在 Executor 缺席的情况下，spring boot 会自动装配 ThreadPoolTaskExecutor 用于处理异步任务（通过 @EnableAsync 注解使用）或异步请求，线程池的使用也可以通过配置文件约束。可参考 <a href="https://blog.csdn.net/jiangyu1013/article/details/81111898" target="_blank" rel="noopener">Quartz 定时任务（Scheduler）的 3 种实现方式</a>。</li>
<li>Message：支持 JMS、RabbitMQ、Kafka、WebSocket 等消息系统。</li>
<li>Web Services：自动装配 WebServiceTemplateBuilder，便于创建 WebServiceTemplate 实例以调用远程 web 服务。</li>
<li>Rest Services：自动装配 RestTemplateBuilder，凭此可以创建 RestTemplate 实例，然后调用 rest 服务；同样的，WebClientBuilder 可用于创建 WebClient 实例，然后调用 rest 服务。</li>
<li>WebSockets：会为内置的 Tomcat、Jetty、Undertow 容器自动装配 WebSockets，也允许通过 spring-boot-starter-webflux 模块为响应式应用提供 WebSocket 编程能力。</li>
<li>Validation：借助于 bean 校验机制 —— JSR-303 规范的实现（如 Hibernate validator），spring boot 允许使用 @Validated 对 bean 作校验。</li>
<li>Distributed Transactions：通过使用 Atomikos 或 Bitronix 嵌入式事务管理器，spring boot 支持 JTA 分布式事务编程规范。当探知到 JTA 环境时，JtaTransactionManager 接口就会用于管理事务，JMS、DataSource、JPA 等 bean 也会被自动装配。编码时使用 @Transactional 就可以实现事务管理。可参考 <a href="https://www.jianshu.com/p/3938e7172443" target="_blank" rel="noopener">Spring的全局事务JTA</a>。</li>
<li>Logging：支持 Commons Logging、Java Util Logging、Log4J2、Logback 等日志服务。</li>
<li>Testing：支持通过 spring-boot-starter-test 测试应用。spring-boot-starter-test 包含 JUnit 5、Spring Test &amp; Spring Boot Test、AssertJ、Hamcrest、Mockito、JSONassert、JsonPath。</li>
<li>Monitoring：监控，更好地掌握应用的运行状态。</li>
</ul>
<p>以上能力的大集成或者配置的简化，均借助于 spring boot 的如下特性：</p>
<ul>
<li>SpringApplication：通过劫持 spring 应用启动过程的方式，集中管理配置项。</li>
<li>Externalized Configuration：允许通过 properties、yaml 文件或环境变量、命令行参数等外部配置启动 spring 应用，并能通过 spring.profiles.active 区分不同环境。这些配置项也能通过 @Value、@ConfigurationProperties 绑定到 bean 或结构化对象中。外部配置抽象为 PropertySource，其优先级大体为命令行参数、环境变量、指定 profile 环境的 properties 或 yaml 文件、不含 profile 环境的 properties 或 yaml 文件。</li>
<li>Auto Configuration：允许通过自动配置的定制 starter，用以简化配置流程、自动注入 bean 等。</li>
</ul>
<h2 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h2><h3 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h3><ol>
<li><p>pom.xml 添加依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加启动类和控制类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Auto-configuration"><a href="#Auto-configuration" class="headerlink" title="Auto-configuration"></a>Auto-configuration</h3><p>通过自动装配技术开发一个 starter，用于在控制台打印每次访问的 URI。示例来自 《Spring Cloud 微服务架构进阶》。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(LogFilter.class);</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		logger.info(<span class="string">"logFilter init..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, </span></span></span><br><span class="line"><span class="function"><span class="params">	  FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">		HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">		logger.info(<span class="string">"uri () is working."</span>, request.getRequestURI());</span><br><span class="line">		filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		logger.info(<span class="string">"logFilter destory..."</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 LogFilter 封装成 spring bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFilterRegistrationBean</span> <span class="keyword">extends</span> <span class="title">FilterRegistrationBean</span>&lt;<span class="title">LogFilter</span>&gt;</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LogFilterRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.setFilter(<span class="keyword">new</span> LogFilter());</span><br><span class="line">		<span class="keyword">this</span>.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">		<span class="keyword">this</span>.setName(<span class="string">"LogFilter"</span>);</span><br><span class="line">		<span class="keyword">this</span>.setOrder(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义自动配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;LogFilterRegistrationBean.class, LogFilter.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFilterAutoConfiguration</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span>(LogFilterRegistrationBean.class)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> LogFilterAutoConfiguration <span class="title">logFilterAutoConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> LogFilterRegistrationBean();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法 1. 通过注解将配置类引入 spring 扫描范围内，在工程中只要对启动类使用 @EnableLogFilter 注解即可</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.class&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Import</span>(LogFilterAutoConfiguration.class)<span class="comment">// 引入自动配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableLogFilter &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法 2. 通过解析 resource/META-INF/spring.factories 加载自动配置类，在工程中同样使用 @EnableLogFilter 注解</span></span><br><span class="line"><span class="comment">// 		org.springframework.boot.autoconfigure.EnableLogFilter=\</span></span><br><span class="line"><span class="comment">// 		com.mycorp.libx.autoconfigure.LogFilterAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableLogFilterImportSelector</span> <span class="keyword">implements</span> <span class="title">DeferredImportSelector</span>, </span></span><br><span class="line"><span class="class">	<span class="title">BeanClassLoaderAware</span>, <span class="title">EnvironmentAware</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactor.getLogger(EnableLogFilterImportSelector.class);</span><br><span class="line">	<span class="keyword">private</span> Class annotationClass = EnableLogFilter.class;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String[] selectImports(AnnotationMetadata metadata) &#123;<span class="comment">// 由 @EnableLogFilter 注解名决定解析属性</span></span><br><span class="line">		<span class="keyword">if</span> (!isEnabled()) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> String[<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		AnnotationAttributes attributes = AnnotationAttributes.fromMap(</span><br><span class="line">			metadata.getAnnotationAttributes(<span class="keyword">this</span>.annotationClass.getName(), <span class="keyword">true</span>)</span><br><span class="line">		);</span><br><span class="line">		Assert.notNull(attributes, <span class="string">"can not be null..."</span>);</span><br><span class="line">		List&lt;String&gt; factories = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">new</span> LinkedHashSet&lt;&gt;(</span><br><span class="line">			SpringFactoriesLoader.loadFactoryNames(<span class="keyword">this</span>.annotationClass, <span class="keyword">this</span>.beanClassLoader)</span><br><span class="line">		));</span><br><span class="line">		<span class="keyword">if</span> (factories.isEmpty() &amp;&amp; !hasDefaultFactory()) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"..."</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (factories.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">			logger.warn(<span class="string">"More than one implemetion"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> factories.toArray(<span class="keyword">new</span> String(factories.size()));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.class&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Import</span>(EnableLogFilterImportSelector.class)<span class="comment">// 引入自动配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableLogFilter &#123;<span class="comment">// 同步修改 EnableLogFilter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="how"><a href="#how" class="headerlink" title="how"></a>how</h2><h3 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a>SpringApplication</h3><p>为了简化 spring 的配置流程，spring boot 通过 SpringApplication 劫持了 spring 的启动过程（通过显式调用 SpringApplication#run 方法启动）。在启动过程中，可定制的 FailureAnalyzer 将分析启动失败的原因并打印在日志上。如果没有错误提示日志，可以尝试 debug 模式启动。SpringApplication 包含但不限于如下功能点：</p>
<ul>
<li>在 spring 机制的基础上，spring boot 支持 bean 的懒初始化（即在请求到达时才创建 bean），这样可以节省应用启动的时间。缺点是没法在启动过程中发现 bean 的配置问题，也没法保证运行时创建的 bean 不会造成 jvm 内存不足。懒初始化默认禁用，可以使用 java 编码或 lazy-initialization 配置项启用。</li>
<li>允许通过 SpringApplicationBuilder 创建多个 ApplicationContext 实例（构成父子结构的层级关系），环境变量会在 ApplicationContext 实例中共享，web 组件只能运行在子 ApplicationContext 实例上。</li>
<li>spring boot 会根据应用类型是否为 servlet、webflux 或上述两者之外选用不同的 ApplicationContext 实现类。</li>
<li>通过 spring 事件机制，SpringApplication#addListeners 方法或 META-INF/spring.factories 配置可用于添加启动时的事件监听器。子 ApplicationContext 实例的事件会冒泡到父级，需要区分 ApplicationContext。一般不使用事件。</li>
<li>允许使用 ApplicationArguments 接口访问启动参数 args。</li>
</ul>
<p>以下源码仅简要地展示 SpringApplication 的执行逻辑，其深入部分另作专题分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 首参默认为 null，次参为应用的启动类</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">		Assert.notNull(primarySources, <span class="string">"PrimarySources must not be null"</span>);</span><br><span class="line">		<span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断应用类型：基于 spring mvc 的 servlet 应用、基于 webflux 的响应式应用、以上两种之外</span></span><br><span class="line">		<span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">		<span class="comment">// 加载 ApplicationContextInitializer，使用类加载机制加载 META-INF/spring.factories 配置中的类</span></span><br><span class="line">		setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">				ApplicationContextInitializer.class));</span><br><span class="line">		<span class="comment">// 加载 ApplicationListener</span></span><br><span class="line">		setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">		<span class="comment">// 通过 RuntimeException 执行堆栈获取到 ApplicationClass </span></span><br><span class="line">		<span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">		StopWatch stopWatch = <span class="keyword">new</span> StopWatch();<span class="comment">// 计算执行时间</span></span><br><span class="line">		stopWatch.start();</span><br><span class="line">		ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">		Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		configureHeadlessProperty();</span><br><span class="line">		SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">		listeners.starting();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">					args);</span><br><span class="line">			<span class="comment">// environment 实例可用于获取 PropertySources 配置信息、Profiles 环境信息</span></span><br><span class="line">			ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">					applicationArguments);</span><br><span class="line">			configureIgnoreBeanInfo(environment);</span><br><span class="line">			Banner printedBanner = printBanner(environment);<span class="comment">// 打印 banner</span></span><br><span class="line">			<span class="comment">// 根据 webApplicationType 应用类型选用 ApplicationContext 实现类并创建实例</span></span><br><span class="line">			<span class="comment">// spring 机制：ApplicationContext 实例中的 getBeanFactory 可用于获取 BeanFactory 实例，以便注册 bean</span></span><br><span class="line">			context = createApplicationContext();</span><br><span class="line">			exceptionReporters = getSpringFactoriesInstances(</span><br><span class="line">					SpringBootExceptionReporter.class,</span><br><span class="line">					<span class="keyword">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">			prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">					printedBanner);</span><br><span class="line">			<span class="comment">// 调用 ApplicationContext 实例的 refresh 方法</span></span><br><span class="line">			refreshContext(context);</span><br><span class="line">			afterRefresh(context, applicationArguments);</span><br><span class="line">			stopWatch.stop();</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">				<span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">						.logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">			&#125;</span><br><span class="line">			listeners.started(context);</span><br><span class="line">			callRunners(context, applicationArguments);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">			handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			listeners.running(context);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">			handleRunFailure(context, ex, exceptionReporters, <span class="keyword">null</span>);</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> context;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title">DefaultResourceLoader</span></span></span><br><span class="line"><span class="class">		<span class="keyword">implements</span> <span class="title">ConfigurableApplicationContext</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">		<span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">			<span class="comment">// Prepare this context for refreshing.</span></span><br><span class="line">			prepareRefresh();</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Tell the subclass to refresh the internal bean factory.</span></span><br><span class="line">			ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Prepare the bean factory for use in this context.</span></span><br><span class="line">			prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="comment">// Allows post-processing of the bean factory in context subclasses.</span></span><br><span class="line">				postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Invoke factory processors registered as beans in the context.</span></span><br><span class="line">				invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Register bean processors that intercept bean creation.</span></span><br><span class="line">				registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Initialize message source for this context.</span></span><br><span class="line">				initMessageSource();</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Initialize event multicaster for this context.</span></span><br><span class="line">				initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line">				onRefresh();</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">				registerListeners();</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">				finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">				finishRefresh();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">				<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">					logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">							<span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">				destroyBeans();</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Reset 'active' flag.</span></span><br><span class="line">				cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Propagate exception to caller.</span></span><br><span class="line">				<span class="keyword">throw</span> ex;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">finally</span> &#123;</span><br><span class="line">				<span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line">				<span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">				resetCommonCaches();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Auto-configuration-1"><a href="#Auto-configuration-1" class="headerlink" title="Auto-configuration"></a>Auto-configuration</h3><p>自动配置技术通常会用于制作公司内部的公共库或开源库，即如上文 smaple 一节中的制作 starter 部分。配置类通过 @Configuration 注解声明；@ConditionalOnClass、@ConditionalOnMissingBean 等注解声明配置类加载的条件。@ConditionalOnClass 在某个类存在于类路径时予以自动配置；@ConditionalOnMissingBean 在某个 bean （如用户配置类）不存在于 spring 上下文中时予以自动配置。@AutoConfigureAfter、@AutoConfigureBefore、@AutoConfigureOrder、@Order 可用于约束配置类加载的顺序。</p>
<p>自动配置类的加载与否取决于用户配置或其他条件，因此测试自动配置类就会变得困难。因此 spring boot 提供了对自动配置类的测试方法，即通过 ApplicationContextRunner 予以测试。详情可参考 <a href="https://docs.spring.io/spring-boot/docs/2.2.1.RELEASE/reference/html/spring-boot-features.html#boot-features-test-autoconfig" target="_blank" rel="noopener">文档</a>。</p>
<p>配置类有两种，spring-boot 内置的配置类、开源库等提供的配置类。对于开源库，上文已经表明，基于 @import 实现 @EnableXxx 注解，就可以自动加载配置类（对于 jar 包，通过自动扫描的方式加载 bean 是无效的，需要使用 @Import 注解去加载这些 bean）。对于内置配置类，spring-boot-autoconfigure 包提供了  @SpringBootApplication 注解，它用于加在启动类上。该注解基于 @EnableAutoConfiguration 注解实现，其能力就是自动加载 META-INF/spring.factories 文件中声明的配置类：</p>
<img src="/2019/12/14/backend/spring/我看%20spring%20boot/spring.factories.png">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 @Import、AutoConfigurationImportSelector 自动装配 META-INF/spring.factories 中的配置类</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImportAutoConfigurationImportSelector</span> <span class="keyword">extends</span> <span class="title">AutoConfigurationImportSelector</span></span></span><br><span class="line"><span class="class">		<span class="keyword">implements</span> <span class="title">DeterminableImports</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoConfigurationImportSelector</span></span></span><br><span class="line"><span class="class">		<span class="keyword">implements</span> <span class="title">DeferredImportSelector</span>, <span class="title">BeanClassLoaderAware</span>, <span class="title">ResourceLoaderAware</span>,</span></span><br><span class="line"><span class="class">		<span class="title">BeanFactoryAware</span>, <span class="title">EnvironmentAware</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">			<span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 通过 ClassLoader 获取 META-INF/spring-autoconfigure-metadata.properties 资源的 URL，然后解析获取配置信息（默认配置）</span></span><br><span class="line">		AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader</span><br><span class="line">				.loadMetadata(<span class="keyword">this</span>.beanClassLoader);</span><br><span class="line">		<span class="comment">// 加载 META-INF/spring.factories 配置文件中的自动配置类（即上文中的 LogFilterAutoConfiguration 自动配置类）</span></span><br><span class="line">		AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(</span><br><span class="line">				autoConfigurationMetadata, annotationMetadata);</span><br><span class="line">		<span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>解读 java 技术属于自不量力，因此文章题名“我看 XXX”，用于表明这些文章既是个性化解读的，又会存在很多错谬。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://spring.io/projects/spring-boot/#overview" target="_blank" rel="noopener">spring boot 官方文档</a><br><a href="https://www.jianshu.com/p/ef6f0c0de38f" target="_blank" rel="noopener">spring boot 启动原理</a><br><a href="https://blog.csdn.net/lqzkcx3/article/details/78405229" target="_blank" rel="noopener">SpringBoot源码研究之Start</a><br><a href="https://blog.csdn.net/liyantianmin/article/details/91390090" target="_blank" rel="noopener">Webflux 核心</a><br><a href="https://www.cnblogs.com/javazhiyin/p/10905294.html" target="_blank" rel="noopener">深究Spring中Bean的生命周期</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>spring</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>企业应用架构模式</title>
    <url>/2019/12/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>少即是多。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>spring security</title>
    <url>/2019/12/01/backend/spring/spring%20security/</url>
    <content><![CDATA[<h2 id="认证和授权"><a href="#认证和授权" class="headerlink" title="认证和授权"></a>认证和授权</h2><p>认证即校验用户的身份。认证的方式有：</p>
<ul>
<li>使用回话 ID 作匿名认证，此时用户不需要登录，使用场景如论坛中匿名访问帖子；</li>
<li>密码认证（对所有用户，密码都是相同的）；用户名 + 密码认证；</li>
<li>使用 WWW-Authenticate、Authenticate 作基本认证。当服务器接收到一个缺少凭证请求，返回 WWW-Authenticate 响应头；接收响应的浏览器就会弹出模拟窗口，促使用户输入用户名和密码；用户名和密码又会以 base64 编码，并作为 Authenticate 请求头的内容，发送到服务器；等认证成功后，服务器就会返回一个正常的响应。基本认证允许用户将凭证内嵌在 URL 或命令行客户端中，形式如 Wget 或 cURL，具体的值如 <a href="http://username:password@www.example.com，那么凭证会自动转换成" target="_blank" rel="noopener">http://username:password@www.example.com，那么凭证会自动转换成</a> Authenticate 头。基本认证可以使用 https 协议提高安全性。</li>
<li>摘要认证。首先客户端发起请求，服务端返回 WWW-Authenticate 响应头中会包含 algorithm（创建哈希值的算法，”MD5” 或 “MD5-sess”）、qop（保护的质量，”auth” 或 “auth-int” 或 “auth,auth-int）、opaque（随机字符串数据，作完整性校验）、nonce（服务器随机数，在两个 401 响应之间永远不会重复，客户端需要发送相同的随机数）。然后客户端再次发送请求，Authenticate 请求头中会包含 algorithm、qop、opaque、nonce 以及 username、uri、nc、cnonce（期望值，每次请求都会重新生成，且不能与 nc 重复）、response。当服务端接受到请求时，将重新计算所有的哈希值，如果最后的哈希值能匹配 response 参数中的值时，认证就通过了。nc、cnonce 在每次发送的请求均会不同，这样可以阻止重放，避免被黑客获知信息。</li>
<li>windows 认证，即使用 windows 域控制器进行验证。IE、Chrome 支持 windows 验证。这一技术已过时，这里列举的目的在于可以使用终端凭证验证用户。</li>
<li>客户端证书认证，最安全的认证协议之一。首先在注册（通常是创建用户名和密码）时，服务器将告知浏览器生成公钥和私钥，浏览器存储私钥，将公钥发送给服务器。自此之后，公钥可以作为服务器识别浏览器的标识，且浏览器会使用私钥对通信进行签名。服务器接收到 https 请求后，将使用服务器 SSL 证书标识自身，并将自己的公钥和使用私钥签名的数据发送给浏览器。</li>
<li>智能卡，就是一个特殊的集成电路，如 ID 卡或磁性员工卡。</li>
<li>生物识别，就是使用指纹、声纹、虹膜扫描、DNA 或用户的其他生物身份去认证用户。</li>
<li>基于声明的认证，如 OAuth、SAML 协议都基于声明的认证机制。用户在访问应用时，应用将重定向到 Auth URL，然后用户携带凭证访问第三方认证提供者（如登录），第三方提供者将提供令牌给用户；用户再携带令牌访问应用，应用会将令牌发送给第三方认证机构作验证，通过认证后便能获取到应用上的资源。基于声明的认证将在下文详解。</li>
<li>多因素认证，即在以上认证的基础上，添加随机数验证（如手机校验码）等手段。</li>
</ul>
<p>权限模型通常基于活动（用户可操作行为）、角色（用户可操作行为集）、用户组（某类用户可操作行为），阿里的 ACL 权限模型即基于此设计。详细内容另作专题剖析。java.security.Principal 接口可用于实现鉴权操作。当用户通过认证后，程式将用户身份标识存入 Principal 中，应用代码就可以通过检查 Principal（存在于安全上下文中）包含的标识来判断用户是否通过了认证。Principal 也可以保存用户被授权操作的活动，应用代码就可以通过检查 Principal 获得用户的可执行行为。基于声明的授权指的是由第三方认证用户的身份，再由应用识别用户的权限。</p>
<h2 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h2><p>Spring Security 提供了认证和授权服务，也可以防止 csrf 攻击，并提供 jsp 或 Thymeleaf 模板展示用户授权内容等。它基于 spring AOP 以及 servlet 规范中的 filter 机制实现，能够在 Web 请求和方法调用级别处理身份认证和授权。说到底，Spring Security 处理 web 请求的过滤器仍是基于 spring 框架实现的，即通过 AbstractSecurityWebApplicationInitializer 实现 WebApplicationInitializer 接口，并在 onStartup 方法执行过程中使用 servletContext.addFilter 挂载过滤器，内置过滤器是使用 DelegatingFilterProxy 挂载的 SecurityFilterChain，允许用户添加定制的过滤器。</p>
<img src="/2019/12/01/backend/spring/spring%20security/spring-security-filter.png">
<p>以下是 spring security 加载和配置过滤器的主要实现源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用 spring 机制将 SpringSecurityFilterChain 等过滤器注册到 servlet 中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSecurityWebApplicationInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beforeSpringSecurityFilterChain(servletContext);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.configurationClasses != <span class="keyword">null</span>) &#123;</span><br><span class="line">            AnnotationConfigWebApplicationContext rootAppContext = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">            rootAppContext.register(<span class="keyword">this</span>.configurationClasses);</span><br><span class="line">            servletContext.addListener(<span class="keyword">new</span> ContextLoaderListener(rootAppContext));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.enableHttpSessionEventPublisher()) &#123;</span><br><span class="line">            servletContext.addListener(<span class="string">"org.springframework.security.web.session.HttpSessionEventPublisher"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        servletContext.setSessionTrackingModes(<span class="keyword">this</span>.getSessionTrackingModes());</span><br><span class="line">        <span class="keyword">this</span>.insertSpringSecurityFilterChain(servletContext);</span><br><span class="line">        <span class="keyword">this</span>.afterSpringSecurityFilterChain(servletContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertSpringSecurityFilterChain</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">        String filterName = <span class="string">"springSecurityFilterChain"</span>;</span><br><span class="line">        DelegatingFilterProxy springSecurityFilterChain = <span class="keyword">new</span> DelegatingFilterProxy(filterName);</span><br><span class="line">        String contextAttribute = <span class="keyword">this</span>.getWebApplicationContextAttribute();</span><br><span class="line">        <span class="keyword">if</span> (contextAttribute != <span class="keyword">null</span>) &#123;</span><br><span class="line">            springSecurityFilterChain.setContextAttribute(contextAttribute);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.registerFilter(servletContext, <span class="keyword">true</span>, filterName, springSecurityFilterChain);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">registerFilter</span><span class="params">(ServletContext servletContext, <span class="keyword">boolean</span> insertBeforeOtherFilters, String filterName, Filter filter)</span> </span>&#123;</span><br><span class="line">        Dynamic registration = servletContext.addFilter(filterName, filter);</span><br><span class="line">        <span class="keyword">if</span> (registration == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Duplicate Filter registration for '"</span> + filterName + <span class="string">"'. Check to ensure the Filter is only configured once."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            registration.setAsyncSupported(<span class="keyword">this</span>.isAsyncSecuritySupported());</span><br><span class="line">            EnumSet&lt;DispatcherType&gt; dispatcherTypes = <span class="keyword">this</span>.getSecurityDispatcherTypes();</span><br><span class="line">            registration.addMappingForUrlPatterns(dispatcherTypes, !insertBeforeOtherFilters, <span class="keyword">new</span> String[]&#123;<span class="string">"/*"</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 @Configuration 为 spring-security 添加过滤器、权限规则等</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfigurerAdapter</span> <span class="keyword">implements</span> <span class="title">WebSecurityConfigurer</span>&lt;<span class="title">WebSecurity</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">final</span> WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> HttpSecurity http = <span class="keyword">this</span>.getHttp();</span><br><span class="line">        web.addSecurityFilterChainBuilder(http).postBuildAction(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                FilterSecurityInterceptor securityInterceptor = (FilterSecurityInterceptor)http.getSharedObject(FilterSecurityInterceptor.class);</span><br><span class="line">                web.securityInterceptor(securityInterceptor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> HttpSecurity <span class="title">getHttp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.http != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.http;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            DefaultAuthenticationEventPublisher eventPublisher = (DefaultAuthenticationEventPublisher)<span class="keyword">this</span>.objectPostProcessor.postProcess(<span class="keyword">new</span> DefaultAuthenticationEventPublisher());</span><br><span class="line">            <span class="keyword">this</span>.localConfigureAuthenticationBldr.authenticationEventPublisher(eventPublisher);</span><br><span class="line">            AuthenticationManager authenticationManager = <span class="keyword">this</span>.authenticationManager();</span><br><span class="line">            <span class="keyword">this</span>.authenticationBuilder.parentAuthenticationManager(authenticationManager);</span><br><span class="line">            <span class="keyword">this</span>.authenticationBuilder.authenticationEventPublisher(eventPublisher);</span><br><span class="line">            Map&lt;Class&lt;? extends Object&gt;, Object&gt; sharedObjects = <span class="keyword">this</span>.createSharedObjects();</span><br><span class="line">            <span class="keyword">this</span>.http = <span class="keyword">new</span> HttpSecurity(<span class="keyword">this</span>.objectPostProcessor, <span class="keyword">this</span>.authenticationBuilder, sharedObjects);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.disableDefaults) &#123;</span><br><span class="line">                ((HttpSecurity)((DefaultLoginPageConfigurer)((HttpSecurity)((HttpSecurity)((HttpSecurity)((HttpSecurity)((HttpSecurity)((HttpSecurity)((HttpSecurity)((HttpSecurity)<span class="keyword">this</span>.http.csrf().and()).addFilter(<span class="keyword">new</span> WebAsyncManagerIntegrationFilter()).exceptionHandling().and()).headers().and()).sessionManagement().and()).securityContext().and()).requestCache().and()).anonymous().and()).servletApi().and()).apply(<span class="keyword">new</span> DefaultLoginPageConfigurer())).and()).logout();</span><br><span class="line">                ClassLoader classLoader = <span class="keyword">this</span>.context.getClassLoader();</span><br><span class="line">                <span class="comment">// 通过 AbstractHttpConfigurer 子类加载过滤器</span></span><br><span class="line">                List&lt;AbstractHttpConfigurer&gt; defaultHttpConfigurers = SpringFactoriesLoader.loadFactories(AbstractHttpConfigurer.class, classLoader);</span><br><span class="line">                Iterator var6 = defaultHttpConfigurers.iterator();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(var6.hasNext()) &#123;</span><br><span class="line">                    AbstractHttpConfigurer configurer = (AbstractHttpConfigurer)var6.next();</span><br><span class="line">                    <span class="keyword">this</span>.http.apply(configurer);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行 configure(HttpSecurity http) 加载用户配置</span></span><br><span class="line">            <span class="keyword">this</span>.configure(<span class="keyword">this</span>.http);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.http;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationManager <span class="title">authenticationManager</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.authenticationManagerInitialized) &#123;</span><br><span class="line">            <span class="comment">// 执行 configure(AuthenticationManagerBuilder auth) 加载用户配置</span></span><br><span class="line">            <span class="keyword">this</span>.configure(<span class="keyword">this</span>.localConfigureAuthenticationBldr);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.disableLocalConfigureAuthenticationBldr) &#123;</span><br><span class="line">                <span class="comment">// 构建 AuthenticationManagerBuilder 实例，AuthenticationManagerBuilder 实例拥有 authenticationProviders 属性管理 AuthenticationProvider 实例</span></span><br><span class="line">                <span class="keyword">this</span>.authenticationManager = <span class="keyword">this</span>.authenticationConfiguration.getAuthenticationManager();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.authenticationManager = (AuthenticationManager)<span class="keyword">this</span>.localConfigureAuthenticationBldr.build();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.authenticationManagerInitialized = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.authenticationManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际上，HttpSecurity 也是基于 filter 实现的，通过 configure 方法配置规则就是配置过滤器。基于 filter，Spring Security 提供以下三个接口用于鉴权：</p>
<ul>
<li>Authentication：扩展自 Principal，包含 getIdentity 方法返回一个代表 Principal 标识的 Object（通常是用户名）；getCredentials 方法返回用于验证用户身份的凭证（只在认证过程中使用，认证结束后被擦除）；isAuthenticated 方法返回是否通过认证；setAuthenticated 修改认证结果（通常也只在认证过程中使用）。</li>
<li>GrantedAuthentication：用以判断用户包含的角色、权限信息。Authentication 接口中的 getAuthorities 方法可用于获取用户的 GrantedAuthentication。</li>
<li>AuthenticationProvider：认证服务的提供者，包含 authenticate 方法以未认证的 Authentication 作为参数，该方法将把 Authentication 标识为已认证，并返回已认证的但完全不同的 Authentication。</li>
</ul>
<p>Spring Security 既能使用内建的系统如 CAS、JAAS、LDAP、OpenID 鉴权，又能对接 JDBC 或自己的服务或仓库用于鉴权。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>因为对 spring 机制的不熟悉以及 Spring Security 应用场景有限，笔者的行文仅点到为止。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.zijin.net/news/tech/1190163.html" target="_blank" rel="noopener">Spring高级篇—Spring Security入门原理及实战</a><br><a href="https://www.jianshu.com/p/e715cc993bf0" target="_blank" rel="noopener">Spring Boot Security 详解</a><br><a href="https://blog.csdn.net/liushangzaibeijing/article/details/81220610" target="_blank" rel="noopener">springSecurity安全框架的学习和原理解读</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>spring</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2019/12/01/backend/%E7%BC%93%E5%AD%98/redis/</url>
    <content><![CDATA[<p>redis 缓存数据库通过 redis-cli 工具操控；并支持使用 EVAL、EVALSHA 命令执行脚本。缓存的数据格式支持字符串、哈希、列表、无序集合、有序集合以及 HyperLogLog，支持使用 EXPIRE 设置某键的过期时间、备份数据和恢复数据。redis 本身是基于客户端-服务端模型以及请求-响应协议实现的 TCP 服务，通过管道（pipeline）的技术可以批量发送并处理请求，节省响应时间。redis 支持基于频道的发布、订阅功能，发布者将消息推送到频道上，就会触发该频道的订阅者执行特定的程式。redis 支持事务和基于 WATCH 实现的乐观锁（当 WATCH 监听的键被其他命令修改时，事务将被打断）。通过主键取模或哈希取模，可以在 redis 服务器上使用多个 redis 实例分区存取数据。等等。</p>
<h2 id="spring-data-redis"><a href="#spring-data-redis" class="headerlink" title="spring-data-redis"></a>spring-data-redis</h2><p>spring-data-redis 提供了四种创建 redis 数据库连接的连接工厂，即 JedisConnectionFactory、JredisConnectionFactory、LettuceConnection、SrpConnectionFactory，所有的连接工厂都包含 setHostName、setPort、setPassword、getConnection 方法。各连接工厂的 getConnection 方法用于获取 RedisConnection 接口的各种实现类。通过对接 RedisKeyCommands 等 redis 命令的抽象接口，RedisConnection 接口的实现类封装了操纵 redis 数据库的方法，比如 conn.get(“greeting”.getBytes())，进出 redis 数据库的 key、value 键值对都是字节数组形式。详情可以参看 DefaultedRedisConnection 的实现。</p>
<p>为了规避字节数组，spring-data-redis 以模板形式提供了较高等级的数据访问方案，包含的模板有 RedisTemplate、StringRedisTemplate，这些模板用于对出入库的数据执行序列化操作、获取数据出入库的操纵方法 ValueOperations 实现类等。首先基于 ConnectionFactor，spring-data-redis 提供了 RedisConnectionUtils 用于指定连接工厂、创建连接、关闭连接、创建代理连接、管理连接事务等。其次在使用 RedisConnectionUtils 获取 redis 连接的基础上，RedisTemplate 可以设置不同数据类型的序列化工具；抽象了执行脚本或 lambda 表达式的 execute、executePipeline 方法；抽象了 set、get、delete、hasKey、expire、multi、match 操纵出入库数据的方法；抽象了操纵不同数据类型的 ValueOperations、ListOperations、SetOperations、ZSetOperations、HashOperations、BoundValueOperations、BoundValueOperations、BoundListOperations、BoundSetOperations、BoundZSetOperations、BoundHashOperations 等操作对象。操作对象既可能会调用 RedisTemplate 实例中的 set、get 方法，又可能调用 redisTemplate.execute 执行 lambda 表达式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTemplate</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">RedisAccessor</span> <span class="keyword">implements</span> <span class="title">RedisOperations</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;, <span class="title">BeanClassLoaderAware</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> RedisSerializer&lt;?&gt; getHashValueSerializer() &#123;</span><br><span class="line">		<span class="keyword">return</span> hashValueSerializer;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHashValueSerializer</span><span class="params">(RedisSerializer&lt;?&gt; hashValueSerializer)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.hashValueSerializer = hashValueSerializer;</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 执行脚本</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(RedisScript&lt;T&gt; script, List&lt;K&gt; keys, Object... args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> scriptExecutor.execute(script, keys, args);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> BoundValueOperations&lt;K, V&gt; <span class="title">boundValueOps</span><span class="params">(K key)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> DefaultBoundValueOperations&lt;&gt;(key, <span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ValueOperations&lt;K, V&gt; <span class="title">opsForValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (valueOps == <span class="keyword">null</span>) &#123;</span><br><span class="line">			valueOps = <span class="keyword">new</span> DefaultValueOperations&lt;&gt;(<span class="keyword">this</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> valueOps;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultBoundValueOperations</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">DefaultBoundKeyOperations</span>&lt;<span class="title">K</span>&gt; <span class="keyword">implements</span> <span class="title">BoundValueOperations</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ValueOperations&lt;K, V&gt; ops;</span><br><span class="line"></span><br><span class="line">	DefaultBoundValueOperations(K key, RedisOperations&lt;K, V&gt; operations) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">super</span>(key, operations);</span><br><span class="line">		<span class="keyword">this</span>.ops = operations.opsForValue();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ops.get(getKey());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(<span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ops.get(getKey(), start, end);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(V value, <span class="keyword">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">		ops.set(getKey(), value, timeout, unit);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">		ops.set(getKey(), value);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(V value, <span class="keyword">long</span> offset)</span> </span>&#123;</span><br><span class="line">		ops.set(getKey(), value, offset);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有了 RedisTemplate，我们就可以使用如下的方式在 redis 数据库中存取数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单的值</span></span><br><span class="line">redisTemplate.opsForValue().set(product.getSku(), product);<span class="comment">// 使用序列化工具将 product 实体转化成字符串</span></span><br><span class="line">redisTemplate.opsForValue().get(<span class="string">"123456"</span>);<span class="comment">// 取出 product</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// list</span></span><br><span class="line">redisTemplate.opsForList().rightPush(<span class="string">"cart"</span>, product);<span class="comment">// 尾部插入</span></span><br><span class="line">redisTemplate.opsForList().leftPush(<span class="string">"cart"</span>, product);<span class="comment">// 顶部插入</span></span><br><span class="line">Product first = redisTemplate.opsForList().leftPop(<span class="string">"cart"</span>);<span class="comment">// 顶部取值</span></span><br><span class="line">Product last = redisTemplate.opsForList().rightPop(<span class="string">"cart"</span>);<span class="comment">// 尾部取值</span></span><br><span class="line">List&lt;Product&gt; products = redisTemplate.opsForList().range(<span class="string">"cart"</span>, <span class="number">2</span>, <span class="number">12</span>);<span class="comment">// 范围取值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// set</span></span><br><span class="line">redisTemplate.opsForSet().add(<span class="string">"cart1"</span>, product);<span class="comment">// 添加</span></span><br><span class="line">redisTemplate.opsForSet().remove(product);<span class="comment">// 移除</span></span><br><span class="line">redisTemplate.opsForSet().randomMember(<span class="string">"cart1"</span>);<span class="comment">// 随机取元素</span></span><br><span class="line">List&lt;Product&gt; diff = redisTemplate.opsForSet().difference(<span class="string">"cart1"</span>, <span class="string">"cart2"</span>);<span class="comment">// 差集</span></span><br><span class="line">List&lt;Product&gt; union = redisTemplate.opsForSet().union(<span class="string">"cart1"</span>, <span class="string">"cart2"</span>);<span class="comment">// 并集</span></span><br><span class="line">List&lt;Product&gt; isect = redisTemplate.opsForSet().isect(<span class="string">"cart1"</span>, <span class="string">"cart2"</span>);<span class="comment">// 交集</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 嫁接</span></span><br><span class="line">BoundListOperations&lt;String, Product&gt; cart = redisTemplate.boundListOpts(<span class="string">"cart"</span>);</span><br><span class="line">cart.rightPush(cart1);</span><br><span class="line">cart.rightPush(cart2);</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.redis.cn/documentation.html" target="_blank" rel="noopener">redis 文档中心</a><br><a href="https://www.jianshu.com/p/0fa4c100e9a9" target="_blank" rel="noopener">RedisTemplate使用方法归纳</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>缓存</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>swagger</title>
    <url>/2019/11/28/frontend/%E5%B7%A5%E7%A8%8B%E5%8C%96/swagger/</url>
    <content><![CDATA[<h2 id="OpenAPI-Specification"><a href="#OpenAPI-Specification" class="headerlink" title="OpenAPI Specification"></a>OpenAPI Specification</h2><p><a href="https://swagger.io/specification" target="_blank" rel="noopener">OpenAPI 规范</a>（OAS）为 RESTful API 定义了一套标准的、跨语言的接口，以便人类和计算机均无需通过源码、文档或网络流量检测探知和理解服务器提供的能力。OAS 可用于制作文档生成器、代码生成器、测试工具等等。OpenAPI 以 json 对象形式呈现，因此它基本遵循 <a href="https://json-schema.org/" target="_blank" rel="noopener">json schema 规范</a>，可以用 json 或 yaml 格式编写。</p>
<p>在 OpenAPI 规范的基础上，<a href="https://swagger.io" target="_blank" rel="noopener">Swagger</a> 提供了一套开源工具用于为服务端和客户端设计、制作 api 文档以及代码，包含 Swagger Editor、Swagger UI、Swagger Codegen。基于 Swagger，开发流程可能是这样的：设计 api，使用 Swagger Codegen 制作服务端代码，稍后再实现业务逻辑；使用 Swagger Codegen 生成客户端脚本库；使用 Swagger UI 制作交互式文档界面等等。</p>
<p>OpenAPI 文档的基础数据包含：</p>
<ul>
<li>openapi: OAS 版本号，影响解析策略。</li>
<li>info: RESTful API 的元信息，包含标题、描述、联系方式、许可证、版本号、服务条款链接。</li>
<li>servers: 服务器信息。当 servers 未指定时，将使用 url 为 ‘/‘ 的服务器对象。</li>
<li>paths: RESTful API 的路径。单个路径包含相同配置时会造成冲突，这时会由工具决定选用哪一个。路径下挂操作对象。</li>
<li>components: 在 OAS 中作为可重用的部件，被引用时才生效。</li>
<li>security: RESTful API 的安全机制，可以在操作对象层级进行改写。</li>
<li>tags: 标签列表，即针对操作对象打标签。</li>
<li>externalDocs: 扩展文档。</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">penapi:</span> <span class="number">3.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line"><span class="attr">  title:</span> <span class="string">Sample</span> <span class="string">API</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">Optional</span> <span class="string">multiline</span> <span class="string">or</span> <span class="string">single-line</span> <span class="string">description</span> <span class="string">in</span> <span class="string">[CommonMark](http://commonmark.org/help/)</span> <span class="string">or</span> <span class="string">HTML.</span></span><br><span class="line"><span class="attr">  version:</span> <span class="number">0.1</span><span class="number">.9</span></span><br><span class="line"><span class="attr">servers:</span></span><br><span class="line"><span class="attr">  - url:</span> <span class="attr">https://api.example.com/v1</span></span><br><span class="line"><span class="attr">    description:</span> <span class="string">Production</span> <span class="string">server</span> <span class="string">(uses</span> <span class="string">live</span> <span class="string">data)</span></span><br><span class="line"><span class="attr">  - url:</span> <span class="attr">https://sandbox-api.example.com:8443/v1</span></span><br><span class="line"><span class="attr">    description:</span> <span class="string">Sandbox</span> <span class="string">server</span> <span class="string">(uses</span> <span class="string">test</span> <span class="string">data)</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/users:</span></span><br><span class="line"><span class="attr">    get:</span></span><br><span class="line"><span class="attr">      summary:</span> <span class="string">Returns</span> <span class="string">a</span> <span class="string">list</span> <span class="string">of</span> <span class="string">users.</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">Optional</span> <span class="string">extended</span> <span class="string">description</span> <span class="string">in</span> <span class="string">CommonMark</span> <span class="string">or</span> <span class="string">HTML.</span></span><br><span class="line"><span class="attr">      security:</span></span><br><span class="line"><span class="attr">        - OAuth2:</span> <span class="string">[read]</span>     <span class="comment"># &lt;------ 使用 oauth2 认证</span></span><br><span class="line"><span class="attr">      responses:</span></span><br><span class="line">        <span class="string">'200'</span><span class="string">:</span>    <span class="comment"># status code</span></span><br><span class="line"><span class="attr">          description:</span> <span class="string">A</span> <span class="string">JSON</span> <span class="string">array</span> <span class="string">of</span> <span class="string">user</span> <span class="string">names</span></span><br><span class="line"><span class="attr">          content:</span></span><br><span class="line">            <span class="string">application/json:</span></span><br><span class="line"><span class="attr">              schema:</span> </span><br><span class="line"><span class="attr">                type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">                items:</span> </span><br><span class="line"><span class="attr">                  type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">components:</span></span><br><span class="line"><span class="attr">  securitySchemes:</span></span><br><span class="line"><span class="attr">    BasicAuth:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">      scheme:</span> <span class="string">basic</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line"><span class="attr">  - BasicAuth:</span> <span class="string">[]</span></span><br></pre></td></tr></table></figure>
<p>OAS 使用 end point、operation object 描述 api。以上 schema 中，/users 是一个 end point，get 是一个 operation object。end point 下可以包含如下的 operation object：put、post、delete、options、head、patch、trace。operation object 可以配置 tags、summary、description、externalDocs、operationId、parameters、requestBody、responses、callbacks、deprecated、security、servers 属性。典型如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/users/&#123;id&#125;:</span> <span class="comment"># 正则格式</span></span><br><span class="line"><span class="attr">    get:</span></span><br><span class="line"><span class="attr">      tags:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">Users</span></span><br><span class="line"><span class="attr">      summary:</span> <span class="string">Gets</span> <span class="string">a</span> <span class="string">user</span> <span class="string">by</span> <span class="string">ID.</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">A</span> <span class="string">detailed</span> <span class="string">description</span> <span class="string">of</span> <span class="string">the</span> <span class="string">operation.</span></span><br><span class="line">        <span class="string">Use</span> <span class="string">markdown</span> <span class="string">for</span> <span class="string">rich</span> <span class="string">text</span> <span class="string">representation,</span></span><br><span class="line">        <span class="string">such</span> <span class="string">as</span> <span class="string">**bold**,</span> <span class="string">*italic*,</span> <span class="string">and</span> <span class="string">[links](https://swagger.io).</span></span><br><span class="line"><span class="attr">      operationId:</span> <span class="string">getUserById</span></span><br><span class="line"><span class="attr">      parameters:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">id</span></span><br><span class="line"><span class="attr">          in:</span> <span class="string">path</span></span><br><span class="line"><span class="attr">          description:</span> <span class="string">User</span> <span class="string">ID</span></span><br><span class="line"><span class="attr">          required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">          schema:</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">            format:</span> <span class="string">int64</span></span><br><span class="line"><span class="attr">      responses:</span></span><br><span class="line">        <span class="string">'200'</span><span class="string">:</span></span><br><span class="line"><span class="attr">          description:</span> <span class="string">Successful</span> <span class="string">operation</span></span><br><span class="line"><span class="attr">          content:</span></span><br><span class="line">            <span class="string">application/json:</span></span><br><span class="line"><span class="attr">              schema:</span></span><br><span class="line">                <span class="string">$ref:</span> <span class="string">'#/components/schemas/User'</span> <span class="comment"># 使用 $ref 引用 components 中定义的实体</span></span><br><span class="line"><span class="attr">      externalDocs:</span></span><br><span class="line"><span class="attr">        description:</span> <span class="string">Learn</span> <span class="string">more</span> <span class="string">about</span> <span class="string">user</span> <span class="string">operations</span> <span class="string">provided</span> <span class="string">by</span> <span class="string">this</span> <span class="string">API.</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">http://api.example.com/docs/user-operations/</span></span><br><span class="line"><span class="attr">components:</span></span><br><span class="line"><span class="attr">  schemas:</span></span><br><span class="line"><span class="attr">    User:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">      properties:</span></span><br><span class="line"><span class="attr">        id:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">          format:</span> <span class="string">int64</span></span><br><span class="line"><span class="attr">        name:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">      required:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">id</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">name</span></span><br></pre></td></tr></table></figure>
<h2 id="后端接入-swagger2"><a href="#后端接入-swagger2" class="headerlink" title="后端接入 swagger2"></a>后端接入 swagger2</h2><p>java 中介入 swagger2 可按以下方式进行：</p>
<ol>
<li>pom.xml 添加 springfox-swagger2、springfox-swagger-ui 依赖。</li>
<li>使用 @Configuration、@EnableSwagger2 注解编写 Swagger 配置类。</li>
<li>在 Controller 中使用 Swagger 注解接口。</li>
<li>访问 swagger-ui.html 查看接口文档。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// configuration</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">customDocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.any())</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Contact contact = <span class="keyword">new</span> Contact(<span class="string">"团队名"</span>, <span class="string">"www.my.com"</span>, <span class="string">"my@my.com"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"文档标题"</span>)</span><br><span class="line">                .description(<span class="string">"文档描述"</span>)</span><br><span class="line">                .contact(contact)   <span class="comment">// 联系方式</span></span><br><span class="line">                .version(<span class="string">"1.1.0"</span>)  <span class="comment">// 版本</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api</span>(tags=<span class="string">"接口所在的类"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"接口名"</span>, notes = <span class="string">"接口描述"</span>, httpMethod = <span class="string">"POST"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"length"</span>,value = <span class="string">"参数1"</span>, required = <span class="keyword">true</span>, paramType = <span class="string">"path"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"size"</span>,value = <span class="string">"参数2"</span>, required = <span class="keyword">true</span>, paramType = <span class="string">"query"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"page"</span>,value = <span class="string">"参数3"</span>, required = <span class="keyword">true</span>, paramType = <span class="string">"header"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"total"</span>,value = <span class="string">"参数4"</span>, required = <span class="keyword">true</span>, paramType = <span class="string">"form"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"start"</span>,value = <span class="string">"参数5"</span>,dataType = <span class="string">"string"</span>, paramType = <span class="string">"body"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="生成前端接口"><a href="#生成前端接口" class="headerlink" title="生成前端接口"></a>生成前端接口</h2><p>这里以 <a href="https://github.com/zhang740/openapi-generator" target="_blank" rel="noopener">openapi-generator</a> 为例，说明一下怎么根据 swagger-ui 生成前端服务层调用代码和实体类接口。通过后端应用接入 swagger2 之后，访问 /v2/api-docs 即可查看复合 OAS 规范的全量接口信息，openapi-generator 就是在这份接口数据的基础上，通过解析并使用 nunjucks 模板生成 js 脚本的。下图即为 /v2/api-docs 数据内容。</p>
<img src="/2019/11/28/frontend/工程化/swagger/api-docs.jpg">
<p>openapi-generator 的核心代码见于 ServiceGenerator 类，该类的作用即是解析 /v2/api-doc 数据内容并使用模板生成服务层调用及接口文件。除了解析 OAS 数据外，它基于以下流程实现：</p>
<ol>
<li>基于 config.requestLib 配置为真生成服务层调用基类，文件名为 base.js 或 base.ts。</li>
<li>基于 config.type 配置为 ‘ts’ 生成实体类接口，文件名为 typings.d.ts。</li>
<li>基于 config.serviceType 生成服务层调用脚本，类或函数形式。</li>
</ol>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> ServiceGenerator &#123;</span><br><span class="line">  <span class="comment">// 生成服务层调用代码和实体类接口文件</span></span><br><span class="line">  genFile() &#123;</span><br><span class="line">    <span class="comment">// 基于 openapi-generator 内置的 template/base.njk 生成服务层调用基类</span></span><br><span class="line">    <span class="keyword">this</span>.genRequestLib();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基于 openapi-generator 内置的 template/interface.njk 或外部模板生成实体类接口</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.config.type === <span class="string">'ts'</span>) &#123;</span><br><span class="line">      debug(<span class="string">'[GenSDK] gen interface.'</span>);</span><br><span class="line">      <span class="keyword">this</span>.genFileFromTemplate(<span class="string">'typings.d.ts'</span>, <span class="string">'interface'</span>, &#123;</span><br><span class="line">        <span class="keyword">namespace</span>: <span class="keyword">this</span>.config.namespace,</span><br><span class="line">        list: <span class="keyword">this</span>.getInterfaceTP(),<span class="comment">// 获取 /v2/api-doc 数据内容中的 definitions</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基于 openapi-generator 内置的 template/interface.njk 或外部模板生成实体类接口</span></span><br><span class="line">    <span class="keyword">this</span>.getServiceTP()<span class="comment">// 获取 /v2/api-doc 数据内容中的 paths（经 ServiceGenerator.constructor 处理）</span></span><br><span class="line">      .filter(<span class="function"><span class="params">tp</span> =&gt;</span> &#123;</span><br><span class="line">        tp.list = tp.list.filter(</span><br><span class="line">          item =&gt;</span><br><span class="line">            !<span class="keyword">this</span>.config.filter ||</span><br><span class="line">            <span class="keyword">this</span>.config.filter.some(<span class="function"><span class="params">f</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> f <span class="keyword">instanceof</span> <span class="built_in">RegExp</span></span><br><span class="line">                ? f.test(item.path)</span><br><span class="line">                : <span class="keyword">typeof</span> f === <span class="string">'function'</span></span><br><span class="line">                ? f(item)</span><br><span class="line">                : <span class="literal">true</span>;</span><br><span class="line">            &#125;)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> tp.list.length;</span><br><span class="line">      &#125;)</span><br><span class="line">      .map(<span class="function"><span class="params">tp</span> =&gt;</span> &#123;</span><br><span class="line">        debug(<span class="string">'[GenSDK] generate service:'</span>, tp.className);</span><br><span class="line">        <span class="keyword">this</span>.genFileFromTemplate(</span><br><span class="line">          <span class="keyword">this</span>.getFinalFileName(<span class="string">`<span class="subst">$&#123;tp.className&#125;</span>.<span class="subst">$&#123;this.config.type&#125;</span>`</span>),</span><br><span class="line">          <span class="string">'service'</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="keyword">namespace</span>: <span class="keyword">this</span>.config.namespace,</span><br><span class="line">            ...tp,</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> genFileFromTemplate(fileName: <span class="built_in">string</span>, <span class="keyword">type</span>: <span class="string">'interface'</span> | <span class="string">'service'</span>, params: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> template = <span class="keyword">this</span>.getTemplate(<span class="keyword">type</span>);</span><br><span class="line">      <span class="keyword">this</span>.writeFile(fileName, nunjucks.renderString(template, params));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(<span class="string">'[GenSDK] file gen fail:'</span>, fileName, <span class="string">'type:'</span>, <span class="keyword">type</span>);</span><br><span class="line">      <span class="keyword">throw</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> getTemplate(<span class="keyword">type</span>: <span class="string">'interface'</span> | <span class="string">'service'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> configFilePath =</span><br><span class="line">      <span class="keyword">type</span> === <span class="string">'interface'</span> ? <span class="keyword">this</span>.config.interfaceTemplatePath : <span class="keyword">this</span>.config.templatePath;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (configFilePath) &#123;</span><br><span class="line">        <span class="keyword">this</span>.mkdir(path.dirname(configFilePath));</span><br><span class="line">        <span class="keyword">if</span> (fs.existsSync(configFilePath)) &#123;</span><br><span class="line">          <span class="keyword">return</span> fs.readFileSync(configFilePath, <span class="string">'utf8'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> fileContent = fs.readFileSync(</span><br><span class="line">        path.join(</span><br><span class="line">          __dirname,</span><br><span class="line">          <span class="string">'template'</span>,</span><br><span class="line">          <span class="keyword">type</span> === <span class="string">'service'</span> ? <span class="string">`<span class="subst">$&#123;type&#125;</span>.<span class="subst">$&#123;this.config.serviceType&#125;</span>.njk`</span> : <span class="string">`<span class="subst">$&#123;type&#125;</span>.njk`</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="string">'utf8'</span></span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">if</span> (configFilePath) &#123;</span><br><span class="line">        fs.writeFileSync(configFilePath, fileContent, <span class="string">'utf8'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> fileContent;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(<span class="string">`[GenSDK] get &#123;<span class="subst">$&#123;type&#125;</span>&#125; template fail:`</span>, configFilePath);</span><br><span class="line">      <span class="keyword">throw</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 ServiceGenerator 类的基础上，openapi-generator 支持基于接口、文件获取 OAS 数据并生成前端脚本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openapi-generator url http://xxx/v2/api-docs -c <span class="literal">true</span> <span class="comment"># 基于接口</span></span><br><span class="line">openapi-generator config ./xxx.js <span class="comment"># 基于文件</span></span><br></pre></td></tr></table></figure>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>写作本文的目的本意在于探究怎样通过后端脚本生成前端 service 层代码。我曾接触过的 midway 前端框架可以生成 hsf 服务中使用的代理层文件（实现与后端服务的参数对接和类型转换），前端也能根据 swagger 文档生成 service 层代码。也许，midway 中生成的代理文件也是基于 hsf 平台上标准化的接口文档。在这次探寻过程上，我发现了一个新的思考点：既可以根据 OAS 生成 service 脚本，也可以根据 OAS 提供 mock 服务。OAS 规范也使人思忖：在团队能力较弱或应用场景较小的情况下，探讨逻辑流程的紧要程度高于制定输入输出文档；在应用场景达到规模化或团队能力可信赖的情况下，规范化的输入输出文档高于逻辑实现。“路漫漫而修远兮，吾将上下而求索”。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/604349d80059" target="_blank" rel="noopener">Swagger Codegen 高效开发客户端对接服务端代码</a><br><a href="https://www.cnblogs.com/xiaoqi/p/swagger-2-ts.html" target="_blank" rel="noopener">开源小工具 - swagger API访问代码生成器（js/typescript）</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>前端工程化</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>密码技术</title>
    <url>/2019/11/25/backend/%E5%85%B6%E4%BB%96/%E5%AF%86%E7%A0%81%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/zhangyachen/p/8035670.html" target="_blank" rel="noopener">常见的密码技术与安全概念</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化部署</title>
    <url>/2019/11/25/frontend/architecture/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.imooc.com/article/268784" target="_blank" rel="noopener">Jenkins本地搭建遇到的问题 for Mac</a><br><a href="https://www.douban.com/note/407034249/" target="_blank" rel="noopener">使用git做服务器端代码的部署</a><br><a href="https://www.cnblogs.com/mycognos/p/10155978.html" target="_blank" rel="noopener">Git Hooks、GitLab CI持续集成以及使用Jenkins实现自动化任务</a><br><a href="https://www.jianshu.com/p/ac59402caa66" target="_blank" rel="noopener">持续集成 の 使用 git hook 部署代码</a><br><a href="https://www.jianshu.com/p/9afaae953247" target="_blank" rel="noopener">前端自动化发布实战总结</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>architecture</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis 踩点</title>
    <url>/2019/11/23/backend/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF/%E6%88%91%E7%9C%8B%20mybatis/</url>
    <content><![CDATA[<p>按我的理解，可以在现代前端技术找到与 Mybatis 相类的解决方案。虽然浏览器开列了 DOM API 用于操纵节点，但是存在以下两个主要问题：不同的浏览器使用不同的接口；操纵节点的开发成本高昂。jQuery 等节点操作型类库解决了第一个问题，但没有解决第二个问题。到了模板引擎 + 虚拟 dom 的技术实现方案后，由虚拟 dom 统一封装节点操纵接口，并作性能优化，再由模板引擎对接虚拟 dom，前端只需要关心模板，达到声明式编程的效果。话题切回到 Mybatis，在此之前，JDBC 解决了不同数据库的对接问题，但是需要反复的创建和关闭 Statement、ResultSet；sql 语句散落，且不能复用，频繁书写对象关系模型的转换逻辑；动态 sql 以参数序号拼接，造成它与业务逻辑有较高的耦合度等。针对这些问题，我们能想象到的处理方式是：抽象 sql 执行流程；使用模板描述 sql 语句。前者的意义就在于组装 sql 操作的流水线工厂，包含但不限于：创建 Connection，根据 sql 预备语句创建 PreparedStatement，通过关系对象模型获得参数，执行 sql，将结果转换成关系对象模型，关闭 Connection 等。可以说，JDBC 的焦点在于流水线的某个节点，Mybatis 的焦点在于整条流水线，这样一来，应用开发者就不大需要关心流水线上的某个节点该怎么操作，而只需关心整条流水线的输入输出（当然，若要关心流水线上的特定节点，也可以使用钩子或拦截器等手段处理）。有了流水线工厂，输入等表现形式可以是多样的，正如 Mybatis 既可以使用 xml 配置声明待执行的 sql 语句，也可以使用 Java 语句约定该执行的 sql 语句。在使用模板约定 sql 语句的基础上，sql 语句是既可以组装和复用的，又会特定的对象关系模型达成相互转换关系。</p>
<img src="/2019/11/23/backend/数据库技术/我看%20mybatis/mybatis.png">
<p>上述 Mybatis 架构图中，Mybatis 首先会从 MybatisConfig.xml 加载基本的配置信息，包含环境信息、数据库的驱动程序、数据库地址、账号和密码等，构建 Configuration 对象；然后注册 Mapper.xml 映射器，Mapper.xml 描述了待执行的 sql、及其与关系对象模型的映射关系等。在取得配置信息以后，Mybatis 会通过 SqlSessionFactoryBuilder 创建 SqlSessionFactory；sqlSessionFactory 保有 configuration 配置信息；SqlSessionFactory 允许使用 sqlSessionFactory.openSession 方法创建 SqlSession（openSession 方法用于设定 sqlSession 的自动提交模式、执行模式等）。因为全量映射器信息已经存在内存中，SqlSession 允许我们直接使用 sqlSession.getMapper 形式获取映射器的可用形态，继而执行映射器中约定的方法；使用 sqlSession.select 能直接执行颗粒度更细的映射器方法。SqlSessionFactory 的最佳作用域是应用作用域；SqlSession 不是线程安全的，不能作为一个类的静态属性或实例属性，每当有请求时才予以创建，且需要及时关闭。与上图表述不尽相同的是，在创建 SqlSession 属性的过程中，Mybatis 会根据 execType 选用不同的 Exector 实现类，Exector 实例本身作为 SqlSession 实例的一个属性。当我们调用 sqlSession.select 时，Mybatis 首先会从 configuration 中选用相关的 MappedStatement，然后调用 executor.query，由 exector 实际消费 MappedStatement 作出入参数转换。MappedStatement 通过解析 Mapper.xml 获得，它约定了 sql 语句的处理方式。在 executor.query 执行期间，Mybatis 会通过 MappedStatement 获得 StatementHandler；StatementHandler 用于预处理 statement，执行实际的 sql 语句。</p>
<img src="/2019/11/23/backend/数据库技术/我看%20mybatis/sqlsession.png">
<p>以下是 sqlSession.select 的执行逻辑。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSession</span> <span class="keyword">implements</span> <span class="title">SqlSession</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      MappedStatement ms = configuration.getMappedStatement(statement);</span><br><span class="line">      executor.query(ms, wrapCollection(parameter), rowBounds, handler);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error querying database.  Cause: "</span> + e, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      ErrorContext.instance().reset();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseExecutor</span> <span class="keyword">implements</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">  <span class="comment">// BoundSql 用于获取真实的 sql 语句 </span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    ErrorContext.instance().resource(ms.getResource()).activity(<span class="string">"executing a query"</span>).object(ms.getId());</span><br><span class="line">    <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">"Executor was closed."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (queryStack == <span class="number">0</span> &amp;&amp; ms.isFlushCacheRequired()) &#123;</span><br><span class="line">      clearLocalCache();</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;E&gt; list;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      queryStack++;</span><br><span class="line">      list = resultHandler == <span class="keyword">null</span> ? (List&lt;E&gt;) localCache.getObject(key) : <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">        handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      queryStack--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (queryStack == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (DeferredLoad deferredLoad : deferredLoads) &#123;</span><br><span class="line">        deferredLoad.load();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// issue #601</span></span><br><span class="line">      deferredLoads.clear();</span><br><span class="line">      <span class="keyword">if</span> (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;</span><br><span class="line">        <span class="comment">// issue #482</span></span><br><span class="line">        clearLocalCache();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">queryFromDatabase</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    List&lt;E&gt; list;</span><br><span class="line">    localCache.putObject(key, EXECUTION_PLACEHOLDER);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      localCache.removeObject(key);</span><br><span class="line">    &#125;</span><br><span class="line">    localCache.putObject(key, list);</span><br><span class="line">    <span class="keyword">if</span> (ms.getStatementType() == StatementType.CALLABLE) &#123;</span><br><span class="line">      localOutputParameterCache.putObject(key, parameter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleExecutor</span> <span class="keyword">extends</span> <span class="title">BaseExecutor</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">doQuery</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 获取顶层 Configuration 配置信息</span></span><br><span class="line">      Configuration configuration = ms.getConfiguration();</span><br><span class="line">      <span class="comment">// 获取具体的 StatementHandler，如 SimpleStatement，PreparedStatement 或 CallableStatement</span></span><br><span class="line">      StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">      <span class="comment">// 创建 statement</span></span><br><span class="line">      stmt = prepareStatement(handler, ms.getStatementLog());</span><br><span class="line">      <span class="comment">// 执行实际的 sql，并处理结果集</span></span><br><span class="line">      <span class="keyword">return</span> handler.&lt;E&gt;query(stmt, resultHandler);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      closeStatement(stmt);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> StatementHandler <span class="title">newStatementHandler</span><span class="params">(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 根据 ms.getStatementType 选用具体的 StatementHandler</span></span><br><span class="line">    StatementHandler statementHandler = <span class="keyword">new</span> RoutingStatementHandler(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);</span><br><span class="line">    <span class="comment">// 使用拦截器插件对 StatementHandler 进行封装</span></span><br><span class="line">    statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);</span><br><span class="line">    <span class="keyword">return</span> statementHandler;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseStatementHandler</span> <span class="keyword">implements</span> <span class="title">StatementHandler</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="title">BaseStatementHandler</span><span class="params">(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.configuration = mappedStatement.getConfiguration();</span><br><span class="line">    <span class="keyword">this</span>.executor = executor;</span><br><span class="line">    <span class="keyword">this</span>.mappedStatement = mappedStatement;</span><br><span class="line">    <span class="keyword">this</span>.rowBounds = rowBounds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.typeHandlerRegistry = configuration.getTypeHandlerRegistry();</span><br><span class="line">    <span class="keyword">this</span>.objectFactory = configuration.getObjectFactory();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (boundSql == <span class="keyword">null</span>) &#123; <span class="comment">// issue #435, get the key before calculating the statement</span></span><br><span class="line">      generateKeys(parameterObject);</span><br><span class="line">      <span class="comment">// 根据动态参数输出实际的 sql，实现见下文</span></span><br><span class="line">      boundSql = mappedStatement.getBoundSql(parameterObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.boundSql = boundSql;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.parameterHandler = configuration.newParameterHandler(mappedStatement, parameterObject, boundSql);</span><br><span class="line">    <span class="keyword">this</span>.resultSetHandler = configuration.newResultSetHandler(executor, mappedStatement, rowBounds, parameterHandler, resultHandler, boundSql);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Statement <span class="title">prepare</span><span class="params">(Connection connection, Integer transactionTimeout)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    ErrorContext.instance().sql(boundSql.getSql());</span><br><span class="line">    Statement statement = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      statement = instantiateStatement(connection);</span><br><span class="line">      setStatementTimeout(statement, transactionTimeout);</span><br><span class="line">      setFetchSize(statement);</span><br><span class="line">      <span class="keyword">return</span> statement;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">      closeStatement(statement);</span><br><span class="line">      <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      closeStatement(statement);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">"Error preparing statement.  Cause: "</span> + e, e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleStatementHandler</span> <span class="keyword">extends</span> <span class="title">BaseStatementHandler</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 使用实际的 sql 连接 Connection 创建 statement</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Statement <span class="title">instantiateStatement</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mappedStatement.getResultSetType() != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> connection.createStatement(mappedStatement.getResultSetType().getValue(), ResultSet.CONCUR_READ_ONLY);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> connection.createStatement();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行实际的 sql，并处理结果集</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(Statement statement, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    String sql = boundSql.getSql();</span><br><span class="line">    statement.execute(sql);</span><br><span class="line">    <span class="keyword">return</span> resultSetHandler.&lt;E&gt;handleResultSets(statement);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上文更多的是简要地表明了 sqlSession.select 发起的一个查询过程，这个过程相当于前端 handlebars 模板引擎的第二个阶段 —— 通过解析函数处理参数并获得实际的 html。可是 handlebars 还有第一个阶段 —— 通过模板获得解析函数。两个阶段拼合在一起，才合成一个完成的过程 const parse = Handlebars.compile(template); const html = parse(data)。与此相同，Mybatis 同样需要先将 Mapper.xml 配置转换成 MappedStatement，这样才能通过 MappedStatement 获得 BoundSql，再通过 BoundSql 获得实际待执行的 sql 语句。下图既表明了 Mybatis 的架构，也说明了解析和执行正是虎符的两半。</p>
<img src="/2019/11/23/backend/数据库技术/我看%20mybatis/mybatis2.png">
<p>通过回溯源码，我们发现在 spring 工程中，Mybatis 利用 spring 的机制加载 Mapper.xml 文件。正是在 org.mybatis.spring 包调用了 xmlMapperBulder.parse 方法，configuration 中才会有 XMLStatementBuilder 实例。而通过 XMLStatementBuilder 实例解析 xml 文件中的相关节点，MappedStatement 实例才得以被添加到 configuration 中。同样采用回溯法，我们发现，BoundSql 的创建过程依循这样一条路线：在 xml 解析过程中，会创建 xmlScriptBuilder 实例，再由 xmlScriptBuilder 解析 xml 配置中的 sql 语句节点，获得 rawSqlSource 或 dynamicSqlSource 实例（两者的 getBoundSql 方法即可用于获得 boundSql 实例）。以下源码仅以简要说明 mappedStatement.getBoundSql(parameterObject) 方法为什么能完成动态参数的拼接。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RawSqlSource</span> <span class="keyword">implements</span> <span class="title">SqlSource</span> </span>&#123;</span><br><span class="line">  <span class="comment">// rootSqlNode 为 sql 语句节点</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RawSqlSource</span><span class="params">(Configuration configuration, SqlNode rootSqlNode, Class&lt;?&gt; parameterType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(configuration, getSql(configuration, rootSqlNode), parameterType);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RawSqlSource</span><span class="params">(Configuration configuration, String sql, Class&lt;?&gt; parameterType)</span> </span>&#123;</span><br><span class="line">    SqlSourceBuilder sqlSourceParser = <span class="keyword">new</span> SqlSourceBuilder(configuration);</span><br><span class="line">    Class&lt;?&gt; clazz = parameterType == <span class="keyword">null</span> ? Object.class : parameterType;</span><br><span class="line">    sqlSource = sqlSourceParser.parse(sql, clazz, <span class="keyword">new</span> HashMap&lt;String, Object&gt;());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicSqlSource</span> <span class="keyword">implements</span> <span class="title">SqlSource</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> BoundSql <span class="title">getBoundSql</span><span class="params">(Object parameterObject)</span> </span>&#123;</span><br><span class="line">    DynamicContext context = <span class="keyword">new</span> DynamicContext(configuration, parameterObject);</span><br><span class="line">    rootSqlNode.apply(context);</span><br><span class="line">    SqlSourceBuilder sqlSourceParser = <span class="keyword">new</span> SqlSourceBuilder(configuration);</span><br><span class="line">    Class&lt;?&gt; parameterType = parameterObject == <span class="keyword">null</span> ? Object.class : parameterObject.getClass();</span><br><span class="line">    SqlSource sqlSource = sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings());</span><br><span class="line">    BoundSql boundSql = sqlSource.getBoundSql(parameterObject);</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : context.getBindings().entrySet()) &#123;</span><br><span class="line">      boundSql.setAdditionalParameter(entry.getKey(), entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> boundSql;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSourceBuilder</span> <span class="keyword">extends</span> <span class="title">BaseBuilder</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> SqlSource <span class="title">parse</span><span class="params">(String originalSql, Class&lt;?&gt; parameterType, Map&lt;String, Object&gt; additionalParameters)</span> </span>&#123;</span><br><span class="line">    ParameterMappingTokenHandler handler = <span class="keyword">new</span> ParameterMappingTokenHandler(configuration, parameterType, additionalParameters);</span><br><span class="line">    GenericTokenParser parser = <span class="keyword">new</span> GenericTokenParser(<span class="string">"#&#123;"</span>, <span class="string">"&#125;"</span>, handler);</span><br><span class="line">    String sql = parser.parse(originalSql);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> StaticSqlSource(configuration, sql, handler.getParameterMappings());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 "#&#123;", "&#125;" 中间替换以动态参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericTokenParser</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">parse</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (text == <span class="keyword">null</span> || text.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// search open token</span></span><br><span class="line">    <span class="keyword">int</span> start = text.indexOf(openToken, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (start == -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> text;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>[] src = text.toCharArray();</span><br><span class="line">    <span class="keyword">int</span> offset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">final</span> StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    StringBuilder expression = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (start &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (start &gt; <span class="number">0</span> &amp;&amp; src[start - <span class="number">1</span>] == <span class="string">'\\'</span>) &#123;</span><br><span class="line">        <span class="comment">// this open token is escaped. remove the backslash and continue.</span></span><br><span class="line">        builder.append(src, offset, start - offset - <span class="number">1</span>).append(openToken);</span><br><span class="line">        offset = start + openToken.length();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// found open token. let's search close token.</span></span><br><span class="line">        <span class="keyword">if</span> (expression == <span class="keyword">null</span>) &#123;</span><br><span class="line">          expression = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          expression.setLength(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        builder.append(src, offset, start - offset);</span><br><span class="line">        offset = start + openToken.length();</span><br><span class="line">        <span class="keyword">int</span> end = text.indexOf(closeToken, offset);</span><br><span class="line">        <span class="keyword">while</span> (end &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (end &gt; offset &amp;&amp; src[end - <span class="number">1</span>] == <span class="string">'\\'</span>) &#123;</span><br><span class="line">            <span class="comment">// this close token is escaped. remove the backslash and continue.</span></span><br><span class="line">            expression.append(src, offset, end - offset - <span class="number">1</span>).append(closeToken);</span><br><span class="line">            offset = end + closeToken.length();</span><br><span class="line">            end = text.indexOf(closeToken, offset);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            expression.append(src, offset, end - offset);</span><br><span class="line">            offset = end + closeToken.length();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (end == -<span class="number">1</span>) &#123;</span><br><span class="line">          <span class="comment">// close token was not found.</span></span><br><span class="line">          builder.append(src, start, src.length - start);</span><br><span class="line">          offset = src.length;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          builder.append(handler.handleToken(expression.toString()));</span><br><span class="line">          offset = end + closeToken.length();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      start = text.indexOf(openToken, offset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (offset &lt; src.length) &#123;</span><br><span class="line">      builder.append(src, offset, src.length - offset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> builder.toString();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticSqlSource</span> <span class="keyword">implements</span> <span class="title">SqlSource</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String sql;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ParameterMapping&gt; parameterMappings;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Configuration configuration;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">StaticSqlSource</span><span class="params">(Configuration configuration, String sql)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(configuration, sql, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">StaticSqlSource</span><span class="params">(Configuration configuration, String sql, List&lt;ParameterMapping&gt; parameterMappings)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sql = sql;</span><br><span class="line">    <span class="keyword">this</span>.parameterMappings = parameterMappings;</span><br><span class="line">    <span class="keyword">this</span>.configuration = configuration;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> BoundSql <span class="title">getBoundSql</span><span class="params">(Object parameterObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BoundSql(configuration, sql, parameterMappings, parameterObject);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>因为半路出家的缘故，我很难用精准的词汇去描述所思所想，表达也就会大打折扣。很多时候，我想把编程比喻为整理抽屉，需要把东西摆放得足够整齐，需要知道哪个格子藏了什么东西（后一条会显得很有经验）。但是茴香豆有几种写法，Mybatis 设计了多少种 xml 配置项，这不是我所关心的重点。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mybatis.org/mybatis-3/zh/getting-started.html" target="_blank" rel="noopener">Mybatis 文档</a><br><a href="http://c.biancheng.net/view/4304.html" target="_blank" rel="noopener">MyBatis的工作原理</a><br><a href="https://www.jianshu.com/p/ec40a82cae28" target="_blank" rel="noopener">终结篇：MyBatis原理深入解析</a><br><a href="https://www.jianshu.com/p/15781ec742f2" target="_blank" rel="noopener">Mybatis架构与原理</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>数据库技术</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/2019/11/21/backend/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF/JDBC/</url>
    <content><![CDATA[<p>Java 数据库连接（JDBC）API 用于对接不同的数据库 —— 由遵守不同网络协议的数据库厂商提供第三方驱动程序，再由 Java 提供一个驱动管理器和一套 API，驱动程序就会注册到驱动管理器中，在此基础上，调用 API 即能访问驱动管理器，最后通过驱动程序与实际的数据库通信。驱动程序的实现经历过多次演进，目前以纯 Java 语言实现，它能将 JDBC 请求直接翻译成数据库相关的协议。</p>
<img src="/2019/11/21/backend/数据库技术/JDBC/jdbc.jpeg">
<p>使用 JDBC 的前置操作包含：获悉数据库 url 地址如 jdbc:mysql://127.0.0.1:3306/test?characterEncoding=UTF-8；下载驱动程序 jar 文件并注册到驱动管理器上（部分驱动不需要注册）；下载并启动特定数据库。完成前置操作后，就可以连接数据库并执行 sql 了。典型的 JDBC 调用操作如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户名或密码可以放在配置文件中或远程管理中心中</span></span><br><span class="line">String url = <span class="string">"jdbc:mysql://127.0.0.1:3306/test?characterEncoding=UTF-8"</span>;</span><br><span class="line">String username = <span class="string">"admin"</span>;</span><br><span class="line">String password = <span class="string">"123456"</span>;</span><br><span class="line">Connection conn = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">Statement stat = conn.createStatement();</span><br><span class="line">stat.executeUpdate(<span class="string">"CREATE TABLE Greeting (Message CHAR(20))"</span>);</span><br></pre></td></tr></table></figure>
<p>JDBC 接口设计包含如下内容：</p>
<ol>
<li>以 Connection 抽象数据库连接，通过 DriverManager.getConnection 创建。连接通过 connection.close 关闭，避免长连接占用有限的数据库资源（数据库有最大并发连接数、最大并发语句数）（与此同时，频繁建立和关闭数据库连接也是高昂的消耗，因此 web 容器或应用服务器开发商会提供连接池机制。连接池保持与数据库的长连接，不存在物理关闭，sql 操作可以重用连接池）。</li>
<li>以 Statement 抽象针对数据库的表操作，通过 connection.createStatement 创建，同样能通过调用 close 方法关闭。Statement 对象实现 executeQuery, executeUpdate, execute 方法用于增删改查操作。</li>
<li>以 ResultSet 抽象查询结果集，并缓存在 Statement 对象中，可通过 statement.getResultSet 获取（每个结果集只能获取一次）。部分结果集允许单条 Select 语句查出多个结果集，通过 statement.getMoreResults 使 getResultSet 指向下一条数据。</li>
<li>ResultSet 可以便捷地访问列数据，主要抽象操作包含 getXxx(int columnNumber), getXxx(String columnName), getObject(int columnNumber, Class<t>type), getObject(String columnLabel, Class<t>type) 等。Xxx 为 String, Int, Double, Date, Blob, Clob。</t></t></li>
<li>Statement 再进一步，以 PreparedStatement 抽象预编译的表操作，通过 connection.PrepareStatement 创建。它能复用基本的 sql 语句（此时为预备语句）并对编译结果作缓存，? 部分语句可在特定场合下填充为实际值（如 where name = ? 查询特定人员）。preparedStatement.setXxx, preparedStatement.clearParameters 可用于设置或清除参数（即实际值）。</li>
<li>支持通过 ResultSet 滚动查询、更新操作。</li>
<li>以 RowSet 缓存查询结果。</li>
<li>支持查询元数据。</li>
<li>支持事务操作。6、7、8、9 均见下文。</li>
</ol>
<p>JDBC 另外解决的问题包含：（日期格式等出入库时）转义；获取自动生成的主键。</p>
<h2 id="可滚动、可更新"><a href="#可滚动、可更新" class="headerlink" title="可滚动、可更新"></a>可滚动、可更新</h2><p>部分数据库的驱动程序支持结果集可滚动、可更新，即直接通过 ResultSet 翻查上一条或下一条数据，更新 ResultSet 数据内容即可更新表数据。在执行结果集滚动、更新操作前，首先需要通过 DatabaseMetaData 接口的 supportsResultSetType, supportsResultSetConcurrency 方法进行判断。</p>
<h2 id="行集"><a href="#行集" class="headerlink" title="行集"></a>行集</h2><p>可滚动、可更新操作需要与数据库保持连接，消耗数据库资源，因此 JDBC 又推出了扩展自 ResultSet 的行集 RowSet 接口。RowSet 接口有以下子接口：CachedRowSet 缓存行集、WebRowSet 缓存行集（保存为 XML）、FilteredRowSet / JoinRowSet 可操作行集（select、join 操作）、JdbcRowSet 继承 get、set 方法的 “bean”。RowSet 允许将 ResultSet 数据填充到行集中；直接执行 sql 语句；设置分页；重新与数据库建立连接，并将数据回写到数据库中（回写时会校验原始值是否与数据库中存储值相同，保证一致性；回写复杂结果一般是不允许的）。RowSet 的典型操作如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 或 CachedRowSet crs = new com.sun.rowset.CachedRowSetImpl();</span></span><br><span class="line">RowSetFactory factory = RowSetProvider.newFactory();</span><br><span class="line">CachedRowSet crs = factory.createCachedRowSet();</span><br><span class="line">crs.setCommand(<span class="string">"SELECT * FROM Books WHERE PUBLISHER = ?"</span>);</span><br><span class="line">crs.setString(<span class="number">1</span>, publisherName);</span><br><span class="line">crs.execute();</span><br></pre></td></tr></table></figure>
<h2 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h2><p>JDBC 可用于获取元数据：数据库元数据信息、结果集的元数据信息以及预备语句的元数据信息。数据库元数据信息包含表及字段信息、数据库支持的功能。典型操作如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection conn = DriverManager.getConnection(url, username, password);</span><br><span class="line">DatabaseMetaData meta = conn.getMetaData();</span><br><span class="line">ResultSet mrs = meta.getTables(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">new</span> String[]&#123; <span class="string">"Table"</span> &#125;);<span class="comment">// 获取所有表信息</span></span><br></pre></td></tr></table></figure>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>一组语句构成一个事务。在一组语句执行过程中，如果中间某个语句执行失败，那么就需要对之前的所有操作进行回滚 rollback。数据库连接默认处于自动提交模式，即 sql 语句一旦被执行就会被提交 commit，无法对其回滚。因此在使用之前，首先需要关闭自动提交模式 setAutoCommit(false)。部分数据库支持更为细致的回滚操作：通过在一组语句执行过程中设置保存点 setSavepoint，就允许后续的回滚操作撤回到保存点位置。同时 JDBC 允许对数据库进行批量更新操作，通过 conn.addBatch, conn.executeBatch 执行。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《Java 核心技术卷二》<br><a href="https://docs.oracle.com/en/database/oracle/oracle-database/19/jjdbc/toc.htm" target="_blank" rel="noopener">JDBC Developer’s Guide</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>数据库技术</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 使用文档</title>
    <url>/2019/11/18/%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF/mysql%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install mysql <span class="comment"># mac 下使用 Homebrew 安装 mysql https://www.jianshu.com/p/d3f7e7402449</span></span><br><span class="line"></span><br><span class="line">mysql.server start <span class="comment"># 启动</span></span><br><span class="line">mysql.server stop</span><br><span class="line">mysql.server restart</span><br><span class="line"></span><br><span class="line">mysql -u root -p <span class="comment"># 根用户连接数据库</span></span><br><span class="line"></span><br><span class="line">SHOW DATABASES; <span class="comment"># 列出数据库名</span></span><br><span class="line">use DATABASE_NAME; <span class="comment"># 切换默认数据库</span></span><br><span class="line">SHOW TABLES; <span class="comment"># 列出表名</span></span><br><span class="line">SHOW COLUMNS FROM TABLE_NAME; <span class="comment"># 列出某表中的所有属性</span></span><br></pre></td></tr></table></figure>
<h3 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h3><ul>
<li>启动时报错 The server quit without updating PID file：<a href="https://javawind.net/p141" target="_blank" rel="noopener">https://javawind.net/p141</a></li>
<li>查看运行端口：<a href="https://blog.csdn.net/qq_40604853/article/details/81334477" target="_blank" rel="noopener">https://blog.csdn.net/qq_40604853/article/details/81334477</a></li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li>TINYINT：1 字节整数；SMALLINT：2 字节整数；MEDIUMINT：3 字节整数；INT、INTEGER：4 字节整数；BIGINT：8 字节整数</li>
<li>FLOAT：4 字节单精度浮点数；FLOAT：8 字节双精度浮点数；DECIMAL(M,D)：小数</li>
<li>DATE：年月日日期；TIME：时分秒时间；YEAR：年份；DATETIME：年月日时分秒；TIMESTAMP：年月日时分秒 + 时间戳</li>
<li>CHAR：定长字符串，0-255 字节</li>
<li>VARCHAR：变长字符串，0-65535 字节</li>
<li>TINYBLOB：不超过 255 个字符的二进制字符串，0-255 字节</li>
<li>TINYTEXT：短文本字符串，0-255 字节</li>
<li>BLOB：二进制形式的长文本数据，0-65535 字节</li>
<li>TEXT：长文本数据，0-65535 字节</li>
<li>MEDIUMBLOB：二进制形式的中等长度文本数据，0-16777215 字节</li>
<li>MEDIUMTEXT：中等长度文本数据，0-16777215 字节</li>
<li>TLONGBLOB：二进制形式的极大文本数据，0-4294967295 字节</li>
<li>LONGTEXT：极大文本数据，0-4294967295 字节</li>
</ul>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="CREATE、DROP"><a href="#CREATE、DROP" class="headerlink" title="CREATE、DROP"></a>CREATE、DROP</h3><p>CREATE、DROP 语句用来创建或删除数据库、建表或删表。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 创建数据库 **/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> RUNOOB;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> RUNOOB;</span><br><span class="line"><span class="comment">/** 建表 **/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="string">`runoob_tbl`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`runoob_tbl`</span>(</span><br><span class="line">   <span class="string">`runoob_id`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> AUTO_INCREMENT,</span><br><span class="line">   <span class="string">`runoob_title`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   <span class="string">`runoob_author`</span> <span class="built_in">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   <span class="string">`submission_date`</span> <span class="built_in">DATE</span>,</span><br><span class="line">   PRIMARY <span class="keyword">KEY</span> ( <span class="string">`runoob_id`</span> )</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>
<h3 id="SELECT、INSERT、UPDATE、DELETE"><a href="#SELECT、INSERT、UPDATE、DELETE" class="headerlink" title="SELECT、INSERT、UPDATE、DELETE"></a>SELECT、INSERT、UPDATE、DELETE</h3><p>WHERE 语句为 sql 语句设置条件。可选的条件操作符包含 =、&lt;&gt;（不等于）、!=、&gt;、&lt;、&gt;=、&gt;=、LIKE 等。LIKE 语句需要与 % 配合使用，% 表示通配符。没有结合 % 的 LIKE 语句与 = 效果等同。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 查 **/</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> runoob_tbl <span class="keyword">WHERE</span> runoob_author <span class="keyword">LIKE</span> <span class="string">'%COM'</span>;</span><br><span class="line"><span class="comment">/** 增 **/</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> runoob_tbl</span><br><span class="line">  (runoob_title, runoob_author, submission_date)</span><br><span class="line">  <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="string">"JAVA 教程"</span>, <span class="string">"RUNOOB.COM"</span>, <span class="string">'2016-05-06'</span>);</span><br><span class="line"><span class="comment">/** 改 **/</span></span><br><span class="line"><span class="keyword">UPDATE</span> runoob_tbl <span class="keyword">SET</span> runoob_title=<span class="string">'学习 C++'</span> <span class="keyword">WHERE</span> runoob_id=<span class="number">3</span>;</span><br><span class="line"><span class="comment">/** 删 **/</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> runoob_tbl <span class="keyword">WHERE</span> runoob_id=<span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<h3 id="ORDER-BY-排序"><a href="#ORDER-BY-排序" class="headerlink" title="ORDER BY 排序"></a>ORDER BY 排序</h3><p>ORDER BY 语句设定按哪个字段哪种方式来进行排序。默认排序方式 ASC 升序排列，可选 DESC 降序排列。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建雇员表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`employee_tbl`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employee_tbl`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`date`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`singin`</span> <span class="built_in">tinyint</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'登录次数'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从雇员表中检索数据，按日期升序排列</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> employee_tbl <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="built_in">date</span> <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure>
<h3 id="UNION-求并集"><a href="#UNION-求并集" class="headerlink" title="UNION 求并集"></a>UNION 求并集</h3><p>UNION 语句用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。UNION ALL 语句可查出重复数据；UNION DISTINCT 语句会剔除重复的数据。UNION 语句默认采用 UNION DISTINCT 查询模式。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从 Websites、apps 汇总查询数据，结果集包含 country、name 字段，name 字段的值可能是 app_name</span></span><br><span class="line"><span class="keyword">SELECT</span> country, <span class="keyword">name</span> <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> country=<span class="string">'CN'</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> country, app_name <span class="keyword">FROM</span> apps</span><br><span class="line"><span class="keyword">WHERE</span> country=<span class="string">'CN'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> country;</span><br></pre></td></tr></table></figure>
<h3 id="GROUP-BY-分组"><a href="#GROUP-BY-分组" class="headerlink" title="GROUP BY 分组"></a>GROUP BY 分组</h3><p>GROUP BY 语句根据一个或多个列对结果集进行分组。在分组的列上可以使用 COUNT, SUM, AVG 等函数。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建雇员表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`employee_tbl`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employee_tbl`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`date`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`singin`</span> <span class="built_in">tinyint</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'登录次数'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从雇员表中检索数据，按姓名分组，统计每个人有多少条</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> employee_tbl <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">name</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从雇员表中检索数据，按姓名分组，统计登录总次数</span></span><br><span class="line"><span class="comment"># WITH ROLLUP 在分组的基础上再进行统计，登录总次数一行的 name 值为 NULL</span></span><br><span class="line"><span class="comment"># coalesce(column_name_a, column_name_b, column_name_c) 如果 column_name_a 为 NULL，以 column_name_b 代替</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">coalesce</span>(<span class="keyword">name</span>, <span class="string">'总数'</span>), <span class="keyword">SUM</span>(singin) <span class="keyword">as</span> singin_count <span class="keyword">FROM</span> employee_tbl <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">name</span> <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据技术</category>
        <category>sql</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>我看 spring framework</title>
    <url>/2019/11/16/backend/spring/%E6%88%91%E7%9C%8B%20spring%20framework/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我所知的前端脚手架中，dawn 使用中间件的方式串联任务流，nowa 使用子命令的方式串联任务流，umi 使用插件的方式串联任务流。三者中较为特别的是，umi 在提供打包构建、测试、mock 服务器等能力之外，它还以根据配置制作入口文件的方式，集成了路由、限定了前端代码的结构。umi 中的集成意识也许来自于 dva。无论从 dva （由状态管理器入手的）前端应用框架到 umi 脚手架，还是从 antd 组件库到 ant pro 模板工程，蚂蚁工程师们抛出的命题总是一环扣一环。我只觉得，问题会引导人去解决，开阔的应用场景会激发问题，这是一条良性的道路。如果应用场景受限，问题得不到暴露，那就要凭技术上的储备去探知下一个去脉。因此，我学习 spring 的目的在于寻找创新点，手法也是不求甚解。</p>
<h2 id="IoC"><a href="#IoC" class="headerlink" title="IoC"></a>IoC</h2><p>在 spring 中，控制反转就是依赖注入。当 Class B 作为 Class A 的依赖时，控制反转会将 B 实例注入到 A 实例中。其实现过程是可以推想的：首先使用 Bean 容器管理 bean 的生命周期，然后从 xml、注解或 java 配置构成的元数据中解析出 bean 的依赖关系，最后按照依赖关系将 B 实例组装到 A 实例中。在 spring 中，作为 Bean 容器的是 BeanFactory；ApplicationContext 作为 BeanFactory 的超类，额外提供对 AOP、资源加载、国际化、事件发布（通过 ApplicationContext 中转提供 bean 之间消息通信的能力）、特定应用层上下文的支持。在这套机制的基础上，spring 既对 bean 注入的多种情形作了适配（也就是以超强的模式解析能力获取元数据），又可以通过 ApplicationContext 实例访问 bean。由此 spring 提供了声明式编程的能力。</p>
<img src="/2019/11/16/backend/spring/我看%20spring%20framework/container-magic.png">
<p>在上述过程中，spring 需要解决的问题包含：通过 xml、注解或 java 配置 bean 的依赖关系；通过构造函数、静态工厂函数、setter 方法注入依赖；注入时须对依赖 bean 作类型转换和顺序处理，并管理 bean 的实例化、销毁等生命周期；解决 bean 的循环依赖问题（通过预实例化或使用 setter 注入）；实现 bean 的自动装配；扫描文件夹以获取 bean；支持元数据的各种便捷、组合、继承、复杂配置（抽象为 BeanDefinition）；以 @Scope 限定 bean 的作用域（singleton 单例、prototype 调用时创建、request 针对请求创建 bean、session 针对 session 创建 bean、globalSession、自定义作用域等）；以 @Profile 区分不同环境。spring 允许 bean 实现 BeanNameAware、BeanFactoryAware、ApplicationContextAware 等接口，回调或访问 IoC 容器的能力。</p>
<img src="/2019/11/16/backend/spring/我看%20spring%20framework/bean.png">
<p>在 bean 实例化、初始化、依赖解析等过程中，BeanPostProcessor、BeanFactoryPostProcessor、FactoryBean 实现类会以钩子形态被执行。BeanPostProcessor 用于在 bean 实例化后定制 bean；BeanFactoryPostProcessor 用于定制 bean 的配置元数据；FactoryBean 用于定制 bean 的实例化逻辑。以 BeanPostProcessor 为例，其核心处理流程为：在 IoC 容器实例化 bean 后，再由 BeanPostProcessor 处理这些 bean，比如进行校验或者封装（包含 AOP 逻辑）。</p>
<img src="/2019/11/16/backend/spring/我看%20spring%20framework/BeanPostProcessor.png">
<h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><p>Resource 接口抽象了对资源访问的操作，其实现类包含 UrlResource、ClassPathResource、FileSystemResource、ServletContextResource、InputStreamResource、ByteArrayResource 等。ApplicationContext 接口的实现类同时实现了 Resource 接口，加载资源时通过前缀使用不同的 Resource 实现类。</p>
<h2 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h2><p>spring 为 Bean 提供了以下组件能力：Validator 校验器（Validator 本身与 bean 解耦，需要通过 DataBinder 绑定；校验错误由 spring 机制国际化）、BeanWrapper（用于设置或获取 bean 的属性，支持属性变更时的事件绑定）、PropertyEditor（用于作类型转换）、Converter（用于作类型转换）、Formatter（用于作类型转换，支持国际化）、DataBinder（用于为 bean 绑定 Validator 等）。</p>
<h2 id="SpEL"><a href="#SpEL" class="headerlink" title="SpEL"></a>SpEL</h2><p>Spring 表达式语言（简称 SpEL）由 spring 解析字符串表达式，可用于查询和操作数据，其应用点在于 @Value 值设置、解析表达式等。</p>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>AOP 框架为 spring 提供了强力的中间件解决方案。spring 切面基于代理实现，因此可以在目标对象方法执行前后执行额外的拦截器方法（或建议 advice）。如下图所示，先执行代理方法，期间调用目标对象的实际方法。</p>
<img src="/2019/11/16/backend/spring/我看%20spring%20framework/aop-proxy-call.png">
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本文聚焦于解读一个成熟框架在设计上包含了哪些功能，以期拓展思维，因此所述内容不免点到为止。从延伸面上，依赖注入见于 angular、redux-react；模式解析见于 schema form/page；bean 校验和转换可应用于前端数据模型；表达式语言见于模板引擎；AOP 可应用于设计中间件、拦截器。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.spring.io/spring/docs/5.2.2.BUILD-SNAPSHOT/spring-framework-reference/core.html" target="_blank" rel="noopener">The IoC Container</a><br><a href="https://www.jianshu.com/p/c3204049cf02" target="_blank" rel="noopener">IoC容器和Bean</a><br><a href="https://blog.csdn.net/javazhiyin/article/details/93558802" target="_blank" rel="noopener">Spring Resource框架体系介绍</a><br><a href="https://blog.csdn.net/shenchaohao12321/article/details/80295371" target="_blank" rel="noopener">属性编辑器PropertyEditor</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>spring</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>spring测试</title>
    <url>/2019/11/11/backend/spring/spring%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>在 spring mvc 中，可使用 JUnit 作单元测试、Spring Test 作集成测试。测试过程不需要启动项目，可借助 Servlet 相关的模拟对象如 MockMVC、MockHttpServletResquest、MockHttpServletResponse、MockHttpSession 进行模拟。在 spring boot 中，编写测试用例前先加载依赖如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span><span class="comment">&lt;!-- 在 test 周期中有效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>JUnit4 为了保证每个测试方法都是单元测试，是独立的互不影响。所以每个测试方法执行前都会重新实例化测试类，它提供了如下注解：</p>
<ul>
<li>@BeforeClass 和 @AfterClass 在类被实例化前后执行，且只执行一次，通常用来初始化或关闭资源</li>
<li>@Before 和 @After 在每个 @Test 执行前后都会被执行一次</li>
<li>使用 @Test 标记测试方法单元，被 @Ignore 标记的测试方法不会被执行</li>
</ul>
<p>测试脚本编写完成后，可直接运行 run 跑测试用例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)<span class="comment">// 运用 junit4 进行测试，SpringRunner.class 等同 SpringJUnit4ClassRunner.class</span></span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = &#123;YourApplication.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DemoController demoController;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span> </span><br><span class="line">    WebApplicationContext wac;<span class="comment">// 可注入 WebApplicationContext</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span> </span><br><span class="line">    MockHttpSession session;<span class="comment">// 可注入 http session</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span> </span><br><span class="line">    MockHttpServletRequest request;<span class="comment">// 可注入 request</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 初始化 mockMvc</span></span><br><span class="line">      mockMvc = MockMvcBuilders.webAppContextSetup(<span class="keyword">this</span>.wac).build();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPageController</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      mockMvc.perform(get(<span class="string">"/normal"</span>))</span><br><span class="line">          .andExpect(status().isOk())</span><br><span class="line">          .andExpect(view().name(<span class="string">"page"</span>))<span class="comment">// 预期 view 的名称为 page</span></span><br><span class="line">          .andExpect(forwardedUrl(<span class="string">"/WEB-INF/classes/views/page.jsp"</span>))<span class="comment">// 预期页面转向的真正路径为 /WEB-INF/classes/views/page.jsp</span></span><br><span class="line">          .andExpect(model().attribute(<span class="string">"msg"</span>, demoService.saySomething()));<span class="comment">// 预期 model 里的值为 demoService.saySomething 方法的返回结果</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRestController</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      mockMvc.perform(get(<span class="string">"/testRest"</span>))</span><br><span class="line">          .andExpect(status().isOk())</span><br><span class="line">          .andExpect(content().contentType(<span class="string">"text/plain;charset=UTF-8"</span>))<span class="comment">// 期望返回值的媒体类型是 text/plain、UTF-8</span></span><br><span class="line">          .andExpect(content().string(demoService.saySomething()));<span class="comment">// 期望返回值内容为 demoService.saySomething 方法的返回结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/76b893f43bdd" target="_blank" rel="noopener">Spring Boot测试</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>spring</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>前端监控</title>
    <url>/2019/11/10/frontend/architecture/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<h2 id="前端监控"><a href="#前端监控" class="headerlink" title="前端监控"></a>前端监控</h2><p>前端监控包含 js 错误统计、js 错误诊断、api 统计监控、前后端链路追踪、文件加载失败监控、页面访问速度、慢回话追踪等。</p>
<p>js 错误统计可以借助 try…catch、window.onerror 实现。try…catch 能捕获到错误信息描述、堆栈、行号、列号、具体的出错文件信息等，但是它只能在单一的作用域内捕获错误，不能捕获异步函数的错误，如 setTimeout 函数就需要在其内部使用 try…catch 语句，才能捕获定时器回调函数的错误内容。这时候想要使用 try…catch 捕获错误，就需要对 setTimeout 等函数进行封装。window.onerror 可以在任何执行上下文中执行，也能捕获脚本语法错误、运行时错误（出错信息、出错文件、行号等），但不能捕获跨域脚本的错误（跨域脚本只会简单报 script error 错误）。</p>
<p>文件加载失败可以通过加载节点的 onreadystatechange 或 onload 事件加以统计。</p>
<p>页面访问性能可以通过 Performance API 加以统计。</p>
<h2 id="retcode"><a href="#retcode" class="headerlink" title="retcode"></a>retcode</h2><p>retcode 是阿里云 <a href="https://www.alibabacloud.com/help/zh/doc-detail/58652.htm?spm=a2c63.p38356.b99.80.4fcf86c0Gnp5qS" target="_blank" rel="noopener">ARMS 前端监控平台</a>配套的 jssdk。其压缩代码地址为 <a href="https://retcode.alicdn.com/retcode/bl.js。这里不作详解。" target="_blank" rel="noopener">https://retcode.alicdn.com/retcode/bl.js。这里不作详解。</a></p>
<h2 id="Bombay"><a href="#Bombay" class="headerlink" title="Bombay"></a>Bombay</h2><p><a href="https://github.com/bombayjs/bombayjs" target="_blank" rel="noopener">Bombay</a> 通过 xhr 对象或者 window.navigator.sendBeacon 上报数据。上报数据类型包含 error、behavior、health 以及其他，除了 health 尝试使用 window.navigator.sendBeacon 上报以外，其他全部使用 xhr 对象。上报数据的功能实现由 reporter 模块承担；在 reporter 模块的基础上，handlers 模块用于实际上报不同类型的数据，如 pv、health（页面停留时长）、click 点击事件、blur 失焦事件（点击和失焦事件的上报内容包含节点的路径）、performance 性能（首屏渲染时各操作的处理时长）、resource（资源加载时长）、navigation（页面跳转情况）、hashChange（单页应用跳转情况）、caughtError（js 报错，通过 window.addEventListener(‘error’, …) 实现）、promiseError（promise 错误，通过 window.addEventListener(‘unhandledrejection’, …) 实现）、resourceError（资源加载错误）、api（ajax 处理情况）、message（window.postMessage 发送消息）等。在处理单页应用的页面跳转或 ajax 请求等时，Bombay 通过 hack 机制劫持了 window.console、history.pushState、history.replaceState、window.fetch、window.XMLHttpRequest、window.onpopstate 等原生语法，以在封装后的函数执行过程中上报数据。最后，Bombay 根据用户配置项启用功能。</p>
<p>与 mixpanel 一样，Bombay 在上报数据时需要设置 token，即避免其他应用调用上报接口。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/passkey/p/9981654.html" target="_blank" rel="noopener">监控平台前端SDK开发实践</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>architecture</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>前端调试</title>
    <url>/2019/11/10/frontend/architecture/%E5%89%8D%E7%AB%AF%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<p>基本调试可以借助 chrome 控制台实现。</p>
<h2 id="同步刷新"><a href="#同步刷新" class="headerlink" title="同步刷新"></a>同步刷新</h2><h3 id="browser-sync"><a href="#browser-sync" class="headerlink" title="browser-sync"></a>browser-sync</h3><p>browser-sync 通过 web-socket 将变更内容透出到页面侧，因此无须刷新页面。browser-sync 提供了两个方法：init({ server }) 启动本地静态服务器，init({ proxy }) 启动代理服务器（当本地服务器通过其他方式启动时，browser-sync 选用代理模式启动）；reload 实时更新页面变动内容。</p>
<h3 id="emmet-livestyle"><a href="#emmet-livestyle" class="headerlink" title="emmet livestyle"></a>emmet livestyle</h3><p>emmet livestyle 扩展程序（浏览器、编辑器有各自的扩展程序）允许将编辑器的变更内容自动反应在页面上，又将浏览器的变更内容自动反应在编辑器上。</p>
<h2 id="抓包工具"><a href="#抓包工具" class="headerlink" title="抓包工具"></a>抓包工具</h2><p>charles 是 mac os 中的抓包工具，fiddler 是 windows 中的抓包工具，两者都通过将自己设置成系统的网络访问代理服务器实现。即所有请求先经过 charles、fiddler，然后再发送到远程服务器中，因此可以拦截请求、修改请求、修改响应，甚至将响应内容替换成本地资源。fiddler 还可以通过 tools - options - connection 设置监听端口，然后手机代理到该端口，就可以将手机端获得的响应资源替换成本地文件，详情可参阅 <a href="https://www.cnblogs.com/wenbodeboke/p/9770771.html" target="_blank" rel="noopener">fiddler手机抓包配置方法</a>。</p>
<h3 id="charles"><a href="#charles" class="headerlink" title="charles"></a>charles</h3><p>官方网址：<a href="https://www.charlesproxy.com/" target="_blank" rel="noopener">https://www.charlesproxy.com/</a><br>破解jar包获取地址：<a href="https://www.zzzmode.com/mytools/charles/" target="_blank" rel="noopener">https://www.zzzmode.com/mytools/charles/</a><br>charles 参考文档：<a href="https://www.jianshu.com/p/0bc767840e42" target="_blank" rel="noopener">CharlesMac破解版安装以及使用</a></p>
<h2 id="模拟器"><a href="#模拟器" class="headerlink" title="模拟器"></a>模拟器</h2><p>Genymotion</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/xy-nb/p/web.html" target="_blank" rel="noopener">手机web前端调试页面的几种方式</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>architecture</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>前端埋点</title>
    <url>/2019/11/03/frontend/architecture/%E5%89%8D%E7%AB%AF%E5%9F%8B%E7%82%B9/</url>
    <content><![CDATA[<h2 id="埋点统计数据"><a href="#埋点统计数据" class="headerlink" title="埋点统计数据"></a>埋点统计数据</h2><h3 id="用户访问统计"><a href="#用户访问统计" class="headerlink" title="用户访问统计"></a>用户访问统计</h3><p>用户访问统计包含 PV（Page View）、UV（Unique Visitor）、VV（Visit View）、IP 等。PV 用来统计一天之内页面的被访问次数，机刷也可以造成 PV 数据提升。UV 用来统计一天之内访问页面的用户数量，一般使用 IP 统计（IP 统计并不谨慎，同一个办公区或校园公用一个 IP）；使用 cookie + IP 统计（cookie 会被刷新，造成用户数被重复统计）；使用 userAgent + API 统计（userAgent + API 相同的情况也常有发生）。UV 统计的细化点是新访客数、新访客比率等。VV 用来统计一天之内网站被用户访问的次数；用户访问网站到结束访问视为 1 次，因此同一个用户在一天之内可能造成多条 VV。IP 用来统计一天之内访问网站的不重复 IP 数。</p>
<h3 id="用户行为分析"><a href="#用户行为分析" class="headerlink" title="用户行为分析"></a>用户行为分析</h3><p>用户行为分析包含页面点击量、用户点击流、用户访问路径、用户点击热力图、用户转化率、导流转化率、用户访问时长分析和用户访问内容分析等。用户点击量用来统计用户在某个可点击或可操作区域的点击或操作次数。用户点击流用来统计用户在页面中发生点击或操作动作的顺序；埋点过程中，可先用 localStorage 存储用户点击或操作行为的唯一 id，然后在一次 VV 结束或下一次 VV 开始时上报。用户访问路径用来统计用户访问页面的路径。用户点击热力图用来统计用户在一张页面中的点击热衷区域；埋点过程中，可以对 document 点击绑定 click 事件，并上报 e.pageX、e.pageY 数据。用户转化率指的是访问页面的注册用户数和页面 PV 的比值。导流转化率指的是导流页面 PV 和源页面 PV 的比值。用户访问时长用来统计用户在关键内容页面的停留时长，以便分析用户是否对内容感兴趣。</p>
<h2 id="埋点方案"><a href="#埋点方案" class="headerlink" title="埋点方案"></a>埋点方案</h2><p>前端埋点分为：代码埋点、可视化埋点、无痕埋点三种。代码埋点即侵入式埋点，可以在任意时刻、任意位置精确地发送数据，但是工作量较大，对业务代码也有较大影响。可视化埋点即以业务代码为输入，通过可视化系统配置埋点，最后以耦合的形式输出业务代码和埋点代码，但是可视化系统的埋点控件有限，并不能充分满足埋点需求。无痕埋点即无差别地对所有事件等进行全埋点，但是没法定制埋点需求。</p>
<img src="/2019/11/03/frontend/architecture/前端埋点/track.png">
<h3 id="埋点上报数据"><a href="#埋点上报数据" class="headerlink" title="埋点上报数据"></a>埋点上报数据</h3><p>上报的主要数据包含：appid、userAgent、timestamp（上报的时间戳）、currentUrl（用户当前的 url）、fromUrl（前一个页面的 url）、type（上报事件的类型）、element（触发上报事件的元素）、data（自定义数据）等。数据可通过 OpenSSL 或 crypto 模块进行加密。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;   </span><br><span class="line">  <span class="comment">// 上报接口本身提供</span></span><br><span class="line">  currentUrl,  </span><br><span class="line">  fromUrl,</span><br><span class="line">  timestamp,</span><br><span class="line">  userAgent: &#123;</span><br><span class="line">    os,</span><br><span class="line">    netWord,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 业务代码配置和自定义上报数据</span></span><br><span class="line">  <span class="keyword">type</span>,</span><br><span class="line">  appid,</span><br><span class="line">  element,</span><br><span class="line">  data: &#123;</span><br><span class="line">    uid,</span><br><span class="line">    uname</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="mixpanel"><a href="#mixpanel" class="headerlink" title="mixpanel"></a>mixpanel</h2><img src="/2019/11/03/frontend/architecture/前端埋点/mixpanel.png">
<p>按我的个性化解读，<a href="https://github.com/mixpanel/mixpanel-js" target="_blank" rel="noopener">mixpanel</a> 分为三层结构：</p>
<ul>
<li>基本工具层：提供类型判断、遍历、继承、bind 等基本的工具函数；json、base64、utf8 编解码能力；url 参数读写函数；cookie、localStorage 读写能力；dom 事件绑定能力；dom 节点查询能力；info 浏览器信息获取能力。</li>
<li>功能模块层：提供基于 DomTracker 实现的 LinkTracker 跳链接埋点、FormTracker 提交数据埋点功能；autotrack 自动埋点功能；基于 cookie 或 localStorage 的 MixpanelPersistence 持久化功能；MixpanelNotification 提示功能；gdbr 依据欧盟《通用数据保护条例》，首先判断用户是否设置了 navigator.doNotTrack 避免数据被追踪，其次判断持久层是否禁止数据被追踪，当两者同时允许追踪埋点数据时，mixpanel 才会上报埋点数据。</li>
<li>核心实现层：MixpanelLib 串联功能、处理选项、发送埋点数据等；MaxpanelGroup；MaxpanelPeople。</li>
</ul>
<p>mixpanel 根据用户配置项，分别使用 img、script 节点、XHR 对象上报数据，这一逻辑实现在 mixpanelLib._send_request(url, data, callback) 方法中。_send_request 方法会附加上报 ip 地址、时间戳等；callback 回调用于处理服务端响应及上传数据。一般而言，在 _send_reques 方法执行前，mixpanel 会调用 gdbr 模块校验用户或持久层的 token 是否禁止数据被追踪；在 _send_reques 方法执行后，mixpanel 会调用 _check_and_handle_notifications 上报用户的唯一标识，并根据返回结果触发弹窗。基于 _send_request，MixpanelLib 封装了 track(event_name, properties, callback)、_dom_loaded 等方法。其中，track 方法附加上持久层的数据，并以 { event, properties } 格式发送到远程服务器中；track_pageview 方法（上报浏览器和页面信息）、LinkTracker、FormTracker 均基于 track 实现（LinkTracker、FormTracker 在上报数据完成后，再触发原始的跳链接、提交操作）。_dom_loaded 在 DOMContentLoaded 事件中触发执行，为 LinkTracker、FormTracke 相关节点绑定事件。autotrack 自动埋点先须由用户开启，其次请求服务器是否允许自动埋点，然后以事件委托的方式在 document 节点层面收集数据并上报。</p>
<p>mixpanel 有其成熟后的复杂度，个别内容不作详解，另作专题剖析。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>architecture</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>umi-hooks、hox</title>
    <url>/2019/11/02/frontend/library/umi-hooks%E3%80%81hox/</url>
    <content><![CDATA[<p>这篇文章仅整理蚂蚁金服的 umi-hooks、hox 的大致实现原理，以说明 react-hooks 的探索空间和实践场景。循着蚂蚁金服体验技术部的足迹，自觉很能开拓眼界和思路。</p>
<h2 id="umi-hooks"><a href="#umi-hooks" class="headerlink" title="umi-hooks"></a>umi-hooks</h2><h3 id="useAsync"><a href="#useAsync" class="headerlink" title="useAsync"></a>useAsync</h3><p>useAsync 用于处理异步请求，它支持的功能点包含暂停、撤销、重启、轮询。</p>
<p>在实现上，umi-hooks 首先构造 Timer 类以定时器方式执行指定函数，timer.stop、timer.pause、timer.resume 方法可用于终止、暂停、重启定时器（初次启动也通过 resume 方法执行）。以定时器处理异步请求一方面能便于实现轮询，另一方面也是由于请求库未必都实现撤销功能。因为定时器并不能真正打断异步请求，所以 useAsync 只是不去处理响应，而不是撤销请求。另外，对于已卸载的组件，也不需要处理响应。因此是否处理响应的状态标识通过 useEffect 处理，在组件卸载时使其失效，通过 timer.stop 终止时也使其失效。这个状态标识通过 useRef 构造：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是否处理响应标识</span></span><br><span class="line"><span class="comment">// 1. 在异步流程前首先将 count.current 赋值给 runCount 变量</span></span><br><span class="line"><span class="comment">// 2. 异步流程后再判断再判断 count.current 与 runCount 是否等值</span></span><br><span class="line"><span class="comment">// 3. 组件卸载、终止、撤销处理时均将 count.current 自增 1</span></span><br><span class="line"><span class="keyword">const</span> count = useRef(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> init = useRef(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  count.current += <span class="number">1</span>;</span><br><span class="line">  init.current = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    count.current += <span class="number">1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, _deps);</span><br></pre></td></tr></table></figure>
<p>umi-hooks 在 useAsync 函数内部首先通过 useCallback 实现了 run、stop、pause、resume、start 等基础功能（其中，run 方法只是单纯地调用用户传入的异步请求函数 fn）；其次构造 intervalAsync 作为定时器的回调，实现轮询逻辑；其次实现 reload 方法用于重启请求或轮询，cancel 方法取消；最后使用 useEffect 判断选项，分别启用单次请求或轮询功能。以下仅贴示 intervalAsync 的实现：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> intervalAsync = useCallback(</span><br><span class="line">  <span class="keyword">async</span> (...args: <span class="built_in">any</span>[]) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> runCount = count.current;</span><br><span class="line">    <span class="keyword">let</span> ret: Result | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">if</span> (!_options.manual || !init.current) &#123;</span><br><span class="line">      ret = <span class="keyword">await</span> run(...(args || []));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count.current === runCount) &#123;</span><br><span class="line">      <span class="comment">// 只初始化定时器，不开始计时</span></span><br><span class="line">      timer.current = <span class="keyword">new</span> Timer&lt;Result&gt;(</span><br><span class="line">        () =&gt; intervalAsync(...args),</span><br><span class="line">        _options.pollingInterval <span class="keyword">as</span> <span class="built_in">number</span>,</span><br><span class="line">      );</span><br><span class="line">      <span class="comment">// 如果设置了 manual，则默认不开始计时</span></span><br><span class="line">      <span class="keyword">if</span> (init.current &amp;&amp; _options.manual) &#123;</span><br><span class="line">        <span class="comment">// await run(...(args || []));</span></span><br><span class="line">        init.current = <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 开始计时</span></span><br><span class="line">        ret = <span class="keyword">await</span> timer.current.resume(...(args || []));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;,</span><br><span class="line">  [_options.pollingInterval, _options.manual, run],</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="useAPI"><a href="#useAPI" class="headerlink" title="useAPI"></a>useAPI</h3><p>useAPI 在 useAsync 的基础上，以选项指定了远程请求的 url 等参数、异步调用方法。如果没有指定 opt.method 异步调用方法，也可以使用 configRequest 指定或直接使用 window.fetch 方法。</p>
<h3 id="useEventEmitter"><a href="#useEventEmitter" class="headerlink" title="useEventEmitter"></a>useEventEmitter</h3><p>useEventEmitter 用于组织多个组件间的通信逻辑。在实现上，useEventEmitter 基于事件模型。但是绑定事件随着组件的卸载，需要得到解绑，因此 useEventEmitter 使用 useEffect 处理这一逻辑。以下是其源码：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> EventEmitter&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> subscriptions = <span class="keyword">new</span> Set&lt;Subscription&lt;T&gt;&gt;();</span><br><span class="line"></span><br><span class="line">  emit = <span class="function">(<span class="params">val: T</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> subscription of <span class="keyword">this</span>.subscriptions) &#123;</span><br><span class="line">      subscription(val);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  useSubscription = <span class="function">(<span class="params">callback: Subscription&lt;T&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> callbackRef = useRef&lt;Subscription&lt;T&gt;&gt;();</span><br><span class="line">    callbackRef.current = callback;</span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">subscription</span>(<span class="params">val: T</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (callbackRef.current) &#123;</span><br><span class="line">          callbackRef.current(val);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.subscriptions.add(subscription);</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.subscriptions.delete(subscription);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;, []);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useEventEmitter</span>&lt;<span class="title">T</span>&gt;(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ref = useRef&lt;EventEmitter&lt;T&gt;&gt;();</span><br><span class="line">  <span class="keyword">if</span> (!ref.current) &#123;</span><br><span class="line">    ref.current = <span class="keyword">new</span> EventEmitter();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ref.current;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="useUpdateEffect"><a href="#useUpdateEffect" class="headerlink" title="useUpdateEffect"></a>useUpdateEffect</h3><p>useUpdateEffect 效果等同 useEffect，只是执行阶段在 didMount 之后（即更新阶段）。</p>
<h3 id="useLocalStorageState"><a href="#useLocalStorageState" class="headerlink" title="useLocalStorageState"></a>useLocalStorageState</h3><p>useLocalStorageState 用于实时从 localStorage 读写值，又借助 useState 实时更新视图层。</p>
<h3 id="useControllableValue"><a href="#useControllableValue" class="headerlink" title="useControllableValue"></a>useControllableValue</h3><p>useControllableValue 用于处理受控值，它首先通过 props 属性读取初始值和实时值（实时值通过 useUpdateEffect 存入 state 中），随后输出 state、handleSetState 以供视图层使用。在 handleSetState 方法执行期间，useControllableValue 还允许执行 props.onChange 等方法。</p>
<h3 id="useSelections"><a href="#useSelections" class="headerlink" title="useSelections"></a>useSelections</h3><p>useSelections 借助 Set 类以及 useMemo 实现，用于处理选择逻辑。</p>
<h3 id="useDynamicList"><a href="#useDynamicList" class="headerlink" title="useDynamicList"></a>useDynamicList</h3><p>useDynamicList 用于管理列表的增删改查逻辑，除了使用 setState 维护列表元素外，还维护了 key 键列表（用于存储原数组元素在 state 中的新的索引）。</p>
<h3 id="usePagination"><a href="#usePagination" class="headerlink" title="usePagination"></a>usePagination</h3><p>usePagination 在 useAsync 的基础上，用于处理分页逻辑。</p>
<h3 id="useSearch"><a href="#useSearch" class="headerlink" title="useSearch"></a>useSearch</h3><p>useSearch 在 useAsync 的基础上，用于在表单或字段内容改变时，自动或手动发送请求获取相应。这一过程通过定时器防抖（避免频繁请求）。</p>
<h3 id="useLoadMore"><a href="#useLoadMore" class="headerlink" title="useLoadMore"></a>useLoadMore</h3><p>useLoadMore 在 useAsync 的基础上，实现了下拉或点击加载更多的处理逻辑。其 reload 逻辑的实现是，使用 state 记录加载次数 count，当这个 count 变更时，再使用 useEffect 远程获取数据。</p>
<h3 id="useAntdTable"><a href="#useAntdTable" class="headerlink" title="useAntdTable"></a>useAntdTable</h3><p>useAntdTable 用于组织 antd-table 表格的逻辑，支持远程请求、分页、筛选、排序、搜索表单等功能。在实现上，useAntdTable 使用 useReducer 管理状态。当表格页面切换时，为了重新加载之前访问的页面数据，useAntdTable 使用 cacheData 缓存数据。在状态变更后，useAntdTable 借助 useUpdateEffect 重新发起请求。当表单数据改变时，useAntdTable 使用定时器获取表单数据，随后更新 state.count 值，最后通过 useUpdateEffect 重新发起请求。以下是部分方法的实现：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 如果存在 options.id，在切换页面时缓存页面数据，切回表格页面时重新加载</span></span><br><span class="line">  <span class="keyword">if</span> (id &amp;&amp; cacheData[id]) &#123;</span><br><span class="line">    <span class="keyword">const</span> cache = cacheData[id];</span><br><span class="line">    <span class="comment">/* 修改完 formData 和 searchType 之后，会触发 useUpdateEffect，给当前表单赋值 */</span></span><br><span class="line">    dispatch(&#123;</span><br><span class="line">      <span class="keyword">type</span>: <span class="string">'updateState'</span>,</span><br><span class="line">      payload: &#123;</span><br><span class="line">        current: cache.current,</span><br><span class="line">        pageSize: cache.pageSize,</span><br><span class="line">        searchType: cache.searchType,</span><br><span class="line">        activeFormData: cache.activeFormData,</span><br><span class="line">        formData: cache.formData,</span><br><span class="line">        filters: cache.filters,</span><br><span class="line">        sorter: cache.sorter,</span><br><span class="line">        count: state.count + <span class="number">1</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (form) &#123;</span><br><span class="line">    <span class="comment">/* 如果有 form，需要走 searchSubmit，为了初始化的时候，拿到 initialValue */</span></span><br><span class="line">    searchSubmit();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    refresh();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (id) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      cacheData[id] = stateRef.current;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> searchSubmit = useCallback(</span><br><span class="line">  (e?: <span class="built_in">string</span> | React.MouseEvent&lt;HTMLElement&gt; | React.KeyboardEvent&lt;HTMLInputElement&gt;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!form) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (e &amp;&amp; (e <span class="keyword">as</span> React.MouseEvent&lt;HTMLElement&gt;).preventDefault) &#123;</span><br><span class="line">      (e <span class="keyword">as</span> React.MouseEvent&lt;HTMLElement&gt;).preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> activeFormData = getCurrentFieldsValues();</span><br><span class="line">      dispatch(&#123;</span><br><span class="line">        <span class="keyword">type</span>: <span class="string">'updateState'</span>,</span><br><span class="line">        payload: &#123;</span><br><span class="line">          activeFormData,</span><br><span class="line">          formData: &#123; ...state.formData, ...activeFormData &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// reload 更新 state 中的 current、count</span></span><br><span class="line">      reload();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  [form, reload],</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="useResponsive"><a href="#useResponsive" class="headerlink" title="useResponsive"></a>useResponsive</h3><p>useResponsive 通过监听 resize 事件，及时更新屏幕尺寸状态（屏幕尺寸分为 xs、sm、md、lg、xl 五种），提供一种绘制响应式视图的能力。</p>
<h3 id="useSize"><a href="#useSize" class="headerlink" title="useSize"></a>useSize</h3><p>useSize 借助 resize-observer-polyfill 库，实时获取 dom 节点的尺寸大小变更。useSize 监听的 dom 节点可以通过首参传入；在不传入首参的情况下，umi-hooks 可以通过 useRef 设置 dom 节点。</p>
<h3 id="useVirtualList"><a href="#useVirtualList" class="headerlink" title="useVirtualList"></a>useVirtualList</h3><p>useVirtualList 用于解决展示海量数据渲染时首屏渲染缓慢和滚动卡顿问题，采用的方式是逐屏滚动。在实现上，useVirtualList 使用滚动容器包裹列表，列表全量展示，通过 onScroll 事件实时设置 scrollTop 设置偏移量。以下是 useVirtualList 的实现：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;T = <span class="built_in">any</span>&gt;<span class="function">(<span class="params">list: T[], options: OptionType</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [size, containerRef] = useSize&lt;HTMLElement&gt;();</span><br><span class="line">  <span class="comment">// 暂时禁止 cache</span></span><br><span class="line">  <span class="comment">// const distanceCache = useRef&lt;&#123; [key: number]: number &#125;&gt;(&#123;&#125;);</span></span><br><span class="line">  <span class="keyword">const</span> [state, setState] = useState(&#123; start: <span class="number">0</span>, end: <span class="number">10</span> &#125;);</span><br><span class="line">  <span class="keyword">const</span> &#123; itemHeight, overscan = <span class="number">5</span> &#125; = options;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!itemHeight) &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">'please enter a valid itemHeight'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取滚动容器能展示的元素数</span></span><br><span class="line">  <span class="keyword">const</span> getViewCapacity = <span class="function">(<span class="params">containerHeight: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> itemHeight === <span class="string">'number'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Math</span>.ceil(containerHeight / itemHeight);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123; start = <span class="number">0</span> &#125; = state;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> capacity = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; list.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> height = <span class="function">(<span class="params">itemHeight <span class="keyword">as</span> (<span class="params">(<span class="params">index: <span class="built_in">number</span></span>) =&gt; <span class="built_in">number</span></span>)</span>)(<span class="params">i</span>);</span></span><br><span class="line"><span class="function">      <span class="params">sum</span> += <span class="params">height</span>;</span></span><br><span class="line"><span class="function">      <span class="params">if</span> (<span class="params">sum &gt;= containerHeight</span>) &#123;</span></span><br><span class="line"><span class="function">        <span class="params">capacity</span> = <span class="params">i</span>;</span></span><br><span class="line"><span class="function">        <span class="params">break</span>;</span></span><br><span class="line"><span class="function">      &#125;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    <span class="params">return</span> <span class="params">capacity</span> - <span class="params">start</span>;</span></span><br><span class="line"><span class="function">  &#125;;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  // 计算滚动隐藏内容的元素数</span></span><br><span class="line"><span class="function">  <span class="params">const</span> <span class="params">getOffset</span> = (<span class="params">scrollTop: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> itemHeight === <span class="string">'number'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Math</span>.floor(scrollTop / itemHeight) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> offset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> height = <span class="function">(<span class="params">itemHeight <span class="keyword">as</span> (<span class="params">(<span class="params">index: <span class="built_in">number</span></span>) =&gt; <span class="built_in">number</span></span>)</span>)(<span class="params">i</span>);</span></span><br><span class="line"><span class="function">      <span class="params">sum</span> += <span class="params">height</span>;</span></span><br><span class="line"><span class="function">      <span class="params">if</span> (<span class="params">sum &gt;= scrollTop</span>) &#123;</span></span><br><span class="line"><span class="function">        <span class="params">offset</span> = <span class="params">i</span>;</span></span><br><span class="line"><span class="function">        <span class="params">break</span>;</span></span><br><span class="line"><span class="function">      &#125;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    <span class="params">return</span> <span class="params">offset</span> + 1;</span></span><br><span class="line"><span class="function">  &#125;;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  // 计算列表的起止元素</span></span><br><span class="line"><span class="function">  <span class="params">const</span> <span class="params">calculateRange</span> = <span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> element = containerRef.current;</span><br><span class="line">    <span class="keyword">if</span> (element) &#123;</span><br><span class="line">      <span class="keyword">const</span> offset = getOffset(element.scrollTop);</span><br><span class="line">      <span class="keyword">const</span> viewCapacity = getViewCapacity(element.clientHeight);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">from</span> = offset - overscan;</span><br><span class="line">      <span class="keyword">const</span> to = offset + viewCapacity + overscan;</span><br><span class="line">      setState(&#123; start: <span class="keyword">from</span> &lt; <span class="number">0</span> ? <span class="number">0</span> : <span class="keyword">from</span>, end: to &gt; list.length ? list.length : to &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在滚动容器变更时，重新计算列表的起止元素</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    calculateRange();</span><br><span class="line">  &#125;, [size.width, size.height]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算列表总高度</span></span><br><span class="line">  <span class="keyword">const</span> totalHeight = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> itemHeight === <span class="string">'number'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> list.length * itemHeight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list.reduce(<span class="function">(<span class="params">sum, _, index</span>) =&gt;</span> sum + itemHeight(index), <span class="number">0</span>);</span><br><span class="line">  &#125;, [list.length]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取 index 元素与顶部的距离</span></span><br><span class="line">  <span class="keyword">const</span> getDistanceTop = <span class="function">(<span class="params">index: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> itemHeight === <span class="string">'number'</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> height = index * itemHeight;</span><br><span class="line">      <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> height = list.slice(<span class="number">0</span>, index).reduce(<span class="function">(<span class="params">sum, _, i</span>) =&gt;</span> sum + itemHeight(i), <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> height;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> scrollTo = <span class="function">(<span class="params">index: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (containerRef.current) &#123;</span><br><span class="line">      containerRef.current.scrollTop = getDistanceTop(index);</span><br><span class="line">      calculateRange();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 通过 state 待展示的元素</span></span><br><span class="line">    list: list.slice(state.start, state.end).map(<span class="function">(<span class="params">ele, index</span>) =&gt;</span> (&#123;</span><br><span class="line">      data: ele,</span><br><span class="line">      index: index + state.start,</span><br><span class="line">    &#125;)),</span><br><span class="line">    scrollTo,</span><br><span class="line">    containerProps: &#123;</span><br><span class="line">      ref: <span class="function">(<span class="params">ele: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">        containerRef.current = ele;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 通过滚动事件重新设置偏移量</span></span><br><span class="line">      onScroll: <span class="function">(<span class="params">e: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        calculateRange();</span><br><span class="line">      &#125;,</span><br><span class="line">      style: &#123; overflowY: <span class="string">'auto'</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    wrapperProps: &#123;</span><br><span class="line">      style: &#123; width: <span class="string">'100%'</span>, height: totalHeight, paddingTop: getDistanceTop(state.start) &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="hox"><a href="#hox" class="headerlink" title="hox"></a>hox</h2><p>hox 号称“下一代状态管理器”，因此它的意图还是在于使用 hooks 抽象 ViewModel 层，将 hooks 的使用过程从与视图组件的强关联中解放出来，同时支持在类组件中也能使用 hooks。那么，它是怎么做到的呢？它的代码逻辑很简单，即使用 Exector 虚拟组件来运作 hooks 逻辑，hooks 返回值通过绑定事件的方式通知到 Exector 虚拟组件外层，然后使用 setState 接值，传入实际渲染的视图组件中。</p>
<img src="/2019/11/02/frontend/library/umi-hooks、hox/hox.png">
<p>以下是其实现逻辑：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createModel</span>&lt;<span class="title">T</span>&gt;(<span class="params">hook: ModelHook&lt;T&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> element = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">  <span class="comment">// Container 提供事件绑定、触发的机制</span></span><br><span class="line">  <span class="keyword">const</span> container = <span class="keyword">new</span> Container(hook);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过虚拟组件承载 hooks 执行逻辑，每次重绘时执行 hooks 并 onUpdate 钩子</span></span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    &lt;Executor</span><br><span class="line">      onUpdate=&#123;<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">        container.data = val;</span><br><span class="line">        container.notify();</span><br><span class="line">      &#125;&#125;</span><br><span class="line">      hook=&#123;hook&#125;</span><br><span class="line">    /&gt;,</span><br><span class="line">    element</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">const</span> useModel: UseModel&lt;T&gt; = <span class="function"><span class="params">depsFn</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [state, setState] = useState&lt;T | <span class="literal">undefined</span>&gt;<span class="function">(<span class="params">(<span class="params"></span>) =&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">      container ? (<span class="params">container.data <span class="keyword">as</span> T</span>) : <span class="literal">undefined</span></span></span></span><br><span class="line"><span class="function"><span class="params">    </span>);</span></span><br><span class="line"><span class="function">    <span class="params">const</span> <span class="params">depsFnRef</span> = <span class="params">useRef</span>(<span class="params">depsFn</span>);</span></span><br><span class="line"><span class="function">    <span class="params">depsFnRef</span>.<span class="params">current</span> = <span class="params">depsFn</span>;</span></span><br><span class="line"><span class="function">    <span class="params">const</span> <span class="params">depsRef</span> = <span class="params">useRef</span>&lt;<span class="params">unknown</span>[]&gt;(<span class="params">[]</span>);</span></span><br><span class="line"><span class="function">    <span class="params">useEffect</span>(<span class="params">(<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">if</span> (<span class="params">!container</span>) <span class="keyword">return</span>;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="comment">// 作为绑定函数，承接 hooks 返回值，并使用 useState 机制传给实际的视图组件</span></span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">function</span> subscriber(<span class="params">val: T</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">if</span> (<span class="params">!depsFnRef.current</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">          setState(<span class="params">val</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">const</span> oldDeps = depsRef.current;</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">const</span> newDeps = depsFnRef.current(<span class="params">val</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">if</span> (<span class="params">compare(<span class="params">oldDeps, newDeps</span>)</span>) &#123;<span class="comment">// 比较依赖</span></span></span></span><br><span class="line"><span class="function"><span class="params">            setState(<span class="params">val</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">          &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">          depsRef.current = newDeps;</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">      &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">      container.subscribers.add(<span class="params">subscriber</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">return</span> (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        container.subscribers.<span class="keyword">delete</span>(<span class="params">subscriber</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">      &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;, [container]</span>);</span></span><br><span class="line"><span class="function">    <span class="params">return</span> <span class="params">state</span>!;</span></span><br><span class="line"><span class="function">  &#125;;</span></span><br><span class="line"><span class="function">  <span class="params">Object</span>.<span class="params">defineProperty</span>(<span class="params">useModel, "data", &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">return</span> container.data;</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;</span>);</span></span><br><span class="line"><span class="function">  <span class="params">return</span> <span class="params">useModel</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<p>当一个视图组件需要多个 model 时，hox 像 redux 一样提供了 withModel 方法用于将多个 model 内容传输给类组件的 props。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>library</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>hybird app</title>
    <url>/2019/10/29/frontend/architecture/hybird%20app/</url>
    <content><![CDATA[<p>hybird app 介于 native app、web app 之间，性能比 web app 好，比 native app 差，但是适应了更多的移动开发场景。hybird app 具有如下特点：因为受到移动设备CPU、内存、网卡、网络连接等限制，hybird app 可用的系统网络资源有限；hybird app 支持更新的浏览器特性；hybird app 可实现离线应用，即借助浏览器最新的特性或 Native 的文件读取机制进行文件级的文件缓存或离线更新；hybird app 需要考虑不同设备机型的兼容性问题；hybird app 支持唤起 Native 的能力，如摄像头、定位、传感器、本地文件访问等。理想情况下，hybird app 须唤起 native 能力绘制通用导航菜单、系统 UI、核心动效等，这样能充分利用 native 的性能优势（WebView 的执行性能只有移动端浏览器的 1/3 ~ 1/4）。</p>
<h2 id="web-到-native-通信协议"><a href="#web-到-native-通信协议" class="headerlink" title="web 到 native 通信协议"></a>web 到 native 通信协议</h2><h3 id="通过-url"><a href="#通过-url" class="headerlink" title="通过 url"></a>通过 url</h3><p>Native 应用在移动端系统中注册一个 Schema 协议的 URI，这个 URI 可在系统的任意地方授权访问来掉漆一段原生方法或一个原生的界面。在此基础上，Native 应用的 WebView 控件中的 js 脚本也可以远程请求匹配 Schema 协议的 URI，如通过 iframe 的 src 属性，这个请求就能被 Native 应用的系统捕获并调起 Native 应用注册匹配的 Schema 协议内容，以唤起原生能力。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">iframe.setAttribute(<span class="string">'style'</span>, <span class="string">'display: none'</span>);</span><br><span class="line"><span class="built_in">document</span>.appendChild(iframe);</span><br><span class="line">iframe.setAttribute(<span class="string">'src'</span>, <span class="string">'myApp://className/method?args'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="通过-addJavascriptInterface"><a href="#通过-addJavascriptInterface" class="headerlink" title="通过 addJavascriptInterface"></a>通过 addJavascriptInterface</h3><p>Native 应用也可以通过 addJavascriptInterface 方法将 Native 的一个对象方法注入到页面 window 对象中，供 js 调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Websettings websettings = webView.getSettings();</span><br><span class="line">websettings.setJavascriptEnabled(<span class="keyword">true</span>);<span class="comment">// 设置 webView 允许执行 js 脚本</span></span><br><span class="line">webView.loadUrl(<span class="string">'file:///android_asset/index.html'</span>);<span class="comment">// 加载页面到 webView 中</span></span><br><span class="line">webView.addJavascriptInterface(<span class="keyword">new</span> JsInterface(), <span class="string">'native'</span>);<span class="comment">// window 加入 native 对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsInterface</span> </span>&#123;</span><br><span class="line">  <span class="meta">@JavascriptInterface</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">(String toast)</span> </span>&#123;</span><br><span class="line">    Toast.makeText(MainActivity.<span class="keyword">this</span>, toast, Toast.LENGTH_SHORT).show();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>addJavascriptInterface 在 Android 4.2 以下版本有安全漏洞。另一种可行的方法时，当 js 调用 alert 或 prompt 方法时，会执行 Native 中的 onJsAlert 或 onJsPrompt 方法，因此就可以用这两个方法加以监听 html5 传递的消息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">webView.setWebChromeClient(<span class="keyword">new</span> WebChromeClient() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsPrompt</span><span class="params">(WebView view, String url, String message, </span></span></span><br><span class="line"><span class="function"><span class="params">    String defaultValue, JsPromptResult result)</span> </span>&#123;</span><br><span class="line">    result.confirm(JSBridge.callJsPrompt(MainActivity.<span class="keyword">this</span>, view, message));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="native-到-web-通信协议"><a href="#native-到-web-通信协议" class="headerlink" title="native 到 web 通信协议"></a>native 到 web 通信协议</h2><p>首先在 html5 页面的全局作用域下声明一个方法；其次在 Android 中使用 loadUrl 唤起这个方法，或者在 iOS 中使用 stringByEvaluatingJavaScriptFromString 唤起这个方法，这样就能使 Native 应用主动调用 html5 中的 js 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Websettings websettings = webView.getSettings();</span><br><span class="line">websettings.setJavascriptEnabled(<span class="keyword">true</span>);<span class="comment">// 设置 webView 允许执行 js 脚本</span></span><br><span class="line">webView.loadUrl(<span class="string">'file:///android_asset/index.html'</span>);<span class="comment">// 加载页面到 webView 中</span></span><br><span class="line">JsInterface jsInterface = <span class="keyword">new</span> JsInterface();</span><br><span class="line">jsInterface.log(<span class="string">'hello world'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsInterface</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(<span class="keyword">final</span> String msg)</span> </span>&#123;</span><br><span class="line">    webView.post(<span class="keyword">new</span> Runnable() &#123;<span class="comment">// 创建一个新线程执行 js 中的 log 方法</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用 html5 中 window.log 方法</span></span><br><span class="line">        webView.loadUrl(<span class="string">'javascript: log('</span> + <span class="string">'"'</span> + msg + <span class="string">'"'</span> + <span class="string">')'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h2><p>目前较多使用的通信协议方案为 jsbridge://className:callbackMethod/methodName?jsonObj。jsbridge 为 Native 注册的协议头；className 为调用 Native 的类；methodName 为类中的方法名；jsonObj 为传递的参数；callbackMethod 为 Native 回调 js 的方法名，即 Native 调用 webView.loadUrl(‘javascript: callbackMethod()’)。以 html5 中请求 jsbridge://Util:success/toString?{“msg”: “hello world”} 为例，Native 使用 Util 类中的 toString 方法处理参数 {“msg”: “hello world”}，完成后再回调 html5 中的 success 方法。</p>
<p>通常 jsBridge 中会使用公共方法发送请求。如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">JsBridge.call = <span class="function"><span class="keyword">function</span>(<span class="params">className, methodName, params, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> bridgeStr;</span><br><span class="line">  <span class="keyword">let</span> paramsStr = <span class="built_in">JSON</span>.stingify(params || &#123;&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (className &amp;&amp; methodName)&#123;</span><br><span class="line">    bridgeStr = <span class="string">`jsbridge://<span class="subst">$&#123;className&#125;</span>:<span class="subst">$&#123;callback&#125;</span>/<span class="subst">$&#123;methodName&#125;</span>?<span class="subst">$&#123;paramsStr&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      sendToNative(bridgeStr);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Invalid className or methodName'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setToNative</span>(<span class="params">url, data</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.prompt(url, <span class="built_in">JSON</span>.stringify(data || &#123;&#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="离线缓存与更新"><a href="#离线缓存与更新" class="headerlink" title="离线缓存与更新"></a>离线缓存与更新</h2><h3 id="ServiceWorker"><a href="#ServiceWorker" class="headerlink" title="ServiceWorker"></a>ServiceWorker</h3><p>使用 ServiceWorker 作离线缓存可参考 <a href="https://blog.csdn.net/huangpb123/article/details/89498418" target="_blank" rel="noopener">Service Worker —— 这应该是一个挺全面的整理</a>，ServiceWorker 有兼容性问题。</p>
<h3 id="localeStorage"><a href="#localeStorage" class="headerlink" title="localeStorage"></a>localeStorage</h3><p>使用 localeStorage 作离线缓存就是带版本号形式缓存静态资源、页面内容、响应。典型如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newVersion = <span class="built_in">document</span>.getElementById(<span class="string">'versionStore'</span>).getAttribute(<span class="string">'data-version'</span>);</span><br><span class="line"><span class="keyword">const</span> oldVersion = localeStorage.getItem(<span class="string">'version'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (newVersion &gt; (oldVersion || <span class="number">0</span>))&#123;</span><br><span class="line">  loadScript(<span class="string">`scriptpath/<span class="subst">$&#123;newVersion&#125;</span>.js`</span>).then(<span class="function"><span class="params">content</span> =&gt;</span> &#123;</span><br><span class="line">    localeStorage.setItem(<span class="string">'scriptpath'</span>, content);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">  script.innerHtml = localeStorage.getItem(<span class="string">'scriptpath'</span>);</span><br><span class="line">  <span class="built_in">document</span>.appendChild(script);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用 localeStorage 有以下缺点：大小有限制（同域一般认为 5M 以内）；用户手动清空会使 localeStorage 失效；读取 localeStorage 较慢。</p>
<h3 id="文件增量更新"><a href="#文件增量更新" class="headerlink" title="文件增量更新"></a>文件增量更新</h3><p>文件增量更新指的是：客户端通过 localeStorage 获取本地缓存资源的版本号，与 html 页面中最新版本号对比，如果本地版本号较小，则加载增量的静态资源，如本地为 1.1.js，远程最新版本为 1.4.js，则增量获取 1.1-1.4.js。有两种机制可以实现文件的增量更新：基于代码分块、基于编辑距离。基于代码分块的思路是，以增量描述说明代码块的变动内容，新增、删除、修改、保持原样；然后根据原文件和增量描述产生新文件。基于编辑距离（Levenshtein Distance）是计算从一个字符串变更到另一个字符串的最少操作步骤，适合于少量字符串变更的文件内容。</p>
<p>使用文件增量更新机制，有必要埋点统计不同版本号的用户覆盖率。</p>
<h3 id="native-离线资源"><a href="#native-离线资源" class="headerlink" title="native 离线资源"></a>native 离线资源</h3><p>当用户访问页面，native 首先会检查离线资源包中是否存在本地目录中的文件，然后将其与线上资源对比：如果线上有最新资源，则拉取线上资源并缓存，没有，就使用本地资源。这样当再次访问页面时，WebView 就可以读取本地资源了。</p>
<h2 id="支付宝-jssdk"><a href="#支付宝-jssdk" class="headerlink" title="支付宝 jssdk"></a>支付宝 jssdk</h2><p><a href="https://gw.alipayobjects.com/as/g/h5-lib/alipayjsapi/3.1.1/alipayjsapi.js" target="_blank" rel="noopener">alipayjsapi</a> 首先添加 <a href="https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE" target="_blank" rel="noopener">es6-promise</a> 垫片。</p>
<h3 id="核心流程"><a href="#核心流程" class="headerlink" title="核心流程"></a>核心流程</h3><p>alipayjsapi 通过 addJavascriptInterface 为 window 对象注入 AlipayJSBridge 对象，html5 页面中即可以用如 AlipayJSBridge.call(‘alert’,{message: 12345}) 形式唤起 native 能力。alipayjsapi 另外构造了一个 _JSAPI 对象。_JSAPI 约定了各方法是怎样处理入参、唤起 native 能力、处理出参等的。下面以 redirectTo 说明 _JSAPI 对象的构造：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _JSAPI = &#123;</span><br><span class="line">  compressImage: &#123;</span><br><span class="line">    b: <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">opt</span>) </span>&#123;</span><br><span class="line">      opt.level = __isUndefined(opt.level) ? <span class="number">4</span> : opt.level;</span><br><span class="line">      <span class="comment">// _mapping 将 opt._ 更名为 opt.apFilePaths</span></span><br><span class="line">      <span class="keyword">return</span> _mapping(opt, &#123;</span><br><span class="line">        _: <span class="string">'apFilePaths'</span>,</span><br><span class="line">        level: <span class="string">'compressLevel%d'</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    d: <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params">_opt, cb</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (__isAndroid()) &#123;</span><br><span class="line">        _JS_BRIDGE.call(<span class="string">'compressImage'</span>, _opt, cb);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// _fakeCallBack 使用定时器直接调用 cb</span></span><br><span class="line">        _fakeCallBack(cb, &#123;</span><br><span class="line">          apFilePaths: _opt.apFilePaths || []</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 _JSAPI 对象中，每个 api 可能包含以下方法或属性：m，即 mapping 的缩写，指定 native 端实际的接口名；b，即 before 的缩写，前置处理函数，用于转化入参；d，即 doing 的缩写，指定实际的执行流程（在不指定的情况下，将使用 AlipayJSBridge.call 的形式唤起 native 能力）；a，即 after 的缩写，后置处理函数，用于转化出参；e 或者 extra，指定 handleEventData 等扩展字段。在上面一段代码中，compressImage.b 就在转换选项，compressImage.d 就在执行图片压缩操作或不作任何处理。</p>
<p>在 _JSAPI 的基础上，alipayjsapi 的核心流程即使用 _JSAPI 处理出入参数，再使用 AlipayJSBridge.call 唤起 native 能力；偶然绑定事件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> AP = &#123;</span><br><span class="line">  call: <span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = __argumentsToArg(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">if</span> (__isSupportPromise()) &#123;</span><br><span class="line">      <span class="keyword">return</span> AP.ready().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(realCall);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//如果直接加到 ready 事件里会有不触发调用的情况</span></span><br><span class="line">      <span class="comment">//AP.ready(realCall);</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (_isBridgeReady()) &#123;</span><br><span class="line">        realCall();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//保存在待执行队列</span></span><br><span class="line">        _WAITING_QUEUE.push(args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">realCall</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> apiName;</span><br><span class="line">      <span class="keyword">var</span> opt; <span class="comment">//原始 option</span></span><br><span class="line">      <span class="keyword">var</span> cb; <span class="comment">//原始 callback</span></span><br><span class="line">      <span class="keyword">var</span> _opt; <span class="comment">//处理过的 option</span></span><br><span class="line">      <span class="keyword">var</span> _cbSFC; <span class="comment">//不同状态回调</span></span><br><span class="line">      <span class="keyword">var</span> _cb; <span class="comment">//处理过的 callback</span></span><br><span class="line">      <span class="keyword">var</span> onEvt;</span><br><span class="line">      <span class="keyword">var</span> offEvt;</span><br><span class="line">      <span class="keyword">var</span> doingFn;</span><br><span class="line">      <span class="keyword">var</span> logOpt;</span><br><span class="line">      <span class="comment">//强制转为 name + object + function 形式的入参</span></span><br><span class="line">      apiName = args[<span class="number">0</span>] + <span class="string">''</span>;</span><br><span class="line">      opt = args[<span class="number">1</span>];</span><br><span class="line">      cb = args[<span class="number">2</span>];</span><br><span class="line">      <span class="comment">//处理 cb 和 opt 的顺序</span></span><br><span class="line">      <span class="keyword">if</span> (__isUndefined(cb) &amp;&amp; __isFunction(opt)) &#123;</span><br><span class="line">        cb = opt;</span><br><span class="line">        opt = &#123;&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//接口有非对象入参，设为快捷入参</span></span><br><span class="line">      <span class="keyword">if</span> (!__isObject(opt) &amp;&amp; args.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">//before、doing、after 方法中直接取 opt._ 作为参数</span></span><br><span class="line">        opt = &#123;</span><br><span class="line">          _: opt</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//兜底</span></span><br><span class="line">      <span class="keyword">if</span> (__isUndefined(opt)) &#123;</span><br><span class="line">        opt = &#123;&#125;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 处理入参，使用 _JSAPI[apiName].b 处理 opt</span></span><br><span class="line">      _opt = _getApiOption(apiName, opt, cb);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取回调，_opt 以 success、fail、complete 属性约定回调</span></span><br><span class="line">      _cbSFC = _getApiCallBacks(apiName, _opt);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (__isUndefined(_opt)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'please confirm '</span> + apiName + <span class="string">'.before() returns the options.'</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取 _JSAPI[apiName].d 方法</span></span><br><span class="line">      doingFn = _getApiDoing(apiName);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 输出入参</span></span><br><span class="line">      logOpt = __hasOwnProperty(opt, <span class="string">'_'</span>) ? opt._ : opt;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// AP.debug 置为真值时，在控制台打印信息</span></span><br><span class="line">      _apiLog(apiName, logOpt, _opt);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 是否是事件监听，apiName 以 on 起始</span></span><br><span class="line">      onEvt = _getApiOnEvent(apiName);</span><br><span class="line">      <span class="comment">// 是否是事件移除，apiName 以 off 起始</span></span><br><span class="line">      offEvt = _getApiOffEvent(apiName);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 处理回调</span></span><br><span class="line">      _cb = <span class="function"><span class="keyword">function</span> <span class="title">_cb</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _res = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">        res = res || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (onEvt &amp;&amp; _getApiExtra(apiName, <span class="string">'handleEventData'</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">          _res = _handleEventData(res);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 _JSAPI[apiName].a 处理结果</span></span><br><span class="line">        _res = _getApiResult(apiName, _res || res, _opt, opt, cb);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (__isUndefined(_res)) &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(<span class="string">'please confirm '</span> + apiName + <span class="string">'.after() returns the result.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理错误码及相应，即处理 _res.error 及 res</span></span><br><span class="line">        _res = _handleApiError(apiName, _res);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印 debug 日志</span></span><br><span class="line">        _apiLog(apiName, logOpt, _opt, res, _res);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (__hasOwnProperty(_res, <span class="string">'error'</span>) || __hasOwnProperty(_res, <span class="string">'errorMessage'</span>)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (__isFunction(reject)) &#123;</span><br><span class="line">            reject(_res);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (__isFunction(_cbSFC.fail)) &#123;</span><br><span class="line">            _cbSFC.fail(_res);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (__isFunction(resolve)) &#123;</span><br><span class="line">            resolve(_res);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (__isFunction(_cbSFC.success)) &#123;</span><br><span class="line">            _cbSFC.success(_res);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (__isFunction(_cbSFC.complete)) &#123;</span><br><span class="line">          _cbSFC.complete(_res);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行用户的回调</span></span><br><span class="line">        <span class="keyword">if</span> (__isFunction(cb)) &#123;</span><br><span class="line">          cb(_res);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果存在 d 直接执行，否则执行 AlipayJSBridge.call</span></span><br><span class="line">      <span class="keyword">if</span> (__isFunction(doingFn)) &#123;</span><br><span class="line">        doingFn(_opt, _cb, opt, cb);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (onEvt) &#123;</span><br><span class="line">        <span class="comment">// 将事件、处理函数等存入 _CACHE.EVENTS</span></span><br><span class="line">        _cacheEventHandler(onEvt, cb, _cb, _cbSFC);</span><br><span class="line">        <span class="comment">// 使用 document.addEventListener 绑定事件</span></span><br><span class="line">        AP.on(onEvt, _cb);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (offEvt) &#123;</span><br><span class="line">        _removeEventHandler(offEvt, cb);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 执行 AlipayJSBridge.call</span></span><br><span class="line">        _JS_BRIDGE.call(_getApiName(apiName), _opt, _cb);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 埋点，发送日志到远程服务器</span></span><br><span class="line">      _apiRemoteLog(apiName);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="埋点"><a href="#埋点" class="headerlink" title="埋点"></a>埋点</h3><p>alipayjsapi 先收集调用的 api，当收集的 api 到 6 个时，再使用定时器上报。alipayjsapi 兜底使用返回按钮的 back 事件上报日志。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _apiRemoteLog = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> apiInvokeQueue = [];</span><br><span class="line">  <span class="keyword">var</span> timerId = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> isTimerActived = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">//发送日志</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">triggerSendLog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (apiInvokeQueue.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> param1 = apiInvokeQueue.join(<span class="string">'|'</span>);</span><br><span class="line">        AP.ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          _JS_BRIDGE.call(<span class="string">'remoteLog'</span>, &#123;</span><br><span class="line">            type: <span class="string">'monitor'</span>,</span><br><span class="line">            bizType: <span class="string">'ALIPAYJSAPI'</span>,</span><br><span class="line">            logLevel: <span class="number">1</span>, <span class="comment">// 1 - high, 2 - medium, 3 - low</span></span><br><span class="line">            actionId: <span class="string">'MonitorReport'</span>,</span><br><span class="line">            seedId: <span class="string">'ALIPAYJSAPI_INVOKE_COUNTER'</span>,</span><br><span class="line">            param1: param1</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        AP.debug &amp;&amp; <span class="built_in">console</span>.info(<span class="string">'REMOTE_LOG_QUEUE&gt;'</span>, apiInvokeQueue);</span><br><span class="line">        apiInvokeQueue = [];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 停止计时器</span></span><br><span class="line">      clearTimer();</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计时器</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 计时激活标致</span></span><br><span class="line">    isTimerActived = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 启动计时器</span></span><br><span class="line">    timerId = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 日志发送</span></span><br><span class="line">      triggerSendLog();</span><br><span class="line">    &#125;, <span class="number">5000</span>); <span class="comment">// 5 秒上报</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清除计时器</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">clearTimer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    !__isUndefined(timerId) &amp;&amp; clearTimeout(timerId);</span><br><span class="line">    isTimerActived = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// back 事件上报日志，作为兜底</span></span><br><span class="line">  AP.on(<span class="string">'back'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    triggerSendLog();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">apiName</span>) </span>&#123;</span><br><span class="line">    apiInvokeQueue.push(apiName);</span><br><span class="line">    <span class="comment">// 6 个上报</span></span><br><span class="line">    <span class="keyword">if</span> (apiInvokeQueue.length &gt;= <span class="number">6</span>) &#123;</span><br><span class="line">      triggerSendLog();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isTimerActived) &#123;</span><br><span class="line">      timer();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《现代前端技术解析》 —— 张成文</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>architecture</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>uform</title>
    <url>/2019/10/27/frontend/editor/uform/</url>
    <content><![CDATA[<p>通常对表单的抽象分为状态管理和视图组件两部分。按我的理解，uform 的三层结构与 redux + redux-react + react 组件或 mobx + mobx-react + react 组件的构成模式相仿。</p>
<img src="/2019/10/27/frontend/editor/uform/uform.png">
<ul>
<li>@uform/core：状态管理层，抽象通用 form 表单、field 字段的状态管理逻辑。</li>
<li>@uform/react：抽象视图层，其一桥接状态管理器和视图组件，其二用于注册组件或容器等。</li>
<li>@uform/antd, @uform/next：视图组件层，对接特定的视图组件库。</li>
</ul>
<h2 id="uform-core"><a href="#uform-core" class="headerlink" title="@uform/core"></a>@uform/core</h2><p>在不借助 redux 等状态管理器的前提下，针对业务逻辑抽象状态管理的做法是：OOP 编程方式抽象状态管理类，并提供统一的副作用接口驱动视图重绘。多个 store 之间可以通过消息总线通信；或者相互持有实例；或者在视图层组织交互逻辑。在这种设计思想下，store 状态管理类和 view 视图组件类即如下图：</p>
<img src="/2019/10/27/frontend/editor/uform/store.png">
<p>不同于 redux 等适用于全领域的状态管理器，表单的状态管理有其特点，所涉及的状态包含表单数据、脏值状态、校验状态、错误状态、编辑状态（在表单编辑器中）、props 等。表单状态管理分为两层：Form 表单层级、Field 字段层级。rc-form 的状态管理没有到字段层级，FormItem 组件从子字段中获取校验信息等数据。更为精细的状态管理需要到字段层级，这样就可以不用重绘表单，而是重绘字段组件。因为字段组件的类型众多，业务实体也可能以字段组件的形式呈现，所以，一般使用通用的 Field 模型抽象字段的状态管理逻辑。</p>
<img src="/2019/10/27/frontend/editor/uform/form_field.png">
<p>在 uform 中，Field 实例以 field.context 属性持有 Form 实例。Form、Field 实例对外通信均可以通过 Broadcast 绑定订阅函数达成，典型的订阅函数即利用 setState 以驱动组件重绘。不同的是，Form 实例用于构造对外交互接口，允许用户挂载多个订阅函数；Field 实例只允许挂载一个订阅函数 —— 变异的 setState，既驱动字段组件重绘，又驱动表单状态更新。Form 内部的事件机制通过 <a href="https://www.jianshu.com/p/f92ce317b07b" target="_blank" rel="noopener">rxjs 的 Subject</a> 实现，支持通过初始化选项绑定事件回调，其被称为 effect 副作用，包含 onFormReset、onFormSubmit、onFieldInit、onFieldChange、onFieldInputChange 这几类。</p>
<p>表单数据状态变更只有一种模式：通过 Form 提供的接口更新，Field 接口不对外暴露。因为字段组件的绑定事件挂载了 mutators.change（mutators 由封装 Form 接口实现），所以当用户交互行为驱动字段更新时，首先会更新 Form 表单数据，其次间接更新相关的 Field 数据，其次 Field 数据变更引起字段组件重绘，最后触发表单层面 onFieldChange 副作用执行。通过 effect 副作用更新字段数据的执行逻辑也是这样的。uform 通过 syncUpdateMode 属性区分同步更新字段和异步更新字段两种模式：同步模式直接使用 raf 更新字段；异步模式通过 raf 在下一次绘制时批量更新字段。</p>
<p>Form 实例提供三种更新状态的方式： 用于构造 mutators 的 form.setValue；在 effect 场景中使用的 form.setFormState、form.setFieldState。setValue 较为简单，即首先使用 Field 实例更新字段的状态，其次当字段存在脏值时予以重绘，其次触发 onFieldInputChange 副作用，最后校验表单并触发执行表单层面的订阅函数、onFieldChange 副作用。setFormState、setFieldState 并不会触发 onFieldInputChange 副作用，但这两个方法都会通过 formNotify 触发 onFieldChange 副作用。</p>
<p>setFormState 流程图：<br><img src="/2019/10/27/frontend/editor/uform/setFormState.png"></p>
<p>setFieldState 流程图：<br><img src="/2019/10/27/frontend/editor/uform/setFieldState.png"></p>
<p>如上文所说，uform 不止于管理表单数据、校验状态等状态（两者均通过 field.notify 驱动字段组件的重绘），还包含 props、editable 可编辑状态等数据。在提升性能方面，精准的字段状态管理可以只驱动字段的重绘，而不是表单的重绘；uform 又使用 raf 在启动重绘。至于功能上的联动显示隐藏，uform 一方面可以通过 setFieldState 更新字段的 visible, display 状态；另一方面可以通过 react 语法在特定条件下构建字段组件实例（通过 props.onChange 方法监听并插入字段组件）。在后一种情况下，uform 允许使用 updateFieldStateFromBuffer 更新新增字段的状态。</p>
<h2 id="uform-react"><a href="#uform-react" class="headerlink" title="@uform/react"></a>@uform/react</h2><p>与 rc-form 一样，uform 也使用高阶组件 StateForm、StateField 将状态管理器注入到表单及字段组件中；但是子组件表单没法通过 props.form 访问 Form 实例，StateForm 会通过 context 将 Form 实例直接传给字段 StateField。表单的高阶组件主要在于将 Form 实例的订阅函数等通过 props 透出到表单外围、通过 props 更新 Form 实例的状态、将 Form 实例透传给内部子组件；字段的高阶组件主要在于通过 props 更新 Field 实例的状态、构建 mutators 监听字段组件的变更以实时更新字段的状态。</p>
<p>StateForm 会通过 registerFormWrapper 函数注册成原始表单的外层容器；registerFormWrapper 函数还可用于注册其他容器。注册完成后，通过 OriginForm 可以获取集成外围容器的表单组件。与 registerFormWrapper 功能相仿，registerFieldMiddleware 用于为字段组件添加外围容器（外围容器的功能如在 antd 中为字段组件包裹上 FormItem 组件）。registerFormField 用于注册字段组件，如 input，radio 等。因为对于不同的字段组件，其值可能会有不同的 props 属性表现（如 props.value、props.checked 等），编辑状态与不可编辑状态也可能会使用不同的字段组件，@uform/react 提供 connect 用于转换 props 或处理 schema。在 registerFormField 时，一般会配合使用 connect。</p>
<p>uform 中的字段渲染比较特别，分为两种模式：SchemaMarkup 传入 props.schema，直接予以渲染；通过 SchemaField 描述 SchemaForm 包含的字段组件，收集 schema 后予以渲染。@uform/antd 透出的 SchemaForm 即基于 SchemaMarkup；Field 即基于 SchemaField。以下是源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const SchemaForm = SchemaMarkup()(</span><br><span class="line">  React.forwardRef((props: ISchemaFormProps, ref: React.Ref&lt;any&gt;) =&gt; &#123;</span><br><span class="line">    // 这个时候就有 schema 数据</span><br><span class="line">    const &#123; children, className, ...others &#125; = props</span><br><span class="line">    return (</span><br><span class="line">      &lt;OriginForm</span><br><span class="line">        className=&#123;`rs-uform $&#123;className || &apos;&apos;&#125;`&#125;</span><br><span class="line">        &#123;...others&#125;</span><br><span class="line">        ref=&#123;ref&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;div className=&quot;rs-uform-content&quot;&gt;</span><br><span class="line">          &#123;/* 从 schema 取出数据渲染 */&#125;</span><br><span class="line">          &lt;FormField name=&quot;&quot; path=&#123;[]&#125; schemaPath=&#123;[]&#125; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &#123;children&#125;</span><br><span class="line">      &lt;/OriginForm&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 虚拟组件，仅用于收集 schema</span><br><span class="line">const SchemaField = props =&gt; &#123;</span><br><span class="line">  const parent = useContext(MarkupContext)</span><br><span class="line">  if (schemaIs(parent, &apos;object&apos;)) &#123;</span><br><span class="line">    const name = props.name || getRadomName()</span><br><span class="line">    parent.properties = parent.properties || &#123;&#125;</span><br><span class="line">    parent.properties[name] = clone(</span><br><span class="line">      props,</span><br><span class="line">      filterSchemaPropertiesAndReactChildren</span><br><span class="line">    )</span><br><span class="line">    return (</span><br><span class="line">      &lt;MarkupContext.Provider value=&#123;parent.properties[name]&#125;&gt;</span><br><span class="line">        &#123;props.children&#125;</span><br><span class="line">      &lt;/MarkupContext.Provider&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125; else if (schemaIs(parent, &apos;array&apos;)) &#123;</span><br><span class="line">    parent.items = clone(props, filterSchemaPropertiesAndReactChildren)</span><br><span class="line">    return (</span><br><span class="line">      &lt;MarkupContext.Provider value=&#123;parent.items&#125;&gt;</span><br><span class="line">        &#123;props.children&#125;</span><br><span class="line">      &lt;/MarkupContext.Provider&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return props.children || &lt;React.Fragment /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const SchemaMarkup = createHOC((options, SchemaForm) =&gt; &#123;</span><br><span class="line">  return class extends Component&lt;ISchemaFormProps&gt; &#123;</span><br><span class="line">    public static displayName = &apos;SchemaMarkupParser&apos;</span><br><span class="line"></span><br><span class="line">    public portalRoot = document.createElement(&apos;div&apos;)</span><br><span class="line"></span><br><span class="line">    public render() &#123;</span><br><span class="line">      const &#123;</span><br><span class="line">        children,</span><br><span class="line">        initialValues,</span><br><span class="line">        defaultValue,</span><br><span class="line">        value,</span><br><span class="line">        schema,</span><br><span class="line">        ...others</span><br><span class="line">      &#125; = this.props</span><br><span class="line"></span><br><span class="line">      let alreadyHasSchema = false</span><br><span class="line">      let finalSchema = &#123;&#125;</span><br><span class="line">      if (schema) &#123;</span><br><span class="line">        alreadyHasSchema = true</span><br><span class="line">        finalSchema = schema</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        finalSchema = &#123; type: &apos;object&apos; &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      nonameId = 0</span><br><span class="line"></span><br><span class="line">      return (</span><br><span class="line">        &lt;React.Fragment&gt;</span><br><span class="line">          &#123;!alreadyHasSchema &amp;&amp;</span><br><span class="line">            // 只是为了去收集 schema 数据</span><br><span class="line">            createPortal(</span><br><span class="line">              &lt;MarkupContext.Provider value=&#123;finalSchema&#125;&gt;</span><br><span class="line">                &#123;children&#125;</span><br><span class="line">              &lt;/MarkupContext.Provider&gt;,</span><br><span class="line">              this.portalRoot</span><br><span class="line">            )&#125;</span><br><span class="line">          &#123;/* 收集后的 schema 用于渲染 */&#125;</span><br><span class="line">          &lt;SchemaForm</span><br><span class="line">            &#123;...others&#125;</span><br><span class="line">            defaultValue=&#123;defaultValue&#125;</span><br><span class="line">            value=&#123;value&#125;</span><br><span class="line">            initialValues=&#123;initialValues&#125;</span><br><span class="line">            schema=&#123;finalSchema&#125;</span><br><span class="line">          &gt;</span><br><span class="line">            &#123;children&#125;</span><br><span class="line">          &lt;/SchemaForm&gt;</span><br><span class="line">        &lt;/React.Fragment&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>@uform/react 封装了三种抽象组件：array 列表组件、object 多属性组件、slot 插槽组件（渲染 schema.renderChildren）。registerFieldRenderer 函数用于增强 schema 的解析能力，默认 schema[‘x-render’] 可以作为字段组件的渲染函数。</p>
<p>借助于通过 createContext 机制传递 Broadcast 实例，StateForm、StateField 会持有相同的 Broadcast 实例。这个 Broadcast 实例可以作为组件层级的通信总线。@uform/react 另外借助了 <a href="https://github.com/janryWang/react-eva" target="_blank" rel="noopener">react-eva</a> 可用于以 actions、effects 形式操控表单。</p>
<h2 id="uform-antd"><a href="#uform-antd" class="headerlink" title="@uform/antd"></a>@uform/antd</h2><p>@uform/antd、@uform/next 主要利用 @uform/react 提供的 registerFormWrapper、registerFieldMiddleware、registerFormField + connect 完成表单外围容器、字段外围容器、字段组件的注册。如在 @uform/antd 中，会通过 registerFormWrapper 为表单包裹上 antd 的 Form 组件；通过 registerFieldMiddleware 为字段包裹上 FormItem 组件；通过 registerFormField + connect 注册 input，radio 等字段组件。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>uform 有其设计和实现上的复杂性，本文暂未深入挖掘子字段、path、列表组件等内容。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>editor</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据之路读后 —— 数据服务章</title>
    <url>/2019/10/25/%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF/%E6%95%B0%E6%8D%AE%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="架构演进"><a href="#架构演进" class="headerlink" title="架构演进"></a>架构演进</h2><p>阿里巴巴的数据开放服务经历了四个阶段：DWSOA、OpenAPI、SmartDQ 和 OneService。</p>
<img src="/2019/10/25/数据技术/数据服务/dataservice.jpg">
<ul>
<li>DWSOA：将业务方对数据的需求通过 SOA 服务提供除去（接口内部实现数据计算逻辑）。接口开发、测试、上线繁复，灵活性不高，扩展性差，复用率低。</li>
<li>OpenApi：同类数据（如会员数据）合并成一张逻辑表，对外透出一个接口，通过接口参数定位具体数据。接口数量随着类目数量也逐渐增多。</li>
<li>SmartDQ：逻辑表的取数据逻辑通过 SQL （作为领域专用语言 DSL）描述，SmartDQ 通过解析 SQL、生成执行计划、执行 SQL、合并数据、限制结果，最终透出数据。SmartDQ 通过跨异构数据源适配器对接不同的数据库，并且封装了分布式查询功能，无需关心底层物理表是不是分库分表。应用层，SmartDQ 提供接口配置管理，且集成监控、限流、计费、权限能力。缺点是 SQL 无法解决复杂的业务逻辑，即提供个性化的数据内容。</li>
<li>OneService：OneService 在 SmartDQ 的基础上，切分数据使用场景，主要包含以下几类：个性化的垂直业务场景、实时数据推送服务、定时任务服务。介于此，OneService 提供多种服务类型满足不同场景，分别是 OneService-SmartDQ、OneService-Lego、OneService-iPush、OneService-uTiming。OneService-Lego 采用插件化开发模式，一类需求一个插件，用于满足个性化的垂直业务场景。OneService-iPush 通过 websocket 或 long-polling 实时推送数据。OneService-uTiming 提供定时任务、即时任务两种模式。</li>
</ul>
<p>在 OneService 阶段；数据生产者推送数据入库，服务提供者根据规范快速创建、发布、监控、下线服务；服务调用者可以在门户网站中快速检索、申请、调用服务。</p>
<p>SmartDQ 架构图：</p>
<img src="/2019/10/25/数据技术/数据服务/SmartDQ.png">
<p>OneService 架构图：</p>
<img src="/2019/10/25/数据技术/数据服务/OneService.png">
<h2 id="架构细节"><a href="#架构细节" class="headerlink" title="架构细节"></a>架构细节</h2><img src="/2019/10/25/数据技术/数据服务/SmartDQ_Detail.jpeg">
<p>逻辑表通过多个数据源的物理表汇总而成，多个逻辑表挂在一个主题下。服务层元数据中心用于进行元数据配置，并维护物理表到逻辑表的映射。同时，服务层会把元数据加载到本地缓存中，以便进行后续的模型解析。</p>
<p>元数据分三套环境：日常、预发、线上。元数据经预发布经验证后，才可以正式发布。元数据的权限级别在逻辑表层级。当某用户修改逻辑表及其下的物理表资源时，禁止其他用户修改。技术上，元数据缓存采用增量更新。</p>
<p>主处理模块首先会通过解析 DSL（即 SQL 描述）获得查询树；其次遍历查询树，混入元数据模型中的逻辑表信息，获得逻辑 Query；其次通过元数据模型中物理表和逻辑表的映射关系，将逻辑 Query 转成物理 Query；其次按所涉及的物理表拆分为 SubQuery；其次将 SubQuery 组装成 SQL 语句并交给 DB 执行；最后将执行结果合并，返回调用者。</p>
<p>对于 Get 快查询和 List 慢查询，分配两套线程池，避免 Get 快查询前面有一个 List 慢查询，导致等待时间过长。在查询优化过程中，引擎会将不必要的 List 慢查询转成 Get 快查询。</p>
<p>查询服务器分组，每个分组有明确的服务对象和保障等级。分组隔离使 A 分组的异常不会影响到 B 分组。分组策略会进行动态调整，以实现资源的最大化利用。</p>
<p>数据安全方面，查询强制带上 LIMIT 限制，并设定必传字段，防止全表扫描。</p>
<p>日志采集方面，采集内容包含调用时间、接口名、方法名、返回记录数等基础信息；调用者应用名、来源 IP 地址等调用者信息；调用指标、查询筛选条件等调用信息；响应时间、是否走缓存等性能指标信息；出错原因、错误类型、数据源、错误堆栈等错误信息。在有了日志的基础上，可以监控系统的健康：总体、分组或单机的性能；逻辑表被调用情况（零调用酌情予以下线处理）；慢 SQL 查找并优化；错误排查。</p>
]]></content>
      <categories>
        <category>数据技术</category>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>HSF服务</title>
    <url>/2019/10/23/backend/%E8%BF%9C%E7%A8%8B%E9%80%9A%E4%BF%A1/HSF%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此前用 node 对接过一段时候的 HSF 服务，不知分寸地一头扎进 node 模块源码里，也没得出个所以然。直到今天偶然在《企业IT架构转型之道：阿里巴巴中台战略思想与架构实战》这本书读到有关 HSF 的内容，才理解了 HSF 实现的大致原理。看来还是要多读书、多看文档。谨以这篇短文留念。</p>
<h2 id="HSF"><a href="#HSF" class="headerlink" title="HSF"></a>HSF</h2><p>HSF 全称 High Speed Framework 高速服务框架，是阿里内部广泛使用的 RPC 框架。不同于 ESB 企业服务总线，HSF 实现了服务调用方（Consumer）和服务提供方（Provider）的点对点通信。在 HSF 框架中，地址服务器用于维护全量服务器（包含服务调用方和服务提供方）和 Diamond 服务器列表信息；配置服务器用于记录服务发布（服务提供方发布了哪些服务）和服务订阅（服务调用方需要哪些服务）信息，并将相关信息推送到对应的服务器上，如配置服务器会将服务提供方的相关信息推送给服务调用方。配置服务器与服务提供方、服务调用方均保持长连接，采用心跳的方式监控各服务运行节点的状况，以便剔除故障的服务提供方。HSF 通过 ip 和端口号锁定服务提供方或服务调用方；通过服务名和版本号定位服务（因此，通过指定服务名和版本号可以直连本地服务器）。首先服务提供方会在配置服务器中完成服务的注册发布，然后服务调用方会在配置服务器中订阅服务，以便配置服务器即时推送服务提供方的 ip 和端口。为了服务发布、订阅、推送的负载均衡，生产环境上的配置服务器一般会配置多台，且在不同的配置服务器之间会作实时的数据同步。</p>
<img src="/2019/10/23/backend/远程通信/HSF服务/hsf.png">
<p>每一个 HSF 的应用均以 War 包形式存在，运行在 Ali-Tomcat 容器中。Ali-Tomcat 容器层已经集成了 HSF 服务框架对服务提供者或服务调用者进行配置服务器发现、服务注册、订阅、失效转移等相关功能，所以不管是在服务提供者还是调用者开发时，只需要进行服务相关的配置操作，应用中无需引入任何 HSF 相关的 Jar 包。</p>
<p>在服务提供方和服务调用方的点对点通信中，服务调用者会从服务提供者列表中随机选择一台进行通信，无需通过 ESB 中转，因此就形成“去中心化”的服务架构。当请求的服务提供方故障时，服务调用者会获得失败反馈，继而从剩下的服务提供者列表中选择一台再次通信，这就是 HSF 服务的容错机制；同时配置服务器与服务提供方的长连接通信，允许配置服务器及时剔除故障的服务提供方并推送到服务调用方。HSF 的线性扩展能力在于，只要启动一台新的服务提供方服务器，并由配置服务器推送给服务调用方，即可以分摊服务调用的压力。</p>
<h3 id="Diamond"><a href="#Diamond" class="headerlink" title="Diamond"></a>Diamond</h3><p>Diamond 服务器用于推送统一的配置服务。在 HSF 中，Diamond 主要用于：</p>
<ol>
<li>通过设置白名单使某些服务调用方的服务只被特定 IP 地址的服务器调用。</li>
<li>通过用户认证的方式控制服务是否能被调用。</li>
<li>按照不同的服务路由权重设置服务调用方对多个服务提供方服务节点的访问。</li>
<li>设置某些服务的 QPS 能力上限值，实现限流。</li>
</ol>
<p>Diamond 会将这些规则保存在在自身的 MySql 中，并将这些规则推送到相关的服务节点上，使这些规则能立即在服务运行环境中生效。</p>
<h3 id="通信和序列化协议"><a href="#通信和序列化协议" class="headerlink" title="通信和序列化协议"></a>通信和序列化协议</h3><p>HSF 框架使用网络通信框架 Netty、Hession 数据序列化协议实现服务器键的交互。这类 RPC 协议采用多路复用的 TCP 长连接方式，即在服务提供方和调用方点对点通信期间会共用同一个长连接，以传输不同的请求块。Hessian 数据序列化协议精简高效，同时可以跨语言使用。另外 Hessian 可以充分利用 Web 容器的成熟功能，在处理大量用户访问时很有优势，在资源分配、线程排队、异常处理等方面都可以由 Web 容器保证。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/laomumu1992/article/details/86636757" target="_blank" rel="noopener">HSF简介（摘自《企业IT架构转型之道》）</a><br><a href="https://help.aliyun.com/document_detail/100087.html?spm=a2c4g.11174359.4.4.34c32b88ntjXfW" target="_blank" rel="noopener">HSF 概述</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>远程通信</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>web安全机制</title>
    <url>/2019/10/20/frontend/architecture/web%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>常见的前端安全问题包含 XSS（Cross Site Script，跨站脚本攻击）、CSRF（Cross-site Request Forgery，跨站请求伪造）、点击劫持等。</p>
<h2 id="浏览器安全"><a href="#浏览器安全" class="headerlink" title="浏览器安全"></a>浏览器安全</h2><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>浏览器的同源策略限制了 document 或脚本的跨源读写能力。若域名、子域名、端口、协议其中一个有所不同，浏览器就会认为两个站点是跨源的。当 script、img、iframe、link 等包含 src 属性的标签加载远程资源，即便资源提供的域名和页面的域名不一致，浏览器还是会认为资源的 origin 为当前页面的所在域。与 xhr 不同的是，通过 src 加载的资源，浏览器限制了 js 读写响应的能力。在不启用 CORS 功能的站点中，xhr 只能发起同源请求。除 xhr 外，cookie 也会受同源策略的限制，即，理论上不能在非源站点中获取原站点的 cookie。</p>
<h3 id="sandbox"><a href="#sandbox" class="headerlink" title="sandbox"></a>sandbox</h3><p>浏览器采用多进程架构隔离多个功能模块、tab。Chrome 的主要进程为：浏览器进程、渲染进程、插件进程、扩展进程。插件进程与浏览器进程严格隔离。渲染进程通过沙箱隔离，网页代码与浏览器内核进程通信、与操作系统通信都需要通过 IPC channel。沙箱使不可信的代码运行在一定的环境中，限制不可信的代码访问隔离区外的资源；如果一定要访问隔离区外的资源，就必须通过指定的数据通道，由特定的 API 校验数据的合法性。浏览器主要用于限制 js 在安全区内执行；多进程架构也使一个 tab 挂掉后，不会影响另一个 tab。</p>
<img src="/2019/10/20/frontend/architecture/web安全机制/multi-process.jpeg">
<h3 id="恶意网址拦截"><a href="#恶意网址拦截" class="headerlink" title="恶意网址拦截"></a>恶意网址拦截</h3><p>基于页面特征模型，浏览器厂家会将恶意网址加入黑名单中，并推送到客户端，保障用户访问的安全性。网址黑名单并不一定由浏览器厂家收集获得，也可以借助第三方安全厂商提供。</p>
<h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>XSS 由可解析执行的代码插入到页面中引起；在页面渲染过程中，这段代码会被执行，从而引起安全问题（如盗取数据、伪造账号等）。因为恶意代码可能是加载特定 js 资源的 script 标签，所以 XSS 攻击引起的问题包含通过 js 代码劫持 cookie、伪造请求等；XSS 也可以通过 js 画出登录框，把用户的提交数据发送给黑客电脑，从而造成账号密码的泄漏；XSS 可以通过 window.name 在非源站点中获取源站点的 cookie 信息（window 为浏览器窗体，不像 document 那样受同源策略的影响，因此将 cookie 赋值给 window.name 就可以在非源站点获取到 cookie 信息）；XSS 攻击也能通过 UserAgent 获取用户的操作系统和浏览器版本等信息，并逐步挖掘到用户安装的软件、浏览器的扩展程序，再通过浏览器漏洞植入木马。XSS 甚至可以通过 Java Applet、Flash、iTunes、Office Word、QuickTime 等第三方软件获取用户的 ip 地址。更有甚者，XSS Worm 蠕虫会利用社交平台的好友列表，能使恶意代码迅速扩散。</p>
<p>测试 XSS 攻击平台有 Attack API、BeFF、XSS-Proxy、</p>
<p>XSS 分为存储型 XSS、反射型 XSS、DOM XSS（MXSS）三种。存储型 XSS 是指恶意代码随着提交数据入库，再从数据库读取回显时引起恶意代码的执行。因此，存储型 XSS 能引起稳定持续的安全问题。反射型 XSS 是指将用户输入“反射给”浏览器，即需要一个交互行为才能使攻击成功。典型的交互行为如点击一个恶意链接，通过 url 参数植入恶意脚本，url 参数在使用过程时将执行恶意脚本（所以 react 设置了 dangerouslySetInnerHTML 属性，es6 提供模板字符串处理变量）。黑客也可以通过 location.hash 构造 url 参数，因为 hash 路由不会造成发包请求，这样服务器日志也不会留有记录，也就隐藏了黑客的真实意图。MXSS 由恶意代码段代插入 DOM 属性中引起，效果等同反射型 XSS。</p>
<p>XSS 的防范方式有以下几种：</p>
<ol>
<li>在 cookie 中设置 httpOnly 标识，禁止通过 js 访问 cookie，以免 cookie 被劫持。</li>
<li>提交表单时通过验证码等交互行为限制接口调用的成功率，这样就能在一定程度上避免 XSS 伪造请求。</li>
<li>验证所有输出到页面上的数据，并对必要的内容作转义处理（成熟的模板引擎需要防范使用模板变量进行 XSS 攻击）。</li>
<li>服务端使用开源的 XSS Filter 检查输入。</li>
<li>对 url 参数进行加密，避免攻击者伪造（加密后的 url 不利于用户收藏）。</li>
</ol>
<p>以下是常见的转义处理：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlEncode</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (str.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/&amp;/g</span>, <span class="string">'&amp;amp;'</span>)</span><br><span class="line">    .replace(<span class="regexp">/&lt;/g</span>, <span class="string">'&amp;lt;'</span>)</span><br><span class="line">    .replace(<span class="regexp">/&gt;/g</span>, <span class="string">'&amp;gt;'</span>)</span><br><span class="line">    .replace(<span class="regexp">/ /g</span>, <span class="string">'&amp;nbsp;'</span>)</span><br><span class="line">    .replace(<span class="regexp">/\'/g</span>, <span class="string">'&amp;#39;'</span>)</span><br><span class="line">    .replace(<span class="regexp">/\"/g</span>, <span class="string">'&amp;quot;'</span>)</span><br><span class="line">    .replace(<span class="regexp">/\n/g</span>, <span class="string">'&lt;br&gt;'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlDecode</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (str.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/&amp;amp;/g</span>, <span class="string">'&amp;'</span>)</span><br><span class="line">    .replace(<span class="regexp">/&amp;lt;/g</span>, <span class="string">'&lt;'</span>)</span><br><span class="line">    .replace(<span class="regexp">/&amp;gt;/g</span>, <span class="string">'&gt;'</span>)</span><br><span class="line">    .replace(<span class="regexp">/&amp;nbsp;/g</span>, <span class="string">' '</span>)</span><br><span class="line">    .replace(<span class="regexp">/&amp;#39;/g</span>, <span class="string">'\''</span>)</span><br><span class="line">    .replace(<span class="regexp">/&amp;quot;/g</span>, <span class="string">'\"'</span>)</span><br><span class="line">    .replace(<span class="regexp">/&lt;br&gt;/g</span>, <span class="string">'\n'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>CSRF 是非源站点携带着源站点的 cookie 数据，继而调用源站点的接口，这样就容易避过用户校验，并使请求执行成功（如篡改金额后调用支付接口）。浏览器 cookie 分为两种：指定失效时间的本地 cookie，浏览器在切换 tab 到子域时不会将该 cookie 带入另一个 tab；未指定失效时间的临时 cookie，在浏览器进程的生命周期中有效，且可以在不同 tab 子域中传播。部分浏览器并未禁止不同域的 iframe, img, script, link 等标签携带本地 cookie，但是所有浏览器允许携带临时 cookie。为嵌入第三方广告等 iframe，W3C 指定的 P3P 头允许 iframe 等标签携带本地 cookie，这样做既使第三方广告能获得 cookie 信息，也增加了遭受 CSRF 攻击的风险。在 CSRF 攻击中，攻击者会伪造嵌入源站点 iframe 的非源站点获取 cookie 信息，同时可以使用 js 脚本伪造 post 请求等。</p>
<p>CSRF 的防范方式有以下几种：</p>
<ol>
<li>提交表单时通过验证码等交互行为限制接口调用的成功率，这样就能在一定程度上避免 CSRF 伪造请求。</li>
<li>校验 Referer 头是不是指定的页面，但是服务器未必能获取到 Referer 头。</li>
<li>对 url 参数进行加密，避免攻击者伪造（加密后的 url 不利于用户收藏）。</li>
<li>添加随机且加密且有一定实效的 token。token 由后端生成，可通过 html 模板变量、session、cookie 传给前端；再由前端添加到请求体或请求头中；提交数据后，后端将验证 Token 以判断用户的准确性。</li>
</ol>
<h2 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h2><ul>
<li>点击劫持：在非源站点中使用隐藏的 iframe 加载源站点页面，再通过诱导用户点击源站点的按钮等，产生恶意行为。</li>
<li>图片覆盖攻击：与点击劫持相类，仍是用 iframe 加载源站点页面，再诱导用户点击绝对定位的图片。</li>
<li>拖拽劫持：拖拽不受同源策略的限制，在使用 ifame 加载源站点页面的情况下，就能通过拖拽脚本窃取源站点的信息。</li>
<li>触屏劫持：与点击劫持相类。</li>
</ul>
<p>防御点击劫持的手段其一是禁止 iframe 嵌套，这种做法叫做 frame busting。frame busting 是可以被绕过的，详情参看 “Busting frame busting: a study of clickjacking vunlnerabilities at popluar site”。以下是 frame busting 的简单示例。防御点击劫持的手段其二是通过 X-Frame-Options 限制 iframe 加载，这样可以回避 frmae busting 的被绕过。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// frame busting 条件语句</span></span><br><span class="line"><span class="keyword">if</span> (top != self)</span><br><span class="line"><span class="keyword">if</span> (top.location != self.location)</span><br><span class="line"><span class="keyword">if</span> (top.location != location)</span><br><span class="line"><span class="keyword">if</span> (parent.frames.length &gt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span> != top)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.top !== <span class="built_in">window</span>.self)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.self != <span class="built_in">window</span>.top)</span><br><span class="line"><span class="keyword">if</span> (parent &amp;&amp; parent != <span class="built_in">window</span>)</span><br><span class="line"><span class="keyword">if</span> (parent &amp;&amp; parent.frames &amp;&amp; parent.frames.length&gt;<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span>((self.parent&amp;&amp;!(self.parent===self))&amp;&amp;(self.parent.frames.length!=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// frame busting 纠正错误语句</span></span><br><span class="line">top.location = self.location</span><br><span class="line">top.location.href = <span class="built_in">document</span>.location.href</span><br><span class="line">top.location.href = self.location.href</span><br><span class="line">top.location.replace(self.location)</span><br><span class="line">top.location.href = <span class="built_in">window</span>.location.href</span><br><span class="line">top.location.replace(<span class="built_in">document</span>.location)</span><br><span class="line">top.location.href = <span class="built_in">window</span>.location.href</span><br><span class="line">top.location.href = <span class="string">"URL"</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">''</span>)</span><br><span class="line">top.location = location</span><br><span class="line">top.location.replace(<span class="built_in">document</span>.location)</span><br><span class="line">top.location.replace(<span class="string">'URL'</span>)</span><br><span class="line">top.location.href = <span class="built_in">document</span>.location</span><br><span class="line">top.location.replace(<span class="built_in">window</span>.location.href)</span><br><span class="line">top.location.href = location.href</span><br><span class="line">self.parent.location = <span class="built_in">document</span>.location</span><br><span class="line">parent.location.href = self.document.location</span><br><span class="line">top.location.href = self.location</span><br><span class="line">top.location = <span class="built_in">window</span>.location</span><br><span class="line">top.location.replace(<span class="built_in">window</span>.location.pathname)</span><br><span class="line"><span class="built_in">window</span>.top.location = <span class="built_in">window</span>.self.location</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">document</span>.body.innerHTML=<span class="string">''</span>;&#125;,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">window</span>.self.onload = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>)</span>&#123;<span class="built_in">document</span>.body.innerHTML=<span class="string">''</span>;&#125;</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">window</span>.location.href; top.location.replace(url)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">if</span>(top.location != location)&#123;</span><br><span class="line">  top.location = self.location;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="html5"><a href="#html5" class="headerlink" title="html5"></a>html5</h2><p>在 html5 中，新标签可能会产生 XSS 攻击，比如通过 video 的绑定事件执行恶意代码。为此，HTML5 Security Cheatsheet 项目统计了一些安全问题。</p>
<p>html5 为 iframe 添加了 sandbox 属性，可选值 allow-same-origin 允许同源访问、allow-top-navigation 允许访问顶层窗口、allow-forms 允许提交表单、allow-scripts 允许执行脚本。这样就大大提高了使用 iframe 的安全性。</p>
<p>html5 为 a、area 的 rel 属性添加了 noreferer 值，即在跳转链接时不携带源站点的地址信息，以免敏感信息的泄漏。</p>
<p>html5 的其他安全问题包含：利用 canvas 可以破解图片验证码；CORS 当后端设置  Access-Control-Allow-Origin: * 时，源站点允许任意的跨域请求；window.postMessage 在不检验 domain 域的前提下，可以接受来自任何页面的消息；localStorage、sessionStorage 提供了保存恶意代码的可能，容易引起 XSS 攻击。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《白帽子讲安全》<br><a href="https://www.cnblogs.com/LittleHann/p/3386055.html" target="_blank" rel="noopener">Busting Frame Busting: a Study of Clickjacking Vulnerabilities on Popular Sites
</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>architecture</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>MV* 架构</title>
    <url>/2019/10/13/frontend/architecture/MV*%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>曾听人说起“前端没有架构”，我心里时常也有这种困惑。当框架、脚手架划定了前端代码的组织模式后，一方面使前端更聚焦于业务代码的编写，提升了工作时的投入产出比；另一方面也使前端更容易陷在琐碎的业务点上，压抑了饱含灵性的智力作业。但若仔细思索，我会认为前端也有其架构空间：比如设计复杂的业务模块、编辑器、工具库等；比如规划多应用构成的站点。一个人困于所见、所识、所遇，就会产生望洋兴叹、嗟伤时物的情绪。当前端从业者说“前端没有架构”的时候，也许是他的境界还没有达到一定高度，也许是他困于拧螺丝的活而没有出路。这篇文章写在分析 UForm 源码之前，目的在于逐步提炼对前端技术的系统化认知。介于水平的有限，这篇文章难免错谬。</p>
<h2 id="MVC-架构"><a href="#MVC-架构" class="headerlink" title="MVC 架构"></a>MVC 架构</h2><p>MVC 架构源自桌面应用，在前后端领域均有见及。Model 为模型层，负责与外通信、对接数据；View 为视图层，负责构建视图内容；Controller 为控制器层，负责串联模型层和视图层。MVC 架构最常用见于单应用的组织形态。个人理解，在后端 Spring MVC 应用编码过程中，services 层可用于提供原子级的数据服务；controller 层可用于组合原子级的数据服务，并向页面模板注入内容；view 层以备模板引擎输出 html。controller 层在串联 service 和 view 层时，所采用的关键连接点是路由信息等。到了前端 SPA 应用中，路由仍旧是一个关键连接点，通过 controller 为不同页面输送数据。如果 controller 层进一步对接视图中的交互逻辑，那么 controller 层就与 Presenter 表现层表现相同，构成 MVP 架构（视图层和表现层双向通信）。本文并不区分 MVC 和 MVP 这两种架构。</p>
<p>与 jQuery 等 DOM 交互框架相比，采用 MVC 架构实现的应用和组件形态都更聚合，编码模式更为清晰，因此也更容易复用和维护。成熟的 MVC 框架一般通过事件监听或观察者模式实现，比如 backbone.js 等。</p>
<p>以下分别是采用 MVC 架构组织 SPA 应用、前端组件的简单设想，仅以说明 MVC 架构在前端中的应用形态。</p>
<h3 id="单页应用中的-MVC-架构"><a href="#单页应用中的-MVC-架构" class="headerlink" title="单页应用中的 MVC 架构"></a>单页应用中的 MVC 架构</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引擎类，管理控制器、视图、模型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> Engine &#123;</span><br><span class="line">  controllers: Controller[];</span><br><span class="line">  views: &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: View</span><br><span class="line">  &#125;;</span><br><span class="line">  models: &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: Model</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 注册视图 */</span></span><br><span class="line">  registerView(name: <span class="built_in">string</span>, view: View): <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 注册控制器 */</span></span><br><span class="line">  registerController(controller: Controller): <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 注册模型 */</span></span><br><span class="line">  registerModel(name: <span class="built_in">string</span>, model: Model): <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 根据 hash 路由变更，调用控制器渲染视图 */</span></span><br><span class="line">  onHashChange(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 模型装饰器，用于为控制器类属性注入相应的 model，从引擎实例中获取 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">model</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="title">Model</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 控制器装饰器，用于为视图类属性注入相应的 controllerl，从引擎实例中获取 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">controller</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="title">Controller</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 视图类，通过 @controller 为其属性装填特定的 controller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> View &#123;</span><br><span class="line">  <span class="comment">/* 页面模板 */</span></span><br><span class="line">  tpl: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 绑定事件，绑定函数可以是特定 controller 的方法 */</span></span><br><span class="line">  binds(): <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 使用模板引擎渲染页面 */</span></span><br><span class="line">  render(model): html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制器类，通过 @model 为其属性装填特定的 model</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> Controller &#123;</span><br><span class="line">  <span class="comment">/* 路由 */</span></span><br><span class="line">  route: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 处理异步请求，变更模型数据，使用 view 渲染视图 */</span></span><br><span class="line">  handler(): <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 仅举例视图交互逻辑的抽象 */</span></span><br><span class="line">  onClick(event: <span class="built_in">any</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模型类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> Model &#123;</span><br><span class="line">  <span class="comment">/* 包含数据 */</span></span><br><span class="line">  data: <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 仅举例异步请求的抽象 */</span></span><br><span class="line">  <span class="keyword">get</span>(params: Params): <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 仅举例业务处理逻辑的抽象 */</span></span><br><span class="line">  add(item: <span class="built_in">any</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="前端组件中的-MVC-架构"><a href="#前端组件中的-MVC-架构" class="headerlink" title="前端组件中的 MVC 架构"></a>前端组件中的 MVC 架构</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Component &#123;</span><br><span class="line">  <span class="comment">/* 渲染内容模板 */</span></span><br><span class="line">  tpl: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 数据模型 */</span></span><br><span class="line">  model: <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 构建 dom 节点，并绑定事件 */</span></span><br><span class="line">  view(): DOMElement;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 将内容渲染到特定节点 */</span></span><br><span class="line">  renderTo(data: <span class="built_in">any</span>, elm: DOMElement): <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 控制器方法 */</span></span><br><span class="line">  controllers: &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: <span class="built_in">Function</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="MVVM-架构"><a href="#MVVM-架构" class="headerlink" title="MVVM 架构"></a>MVVM 架构</h2><p>MVVM 架构中的 VM 指的是 ViewModel，它实现了双向绑定，视图层的变更会自动通知到数据模型层，反之亦然。因此，MVVM 架构可以认为是一种自动化的 MVP 架构。典型的 MVVM 框架有 Vue, Angular 等。承接上文，以下是采用 MVVM 架构组织前端组件的简单设想。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> ViewModel &#123;</span><br><span class="line">  <span class="comment">/* 声明指令、绑定函数的渲染内容模板 */</span></span><br><span class="line">  tpl: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 数据模型 */</span></span><br><span class="line">  data: <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 方法，可作为绑定函数 */</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: <span class="built_in">Function</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 指令解析方式 */</span></span><br><span class="line">  derectives: &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: <span class="built_in">Function</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 将模板解析成渲染函数，渲染函数以当前 ViewModel 为首参 */</span></span><br><span class="line">  parse(): <span class="function">(<span class="params">vm: ViewModel</span>) =&gt;</span> DOMElement;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 将内容渲染到特定节点 */</span></span><br><span class="line">  render(data: <span class="built_in">any</span>, elm: DOMElement): DOMElement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>典型的 tpl 模板如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"newName"</span>/&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;newName&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>
<p>解析 tpl 模板时，首先需要将节点建模成约定属性集合的树形节点；其次，在解析过程中，将模板中的标签内容转化为模型节点；然后，针对模型节点的特殊属性，通过可扩展的程式加以处理（如对于 v-model 指令，需要将 vm.data 数据与 input 节点进行双向绑定）；最后，通过递归下钻又回升的机制获得 dom 节点树，以供插入页面。我们就可以解释为什么 v-on 指令能将 vm.methods 能成为真实 dom 节点的绑定函数了。vm.data 数据又是怎么驱动视图重绘的呢？数据驱动视图更新的机制主要有手动调用、脏值检测、对象劫持、Proxy 代理。手动调用即抽象一般的数据变更方法，在该方法执行的尾部主动重新渲染组件（React 实现机制）。脏值检测即主动轮询树节点的数据属性，当发现其与 vm.data 数据不符时，即重新渲染组件（Angular 实现机制）。对象劫持即通过 Object.defineProperty 使数据变更的处理流程包含重绘组件这一过程（Vue 实现机制）。Proxy 与 Object.defineProperty 异曲同工（Mobx 实现机制）。组件绘制或重绘过程，可以使用虚拟 dom 提升效能，避免节点的全量渲染。这里仅点到为止，不再深入。想要了解更多，可以翻阅张成文的《现代前端技术解析》或各框架的相关文章。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>架构犹如轮廓，有助于理解成熟框架的设计和实现，不至于迷失在细节里。理想情况下，先定架构，再完善功能点也是一种高效的工作模式。现实中却不乏认知不到位、历史原因、项目工期短等问题，心态也需要有相当的韧性。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>architecture</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>决战大数据读后</title>
    <url>/2019/10/08/%E9%9A%8F%E7%AC%94/%E5%86%B3%E6%88%98%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%90%8E/</url>
    <content><![CDATA[<p>很长一段时间，业务是让我感到困惑的两个字。记得第一次被面试官问及业务的意义时，当时我还在做阿里云营销中台的前端开发工作，我只能较为笼统地答复前置校验器到商品优惠的流程。因为在我参与项目之先，校验器的模型已经大致成熟，剩下的只是实现以及不伤筋骨地调整，所以我能确切感知到的是校验器模型的普适性，至于其设计过程的磕绊终归没有多少体感。第二次被面试官问及业务的意义是在上海的一间会议室，我所理解的考题是能不能接受产品设计上繁复的再斟酌过程；我也记得，那时有过复杂动态表单的编码经历使我感到欣慰，而我所关心的焦点还在技术层面。可惜的是，在上海的经历也失衡地倒向技术上那一侧。我发觉，产品更多的是在模仿淘宝，摆在他嘴边的是“淘宝的页面也是这么设计的”；在整体设计上，那么一款平台级的产品却尴尬地任由第三方规则牵引着。那时我还专注于动态表单的编码体验，没有用愚笨的口舌参与讨论。</p>
<p>直到近来经历的坑多了，我才有种觉悟用自己惯常的思维去衡量业务。一个人的分析有赖于他的阅历。我想，构成我的阅历的，绝大部分都是历史读物，因此我习惯使用类推的方式去思考。我记得，当现有法典不足以裁断一桩案件时，钟繇和王朗会比对有汉以来的另一桩案件，然后再结合情理地作出判决。这里有两个内容，基于大量事实抽象的典章，还有就是一件具体的情事。换言之，一个是普适于一般业务场景的框架型产物；一个是只适用于特定业务场景的定制型产物。据此可以推演的是，孙子兵法这样的纯军事理论著作好比一个思考框架，它有指导意义，却脱离具体的场景；而百战奇略那样大量 case 的集合，倒是具体问题具体分析。也许是因为听多了假大空的废话套话，我现在额外看重从具体场景中演化得来的经验，更倾向于看见那些范式是通过大量经验堆叠起来的，真刀真枪打出来的。虽然按照科学的法门，罗马不是一朝建成的，系统是演进迭代出来的。</p>
<p>说了那么多，和《决战大数据》这本书又有什么关系呢？尽管在这本书里，很多跨专业的知识是我一时不能消化的，但是我很荣幸地在车品觉的字里行间看到一种精神上的光辉：务实，从具体场景出发。范式总教导人约定俗成地接受事实，只有深入具体的事情才会发现新的问题、新的矿藏。在这样的基础上，stay foolish、保持嗅觉就会变得相当有拓展力。车品觉用 6 年时间刻意锻炼对数据的嗅觉，后来他是那样幸福地处在一种有料可抖、有的放矢的状态，摆脱了空泛。“养数据”一说也不正是建基于对具体问题的判断力？缺失了这种判断力，才会不知轻重地什么数据都想攥在手里。具体问题可以很小，一个标签，一个按钮；也可以很大，一个产品，一个领域。从延伸义上，理解业务不是为了有的放矢吗？车品觉不单在务实光辉的笼罩下，他也有全域大数据的理想，这种理想因为务实变得可信；他也有不少科学素养，对数据的评判会基于检验这一闭环流程，尾章会展望大数据的诸多应用领域；他也有他的朴实。</p>
<p>因为某种尿性，我用拗口兼务虚的文字写就这篇文章，以资备忘。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>GGEdiotr</title>
    <url>/2019/10/07/frontend/editor/GGEditor%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>frontend</category>
        <category>editor</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax、web sockets 及跨域</title>
    <url>/2019/10/06/frontend/architecture/ajax%E5%92%8C%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><p>ajax 全称 “Asynchronous Javascript + XML”，它利用浏览器原生的通信能力，能实现页面的局部更新。ajax 请求可以通过 XMLHttpRequest 对象发送；在兼容性上，IE7+, Firefox, Opera, Chrome 和 Safari 均支持原生的 XHR 对象。以下是 XHR 对象的基本使用样例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line"><span class="comment">// readyState 四种状态</span></span><br><span class="line"><span class="comment">// 0: 未初始化，即尚未调用 xhr.open 方法</span></span><br><span class="line"><span class="comment">// 1: 启动，已调用 xhr.open 方法，但未调用 xhr.send 方法</span></span><br><span class="line"><span class="comment">// 2: 发送，已调用 xhr.send 方法，但未接收到响应</span></span><br><span class="line"><span class="comment">// 3: 接收，已接收到部分响应数据</span></span><br><span class="line"><span class="comment">// 4: 完成，接收到全部响应数据，且可以在客户端使用了</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 响应数据自动填充到 xhr 对象上</span></span><br><span class="line">  <span class="comment">// responseText 响应主体返回的文本</span></span><br><span class="line">  <span class="comment">// responseXML 如果响应的内容类型为 "text/xml" 或 "application/xml"。responseXML 会保存响应数据的 XML DOM 文档</span></span><br><span class="line">  <span class="comment">// status 响应的 HTTP 状态</span></span><br><span class="line">  <span class="comment">// statusText HTTP 状态的说明</span></span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Request was unsuccessful: "</span>+ xhr.status);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备发送请求</span></span><br><span class="line"><span class="comment">// 第三个参数表示是否发送异步请求</span></span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"test.json"</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Comet"><a href="#Comet" class="headerlink" title="Comet"></a>Comet</h2><p>Comet 指服务器推送，促使浏览器持续不断地接受服务端响应。基本的 Comet 实现可借助 XHR 对象长轮询：服务端每发回一波响应，xhr.readyState 状态值都会被置为 3；直到服务端发送完响应内容后，xhr.readyState 才会被置为 4。使用 XHR 对象实现长轮询的样例代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 progress, finished 回调处理接受到的内容</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStreamingClient</span>(<span class="params">url, progress, finished</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  <span class="keyword">let</span> received = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  xhr.open(<span class="string">"get"</span>, url, <span class="literal">true</span>);</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">3</span>) &#123;</span><br><span class="line">      result = xhr.responseText.substring(received);</span><br><span class="line">      received += result.length;</span><br><span class="line"></span><br><span class="line">      progress(result);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">      finished(xhr.responseText);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  xhr.send(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SSE"><a href="#SSE" class="headerlink" title="SSE"></a>SSE</h3><p>SSE 全称 Server-Sent Event，服务器发送事件。SSE 适用于处理只读 Comet 交互。在兼容性上，Firefox 6+, Safari 5+, Opera 11+, Chrome 和 iOS 4+ 版 Safari 支持 SSE。SSE 的基本使用样例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数 url 必须与页面同源</span></span><br><span class="line"><span class="keyword">const</span> source = <span class="keyword">new</span> EventSource(<span class="string">"test.json"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 onmessage 事件持续不断的接受数据</span></span><br><span class="line">source.onmessage = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event.data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Web-Sockets"><a href="#Web-Sockets" class="headerlink" title="Web Sockets"></a>Web Sockets</h2><p>Web Sockets 可用于实现浏览器和服务端的全双工、双向通信。创建 WebSocket 对象后，首先会发送 http 请求到服务端；取得响应后，建立的连接会从 http 协议升级成 Web Sockets 协议，以支持双向通信。Web Sockets 没有同源策略，因此可以跨域通信。支持 Web Sockets 的浏览器有：Firefox 6+, Safari 5+, Chrome 和 iOS 4+ 版 Safari。Web Sockets 的使用样例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://www.example.com/socket"</span>);<span class="comment">// 必须是绝对路径</span></span><br><span class="line">socket.send(data);</span><br><span class="line">socket.onmessage = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event.data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS 全称 Cross-Origin Resource Sharing，跨域资源共享。服务器通过设置 Access-Control-Allow-Origin 头，开启跨域访问资源的可能。此时浏览器若想跨域访问资源，需要设置 Origin 请求头为许可的请求页面地址信息。在跨域请求的过程中，当浏览器接受到响应时，会根据 Access-Control-Allow-Origin 判断这次请求是不是有效的。注意，请求和响应都不包含 cookie 信息。</p>
<p>IE 8~9 需要使用 XDomainRequest 对象发送跨域请求。</p>
<p>Firefox 3.5+, Safari 4+, Chrome, iOS 版 Safari 和 Android 平台中的 Webkit 都可以通过 XHR 对象发送跨域请求，而不需要其他处理。该跨域请求默认不会携带 cookie 和 http 认证信息，此时可以将 xhr.withCredentials 置为 true，这样就会携带 cookie 和 http 认证信息。有些浏览器默认会发送 cookie，此时通过设置 xhr.withCredentials = false，可以禁止携带 cookie 信息。</p>
<p>非简单请求的跨域，会执行一次预检请求，详情可参看<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a>。</p>
<p>检测浏览器是否支持 XHR 对象的跨域请求，可以通过判断 XHR 对象是否包含 withCredentials 属性。在此基础上，再判断 XDomainRequest 对象是否存在，就可以覆盖所有浏览器。</p>
<h3 id="图像-Ping"><a href="#图像-Ping" class="headerlink" title="图像 Ping"></a>图像 Ping</h3><p>鉴于加载图像不存在跨域问题，图像 Ping 技术通过动态的 Image 实例进行跨域通信。它只能将请求通知给服务器，不能接受响应，最常用于收集点击信息。</p>
<h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>与图像 Ping 技术相仿，JSONP 通过插入动态的 script 节点进行跨域通信，因此也只适用于 get 请求。在 JSONP 中，服务端返回的脚本信息会被执行，因此可用于处理响应。为了处理上的灵活性，JSONP 请求会携带回调函数的名称作为请求参数，以便服务器拼接响应，约束浏览器在执行脚本时调用特定的函数处理响应。</p>
<h3 id="Web-Sockets-1"><a href="#Web-Sockets-1" class="headerlink" title="Web Sockets"></a>Web Sockets</h3><p>见上文。</p>
<h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>在设计上，axios 采用适配器模式切换发送请求的模块（分别为浏览器端的 XHR 对象、服务器端的 http, https 模块），该发送请求的模块作为 axios 的主流程。在主流程之外，axios 借助 Promise 对象装配拦截器（包含在主流程前的请求拦截器、在主流程后的响应拦截器），其实现等同一条链式处理的中间件机制。其核心流程如下图，首先由请求拦截器处理请求，然后通过选用特定的适配器发送请求，最后由响应拦截器处理响应。</p>
<img src="/2019/10/06/frontend/architecture/ajax和跨域/axios.png">
<p>在代码中的表现为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Axios.prototype.request = <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*eslint no-param-reassign:0*/</span></span><br><span class="line">  <span class="comment">// Allow for axios('example/url'[, config]) a la fetch API</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> config === <span class="string">'string'</span>) &#123;</span><br><span class="line">    config = <span class="built_in">arguments</span>[<span class="number">1</span>] || &#123;&#125;;</span><br><span class="line">    config.url = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    config = config || &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  config = mergeConfig(<span class="keyword">this</span>.defaults, config);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set config.method</span></span><br><span class="line">  <span class="keyword">if</span> (config.method) &#123;</span><br><span class="line">    config.method = config.method.toLowerCase();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.defaults.method) &#123;</span><br><span class="line">    config.method = <span class="keyword">this</span>.defaults.method.toLowerCase();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    config.method = <span class="string">'get'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Hook up interceptors middleware</span></span><br><span class="line">  <span class="comment">// dispatchRequest 本质使用特定的适配器发送请求</span></span><br><span class="line">  <span class="keyword">var</span> chain = [dispatchRequest, <span class="literal">undefined</span>];</span><br><span class="line">  <span class="keyword">var</span> promise = <span class="built_in">Promise</span>.resolve(config);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.interceptors.request.forEach(<span class="function"><span class="keyword">function</span> <span class="title">unshiftRequestInterceptors</span>(<span class="params">interceptor</span>) </span>&#123;</span><br><span class="line">    chain.unshift(interceptor.fulfilled, interceptor.rejected);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.interceptors.response.forEach(<span class="function"><span class="keyword">function</span> <span class="title">pushResponseInterceptors</span>(<span class="params">interceptor</span>) </span>&#123;</span><br><span class="line">    chain.push(interceptor.fulfilled, interceptor.rejected);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (chain.length) &#123;</span><br><span class="line">    promise = promise.then(chain.shift(), chain.shift());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在这条链式的处理流程中，随处流动的实体是 config 对象。对于 get 和 post 请求，在适配器 xhr 以及 http 模块中，config.url, config.params 将被转化成实际请求路径，config.data 将作为请求数据。config.params 也能在 post 请求中使用。此外，get 和 post 请求中不同的头部信息通过策略模式处理；传输数据和头部 content-type 值的联动关系则通过 config.transformRequest 方法处理。</p>
<p>xhr 模块对请求头的处理包含防 csrf 攻击的机制：同源或 request.withCredentials 为真值时，将 cookie 中 xsrf 相关内容写入请求头中。</p>
<p>http 模块包含代理机制的实现，即使用 config.proxy 配置项制作实际的请求地址等值。</p>
<p>此外，axios 使用 Promise 实现了撤销请求的机制。cancel 操作会为 token 令牌注入标识，同时通过 resolvePromise 方法间接调用 xhr.abort 或 req.abort，从而取消请求。详情可参看源码。</p>
<h2 id="umi-request"><a href="#umi-request" class="headerlink" title="umi-request"></a>umi-request</h2><p>umi-request 与 axios 不同的是：采用如 koa 的中间件机制应用拦截器；使用 isomorphic-fetch 库切换客服端、服务端的请求模块；对 get 请求实现缓存机制。因为 isomorphic-fetch 没有实现超时、撤销请求这两个功能，umi-request 使用 Promise.race 权衡正常请求、超时请求、撤销请求的优先级，最终实现这两个功能。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">跨域资源共享 CORS 详解</a><br><a href="https://github.com/camsong/blog/issues/2" target="_blank" rel="noopener">传统 Ajax 已死，Fetch 永生</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>architecture</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>library一句话</title>
    <url>/2019/09/27/frontend/library/library%E4%B8%80%E5%8F%A5%E8%AF%9D/</url>
    <content><![CDATA[<h3 id="yargs"><a href="#yargs" class="headerlink" title="yargs"></a>yargs</h3><p>[猜测]首先注册命令及其选项，再解析用户输入，执行命令。</p>
<p>同类库：command, command-bin。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>library</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>踩坑</title>
    <url>/2019/09/14/frontend/guide/%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h3 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h3><ul>
<li><p>使用 export = 导出的模块，需要使用 typescript 提供的特定语法 import let = require(“module”) 导入。参考 <a href="https://www.cnblogs.com/dh-dh/p/5219629.html" target="_blank" rel="noopener">Typescript学习笔记（五） 模块机制</a>。</p>
</li>
<li><p>其类型缺少调用或构造签名的表达式无法使用 “new”：在 .d.ts 文件中声明包含 new 方法的接口。</p>
</li>
</ul>
<h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><ul>
<li><strong>webpack_require</strong>(…) is not a function 报错，你可能需要在 babal 选项中添加 exclude: [/node_module/]。</li>
</ul>
<h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><ul>
<li>fork 的意义在于，改变 cwd。</li>
</ul>
<h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><ul>
<li><a href="https://blog.csdn.net/yinlongfei_love/article/details/81085761" target="_blank" rel="noopener">413 Request Entity Too Large</a>。</li>
</ul>
]]></content>
      <categories>
        <category>frontend</category>
        <category>guide</category>
      </categories>
      <tags>
        <tag>carrier</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack-dev-server 一些设计点</title>
    <url>/2019/09/14/frontend/%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack/webpack-dev-server%E4%B8%80%E4%BA%9B%E8%AE%BE%E8%AE%A1%E7%82%B9/</url>
    <content><![CDATA[<h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><p>webpack-dev-server 通过 express 构建服务，以下是它的整体流程：</p>
<ol>
<li>validateOptions：使用 schema-utils 校验配置选项。</li>
<li>normalizeOptions：处理选项，混入默认配置。</li>
<li>updateCompiler：酌情为 webpack 添加 HotModuleReplacementPlugin 插件，socket 通信客户端脚本。</li>
<li>将选项内容赋值给 Server 实例。</li>
<li>绑定 webpack 钩子，在编译结束后通过 socket 通信将编译信息发送到客户端。</li>
<li>创建 express 实例，挂载 webpack-dev-middleware 中间件。</li>
<li>应用 features 特性，参见下文。</li>
<li>启动 express 服务。</li>
</ol>
<h2 id="features-特性"><a href="#features-特性" class="headerlink" title="features 特性"></a>features 特性</h2><p>webpack-dev-server 首先通过封装 features 特性添加操作集合，然后根据 options 选项将本次启用的特性添加到 runnableFeatures 特性列表中，最后依次执行特性添加操作函数，为 express 服务添加特性。关于代理，可参阅 <a href="http://xzfyu.com/2018/11/11/%E5%B7%A5%E7%A8%8B%E5%8C%96/http-proxy-middleware%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/">http-proxy-middleware 源码解读</a>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">  setupFeatures() &#123;</span><br><span class="line">    <span class="keyword">const</span> features = &#123;</span><br><span class="line">      compress: <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="comment">// 压缩静态资源</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.options.compress) &#123;</span><br><span class="line">          <span class="keyword">this</span>.setupCompressFeature();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      proxy: <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="comment">// 代理</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.options.proxy) &#123;</span><br><span class="line">          <span class="keyword">this</span>.setupProxyFeature();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      historyApiFallback: <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="comment">// history 跳转</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.options.historyApiFallback) &#123;</span><br><span class="line">          <span class="keyword">this</span>.setupHistoryApiFallbackFeature();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      contentBaseFiles: <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="comment">// 静态资源</span></span><br><span class="line">        <span class="keyword">this</span>.setupStaticFeature();</span><br><span class="line">      &#125;,</span><br><span class="line">      contentBaseIndex: <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="comment">// 静态资源目录服务</span></span><br><span class="line">        <span class="keyword">this</span>.setupServeIndexFeature();</span><br><span class="line">      &#125;,</span><br><span class="line">      watchContentBase: <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="comment">// 监测静态资源</span></span><br><span class="line">        <span class="keyword">this</span>.setupWatchStaticFeature();</span><br><span class="line">      &#125;,</span><br><span class="line">      before: <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="comment">// pre-action</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.options.before === <span class="string">'function'</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.setupBeforeFeature();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      middleware: <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="comment">// 应用 webpack-dev-middleware</span></span><br><span class="line">        <span class="keyword">this</span>.setupMiddleware();</span><br><span class="line">      &#125;,</span><br><span class="line">      after: <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="comment">// post-action</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.options.after === <span class="string">'function'</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.setupAfterFeature();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      headers: <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="comment">// 变更响应头</span></span><br><span class="line">        <span class="keyword">this</span>.setupHeadersFeature();</span><br><span class="line">      &#125;,</span><br><span class="line">      magicHtml: <span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="comment">// 为 js 资源添加访问页面</span></span><br><span class="line">        <span class="keyword">this</span>.setupMagicHtmlFeature();</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> runnableFeatures = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.options.compress) &#123;</span><br><span class="line">      runnableFeatures.push(<span class="string">'compress'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    runnableFeatures.push(<span class="string">'before'</span>, <span class="string">'headers'</span>, <span class="string">'middleware'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.options.proxy) &#123;</span><br><span class="line">      runnableFeatures.push(<span class="string">'proxy'</span>, <span class="string">'middleware'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.options.contentBase !== <span class="literal">false</span>) &#123;</span><br><span class="line">      runnableFeatures.push(<span class="string">'contentBaseFiles'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.options.historyApiFallback) &#123;</span><br><span class="line">      runnableFeatures.push(<span class="string">'historyApiFallback'</span>, <span class="string">'middleware'</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.options.contentBase !== <span class="literal">false</span>) &#123;</span><br><span class="line">        runnableFeatures.push(<span class="string">'contentBaseFiles'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.serveIndex = <span class="keyword">this</span>.serveIndex || <span class="keyword">this</span>.serveIndex === <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.options.contentBase &amp;&amp; <span class="keyword">this</span>.serveIndex) &#123;</span><br><span class="line">      runnableFeatures.push(<span class="string">'contentBaseIndex'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.options.watchContentBase) &#123;</span><br><span class="line">      runnableFeatures.push(<span class="string">'watchContentBase'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    runnableFeatures.push(<span class="string">'magicHtml'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.options.after) &#123;</span><br><span class="line">      runnableFeatures.push(<span class="string">'after'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    (<span class="keyword">this</span>.options.features || runnableFeatures).forEach(<span class="function">(<span class="params">feature</span>) =&gt;</span> &#123;</span><br><span class="line">      features[feature]();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="socket-通信"><a href="#socket-通信" class="headerlink" title="socket 通信"></a>socket 通信</h2><p>webpack-dev-server 根据 options.transportMode 选项分别采用 sockjs, websocket 或用户自定义实现类通信。sockjs 是一种实现，它首先会尝试使用 websocket 协议通信；在不支持 websocket 协议的浏览器中，它会降级采用长轮询的方式进行通信。webpack-dev-server 的服务端整体处理流程为（客户端需要添加对应的 socket 脚本）：</p>
<ol>
<li>根据 options.transportMode.server 选取 SocketServer 的实现类。</li>
<li>在 express 服务启动期间，创建 SocketServer 实例，并监听事件的方式收集每个连接 app.sockets = [connection]。</li>
<li>通过 app.sockWrite 为每个连接 connection 推送消息。</li>
</ol>
<img src="/2019/09/14/frontend/工程化/webpack/webpack-dev-server一些设计点/socket.jpg">
<p>使用 socket 通信的场景主要有以下几类：</p>
<ul>
<li>webpack 编译 stats，包含日志级别信息。</li>
<li>overlay 页面显示编译错误。</li>
<li>通过 webpack.ProgressPlugin 获得的编译进度。</li>
<li>hot 热更新，包含 liveReload 页面是否刷新标识。</li>
<li>通过 chokidar 监测 contentBase 静态资源更新（小提示：webpack-dev-server 通过 serve-index 为静态资源提供目录信息）。</li>
</ul>
]]></content>
      <categories>
        <category>frontend</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack加载器编程</title>
    <url>/2019/08/06/frontend/%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack/webpack%E5%8A%A0%E8%BD%BD%E5%99%A8%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>loader 是导出为函数的 js 模块，它支持同步模式、异步模式。同步模式有两种编程方式，其一使用 return 返回结果作为下一个加载器的资源，其二使用 this.callback 传入结果。异步模式使用 this.async 开启，在 this.async 执行过程中再调用 this.callback 语句，以启用下一个加载器的执行逻辑。官方推荐使用异步模式，这样可以提升 webpack 在 node 单线程环境中的执行性能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同步模式一</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">content, map, meta</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> someSyncOperation(content);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步模式二</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">content, map, meta</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.callback(<span class="literal">null</span>, someSyncOperation(content), map, meta);</span><br><span class="line">  <span class="keyword">return</span>; <span class="comment">// 当调用 callback() 时总是返回 undefined</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步模式</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">content, map, meta</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> callback = <span class="keyword">this</span>.async();</span><br><span class="line">  someAsyncOperation(content, <span class="function"><span class="keyword">function</span>(<span class="params">err, result, sourceMaps, meta</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> callback(err);</span><br><span class="line">    callback(<span class="literal">null</span>, result, sourceMaps, meta);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>加载器在 loader runner 环境中被调用，参数包含错误 err，资源 content，source-map，以及任何数据（可以是元数据 meta）。当 module.exports.raw 被赋值为 true 时，参数 content 可以是 buffer。loader runner 提供了如下上下文：</p>
<ul>
<li>this.version：loader API 的版本号。</li>
<li>this.context：资源文件所在的目录。</li>
<li>this.request：解析后的查询字符串。</li>
<li>this.query：options 选项或查询字符串。</li>
<li>this.callback(err, content, sourceMap?, meta?: any)：调用下一个加载器。</li>
<li>this.async：启用异步模式。</li>
<li>this.data：在 pitch 阶段和正常阶段之间共享的 data 对象。</li>
<li>this.cacheable(flag)：是否可缓存。一个可缓存的 loader 在输入和相关依赖没有变化时，必须返回相同的结果。这意味着 loader 除了 this.addDependency 里指定的以外，不应该有其它任何外部依赖。</li>
<li>this.loaders：所有 loader 组成的数组。它在 pitch 阶段的时候是可以写入的。</li>
<li>this.loaderIndex：loader 的索引。</li>
<li>this.resource：包括查询字符串的资源路径。</li>
<li>this.resourcePath：不包括查询字符串的资源路径。</li>
<li>this.resourceQuery：查询字符串。</li>
<li>this.target：编译目标，从配置选项中传递过来的。</li>
<li>this.webpack：是否由 webpack 编译。loader 最初被设计为可以同时当 Babel transform 用。</li>
<li>this.sourceMap：是否生成 source-map。</li>
<li>this.emitWarning：发出警告。</li>
<li>this.emitError：发出错误。</li>
<li>this.loadModule：解析给定的 request 到一个模块，应用所有配置的 loader ，并且在回调函数中传入生成的 source 、sourceMap 和 模块实例（通常是 NormalModule 的一个实例）。</li>
<li>this.resolve(context, request, callback)：像 require 表达式一样解析一个 request。</li>
<li>this.addDependency(directory)：加入一个文件作为产生 loader 结果的依赖，使它们的任何变化都可以被监听到。</li>
<li>this.addContextDependency：把文件夹作为 loader 结果的依赖加入。</li>
<li>this.clearDependencies：移除 loader 结果的所有依赖。甚至自己和其它 loader 的初始依赖。考虑使用 pitch。</li>
<li>this.emitFile(name, content)：产生一个文件。</li>
<li>this.fs：用于访问 compilation 的 inputFileSystem 属性。</li>
</ul>
<p>pitch 阶段指 webpack 预先自左向右调用加载器的 pitch 方法，然后再自右向左调用加载器本身。pitch 阶段可用于跳过部分 loader，其如果有返回值，就将跳过余下的 loader。其次 pitch 方法的参数 data 可以在 loader 本体中通过 this.data 共享访问。</p>
<h3 id="loader-utils-schema-utils"><a href="#loader-utils-schema-utils" class="headerlink" title="loader-utils, schema-utils"></a>loader-utils, schema-utils</h3><p><a href="https://github.com/webpack/loader-utils" target="_blank" rel="noopener">loader-utils</a>, <a href="https://github.com/webpack/schema-utils" target="_blank" rel="noopener">schema-utils</a> 用于辅助加载器编程。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getOptions &#125; <span class="keyword">from</span> <span class="string">'loader-utils'</span>;</span><br><span class="line"><span class="keyword">import</span> validateOptions <span class="keyword">from</span> <span class="string">'schema-utils'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> schema = &#123;</span><br><span class="line">  type: <span class="string">'object'</span>,</span><br><span class="line">  properties: &#123;</span><br><span class="line">    test: &#123;</span><br><span class="line">      type: <span class="string">'string'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> options = getOptions(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  validateOptions(schema, options, <span class="string">'Example Loader'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对资源应用一些转换……</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`export default <span class="subst">$&#123; <span class="built_in">JSON</span>.stringify(source) &#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>官方文档中使用 jest 测试案例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// compiler.js</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"><span class="keyword">import</span> webpack <span class="keyword">from</span> <span class="string">'webpack'</span>;</span><br><span class="line"><span class="keyword">import</span> memoryfs <span class="keyword">from</span> <span class="string">'memory-fs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (fixture, options = &#123;&#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> compiler = webpack(&#123;</span><br><span class="line">    context: __dirname,</span><br><span class="line">    entry: <span class="string">`./<span class="subst">$&#123;fixture&#125;</span>`</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">      path: path.resolve(__dirname),</span><br><span class="line">      filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">      rules: [&#123;</span><br><span class="line">        test: <span class="regexp">/\.txt$/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: path.resolve(__dirname, <span class="string">'../src/loader.js'</span>),</span><br><span class="line">          options: &#123;</span><br><span class="line">            name: <span class="string">'Alice'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 https://github.com/webpack/memory-fs 内存文件</span></span><br><span class="line">  compiler.outputFileSystem = <span class="keyword">new</span> memoryfs();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    compiler.run(<span class="function">(<span class="params">err, stats</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err || stats.hasErrors()) reject(err);</span><br><span class="line"></span><br><span class="line">      resolve(stats);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// loader.test.js</span></span><br><span class="line"><span class="keyword">import</span> compiler <span class="keyword">from</span> <span class="string">'./compiler.js'</span>;</span><br><span class="line"></span><br><span class="line">test(<span class="string">'Inserts name and outputs JavaScript'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> stats = <span class="keyword">await</span> compiler(<span class="string">'example.txt'</span>);</span><br><span class="line">  <span class="keyword">const</span> output = stats.toJson().modules[<span class="number">0</span>].source;</span><br><span class="line"></span><br><span class="line">  expect(output).toBe(<span class="string">'export default "Hey Alice!\\n"'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="典型-loader"><a href="#典型-loader" class="headerlink" title="典型 loader"></a>典型 loader</h2><h3 id="svgr"><a href="#svgr" class="headerlink" title="svgr"></a>svgr</h3><p>svgr 是 umi/af-webpack 中的一个模块，用于解析 svg 模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getOptions &#125; <span class="keyword">from</span> <span class="string">'loader-utils'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; transform <span class="keyword">as</span> babelTransform &#125; <span class="keyword">from</span> <span class="string">'@babel/core'</span>;</span><br><span class="line"><span class="keyword">import</span> convert <span class="keyword">from</span> <span class="string">'@svgr/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">svgrLoader</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> callback = <span class="keyword">this</span>.async();</span><br><span class="line">  <span class="keyword">const</span> &#123; babel = <span class="literal">true</span>, ...options &#125; = getOptions(<span class="keyword">this</span>) || &#123;&#125;;<span class="comment">// 获取选项</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> readSvg = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.fs.readFile(<span class="keyword">this</span>.resourcePath, (err, result) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) reject(err);</span><br><span class="line">        resolve(result);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> exportMatches = source</span><br><span class="line">    .toString(<span class="string">'utf-8'</span>)</span><br><span class="line">    .match(<span class="regexp">/^module.exports\s*=\s*(.*)/</span>);</span><br><span class="line">  <span class="keyword">const</span> previousExport = exportMatches ? exportMatches[<span class="number">1</span>] : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// es6 降级</span></span><br><span class="line">  <span class="keyword">const</span> pBabelTransform = <span class="keyword">async</span> jsCode =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      babelTransform(</span><br><span class="line">        jsCode,</span><br><span class="line">        &#123;</span><br><span class="line">          babelrc: <span class="literal">false</span>,</span><br><span class="line">          <span class="comment">// Unless having this, babel will merge the config with global 'babel.config.js' which may causes some problems such as using react-hot-loader/babel in babel.config.js</span></span><br><span class="line">          configFile: <span class="literal">false</span>,</span><br><span class="line">          presets: [</span><br><span class="line">            <span class="built_in">require</span>.resolve(<span class="string">'@babel/preset-react'</span>),</span><br><span class="line">            [<span class="built_in">require</span>.resolve(<span class="string">'@babel/preset-env'</span>), &#123; <span class="attr">modules</span>: <span class="literal">false</span> &#125;],</span><br><span class="line">          ],</span><br><span class="line">          plugins: [</span><br><span class="line">            <span class="built_in">require</span>.resolve(<span class="string">'@babel/plugin-transform-react-constant-elements'</span>),</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">        (err, result) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) reject(err);</span><br><span class="line">          <span class="keyword">else</span> resolve(result.code);</span><br><span class="line">        &#125;,</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> tranformSvg = <span class="function"><span class="params">svg</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// svg 转转成 js</span></span><br><span class="line">    <span class="keyword">return</span> convert(svg, options, &#123;</span><br><span class="line">      webpack: &#123; previousExport &#125;,</span><br><span class="line">      filePath: <span class="keyword">this</span>.resourcePath,</span><br><span class="line">    &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">jsCode</span> =&gt;</span> (babel ? pBabelTransform(jsCode) : jsCode))</span><br><span class="line">      .then(<span class="function"><span class="params">result</span> =&gt;</span> callback(<span class="literal">null</span>, result))</span><br><span class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> callback(err));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (exportMatches) &#123;</span><br><span class="line">    readSvg().then(tranformSvg);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    tranformSvg(source);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://webpack.docschina.org/api/loaders/" target="_blank" rel="noopener">loader API</a><br><a href="https://webpack.docschina.org/contribute/writing-a-loader/#%E8%AE%BE%E7%BD%AE" target="_blank" rel="noopener">编写一个 loader</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>$PATH, nvm, npm, lerna</title>
    <url>/2019/07/27/frontend/guide/$PATH,%20nvm,%20npm,%20lerna/</url>
    <content><![CDATA[<h2 id="mac-环境变量"><a href="#mac-环境变量" class="headerlink" title="mac 环境变量"></a>mac 环境变量</h2><p>命令一旦添加到环境变量中，系统就知道从哪个路径中取出文件并执行。mac 有多个环境变量文件，不同的环境变量文件的作用域和加载时间也不同。在 mac 中，不同的 shell 所对应的配置文件也不同：bash 命令对应的配置文件是 .bash_profile；zsh 命令对应的配置文件是 .zshrc。</p>
<p>rc 即为 run command，一般为脚本类文件的后缀，这些脚本通常在程序启动的时候被调用，比如 .bashrc 就会在 bash shell 启动时调用。</p>
<p>mac 中环境变量配置文件的默认加载顺序如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/profile <span class="comment"># 系统级环境变量，任何用户登陆时都会读取该文件</span></span><br><span class="line">/etc/bashrc <span class="comment"># 系统级环境变量，bash shell执行时，不管是何种方式，读取该文件</span></span><br><span class="line">/etc/paths <span class="comment"># 系统级环境变量，任何用户登陆时都会读取该文件</span></span><br><span class="line">~/.bash_profile <span class="comment"># 包含用户专有的 bash 信息，当登录时以及每次打开新的 shell 时，该文件被读取；文件存在时，后面的几个文件都会被忽略</span></span><br><span class="line">~/.bash_login <span class="comment"># 系统级环境变量，任何用户登陆时都会读取该文件</span></span><br><span class="line">~/.profile <span class="comment"># 为系统的每个用户设置环境信息，当用户第一次登录时，该文件被执行；重启后生效</span></span><br><span class="line">~/.bashrc <span class="comment"># 每一个运行 bash shell 的用户执行该文件</span></span><br></pre></td></tr></table></figure>
<p>添加或修改环境变量可使用如下语法（$PATH 即原始的环境变量）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$PATH</span>:&lt;PATH 1&gt;:&lt;PATH 2&gt;:&lt;PATH 3&gt;:...:&lt;PATH N&gt;"</span> <span class="comment"># 修改环境变量的一般语法</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">'/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/alfred/apache-maven-3.5.0/bin'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span> <span class="comment"># 查看环境变量</span></span><br></pre></td></tr></table></figure>
<h3 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h3><p>Q: spawnSync npm ENOENT 报错问题？<br>A: 导致该问题有两个原因：其一是在 windows 环境下，实际制定的命令为 ‘npm.cmd’，当遇到这种情况时，可借助于 cross-spawn 库加以解决；其二是深度嵌套的子进程在执行 require(‘child_process’).spawn 脚本时，如果父进程重写了 process.env，那么该子进程就会丢失 process.env.path 配置，导致 npm 命令无法找到，这时可以拷贝根进程下的 process.env 配置。</p>
<h2 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h2><p><a href="https://brew.sh/" target="_blank" rel="noopener">homebrew</a> 是 linux 环境下的包管理工具。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 brew</span></span><br><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 brew，先卸载，再安装</span></span><br><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)</span>"</span></span><br><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">sudo brew update</span><br><span class="line"></span><br><span class="line">brew install nodejs</span><br><span class="line">brew uninstall nodejs</span><br><span class="line">brew upgrade nodejs</span><br><span class="line">brew search nodejs</span><br><span class="line">brew remove nodejs</span><br><span class="line">brew list <span class="comment"># 列出当前安装的软件</span></span><br><span class="line">brew search nodejs <span class="comment"># 查询与 nodejs 相关的可用软件</span></span><br><span class="line">brew info nodejs <span class="comment"># 查询 nodejs 的安装信息</span></span><br></pre></td></tr></table></figure>
<h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><p><a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">nvm</a> 是 Mac 环境下 node 版本管理工具。Windows 平台下推荐 nvmw 或 <a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a>。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># .bash_profile 添加以下代码，须重启终端</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span>  <span class="comment"># This loads nvm</span></span><br></pre></td></tr></table></figure>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(</span><br><span class="line">  <span class="built_in">cd</span> <span class="string">"<span class="variable">$NVM_DIR</span>"</span></span><br><span class="line">  git fetch --tags origin</span><br><span class="line">  git checkout `git describe --abbrev=0 --tags --match <span class="string">"v[0-9]*"</span> $(git rev-list --tags --max-count=1)`</span><br><span class="line">) &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span></span><br></pre></td></tr></table></figure>
<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rm -rf ~/.nvm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除 .bash_profile 中以下代码，卸载后须重启电脑</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm debug <span class="comment"># 查看 nvm 及 node 信息</span></span><br><span class="line"></span><br><span class="line">nvm ls <span class="comment"># 展示本地安装的所有 node 版本</span></span><br><span class="line">nvm ls-remote <span class="comment"># 展示所有可用的 node 版本；windows 环境下使用 nvm ls available</span></span><br><span class="line">nvm install node <span class="comment"># 安装 node 最新版本；'node' 是最新版本的别名</span></span><br><span class="line">nvm install 6.14.4 <span class="comment"># 安装 node 指定版本</span></span><br><span class="line">nvm uninstall 6.14.4 <span class="comment"># 卸载 node 指定版本</span></span><br><span class="line">nvm use node <span class="comment"># node 命令使用指定版本</span></span><br><span class="line">nvm current <span class="comment"># 查看正在使用的 node 版本</span></span><br><span class="line">nvm run node --version <span class="comment"># 使用指定版本执行指定命令</span></span><br><span class="line">nvm <span class="built_in">exec</span> 4.2 node --version <span class="comment"># 使用指定版本执行指定命令</span></span><br><span class="line">nvm <span class="built_in">which</span> 5.0 <span class="comment"># 查看指定版本的安装位置</span></span><br><span class="line">nvm install 6 --reinstall-packages-from=5 <span class="comment"># 将 5 版本中安装的全局模块安装到 6 版本中</span></span><br><span class="line"></span><br><span class="line">nvm <span class="built_in">alias</span> awesome-version 4.2.2 <span class="comment"># 为指定版本的 node 起别名</span></span><br><span class="line">nvm <span class="built_in">unalias</span> awesome-version <span class="comment"># 移除别名</span></span><br></pre></td></tr></table></figure>
<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><h3 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g npm@3 <span class="comment"># npm 升级到 v3 版本</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org <span class="comment"># 安装 cnpm</span></span><br><span class="line"></span><br><span class="line">npm publish <span class="comment"># 发布包；npm 发布内容优先级为 package.json 中 files 选项，.npmignore, .gitignore</span></span><br><span class="line">npm unpublish <span class="comment"># 撤销发布</span></span><br><span class="line"></span><br><span class="line">npm home <span class="variable">$package</span> <span class="comment"># npm home loadsh 访问 lodash 主页</span></span><br><span class="line">npm repo <span class="variable">$package</span> <span class="comment"># 访问 github 仓库</span></span><br><span class="line"></span><br><span class="line">npm outdate <span class="comment"># 检索过时的依赖</span></span><br><span class="line">npm prune <span class="comment"># 剔除未在 package.json 中注明的 node_modules 依赖</span></span><br><span class="line">npm version &lt;update_type&gt; <span class="comment"># npm version patch,minor,major 自动升级版本号；patch 小改动或bug修复，minor 添加新特性，major 大改动且无法向后兼容</span></span><br><span class="line">npm shrinkwrap <span class="comment"># 生成 npm-shrinkwrap.json 文件，锁定依赖版本号</span></span><br><span class="line"></span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="variable">$dir</span> <span class="comment"># 变更安装目录为$dir；chown -R $USER $dir改变$dir目录的操作权限；再将$dir/bin加入环境变量，可以不用 sudo</span></span><br><span class="line">npm config <span class="built_in">set</span> save-prefix=“~” <span class="comment"># 改变默认保存前缀；波浪号~，表示当信赖的副版本号有更新时，允许使用npm update进行安装；脱字符^，表示当依赖的主版本号有更新时，允许使用 npm update 进行安装</span></span><br><span class="line">npm config <span class="built_in">set</span> init.author.name <span class="variable">$name</span>，npm config <span class="built_in">set</span> init.author.email <span class="variable">$email</span> <span class="comment"># npm init初始化项目时启用特定值配置 package.json</span></span><br><span class="line">npm config <span class="built_in">set</span> init-module ~/.npm-init.js <span class="comment"># 以特定脚本配置 package.json</span></span><br></pre></td></tr></table></figure>
<h3 id="备忘"><a href="#备忘" class="headerlink" title="备忘"></a>备忘</h3><ol>
<li>安装依赖包时携带 –production 参数，将不予安装devDependencies依赖；若设置N ODE_ENV 环境变量为production，devDependencies 依赖也不会被安装。</li>
<li>项目中若不存在 .npmignore 文件，将取用 .gitignore 设定以及一些默认配置。</li>
</ol>
<h3 id="QA-1"><a href="#QA-1" class="headerlink" title="QA"></a>QA</h3><p>Q: 在执行 npm link 命令时，遇到 Unhandled rejection RangeError: Maximum call stack size exceededill install loadIdealTree 报错，该如何处理？<br>A: 尝试清空工程目录中的 node_modules 依赖，再次执行 npm link，参考 <a href="https://stackoverflow.com/questions/40566348/maximum-call-stack-size-exceeded-on-npm-install" target="_blank" rel="noopener">Maximum call stack size exceeded on npm install</a>。</p>
<h2 id="lerna"><a href="#lerna" class="headerlink" title="lerna"></a>lerna</h2><p><a href="https://github.com/lerna/lerna#getting-started" target="_blank" rel="noopener">lerna</a> 是面向 js 的多包管理器。</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install lerna -g</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.clloz.com/programming/assorted/2019/04/07/mac-pathnvm/" target="_blank" rel="noopener">Mac的环境变量和nvm的使用</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>guide</category>
      </categories>
      <tags>
        <tag>carrier</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>前端代码检查及美化</title>
    <url>/2019/07/21/frontend/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E5%8F%8A%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h2 id="lint"><a href="#lint" class="headerlink" title="lint"></a>lint</h2><p>lint 检查可借助 <a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">eslint</a>, <a href="https://github.com/palantir/tslint" target="_blank" rel="noopener">tslint</a>, <a href="https://github.com/stylelint/stylelint" target="_blank" rel="noopener">stylelint</a>，这里暂时不作详解。</p>
<h2 id="prettier"><a href="#prettier" class="headerlink" title="prettier"></a>prettier</h2><p><a href="https://github.com/prettier/prettier" target="_blank" rel="noopener">prettier 库</a> 用于代码格式化。官方说法，prettier 的美化方案比较武断；因为它在改动代码期间并未执行 lint 检查。在使用 prettier 时，首先需要安装 prettier；然后创建 .prettierrc, .prettierignore 配置文件；最后执行 prettier –write “src/*<em>/</em>.js” 命令重写代码。配置文件可如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "printWidth": 120,// 单行最大宽度。默认 80</span><br><span class="line">  "tabWidth": 2,// tab 按钮占多少个空格。默认 2</span><br><span class="line">  "indent": false,// 是否使用 tab 缩进。默认否</span><br><span class="line">  "noSemi": false,// 在引起 ASI 语法错误时在行首引入分号。默认 true，在行尾添加分号</span><br><span class="line">  "singleQuota": false,// 使用单引号。默认否。优先级低于 jsxSingleQuota</span><br><span class="line">  "quotaProps": "as-needed",// 对必要的对象属性添加引号。默认 "as-needed"</span><br><span class="line">  "jsxSingleQuota": false,// 将 jsx 中的双引号转为单引号。默认否</span><br><span class="line">  "trailingCommas": "none",// 多行时移除尾随逗号。默认 "none"</span><br><span class="line">  "bracketSpacing": true,// 对象中括号之间添加空格。默认是</span><br><span class="line">  "jsxBracketSameLine": false,// 多行jsx元素的闭合标签换行处理。默认否，换行</span><br><span class="line">  "arrowParens": "aviod",// 箭头函数参数以括号包围。默认 "aviod"，单参数不包围</span><br><span class="line">  "endOfLine": "lf"// 指定换行符。默认 "auto"。linux 文件 "lf"，windows 文件 "crlf"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="结合eslint"><a href="#结合eslint" class="headerlink" title="结合eslint"></a>结合eslint</h3><p>当 prettier 结合 eslint 使用时，可借助 eslint-plugin-prettier 检测代码风格，eslint-config-prettier 避免 lint 配置冲突。无论是 prettier 插件需要放置在最后。典型配置如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">// .eslintrc</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: [<span class="string">"plugin:prettier/recommended"</span>],</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">    <span class="attr">"prettier/prettier"</span>: [<span class="string">"error"</span>, &#123;</span><br><span class="line">      <span class="attr">"printWidth"</span>: <span class="number">120</span>,</span><br><span class="line">      <span class="attr">"tabWidth"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"jsxBracketSameLine"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="attr">"indent"</span>: <span class="string">"off"</span>,</span><br><span class="line">    <span class="attr">"react/jsx-indent"</span>: <span class="string">"off"</span>,</span><br><span class="line">    <span class="attr">"react/jsx-indent-props"</span>: <span class="string">"off"</span>,</span><br><span class="line">    "react/jsx-curly-new-line": "off",// 避免 preitter 对三元运算符作处理</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="husky"><a href="#husky" class="headerlink" title="husky"></a>husky</h2><p><a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky 库</a> 通过 git 钩子执行额外的 shell 脚本。在 npm install husky –save-dev 执行期间，husky 会向工程中的 .git/hooks 文件夹写入钩子文件。若 package.json 文件添加如下配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"lint"</span>: <span class="string">"eslint --ext **/*.js src"</span>,</span><br><span class="line">    <span class="attr">"lint:fix"</span>: <span class="string">"eslint --fix **/*.js src"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"husky"</span>: &#123;</span><br><span class="line">    <span class="attr">"hooks"</span>: &#123;</span><br><span class="line">      <span class="attr">"pre-commit"</span>: <span class="string">"npm run lint:fix"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么，在执行 git commit -m “this is a message” 时，就会预先执行 lint 检查。</p>
<h3 id="机理"><a href="#机理" class="headerlink" title="机理"></a>机理</h3><p>husky 在安装期间通过 npm 钩子执行 node husky install 内部命令，以此生成 git 钩子文件。然后在执行 git 命令时，husky 就会借由 git 钩子调用 husky-run 命令，并执行用户侧设置的 shell 脚本。</p>
<p>husky 所使用的类库：</p>
<ul>
<li><a href="https://github.com/davidtheclark/cosmiconfig" target="_blank" rel="noopener">cosmiconfig</a>: 读取配置文件。</li>
<li><a href="https://github.com/sindresorhus/execa" target="_blank" rel="noopener">execa</a>: 执行 shell 脚本。</li>
<li><a href="https://github.com/sindresorhus/read-pkg" target="_blank" rel="noopener">read-pkg</a>: 读取 package.json 文件。</li>
<li><a href="https://github.com/sindresorhus/get-stdin" target="_blank" rel="noopener">get-stdin</a>: 获取用户 echo 输入。</li>
<li><a href="https://github.com/sindresorhus/pkg-dir" target="_blank" rel="noopener">pkg-dir</a>: 获取工程目录。</li>
</ul>
<p>基于相同的实现原理，<a href="https://github.com/observing/pre-commit" target="_blank" rel="noopener">pre-commit</a> 是构建工程时的另一种选择。</p>
<h2 id="lint-staged"><a href="#lint-staged" class="headerlink" title="lint-staged"></a>lint-staged</h2><p><a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">lint-staged 库</a> 用于仅对本次提交内容执行动作，以节省运行时间。典型配置如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"husky"</span>: &#123;</span><br><span class="line">    <span class="attr">"hooks"</span>: &#123;</span><br><span class="line">      <span class="attr">"pre-commit"</span>: <span class="string">"lint-staged"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"lint-staged"</span>: &#123;</span><br><span class="line">    <span class="attr">"src/**/*.js"</span>: [<span class="string">"npm run lint"</span>, <span class="string">"git add"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="机理-1"><a href="#机理-1" class="headerlink" title="机理"></a>机理</h3><p>lint-staged 基于 execa 库执行 git diff –staged 获知变更文件，然后再借助 execa 执行用户侧配置的命令。</p>
<p>lint-staged 所使用的类库：</p>
<ul>
<li><a href="https://github.com/sindresorhus/log-symbols" target="_blank" rel="noopener">log-symbols</a>: 控制台带颜色输出。</li>
<li><a href="https://github.com/micromatch/micromatch" target="_blank" rel="noopener">micromatch</a>: glob 形式匹配文件名。</li>
</ul>
<h2 id="onchange"><a href="#onchange" class="headerlink" title="onchange"></a>onchange</h2><p><a href="https://github.com/Qard/onchange" target="_blank" rel="noopener">onchange 库</a> 通过 chokidar 监听文件变更。在指定文件变更后，onchange 会触发用户侧配置命令的执行。典型配置如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"format"</span>: <span class="string">"onchange 'src/**/*.js' -- prettier --write &#123;&#123;changed&#125;&#125;"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在实现上，onchange 使用了 <a href="https://github.com/blakeembrey/deque" target="_blank" rel="noopener">@blakeembrey/deque</a> 双端队列。</p>
<h2 id="editorConfig"><a href="#editorConfig" class="headerlink" title="editorConfig"></a>editorConfig</h2><p>EditorConfig 可以帮助开发者在不同的编辑器和IDE之间定义和维护一致的代码风格。典型的 .editorconfig 配置文件如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[*.(js,jsx,ts,tsx,css,scss,less)]</span><br><span class="line">charset = utf-8</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br><span class="line">trim_trailing_whitespace = <span class="literal">true</span> <span class="comment"># 自动删除行尾空格</span></span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/d38e7e3b80cb?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation" target="_blank" rel="noopener">更新版-梳理前端开发使用eslint和prettier来检查和格式化代码问题</a><br><a href="https://segmentfault.com/a/1190000015315545" target="_blank" rel="noopener">使用ESlint+Prettier统一前端代码风格</a><br><a href="https://www.jianshu.com/p/963e279ad88b" target="_blank" rel="noopener">npm package.json scripts</a><br><a href="https://segmentfault.com/a/1190000017790711" target="_blank" rel="noopener">前端代码风格自动化系列（三）之Lint-staged</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>前端工程化</category>
      </categories>
      <tags>
        <tag>lint</tag>
        <tag>prettier</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack动态导入</title>
    <url>/2019/07/14/frontend/%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack%E5%8A%A8%E6%80%81%E5%AF%BC%E5%85%A5/</url>
    <content><![CDATA[<h2 id="代码分割"><a href="#代码分割" class="headerlink" title="代码分割"></a>代码分割</h2><p>webpack 官方文档 <a href="https://www.webpackjs.com/guides/code-splitting/#%E5%8A%A8%E6%80%81%E5%AF%BC%E5%85%A5-dynamic-imports-" target="_blank" rel="noopener">动态导入</a> 部分已指示我们，可使用 es 提案中的 import() 或 webpack 提供的 require.ensure 语法懒加载代码。我们按下 require.ensure 不表，只介绍 import()。webpack 官方所提供的示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  <span class="keyword">const</span> _ = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "lodash" */</span> <span class="string">'lodash'</span>);</span><br><span class="line"></span><br><span class="line">  element.innerHTML = _.join([<span class="string">'Hello'</span>, <span class="string">'webpack'</span>], <span class="string">' '</span>);</span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getComponent().then(<span class="function"><span class="params">component</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(component);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>使用 import() 语法首先需要添加 @babel/plugin-syntax-dynamic-import 插件。同时，import() 返回值是 promise，因此需要添加 ployfill 垫片或者借助 @babel/plugin-transform-runtime 插件自动添加垫片。需要注意的是，@babel/preset-env 的选项 modules 不能置为 ‘commonjs’，免得将 es6 模块转换成 commonjs 模块，造成通过 import() 加载的模块没法独立打包出来。</p>
<p>output.chunkFilename 选项用于设置运行时 chunk 文件的名称，默认为 ‘[id].js’。webpackChunkName 可以指定该 chunk 文件的 [name] 占位符内容。详情可参看 <a href="https://www.webpackjs.com/api/module-methods/#import-" target="_blank" rel="noopener">模块方法 import()</a>。</p>
<h2 id="结合路由"><a href="#结合路由" class="headerlink" title="结合路由"></a>结合路由</h2><p>以 react-router 为例，Route 组件下的 component 属性可用于设置渲染内容。因此，我们可以制作一个 AsyncComponent 公共组件，在该组件中通过 import() 动态导入待渲染的组件，在 promise.then 方法变更 AsyncComponent 的状态值：等动态组件加载完成后，渲染动态组件内容；否则渲染占位元素。react-async-component, react-loadable, @loadable/component 无不基于此种思路实现。</p>
<p>上述三个类库无不提供了 webpack, babel 插件。在设计上，react-loadable 使用 props.render 渲染导出的模块。与此同时，react-loadable 还允许同时懒加载多个模块，预加载等功能，详情可参见<a href="https://github.com/jamiebuilds/react-loadable/blob/master/src/index.js" target="_blank" rel="noopener">源码</a>。next.js, umi 的 <a href="https://github.com/zeit/next.js/blob/canary/lib/dynamic.js" target="_blank" rel="noopener">dynamic 函数</a> 对 react-loadable 作了进一步封装。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Loadable <span class="keyword">from</span> <span class="string">'react-loadable'</span>;</span><br><span class="line"><span class="keyword">import</span> Loading <span class="keyword">from</span> <span class="string">'./my-loading-component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LoadableComponent = Loadable(&#123;</span><br><span class="line">  loader: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./my-component'</span>),</span><br><span class="line">  loading: Loading,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;Route path=<span class="string">"/xx"</span> component=&#123;LoadableComponent&#125; /&gt;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/dashnowords/p/9545482.html" target="_blank" rel="noopener">webpack4.0各个击破（4）—— Javascript &amp; splitChunk</a><br><a href="https://segmentfault.com/a/1190000013654180" target="_blank" rel="noopener">基于Webpack4使用懒加载分离打包React代码</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>前端工程化</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>双向数据绑定</title>
    <url>/2019/06/24/frontend/vue/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<p>有幸在公司里做了几次面试官，当我每次问及 Vue 双向绑定的实现机制时，被问者通常只会点到 Object.defineProperty，很少能提到观察者模式。因此，写作本文的目的一方面在于深入了解 Vue 的实现原理，另一方面在于增强有关 ViewModel 双向绑定、前端数据流等的提问能力。众所周知的，当我们阅读技术文章或源码时，如果不能持续有效地发问，那我们会陷入复刻他人思维的僵局里。言归正传，下面我将逐步揭开 Vue 双向绑定实现机制的面纱。</p>
<p>Object.defineProperty 方法充其量提供了对访问器进行 AOP 编程的可能性。Vue 在 get 访问器中绑定数据的订阅者 watcher；在 set 访问器中触发订阅者执行回调。为数据绑定订阅者，首先仰赖于 get 访问器在 watcher 执行期间被调用，然后缓存当前执行的 watcher，最后在 get 访问器被调用期间绑定数据和订阅者的依赖关系。对于当前处于执行期间的 watcher 的记录机制，Vue 所采用的方式类同 React 对当前实例的记录，这样就能使 get 访问器易于感知 watcher 的复杂性。在实现上，Vue 以闭包形式为每个响应式属性创建一个 Dep 实例，这样就能有效地避免对响应式数据的污染（即在响应式数据上使用隐藏属性存储订阅数据的 watcher 列表）。下图是为响应式属性添加监听者、响应式属性变更时执行订阅者的机制：</p>
<img src="/2019/06/24/frontend/vue/双向数据绑定/reactive-property.png">
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 响应式属性处理</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, key, &#123; <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">get</span>: function reactiveGetter () &#123;</span><br><span class="line">    <span class="keyword">const</span> value = getter ? getter.call(obj) : val</span><br><span class="line">    <span class="keyword">if</span> (Dep.target) &#123;<span class="comment">// Dep.target 当前执行的 watcher，作为订阅者</span></span><br><span class="line">      dep.depend()<span class="comment">// 收集订阅者 Dep.target</span></span><br><span class="line">      <span class="keyword">if</span> (childOb) &#123;<span class="comment">// 收集子项的订阅者 Dep.target</span></span><br><span class="line">        childOb.dep.depend()</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) dependArray(value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span>: function reactiveSetter (newVal) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    childOb = !shallow &amp;&amp; observe(newVal)<span class="comment">// 使新数据称为被观察对象，响应式数据</span></span><br><span class="line">    dep.notify()<span class="comment">// 触发执行订阅者</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依赖管理器，一个响应式属性对应一个 Dep 实例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  addSub (sub: Watcher) &#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.push(sub)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 watcher.addDep(dep) 调用 dep.addSub(watcher)，添加订阅者</span></span><br><span class="line">  depend () &#123;</span><br><span class="line">    <span class="keyword">if</span> (Dep.target) Dep.target.addDep(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行订阅者</span></span><br><span class="line">  notify () &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = subs.length; i &lt; l; i++) &#123;</span><br><span class="line">      subs[i].update()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅者处理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  addDep (dep: Dep) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = dep.id</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.newDepIds.has(id)) &#123;<span class="comment">// 避免重复绑定</span></span><br><span class="line">      <span class="keyword">this</span>.newDepIds.add(id)</span><br><span class="line">      <span class="keyword">this</span>.newDeps.push(dep)</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.depIds.has(id)) dep.addSub(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与<a href="http://xzfyu.com/2018/03/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/">观察者模式</a>所对应的是：Dep 即观察者模式中的 Subject，其实例桥接了响应式数据和订阅者；Watcher 即观察者模式中的 Observer，其实例用于实际执行订阅者。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>umi中的插件和路由机制</title>
    <url>/2019/06/22/frontend/%E5%B7%A5%E7%A8%8B%E5%8C%96/umi%E4%B8%AD%E7%9A%84%E6%8F%92%E4%BB%B6%E5%92%8C%E8%B7%AF%E7%94%B1%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<img src="/2019/06/22/frontend/工程化/umi中的插件和路由机制/umi.png">
<p>上图是 umi 的架构图，本文聚焦于解读 umi 的插件和路由机制。umi 中的插件机制支撑了插拔式命令、嵌套插件、运行时插件、文件生成器、生命周期钩子系统等功能；路由机制用于将 src/pages 解析为路由信息，又支持配置路由、运行时动态扩展。插件和路由机制的核心源代码都由 umi-build-dev 包提供。文中所给代码均经过一定程度的删减，只保留核心代码部分。</p>
<h2 id="af-webpack"><a href="#af-webpack" class="headerlink" title="af-webpack"></a>af-webpack</h2><p>同大多数二次封装 webpack 构建的脚手架一样，af-webpack 主要功能点集中于获取 webpack 配置、启动本地调试环境、打包编译代码、监听配置文件变更以重启编译流程等。以下是它的主要功能模块：</p>
<ul>
<li>dev.js: 基于 webpack, webpack-dev-server, react-dev-utils 启动本地调试服务器。</li>
<li>build.js: 基于 webpack, react-dev-utils 打包文件。</li>
<li>getConfig: 约定大于配置形式获取 webpack 选项。</li>
<li>getUserConfig: 提供工具函数解析用户配置，并使用 chokidar 监听配置文件。当配置文件变更后，af-webpack 会通过主进程向子进程发送消息的方式，驱动子进程重启编译流程。</li>
<li>readRc.js: 基于 strip-json-comments 读取 json 配置文件，该 json 文件允许添加注释。</li>
<li>registerBabel.js: 基于 @babel/register 编译后续 require 加载的模块。</li>
<li>webpackHotDevClient.js: react-dev-utils 库中关于模块热更新功能实现的客户端脚本，服务器端功能由 webpack-dev-server 库透出 sockWrite 方法实现。</li>
</ul>
<h2 id="插件机制"><a href="#插件机制" class="headerlink" title="插件机制"></a>插件机制</h2><p>常规的插件系统包含内置和外置插件两类；插件在调用过程中又会由插件系统注入执行上下文。在 umi 中，内置和外置插件都会被解析成 { id, apply, opts } 形式。apply 即插件的执行函数（外置插件会通过 registerBabel 编译）；opts 即插件的选项。umi 中的执行上下文使用 api 标识。api 首先包含如下注册方法：</p>
<ul>
<li>register 注册钩子，注入 service.pluginHooks。钩子用于新增、修改配置项，以及作为事件或其他处理函数。</li>
<li>registerCommand 注册命令，注入 service.commands。命令用于作为 umi 的启动命令，包含 dev 等命令。</li>
<li>registerGenerator 注册生成器，注入 service.generators。生成器用于生成模板文件等。</li>
<li>registerPlugin 注册额外的插件，注入 service.extraPlugins。额外的插件通常由插件发起注册，也就是嵌套插件形式。</li>
<li>registerMethod 注册插件方法，注入 service.pluginMethods。service.pluginMethods 中的方法执行时会调用 register 注册钩子，且可以通过 api 进行访问。因此，如果在某一个插件中使用 registerMethod 注册 service.pluginMethods 方法，该方法可被另一个插件所使用，用于实际注册 service.pluginHooks 钩子。</li>
</ul>
<p>除了上述注册方法之外，api 还包含如下内容：</p>
<ul>
<li>changePluginOption 变更插件的选项，并调用 plugin.onOptionChange 方法。</li>
<li>applyPlugins 并行调用 service.pluginHooks 中指定钩子。</li>
<li>_applyPluginsAsync 串行调用 service.pluginHooks 中指定钩子。</li>
<li>writeFileSync 创建临时文件。</li>
<li>cwd 项目路径。</li>
<li>config 用户配置。</li>
<li>webpackConfig webpack 配置。</li>
<li>pkg 项目 package.json 文件内容。</li>
<li>paths 项目相关路径。</li>
<li>routes 项目路由。</li>
<li>restart 重启 dev 开发环境。</li>
<li>refreshBrowser 刷新网页。</li>
<li>rebuildTmpFiles 重新创建临时文件。</li>
<li>rebuildHTML 重新创建 html 模板。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  initPlugin(plugin) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id, apply, opts &#125; = plugin;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> api = <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="keyword">new</span> PluginAPI(id, <span class="keyword">this</span>), &#123;</span><br><span class="line">        <span class="keyword">get</span>: (target, prop) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.pluginMethods[prop]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.pluginMethods[prop];</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (</span><br><span class="line">            [ </span><br><span class="line">              <span class="string">'changePluginOption'</span>, <span class="string">'applyPlugins'</span>, <span class="string">'_applyPluginsAsync'</span>, <span class="string">'writeTmpFile'</span>, </span><br><span class="line">              <span class="string">'cwd'</span>, <span class="string">'config'</span>, <span class="string">'webpackConfig'</span>, <span class="string">'pkg'</span>, <span class="string">'paths'</span>, <span class="string">'routes'</span>,</span><br><span class="line">              <span class="comment">// dev methods</span></span><br><span class="line">              <span class="string">'restart'</span>, <span class="string">'printError'</span>, <span class="string">'printWarn'</span>, <span class="string">'refreshBrowser'</span>, <span class="string">'rebuildTmpFiles'</span>, <span class="string">'rebuildHTML'</span>,</span><br><span class="line">            ].includes(prop)</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>[prop] === <span class="string">'function'</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">this</span>[prop].bind(<span class="keyword">this</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">this</span>[prop];</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">// 提供 register, registerCommand, registerGenerator, registerPlugin, registerMethod 方法</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> target[prop];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">      api.onOptionChange = <span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">        assert(</span><br><span class="line">          <span class="keyword">typeof</span> fn === <span class="string">'function'</span>,</span><br><span class="line">          <span class="string">`The first argument for api.onOptionChange should be function in <span class="subst">$&#123;id&#125;</span>.`</span>,</span><br><span class="line">        );</span><br><span class="line">        plugin.onOptionChange = fn;</span><br><span class="line">      &#125;;</span><br><span class="line">      apply(api, opts);</span><br><span class="line">      plugin._api = api;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在整套插件的执行过程中，umi 首先会 service.reslovePlugins 方法解析获得插件，并挂载 api 执行上下文；然后在 service.run 方法调用期间，umi 会调用 service.initPlugins 方法调用插件注册钩子、命令等，然后再从通过注册生成的 service.commands 选取指定命令并执行。下面以 dev 插件作为示例：</p>
<h3 id="dev-插件"><a href="#dev-插件" class="headerlink" title="dev 插件"></a>dev 插件</h3><p>dev 插件的功能在于注册 dev 命令。因此它涵盖了 umi dev 命令的主要执行逻辑：</p>
<ol>
<li>解析路由信息，并根据 service.routes, config.mountElementId 创建临时入口文件。</li>
<li>为 service 注入 restart, refreshBrowser, rebuildTmpFiles, rebuildHTML 等方法。</li>
<li>监听配置文件和临时文件的变更，在变更后重启 dev 开发环境。</li>
<li>启动 dev 开发环境，且通过钩子注入 express 中间件或触发钩子函数的执行。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">api</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; service, config, log, debug &#125; = api;</span><br><span class="line">  <span class="keyword">const</span> &#123; cwd &#125; = service;</span><br><span class="line"></span><br><span class="line">  api.registerCommand(</span><br><span class="line">    <span class="string">'dev'</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      webpack: <span class="literal">true</span>,</span><br><span class="line">      description: <span class="string">'start a dev server for development'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    (args = &#123;&#125;) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 通过执行 modifyRoutes 钩子获取路由，然后注入到 service.routes 中</span></span><br><span class="line">      <span class="keyword">const</span> RoutesManager = getRouteManager(service);</span><br><span class="line">      RoutesManager.fetchRoutes();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> &#123; port &#125; = args;</span><br><span class="line">      process.env.NODE_ENV = <span class="string">'development'</span>;</span><br><span class="line">      service.applyPlugins(<span class="string">'onStart'</span>);</span><br><span class="line">      service._applyPluginsAsync(<span class="string">'onStartAsync'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 创建临时的入口文件和路由文件</span></span><br><span class="line">        <span class="keyword">const</span> filesGenerator = getFilesGenerator(service, &#123;</span><br><span class="line">          RoutesManager,</span><br><span class="line">          mountElementId: config.mountElementId,</span><br><span class="line">        &#125;);</span><br><span class="line">        debug(<span class="string">'generate files'</span>);</span><br><span class="line">        filesGenerator.generate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> server = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 省略，service 中注入restart, printError, printWarn, refreshBrowser, rebuildTmpFiles, rebuildHTML 方法</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">startWatch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          filesGenerator.watch();</span><br><span class="line">          service.userConfig.setConfig(service.config);</span><br><span class="line">          service.userConfig.watchWithDevServer();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        service</span><br><span class="line">          ._applyPluginsAsync(<span class="string">'_beforeDevServerAsync'</span>)</span><br><span class="line">          .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            debug(<span class="string">'start dev server with af-webpack/dev'</span>);</span><br><span class="line">            <span class="built_in">require</span>(<span class="string">'af-webpack/dev'</span>).default(&#123;</span><br><span class="line">              cwd,</span><br><span class="line">              port,</span><br><span class="line">              base: service.config.base,</span><br><span class="line">              webpackConfig: service.webpackConfig,</span><br><span class="line">              proxy: service.config.proxy || &#123;&#125;,</span><br><span class="line">              contentBase: <span class="string">'./path-do-not-exists'</span>,</span><br><span class="line">              <span class="comment">// 通过钩子注入中间件</span></span><br><span class="line">              afterMiddlewares: service.applyPlugins(<span class="string">'addMiddleware'</span>, &#123;</span><br><span class="line">                initialValue: [</span><br><span class="line">                  ...(process.env.ROUTE_MIDDLEWARE !== <span class="string">'none'</span></span><br><span class="line">                    ? [createRouteMiddleware(service)]</span><br><span class="line">                    : []),</span><br><span class="line">                ],</span><br><span class="line">              &#125;),</span><br><span class="line">              <span class="comment">// ...</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在以上过程中，有必要说明的是入口文件生成的机制。umi 使用 Mustache 类库将模板文件解析为 js 文件并存入临时文件夹。以下几个小节就解释了：umi 是怎样借助 Mustache 模板引擎生成 window.g_history 属性，再怎样通过 window.g_history 属性创建路由容器组件，最后怎样通过路由容器组件生成入口文件的全过程。</p>
<h4 id="history-属性"><a href="#history-属性" class="headerlink" title="history 属性"></a>history 属性</h4><p>window.g_history 属性即使用 history/createBrowserHistory 等模块创建的 history 对象。将 history 对象写入 window 属性中，首先能方便开发者操控路由；其次，history 对象可能是 createHashHistory 或 createMemoryHistory 模块创建。因此，对于动态可变的 history 对象，单纯的 import 方式并不能载入它，而需要通过 window 属性加以读取。以下代码中的 modifyEntryHistory 钩子就用于视 config.history 选项构造不同的 history 对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// history 模板</span></span><br><span class="line"><span class="built_in">window</span>.g_history = &#123;&#123;&#123; history &#125;&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成 window.g_history 内容</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilesGenerator</span> </span>&#123;</span><br><span class="line">  generateHistory() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; paths &#125; = <span class="keyword">this</span>.service;</span><br><span class="line">    <span class="keyword">const</span> tpl = readFileSync(paths.defaultHistoryTplPath, <span class="string">'utf-8'</span>);</span><br><span class="line">    <span class="keyword">const</span> initialHistory = <span class="string">`</span></span><br><span class="line"><span class="string">      require('umi/_createHistory').default(&#123;</span></span><br><span class="line"><span class="string">        basename: window.routerBase,</span></span><br><span class="line"><span class="string">      &#125;)</span></span><br><span class="line"><span class="string">    `</span>.trim();</span><br><span class="line">    <span class="keyword">const</span> content = Mustache.render(tpl, &#123;</span><br><span class="line">      history: <span class="keyword">this</span>.service.applyPlugins(<span class="string">'modifyEntryHistory'</span>, &#123;</span><br><span class="line">        initialValue: initialHistory,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;);</span><br><span class="line">    writeFileSync(</span><br><span class="line">      join(paths.absTmpDirPath, <span class="string">'initHistory.js'</span>),</span><br><span class="line">      <span class="string">`<span class="subst">$&#123;content.trim()&#125;</span>\n`</span>,</span><br><span class="line">      <span class="string">'utf-8'</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// umi 包中的 history 模块</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> history = createHistory(opts);</span><br><span class="line">  <span class="keyword">if</span> (__UMI_HTML_SUFFIX) &#123;</span><br><span class="line">    <span class="keyword">const</span> oldPush = history.push;</span><br><span class="line">    <span class="keyword">const</span> oldReplace = history.replace;</span><br><span class="line">    history.push = <span class="function">(<span class="params">path, state</span>) =&gt;</span> &#123;</span><br><span class="line">      oldPush(normalizePath(path), state);</span><br><span class="line">    &#125;;</span><br><span class="line">    history.replace = <span class="function">(<span class="params">path, state</span>) =&gt;</span> &#123;</span><br><span class="line">      oldReplace(normalizePath(path), state);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> history;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="路由容器"><a href="#路由容器" class="headerlink" title="路由容器"></a>路由容器</h4><p>在有了 service.routes 路由信息和 window.g_history 对象的基础上，创建路由容器组件就显得很简单了。让我们撇过 umi 中完善的功能点，看一下路由容器组件的生成过程。除了下方代码所展示的内容，实际上，umi 支持在路由容器组件外围包裹 Provider, LocaleProvier 等状态管理容器或国际化容器，详情可参见源码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由模板</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Router <span class="keyword">as</span> DefaultRouter, Route, Switch &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> dynamic <span class="keyword">from</span> <span class="string">'umi/dynamic'</span>;</span><br><span class="line"><span class="comment">// umi 包中的 renderRoutes 模块，用于将路由信息解析为路由容器</span></span><br><span class="line"><span class="keyword">import</span> renderRoutes <span class="keyword">from</span> <span class="string">'umi/_renderRoutes'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Router = &#123;&#123;&#123; RouterRootComponent &#125;&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> routes = &#123;&#123;&#123; routes &#125;&#125;&#125;;</span><br><span class="line"><span class="built_in">window</span>.g_routes = routes;</span><br><span class="line"><span class="comment">// 调用运行时插件中的 patchRoutes 方法，以支持在运行时变更路由</span></span><br><span class="line"><span class="built_in">window</span>.g_plugins.applyForEach(<span class="string">'patchRoutes'</span>, &#123; <span class="attr">initialValue</span>: routes &#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">routeChangeHandler</span>(<span class="params">location, action</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.g_plugins.applyForEach(<span class="string">'onRouteChange'</span>, &#123;</span><br><span class="line">    initialValue: &#123;</span><br><span class="line">      routes,</span><br><span class="line">      location,</span><br><span class="line">      action,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.g_history.listen(routeChangeHandler);</span><br><span class="line">routeChangeHandler(<span class="built_in">window</span>.g_history.location);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">RouterWrapper</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &#123;&#123;&#123; routerContent &#125;&#125;&#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成路由容器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilesGenerator</span> </span>&#123;</span><br><span class="line">  generateRouterJS() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; paths &#125; = <span class="keyword">this</span>.service;</span><br><span class="line">    <span class="keyword">const</span> &#123; absRouterJSPath &#125; = paths;</span><br><span class="line">    <span class="keyword">this</span>.RoutesManager.fetchRoutes();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> routesContent = <span class="keyword">this</span>.getRouterJSContent();</span><br><span class="line">    <span class="comment">// 避免文件写入导致不必要的 webpack 编译</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.routesContent !== routesContent) &#123;</span><br><span class="line">      writeFileSync(absRouterJSPath, <span class="string">`<span class="subst">$&#123;routesContent.trim()&#125;</span>\n`</span>, <span class="string">'utf-8'</span>);</span><br><span class="line">      <span class="keyword">this</span>.routesContent = routesContent;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getRouterJSContent() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; paths &#125; = <span class="keyword">this</span>.service;</span><br><span class="line">    <span class="keyword">const</span> routerTpl = readFileSync(paths.defaultRouterTplPath, <span class="string">'utf-8'</span>);</span><br><span class="line">    <span class="keyword">const</span> routes = stripJSONQuote(</span><br><span class="line">      <span class="keyword">this</span>.getRoutesJSON(&#123;</span><br><span class="line">        env: process.env.NODE_ENV,</span><br><span class="line">      &#125;),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> routerContent = <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;Router history=&#123;window.g_history&#125;&gt;</span></span><br><span class="line"><span class="string">        &#123; renderRoutes(routes, &#123;&#125;) &#125;</span></span><br><span class="line"><span class="string">      &lt;/Router&gt;</span></span><br><span class="line"><span class="string">    `</span>.trim();;</span><br><span class="line">    <span class="keyword">return</span> Mustache.render(routerTpl, &#123;</span><br><span class="line">      routes,</span><br><span class="line">      routerContent,</span><br><span class="line">      RouterRootComponent: <span class="keyword">this</span>.service.applyPlugins(</span><br><span class="line">        <span class="string">'modifyRouterRootComponent'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          initialValue: <span class="string">'DefaultRouter'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h4><p>有了路由容器组件，入口文件所完成的功能就是将路由容器组件渲染到指定的 dom 节点上。入口文件最终会表现成临时文件夹下的 umi.js 文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 入口文件模板</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@tmp/initHistory'</span>;<span class="comment">// 使用 webpack 别名机制将临时文件约定为通过 @tmp 加载</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line">&#123;&#123;&#123; imports &#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.g_plugins = <span class="built_in">require</span>(<span class="string">'umi/_runtimePlugin'</span>);</span><br><span class="line"><span class="built_in">window</span>.g_plugins.init();</span><br><span class="line">&#123;&#123;#plugins&#125;&#125;</span><br><span class="line"><span class="built_in">window</span>.g_plugins.use(<span class="built_in">require</span>(<span class="string">'&#123;&#123;&#123; . &#125;&#125;&#125;'</span>));</span><br><span class="line">&#123;&#123;/plugins&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// render</span></span><br><span class="line"><span class="keyword">let</span> oldRender = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  &#123;&#123;&#123; render &#125;&#125;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> render = <span class="built_in">window</span>.g_plugins.compose(<span class="string">'render'</span>, &#123; <span class="attr">initialValue</span>: oldRender &#125;);</span><br><span class="line"></span><br><span class="line">&#123;&#123;&#123; code &#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hot module replacement</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="built_in">module</span>.hot.accept(<span class="string">'./router'</span>, () =&gt; &#123;</span><br><span class="line">    oldRender();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成入口文件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilesGenerator</span> </span>&#123;</span><br><span class="line">  generateEntry() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; paths &#125; = <span class="keyword">this</span>.service;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> entryTpl = readFileSync(paths.defaultEntryTplPath, <span class="string">'utf-8'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 入口文件中的渲染逻辑</span></span><br><span class="line">    <span class="keyword">const</span> initialRender = <span class="keyword">this</span>.service.applyPlugins(<span class="string">'modifyEntryRender'</span>, &#123;</span><br><span class="line">      initialValue: <span class="string">`</span></span><br><span class="line"><span class="string">        const rootContainer = window.g_plugins.apply('rootContainer', &#123;</span></span><br><span class="line"><span class="string">          initialValue: React.createElement(require('./router').default),</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">        ReactDOM.render(</span></span><br><span class="line"><span class="string">          rootContainer,</span></span><br><span class="line"><span class="string">          document.getElementById('<span class="subst">$&#123;<span class="keyword">this</span>.mountElementId&#125;</span>'),</span></span><br><span class="line"><span class="string">        );</span></span><br><span class="line"><span class="string">      `</span>.trim(),</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行时插件。运行时插件调用过程由 umi 包中的 runtimePlugin 模块完成</span></span><br><span class="line">    <span class="comment">// 执行机制如中间件</span></span><br><span class="line">    <span class="keyword">const</span> plugins = <span class="keyword">this</span>.service</span><br><span class="line">      .applyPlugins(<span class="string">'addRuntimePlugin'</span>, &#123;</span><br><span class="line">        initialValue: [],</span><br><span class="line">      &#125;)</span><br><span class="line">      .map(<span class="function"><span class="params">plugin</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> winPath(relative(paths.absTmpDirPath, plugin));</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="keyword">if</span> (findJS(paths.absSrcPath, <span class="string">'app'</span>)) &#123;</span><br><span class="line">      plugins.push(<span class="string">'@/app'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成入口文件</span></span><br><span class="line">    <span class="keyword">const</span> entryContent = Mustache.render(entryTpl, &#123;</span><br><span class="line">      code: <span class="keyword">this</span>.service</span><br><span class="line">        .applyPlugins(<span class="string">'addEntryCode'</span>, &#123;</span><br><span class="line">          initialValue: [],</span><br><span class="line">        &#125;)</span><br><span class="line">        .join(<span class="string">'\n\n'</span>),</span><br><span class="line">      imports: importsToStr(</span><br><span class="line">        <span class="keyword">this</span>.service.applyPlugins(<span class="string">'addEntryImport'</span>, &#123;</span><br><span class="line">          initialValue: <span class="string">''</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">      ).join(<span class="string">'\n'</span>),</span><br><span class="line">      render: initialRender,</span><br><span class="line">      plugins,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 入口文件写入临时文件夹下的 umi.js 中</span></span><br><span class="line">    writeFileSync(paths.absLibraryJSPath, <span class="string">`<span class="subst">$&#123;entryContent.trim()&#125;</span>\n`</span>, <span class="string">'utf-8'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="路由机制"><a href="#路由机制" class="headerlink" title="路由机制"></a>路由机制</h2><p>umi 默认会根据 src/pages 文件夹内容生成路由信息；同时也支持配置路由，以及在运行时按需变更路由。通过上一节，我们也能发现，umi 允许在插件中调用 api.addRuntimePlugin 在运行时按需变更路由。因此本节主要在于说明 umi 是怎样根据 src/pages 文件夹内容生成路由信息，以及怎么使用路由的配置信息的。</p>
<p>在 umi 中，service.routes 路由信息通过 umi-build-dev 包所提供的 getRouteConfig 模块生成，分为三种情形：</p>
<ol>
<li>当开发者配置路由信息时，src/pages 文件夹只用于获取组件。</li>
<li>当项目中存在 _routes.json 配置文件时，路由信息只通过这份配置文件获取。</li>
<li>以上两种情况之外，只根据 src/pages 文件夹解析获得路由信息。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// umi-build-dev 包中的 getRouteConfig 模块</span></span><br><span class="line">(paths, config = &#123;&#125;, onPatchRoute) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> routes = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> routeConfigFile = join(paths.absSrcPath, <span class="string">'_routes.json'</span>);</span><br><span class="line">  <span class="keyword">if</span> (config.routes) &#123;</span><br><span class="line">    <span class="comment">// 向 config.routes 中注入组件</span></span><br><span class="line">    routes = getRouteConfigFromConfig(config.routes, paths.pagesPath);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (existsSync(routeConfigFile)) &#123;</span><br><span class="line">    routes = getRouteConfigFromConfigFile(routeConfigFile);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    routes = getRouteConfigFromDir(paths);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听插件对路由的变更，并调用钩子</span></span><br><span class="line">  patchRoutes(</span><br><span class="line">    routes,</span><br><span class="line">    config,</span><br><span class="line">    <span class="comment">/* isProduction */</span> process.env.NODE_ENV === <span class="string">'production'</span>,</span><br><span class="line">    onPatchRoute,</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> routes;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 src/pages 文件夹解析获得路由</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRouteConfigFromDir</span>(<span class="params">paths</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; cwd, absPagesPath, absSrcPath, dirPath = <span class="string">''</span> &#125; = paths;</span><br><span class="line">  <span class="keyword">const</span> absPath = join(absPagesPath, dirPath);</span><br><span class="line">  <span class="keyword">const</span> files = readdirSync(absPath);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 酌情递归解析路由</span></span><br><span class="line">  <span class="keyword">const</span> routes = files.reduce(handleFile.bind(<span class="literal">null</span>, paths, absPath), []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (dirPath === <span class="string">''</span> &amp;&amp; absSrcPath) &#123;</span><br><span class="line">    <span class="keyword">const</span> globalLayoutFile =</span><br><span class="line">      findJS(absSrcPath, <span class="string">'layouts/index'</span>) || findJS(absSrcPath, <span class="string">'layout/index'</span>);</span><br><span class="line">    <span class="keyword">if</span> (globalLayoutFile) &#123;</span><br><span class="line">      <span class="keyword">const</span> wrappedRoutes = [];</span><br><span class="line">      addRoute(</span><br><span class="line">        wrappedRoutes,</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">'/'</span>,</span><br><span class="line">          component: <span class="string">`./<span class="subst">$&#123;winPath(relative(cwd, globalLayoutFile))&#125;</span>`</span>,</span><br><span class="line">          routes,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          componentFile: globalLayoutFile,</span><br><span class="line">        &#125;,</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span> wrappedRoutes;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> routes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取单文件或单文件夹路由，酌情递归解析子路</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleFile</span>(<span class="params">paths, absPath, memo, file</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; cwd, absPagesPath, dirPath = <span class="string">''</span> &#125; = paths;</span><br><span class="line">  <span class="keyword">const</span> absFilePath = join(absPath, file);</span><br><span class="line">  <span class="keyword">const</span> stats = statSync(absFilePath);</span><br><span class="line">  <span class="keyword">const</span> isParamsRoute = file.charAt(<span class="number">0</span>) === <span class="string">'$'</span>;<span class="comment">// 动态路由</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (stats.isDirectory()) &#123;</span><br><span class="line">    <span class="keyword">const</span> newDirPath = join(dirPath, file);</span><br><span class="line">    <span class="keyword">const</span> routes = getRouteConfigFromDir(&#123;</span><br><span class="line">      ...paths,</span><br><span class="line">      dirPath: newDirPath,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 布局容器</span></span><br><span class="line">    <span class="keyword">const</span> absLayoutFile = findJS(join(absPagesPath, newDirPath), <span class="string">'_layout'</span>);</span><br><span class="line">    <span class="keyword">if</span> (absLayoutFile) &#123;</span><br><span class="line">      addRoute(</span><br><span class="line">        memo,</span><br><span class="line">        &#123;</span><br><span class="line">          path: normalizePath(newDirPath),</span><br><span class="line">          exact: <span class="literal">false</span>,</span><br><span class="line">          component: <span class="string">`./<span class="subst">$&#123;winPath(relative(cwd, absLayoutFile))&#125;</span>`</span>,</span><br><span class="line">          routes,</span><br><span class="line">          isParamsRoute,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          componentFile: absLayoutFile,</span><br><span class="line">        &#125;,</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      memo = memo.concat(</span><br><span class="line">        routes.map(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            ...route,</span><br><span class="line">            _sorted: <span class="literal">true</span>,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;),</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stats.isFile() &amp;&amp; isValidJS(file)) &#123;</span><br><span class="line">    <span class="keyword">const</span> bName = basename(file, extname(file));</span><br><span class="line">    <span class="keyword">const</span> path = normalizePath(join(dirPath, bName));</span><br><span class="line">    addRoute(</span><br><span class="line">      memo,</span><br><span class="line">      &#123;</span><br><span class="line">        path,</span><br><span class="line">        exact: <span class="literal">true</span>,</span><br><span class="line">        component: <span class="string">`./<span class="subst">$&#123;winPath(relative(cwd, absFilePath))&#125;</span>`</span>,</span><br><span class="line">        isParamsRoute,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        componentFile: absFilePath,</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> memo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过注释扩展路由</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addRoute</span>(<span class="params">memo, route, &#123; componentFile &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> code = readFileSync(componentFile, <span class="string">'utf-8'</span>);</span><br><span class="line">  debug(<span class="string">`parse yaml from <span class="subst">$&#123;componentFile&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">const</span> config = getYamlConfig(code);</span><br><span class="line">  [<span class="string">'path'</span>, <span class="string">'exact'</span>, <span class="string">'component'</span>, <span class="string">'routes'</span>].forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    assert(!(key <span class="keyword">in</span> config), <span class="string">`Unexpected key <span class="subst">$&#123;key&#125;</span> in file <span class="subst">$&#123;componentFile&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  memo.push(&#123;</span><br><span class="line">    ...route,</span><br><span class="line">    ...config,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>frontend</category>
        <category>前端工程化</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack插件编程</title>
    <url>/2019/06/20/frontend/%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack/webpack%E6%8F%92%E4%BB%B6%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="babel-preset-umi"><a href="#babel-preset-umi" class="headerlink" title="babel-preset-umi"></a>babel-preset-umi</h2><p>babel-preset-umi 是 umi 中的一个模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">context, opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> nodeEnv = process.env.NODE_ENV;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    useBuiltIns = <span class="literal">false</span>,</span><br><span class="line">    loose = <span class="literal">false</span>,</span><br><span class="line">    targets = &#123; <span class="attr">browsers</span>: [<span class="string">'last 2 versions'</span>] &#125;,</span><br><span class="line">    env = &#123;&#125;,</span><br><span class="line">  &#125; = opts;</span><br><span class="line">  <span class="keyword">const</span> transformRuntime =</span><br><span class="line">    <span class="string">'transformRuntime'</span> <span class="keyword">in</span> opts</span><br><span class="line">      ? opts.transformRuntime</span><br><span class="line">      : &#123;</span><br><span class="line">          absoluteRuntime: dirname(<span class="built_in">require</span>.resolve(<span class="string">'../package'</span>)),</span><br><span class="line">        &#125;;</span><br><span class="line">  <span class="keyword">const</span> exclude = [</span><br><span class="line">    <span class="string">'transform-typeof-symbol'</span>,</span><br><span class="line">    <span class="string">'transform-unicode-regex'</span>,</span><br><span class="line">    <span class="string">'transform-sticky-regex'</span>,</span><br><span class="line">    <span class="string">'transform-new-target'</span>,</span><br><span class="line">    <span class="string">'transform-modules-umd'</span>,</span><br><span class="line">    <span class="string">'transform-modules-systemjs'</span>,</span><br><span class="line">    <span class="string">'transform-modules-amd'</span>,</span><br><span class="line">    <span class="string">'transform-literals'</span>,</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> plugins = [</span><br><span class="line">    <span class="built_in">require</span>.resolve(<span class="string">'babel-plugin-react-require'</span>),</span><br><span class="line">    <span class="built_in">require</span>.resolve(<span class="string">'@babel/plugin-syntax-dynamic-import'</span>),</span><br><span class="line">    [</span><br><span class="line">      <span class="built_in">require</span>.resolve(<span class="string">'@babel/plugin-proposal-object-rest-spread'</span>),</span><br><span class="line">      &#123; loose, useBuiltIns &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="built_in">require</span>.resolve(<span class="string">'@babel/plugin-proposal-optional-catch-binding'</span>),</span><br><span class="line">    <span class="built_in">require</span>.resolve(<span class="string">'@babel/plugin-proposal-async-generator-functions'</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面两个的顺序的配置都不能动</span></span><br><span class="line">    [<span class="built_in">require</span>.resolve(<span class="string">'@babel/plugin-proposal-decorators'</span>), &#123; <span class="attr">legacy</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">    [</span><br><span class="line">      <span class="built_in">require</span>.resolve(<span class="string">'@babel/plugin-proposal-class-properties'</span>),</span><br><span class="line">      &#123; <span class="attr">loose</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="built_in">require</span>.resolve(<span class="string">'@babel/plugin-proposal-export-namespace-from'</span>),</span><br><span class="line">    <span class="built_in">require</span>.resolve(<span class="string">'@babel/plugin-proposal-export-default-from'</span>),</span><br><span class="line">    [</span><br><span class="line">      <span class="built_in">require</span>.resolve(<span class="string">'@babel/plugin-proposal-nullish-coalescing-operator'</span>),</span><br><span class="line">      &#123; loose &#125;,</span><br><span class="line">    ],</span><br><span class="line">    [<span class="built_in">require</span>.resolve(<span class="string">'@babel/plugin-proposal-optional-chaining'</span>), &#123; loose &#125;],</span><br><span class="line">    [</span><br><span class="line">      <span class="built_in">require</span>.resolve(<span class="string">'@babel/plugin-proposal-pipeline-operator'</span>),</span><br><span class="line">      &#123;</span><br><span class="line">        proposal: <span class="string">'minimal'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="built_in">require</span>.resolve(<span class="string">'@babel/plugin-proposal-do-expressions'</span>),</span><br><span class="line">    <span class="built_in">require</span>.resolve(<span class="string">'@babel/plugin-proposal-function-bind'</span>),</span><br><span class="line">    <span class="built_in">require</span>.resolve(<span class="string">'babel-plugin-macros'</span>),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (nodeEnv !== <span class="string">'test'</span> &amp;&amp; transformRuntime) &#123;</span><br><span class="line">    plugins.push([</span><br><span class="line">      <span class="built_in">require</span>.resolve(<span class="string">'@babel/plugin-transform-runtime'</span>),</span><br><span class="line">      transformRuntime,</span><br><span class="line">    ]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (nodeEnv === <span class="string">'production'</span>) &#123;</span><br><span class="line">    plugins.push(</span><br><span class="line">      <span class="built_in">require</span>.resolve(<span class="string">'babel-plugin-transform-react-remove-prop-types'</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    presets: [</span><br><span class="line">      [</span><br><span class="line">        <span class="built_in">require</span>.resolve(<span class="string">'@babel/preset-env'</span>),</span><br><span class="line">        &#123;</span><br><span class="line">          targets,</span><br><span class="line">          loose,</span><br><span class="line">          modules: <span class="string">'commonjs'</span>,</span><br><span class="line">          exclude,</span><br><span class="line">          ...env,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      <span class="built_in">require</span>.resolve(<span class="string">'@babel/preset-react'</span>),</span><br><span class="line">    ],</span><br><span class="line">    plugins,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>frontend</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>snabbdom 实现原理</title>
    <url>/2019/06/16/frontend/vue/snabbdom%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>Vue 的 patch 机制基于 snabbdom 类库实现。snabbdom 类库本身就是一个专注于简洁、模块化且高效的虚拟 dom 库。因此，解读 snabbdom 类库可以辅助理解虚拟 dom 以及 Vue 的实现机制。下面我们慢慢揭开它的面纱。</p>
<h2 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h2><p>有了对 Vue 虚拟 dom 的理解，我们很容易理解 snabbdom 类库的整体结构：</p>
<img src="/2019/06/16/frontend/vue/snabbdom实现原理/snabbdom-global.png">
<ul>
<li>工具函数层：is, htmldomapi 提供底层辅助函数。is 用于判断数据类型；htmldomapi 封装了 dom 接口。</li>
<li>dom 钩子层：attributes 等用于在节点创建、更新时调整节点相关属性。</li>
<li>vnode 模型层：VNode 为虚拟 dom 模型；VNodeData 为虚拟 dom 的数据模型；Hooks 为 vnode 的钩子模型。vnode 函数用于创建 VNode 对象。</li>
<li>对外接口层：patch 采用深度遍历模式将 vnode 树填入到实际 dom 树中；h 创建 vnode 的渲染函数，可用于模板解析渲染过程；thunk 用于桥接 Vue 等第三方组件实例，采用定制的 fn 生成 vnode；attachto 函数用于装饰 vnode，该 vnode 会脱离真实的 dom 树，将被挂载到指定的节点下，如同 react 中 Portal 组件的效果。</li>
</ul>
<p>有了这些功能模块以后，整体的渲染流程如下：</p>
<img src="/2019/06/16/frontend/vue/snabbdom实现原理/snabbdom-flow.png">
<p>备注：htmldomapi，dom 钩子，Hooks 可参见附录。</p>
<h2 id="VNode"><a href="#VNode" class="headerlink" title="VNode"></a>VNode</h2><p>snabbdom 使用对象构造 vnode。在 vnode 中，data 表示从模板解析到的或者通过组件实例构建的原生节点属性。通过继承 VNodeData，snabbdom 允许扩展 VNodeData 模型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> interface VNode &#123;</span><br><span class="line">  sel: string | <span class="literal">undefined</span>;<span class="comment">// 虚拟节点的唯一标识</span></span><br><span class="line">  data: VNodeData | <span class="literal">undefined</span>;<span class="comment">// 虚拟节点的相关数据属性</span></span><br><span class="line">  children: <span class="built_in">Array</span>&lt;VNode | string&gt; | <span class="literal">undefined</span>;<span class="comment">// 虚拟节点的子节点</span></span><br><span class="line">  elm: Node | <span class="literal">undefined</span>;<span class="comment">// 虚拟节点所对应的真实节点，文本节点除外</span></span><br><span class="line">  text: string | <span class="literal">undefined</span>;<span class="comment">// 虚拟节点所对应的真实节点，限于文本节点和注释节点</span></span><br><span class="line">  key: Key | <span class="literal">undefined</span>;<span class="comment">// 虚拟节点构成数组时的唯一标识</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface VNodeData &#123;</span><br><span class="line">  props?: Props;<span class="comment">// 节点属性</span></span><br><span class="line">  attrs?: Attrs;<span class="comment">// 节点 attribute 属性</span></span><br><span class="line">  class?: Classes;// 样式类</span><br><span class="line">  style?: VNodeStyle;<span class="comment">// 样式</span></span><br><span class="line">  dataset?: Dataset;<span class="comment">// data- 属性</span></span><br><span class="line">  on?: On;<span class="comment">// 事件</span></span><br><span class="line">  hero?: Hero;<span class="comment">// 节点切换时执行 css 放大缩小、移位动效，用于记录节点id </span></span><br><span class="line">  attachData?: AttachData;</span><br><span class="line">  hook?: Hooks;<span class="comment">// vnode 钩子</span></span><br><span class="line">  key?: Key;</span><br><span class="line">  ns?: string; <span class="comment">// 命名空间</span></span><br><span class="line">  fn?: <span class="function"><span class="params">()</span> =&gt;</span> VNode; <span class="comment">// thunk vnode 渲染函数</span></span><br><span class="line">  args?: <span class="built_in">Array</span>&lt;any&gt;; <span class="comment">// thunk vnode 渲染参数</span></span><br><span class="line">  [key: string]: any; <span class="comment">// 接受第三方扩展</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="h-渲染函数"><a href="#h-渲染函数" class="headerlink" title="h 渲染函数"></a>h 渲染函数</h3><p>h 渲染函数实际上只用于创建 vnode，并没有将 vnode 绘制到文档中。作为接口，h 渲染函数本身也只包含参数多态的处理，再借助 vnode 函数创建 vnode 对象。</p>
<h3 id="thunk-vnode"><a href="#thunk-vnode" class="headerlink" title="thunk vnode"></a>thunk vnode</h3><p>thunk vnode 不同于普通 vnode 的地方在于，thunk vnode 由 data.fn 渲染出普通 vnode，然后将该 vnode 数据拷贝给 thunk vnode 节点，这样就能实现真实 dom 的渲染逻辑。拷贝过程通过 thunk 模块内置的 init, prepatch 钩子（vnode 钩子）完成。thunk vnode 本身的创建过程则通过 h 渲染函数完成（由 thunk 函数发起调用），作为参数 data 中包含内置的 init, prepatch 钩子，用于在指定生命周期中将普通 vnode 的数据拷贝给 thunk vnode 节点。详情可参见源码。</p>
<h3 id="attachTo"><a href="#attachTo" class="headerlink" title="attachTo"></a>attachTo</h3><p>attachTo 函数用于装饰 vnode。经装饰后的 vnode 在 patch 过程中会被装填到指定 target 节点下，从而脱离 vnode 树所对应的真实 dom 树（真实 dom 树下使用空的 span 节点代替）。详情参见源码。</p>
<h2 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h2><p>patch 函数由 init 高阶函数创建。通过将 dom 钩子注入到 init 函数中，snabbdom 就能在节点创建、更新或卸载过程中调用这些钩子函数了。以下是 init 高阶函数内各函数的依赖关系图：</p>
<img src="/2019/06/16/frontend/vue/snabbdom实现原理/snabbdom-patch-modules.png">
<p>从依赖关系图中也能看出，patch 通过逻辑分支实现 dom 节点的插入、更新和移除；同时以递归调用的形式实现深度遍历算法，完成子孙节点的插入、更新。在上述过程的执行期间，snabbdom 又会调用特定的 dom 钩子更新节点的属性、样式或事件等，或者 vnode 钩子实现一些特殊处理。</p>
<p>patch 函数作为总的逻辑入口，主要处理以下两种情形：</p>
<ul>
<li>当 oldVnode 和 vnode 节点相同，即包含相同的 sel, key 属性时，使用 patchVnode 函数更新节点及其子孙节点。</li>
<li>其他情形，创建并插入 vnode.elm 节点，并移除 oldVnode 对应的 dom 节点。</li>
</ul>
<p>从这两种处理逻辑也能看出，patch 主要用于实现虚拟 dom 的 diff 逻辑并更新响应的 dom 树，但不包含 vnode 节点挂载及卸载的逻辑（snabbdom 允许使用空节点等价完成这一效果）。 </p>
<img src="/2019/06/16/frontend/vue/snabbdom实现原理/snabbdom-patch.png">
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params">oldVnode: VNode | Element, vnode: VNode</span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i: number, <span class="attr">elm</span>: Node, <span class="attr">parent</span>: Node;</span><br><span class="line">  <span class="keyword">const</span> insertedVnodeQueue: VNodeQueue = [];</span><br><span class="line">  <span class="comment">// dom-pre 钩子</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.pre.length; ++i) cbs.pre[i]();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// oldVnode 作为原生 dom，通过 emptyNodeAt 转换成 vnode</span></span><br><span class="line">  <span class="keyword">if</span> (!isVnode(oldVnode)) &#123;</span><br><span class="line">    oldVnode = emptyNodeAt(oldVnode);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 节点相同，使用 patchVnode 更新</span></span><br><span class="line">  <span class="keyword">if</span> (sameVnode(oldVnode, vnode)) &#123;</span><br><span class="line">    patchVnode(oldVnode, vnode, insertedVnodeQueue);</span><br><span class="line">  <span class="comment">// 节点不同，创建新的 dom 节点并插入文档，移除 oldVnode</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    elm = oldVnode.elm <span class="keyword">as</span> Node;</span><br><span class="line">    parent = api.parentNode(elm);</span><br><span class="line"></span><br><span class="line">    createElm(vnode, insertedVnodeQueue);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parent !== <span class="literal">null</span>) &#123;</span><br><span class="line">      api.insertBefore(parent, vnode.elm <span class="keyword">as</span> Node, api.nextSibling(elm));</span><br><span class="line">      removeVnodes(parent, [oldVnode], <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在 vnode 插入文档后，调用 vnode 树中每个节点的 insert 方法</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insertedVnodeQueue.length; ++i) &#123;</span><br><span class="line">    (((insertedVnodeQueue[i].data <span class="keyword">as</span> VNodeData).hook <span class="keyword">as</span> Hooks).insert <span class="keyword">as</span> any)(insertedVnodeQueue[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// dom-post 钩子 </span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.post.length; ++i) cbs.post[i]();</span><br><span class="line">  <span class="keyword">return</span> vnode;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="createElm"><a href="#createElm" class="headerlink" title="createElm"></a>createElm</h3><p>createElm 函数的主要逻辑在于创建真实的 dom 节点 vnode.elm。其处理逻辑分为以下三种情形：</p>
<ul>
<li>当 vnode.sel 等于 ‘!’ 时，创建注释节点。</li>
<li>当 vnode.sel 不等于 ‘!’ 和 undefined 时，创建元素节点，并酌情递归创建子节点，或创建文本节点。</li>
<li>当 vnode.sel 等于 undefined 时，创建文本节点。</li>
</ul>
<img src="/2019/06/16/frontend/vue/snabbdom实现原理/snabbdom-createElm.png">
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElm</span>(<span class="params">vnode: VNode, insertedVnodeQueue: VNodeQueue</span>): <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i: any, data = vnode.data;</span><br><span class="line">  <span class="comment">// vnode-init 钩子 </span></span><br><span class="line">  <span class="keyword">if</span> (data !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(i = data.hook) &amp;&amp; isDef(i = i.init)) &#123;</span><br><span class="line">      i(vnode);</span><br><span class="line">      data = vnode.data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> children = vnode.children, sel = vnode.sel;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建注释节点</span></span><br><span class="line">  <span class="keyword">if</span> (sel === <span class="string">'!'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isUndef(vnode.text)) &#123;</span><br><span class="line">      vnode.text = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vnode.elm = api.createComment(vnode.text <span class="keyword">as</span> string);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建元素节点</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sel !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> hashIdx = sel.indexOf(<span class="string">'#'</span>);</span><br><span class="line">    <span class="keyword">const</span> dotIdx = sel.indexOf(<span class="string">'.'</span>, hashIdx);</span><br><span class="line">    <span class="keyword">const</span> hash = hashIdx &gt; <span class="number">0</span> ? hashIdx : sel.length;</span><br><span class="line">    <span class="keyword">const</span> dot = dotIdx &gt; <span class="number">0</span> ? dotIdx : sel.length;</span><br><span class="line">    <span class="keyword">const</span> tag = hashIdx !== <span class="number">-1</span> || dotIdx !== <span class="number">-1</span> ? sel.slice(<span class="number">0</span>, <span class="built_in">Math</span>.min(hash, dot)) : sel;</span><br><span class="line">    <span class="keyword">const</span> elm = vnode.elm = isDef(data) &amp;&amp; isDef(i = (data <span class="keyword">as</span> VNodeData).ns) ? </span><br><span class="line">      api.createElementNS(i, tag) : api.createElement(tag);</span><br><span class="line">    <span class="keyword">if</span> (hash &lt; dot) elm.setAttribute(<span class="string">'id'</span>, sel.slice(hash + <span class="number">1</span>, dot));</span><br><span class="line">    <span class="keyword">if</span> (dotIdx &gt; <span class="number">0</span>) elm.setAttribute(<span class="string">'class'</span>, sel.slice(dot + <span class="number">1</span>).replace(<span class="regexp">/\./g</span>, <span class="string">' '</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.create.length; ++i) cbs.create[i](emptyNode, vnode);</span><br><span class="line">    <span class="comment">// 深度遍历创建子孙节点</span></span><br><span class="line">    <span class="keyword">if</span> (is.array(children)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; children.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">const</span> ch = children[i];</span><br><span class="line">        <span class="keyword">if</span> (ch != <span class="literal">null</span>) &#123;</span><br><span class="line">          api.appendChild(elm, createElm(ch <span class="keyword">as</span> VNode, insertedVnodeQueue));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">// 添加文本节点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (is.primitive(vnode.text)) &#123;</span><br><span class="line">      api.appendChild(elm, api.createTextNode(vnode.text));</span><br><span class="line">    &#125;</span><br><span class="line">    i = (vnode.data <span class="keyword">as</span> VNodeData).hook;</span><br><span class="line">    <span class="keyword">if</span> (isDef(i)) &#123;</span><br><span class="line">      <span class="comment">// vnode-create 钩子 </span></span><br><span class="line">      <span class="keyword">if</span> (i.create) i.create(emptyNode, vnode);</span><br><span class="line">      <span class="comment">// 将插入 dom 树的 vnode 填入 insertedVnodeQueue</span></span><br><span class="line">      <span class="comment">// 在 patch 过程结尾调用这些 vnode 节点的 vnode-insert 钩子</span></span><br><span class="line">      <span class="keyword">if</span> (i.insert) insertedVnodeQueue.push(vnode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建文本节点</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    vnode.elm = api.createTextNode(vnode.text <span class="keyword">as</span> string);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vnode.elm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="patchVnode"><a href="#patchVnode" class="headerlink" title="patchVnode"></a>patchVnode</h3><p>patchVnode 函数的主要逻辑在于更新节点。其处理逻辑分为以下五种情形：</p>
<ul>
<li>当 vnode 本身就是 oldVnode 时，无需更新，直接返回。</li>
<li>当 vnode 为元素节点，且 vnode, oldVnode 同样包含子节点并不等值时，更新子节点簇。</li>
<li>当 vnode 为元素节点，且仅有 vnode 包含子节点时，为 vnode.elm 中灌入子节点。</li>
<li>当 vnode 为元素节点，且仅有 oldVnode 包含子节点或文本内容时，移除 vnode.elm 中的子节点或设置空文本。</li>
<li>当 vnode 为文本节点时，移除 oldVnode 对应的 dom 节点，并设置 vnode.elm 元素的文本内容。</li>
</ul>
<img src="/2019/06/16/frontend/vue/snabbdom实现原理/snabbdom-patchVnode.png">
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patchVnode</span>(<span class="params">oldVnode: VNode, vnode: VNode, insertedVnodeQueue: VNodeQueue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i: any, <span class="attr">hook</span>: any;</span><br><span class="line">  <span class="comment">// vnode-prepatch 钩子</span></span><br><span class="line">  <span class="keyword">if</span> (isDef(i = vnode.data) &amp;&amp; isDef(hook = i.hook) &amp;&amp; isDef(i = hook.prepatch)) &#123;</span><br><span class="line">    i(oldVnode, vnode);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> elm = vnode.elm = (oldVnode.elm <span class="keyword">as</span> Node);</span><br><span class="line">  <span class="keyword">let</span> oldCh = oldVnode.children;</span><br><span class="line">  <span class="keyword">let</span> ch = vnode.children;</span><br><span class="line">  <span class="keyword">if</span> (oldVnode === vnode) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// dom-update 钩子，vnode-update 钩子</span></span><br><span class="line">  <span class="keyword">if</span> (vnode.data !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.update.length; ++i) cbs.update[i](oldVnode, vnode);</span><br><span class="line">    i = vnode.data.hook;</span><br><span class="line">    <span class="keyword">if</span> (isDef(i) &amp;&amp; isDef(i = i.update)) i(oldVnode, vnode);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// vnode 不是文本节点，更新子节点或插入子节点或移除 oldVnode 的子节点或文本</span></span><br><span class="line">  <span class="keyword">if</span> (isUndef(vnode.text)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(oldCh) &amp;&amp; isDef(ch)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (oldCh !== ch) updateChildren(elm, oldCh <span class="keyword">as</span> <span class="built_in">Array</span>&lt;VNode&gt;, ch <span class="keyword">as</span> <span class="built_in">Array</span>&lt;VNode&gt;, insertedVnodeQueue);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(ch)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isDef(oldVnode.text)) api.setTextContent(elm, <span class="string">''</span>);</span><br><span class="line">      addVnodes(elm, <span class="literal">null</span>, ch <span class="keyword">as</span> <span class="built_in">Array</span>&lt;VNode&gt;, <span class="number">0</span>, (ch <span class="keyword">as</span> <span class="built_in">Array</span>&lt;VNode&gt;).length - <span class="number">1</span>, insertedVnodeQueue);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldCh)) &#123;</span><br><span class="line">      removeVnodes(elm, oldCh <span class="keyword">as</span> <span class="built_in">Array</span>&lt;VNode&gt;, <span class="number">0</span>, (oldCh <span class="keyword">as</span> <span class="built_in">Array</span>&lt;VNode&gt;).length - <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldVnode.text)) &#123;</span><br><span class="line">      api.setTextContent(elm, <span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// vnode 是文本节点，移除 oldVnode 的子节点，并设置 vnode 节点的文本内容</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldVnode.text !== vnode.text) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(oldCh)) &#123;</span><br><span class="line">      removeVnodes(elm, oldCh <span class="keyword">as</span> <span class="built_in">Array</span>&lt;VNode&gt;, <span class="number">0</span>, (oldCh <span class="keyword">as</span> <span class="built_in">Array</span>&lt;VNode&gt;).length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    api.setTextContent(elm, vnode.text <span class="keyword">as</span> string);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// vnode-postpatch 钩子</span></span><br><span class="line">  <span class="keyword">if</span> (isDef(hook) &amp;&amp; isDef(i = hook.postpatch)) &#123;</span><br><span class="line">    i(oldVnode, vnode);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="updateChildren"><a href="#updateChildren" class="headerlink" title="updateChildren"></a>updateChildren</h3><p>updateChildren 函数针对子节点簇进行更新操作。对于具有相同  key 键的节点，snabbdom 会使用 patchVnode 局部更新该节点或节点树；除此之外，snabbdom 所采用的操作就是创建新节点、移除旧节点。</p>
<p>在处理逻辑上，snabbdom 使用 startIndex, endIndex 双索引收敛法快速在 vnode.children, oldVnode.children 找到相同的节点并基于 patchVnode 函数更新。如果 vnode.children, oldVnode.children 首尾索引节点均不存在相同节点时，那就访问 vnode.children 首位索引节点，判断 oldVnode.children 是否存在相同 key 键的节点，如存在，使用 patchVnode 更新；如不存在，创建 dom 节点并完成插入。当 vnode.children 的 startIndex, endIndex 双索引产生收敛冲突时，意味着新的子节点簇在 oldVnode.children 均已找到并使用了相同的节点（如存在），oldVnode.children 双索引区间内为待移除的节点或 undefined（原始节点在 vnode.children 中具有相同节点）。当 oldVnode.children 的 startIndex, endIndex 双索引产生收敛冲突时，意味着老的子节点簇在 vnode.children 均已被使用（如存在相同节点），vnode.children 双索引区间内为待新增的节点。</p>
<p>不得不说，updateChildren 函数的处理手法显得晦奥，可参看源码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateChildren</span>(<span class="params">parentElm: Node,</span></span></span><br><span class="line"><span class="function"><span class="params">                          oldCh: Array&lt;VNode&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">                          newCh: Array&lt;VNode&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">                          insertedVnodeQueue: VNodeQueue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> oldStartIdx = <span class="number">0</span>, newStartIdx = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> oldEndIdx = oldCh.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> oldStartVnode = oldCh[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> oldEndVnode = oldCh[oldEndIdx];</span><br><span class="line">  <span class="keyword">let</span> newEndIdx = newCh.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> newStartVnode = newCh[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> newEndVnode = newCh[newEndIdx];</span><br><span class="line">  <span class="keyword">let</span> oldKeyToIdx: any;</span><br><span class="line">  <span class="keyword">let</span> idxInOld: number;</span><br><span class="line">  <span class="keyword">let</span> elmToMove: VNode;</span><br><span class="line">  <span class="keyword">let</span> before: any;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">    <span class="keyword">if</span> (oldStartVnode == <span class="literal">null</span>) &#123;</span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx]; <span class="comment">// Vnode might have been moved left</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldEndVnode == <span class="literal">null</span>) &#123;</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newStartVnode == <span class="literal">null</span>) &#123;</span><br><span class="line">      newStartVnode = newCh[++newStartIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newEndVnode == <span class="literal">null</span>) &#123;</span><br><span class="line">      newEndVnode = newCh[--newEndIdx];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从前往后遍历查找相同节点，若存在相同节点，使用 patchVnode 更新该节点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldStartVnode, newStartVnode)) &#123;</span><br><span class="line">      patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);</span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx];</span><br><span class="line">      newStartVnode = newCh[++newStartIdx];</span><br><span class="line">    <span class="comment">// 从后往前遍历查找相同节点，若存在相同节点，使用 patchVnode 更新该节点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldEndVnode, newEndVnode)) &#123;</span><br><span class="line">      patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx];</span><br><span class="line">      newEndVnode = newCh[--newEndIdx];</span><br><span class="line">    <span class="comment">// 原始节点右移到最末端，使用 patchVnode 更新该节点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldStartVnode, newEndVnode)) &#123; <span class="comment">// Vnode moved right</span></span><br><span class="line">      patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);</span><br><span class="line">      api.insertBefore(parentElm, oldStartVnode.elm <span class="keyword">as</span> Node, api.nextSibling(oldEndVnode.elm <span class="keyword">as</span> Node));</span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx];</span><br><span class="line">      newEndVnode = newCh[--newEndIdx];</span><br><span class="line">    <span class="comment">// 原始节点左移到最顶端，使用 patchVnode 更新该节点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldEndVnode, newStartVnode)) &#123; <span class="comment">// Vnode moved left</span></span><br><span class="line">      patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);</span><br><span class="line">      api.insertBefore(parentElm, oldEndVnode.elm <span class="keyword">as</span> Node, oldStartVnode.elm <span class="keyword">as</span> Node);</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx];</span><br><span class="line">      newStartVnode = newCh[++newStartIdx];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 vnode.children 中顺序子节点是否在 oldVnode.children，采用不同的策略：更新或创建</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (oldKeyToIdx === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="comment">// oldKeyToIdx 是原始子节点的 key 键及其 index 序号的映射</span></span><br><span class="line">        oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);</span><br><span class="line">      &#125;</span><br><span class="line">      idxInOld = oldKeyToIdx[newStartVnode.key <span class="keyword">as</span> string];</span><br><span class="line">      <span class="comment">// 处理新添加的节点</span></span><br><span class="line">      <span class="keyword">if</span> (isUndef(idxInOld)) &#123; <span class="comment">// New element</span></span><br><span class="line">        api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm <span class="keyword">as</span> Node);</span><br><span class="line">        newStartVnode = newCh[++newStartIdx];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        elmToMove = oldCh[idxInOld];</span><br><span class="line">        <span class="comment">// 节点变更，根据新的 newStartVnode 创建 dom 节点</span></span><br><span class="line">        <span class="keyword">if</span> (elmToMove.sel !== newStartVnode.sel) &#123;</span><br><span class="line">          api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm <span class="keyword">as</span> Node);</span><br><span class="line">        <span class="comment">// 节点移位，更新并移位</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);</span><br><span class="line">          oldCh[idxInOld] = <span class="literal">undefined</span> <span class="keyword">as</span> any;</span><br><span class="line">          api.insertBefore(parentElm, (elmToMove.elm <span class="keyword">as</span> Node), oldStartVnode.elm <span class="keyword">as</span> Node);</span><br><span class="line">        &#125;</span><br><span class="line">        newStartVnode = newCh[++newStartIdx];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (oldStartIdx &lt;= oldEndIdx || newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">    <span class="comment">// oldVnode.children 双索引冲突，vnode.children 双索引区间为待新增节点</span></span><br><span class="line">    <span class="keyword">if</span> (oldStartIdx &gt; oldEndIdx) &#123;</span><br><span class="line">      before = newCh[newEndIdx+<span class="number">1</span>] == <span class="literal">null</span> ? <span class="literal">null</span> : newCh[newEndIdx+<span class="number">1</span>].elm;</span><br><span class="line">      addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);</span><br><span class="line">    <span class="comment">// vnode.children 双索引冲突，oldVnode.children 双索引区间为待移除节点</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="htmldomapi"><a href="#htmldomapi" class="headerlink" title="htmldomapi"></a>htmldomapi</h3><p>dom 接口集合。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> interface DOMAPI &#123;</span><br><span class="line">  createElement: <span class="function">(<span class="params">tagName: any</span>) =&gt;</span> HTMLElement;</span><br><span class="line">  createElementNS: <span class="function">(<span class="params">namespaceURI: string, qualifiedName: string</span>) =&gt;</span> Element;</span><br><span class="line">  createTextNode: <span class="function">(<span class="params">text: string</span>) =&gt;</span> Text;</span><br><span class="line">  createComment: <span class="function">(<span class="params">text: string</span>) =&gt;</span> Comment;</span><br><span class="line">  insertBefore: <span class="function">(<span class="params">parentNode: Node, newNode: Node, referenceNode: Node | <span class="literal">null</span></span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">  removeChild: <span class="function">(<span class="params">node: Node, child: Node</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">  appendChild: <span class="function">(<span class="params">node: Node, child: Node</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">  parentNode: <span class="function">(<span class="params">node: Node</span>) =&gt;</span> Node;</span><br><span class="line">  nextSibling: <span class="function">(<span class="params">node: Node</span>) =&gt;</span> Node;</span><br><span class="line">  tagName: <span class="function">(<span class="params">elm: Element</span>) =&gt;</span> string;</span><br><span class="line">  setTextContent: <span class="function">(<span class="params">node: Node, text: string | <span class="literal">null</span></span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">  getTextContent: <span class="function">(<span class="params">node: Node</span>) =&gt;</span> string | <span class="literal">null</span>;</span><br><span class="line">  isElement: <span class="function">(<span class="params">node: Node</span>) =&gt;</span> node is Element;</span><br><span class="line">  isText: <span class="function">(<span class="params">node: Node</span>) =&gt;</span> node is Text;</span><br><span class="line">  isComment: <span class="function">(<span class="params">node: Node</span>) =&gt;</span> node is Comment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h3><h4 id="attributes"><a href="#attributes" class="headerlink" title="attributes"></a>attributes</h4><p>根据 (vnode | oldVnode).data.attrs 设置或更新节点的 attributes 属性。实现上借助 elm.setAttribute, elm.setAttributeNS, elm.removeAttribute 方法。当 attrs 属性以 xml: 或 xlink: 起始时，使用 elm.setAttributeNS 方法设置属性的命名空间为 ‘<a href="http://www.w3.org/XML/1998/namespace&#39;" target="_blank" rel="noopener">http://www.w3.org/XML/1998/namespace&#39;</a> 或 ‘<a href="http://www.w3.org/1999/xlink&#39;。该模块透出" target="_blank" rel="noopener">http://www.w3.org/1999/xlink&#39;。该模块透出</a> create, update 钩子。</p>
<h4 id="class"><a href="#class" class="headerlink" title="class"></a>class</h4><p>根据 (vnode | oldVnode).data.class 设置或更新节点的 class。实现上借助 elm.classList.add, elm.classList.remove 方法。该模块透出 create, update 钩子。</p>
<h4 id="dataset"><a href="#dataset" class="headerlink" title="dataset"></a>dataset</h4><p>根据 (vnode | oldVnode).data.dataset 设置或更新节点的 data- 属性。实现上首先尝试将 dataset 数据挂载到 elm.dataset 对象上，其次尝试通过 elm.setAttribute, elm.removeAttribute 方法设置或移除元素的 data- 属性（连字符形式）。该模块透出 create, update 钩子。</p>
<h4 id="props"><a href="#props" class="headerlink" title="props"></a>props</h4><p>根据 (vnode | oldVnode).data.props 设置或更新节点的属性。实现上将 props 数据挂载到 elm 对象上。该模块透出 create, update 钩子。</p>
<h4 id="eventlisteners"><a href="#eventlisteners" class="headerlink" title="eventlisteners"></a>eventlisteners</h4><p>根据 (vnode | oldVnode).data.on 设置或更新节点的绑定函数。绑定函数经集成为 node.listener 方法，对所有事件都一样。该模块透出 create, update, destory 钩子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 从 vnode.data.on 中取出执行函数，在元素的绑定事件层面构建集成封装的处理函数 node.listener **/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invokeHandler</span>(<span class="params">handler: any, vnode?: VNode, event?: Event</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> handler === <span class="string">"function"</span>) &#123;</span><br><span class="line">    handler.call(vnode, event, vnode);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> handler === <span class="string">"object"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> handler[<span class="number">0</span>] === <span class="string">"function"</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (handler.length === <span class="number">2</span>) &#123;</span><br><span class="line">        handler[<span class="number">0</span>].call(vnode, handler[<span class="number">1</span>], event, vnode);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> args = handler.slice(<span class="number">1</span>);</span><br><span class="line">        args.push(event);</span><br><span class="line">        args.push(vnode);</span><br><span class="line">        handler[<span class="number">0</span>].apply(vnode, args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; handler.length; i++) &#123;</span><br><span class="line">        invokeHandler(handler[i], vnode, event);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleEvent</span>(<span class="params">event: Event, vnode: VNode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = event.type,</span><br><span class="line">      on = (vnode.data <span class="keyword">as</span> VNodeData).on;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (on &amp;&amp; on[name]) &#123;</span><br><span class="line">    invokeHandler(on[name], vnode, event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createListener</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params">event: Event</span>) </span>&#123;</span><br><span class="line">    handleEvent(event, (handler <span class="keyword">as</span> any).vnode);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** --- **/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateEventListeners</span>(<span class="params">oldVnode: VNode, vnode?: VNode</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> oldOn = (oldVnode.data <span class="keyword">as</span> VNodeData).on,</span><br><span class="line">      oldListener = (oldVnode <span class="keyword">as</span> any).listener,</span><br><span class="line">      oldElm: Element = oldVnode.elm <span class="keyword">as</span> Element,</span><br><span class="line">      on = vnode &amp;&amp; (vnode.data <span class="keyword">as</span> VNodeData).on,</span><br><span class="line">      elm: Element = (vnode &amp;&amp; vnode.elm) <span class="keyword">as</span> Element,</span><br><span class="line">      name: string;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (oldOn === on) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (oldOn &amp;&amp; oldListener) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!on) &#123;</span><br><span class="line">      <span class="keyword">for</span> (name <span class="keyword">in</span> oldOn) &#123;</span><br><span class="line">        oldElm.removeEventListener(name, oldListener, <span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (name <span class="keyword">in</span> oldOn) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!on[name]) &#123;</span><br><span class="line">          oldElm.removeEventListener(name, oldListener, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (on) &#123;</span><br><span class="line">    <span class="keyword">var</span> listener = (vnode <span class="keyword">as</span> any).listener = (oldVnode <span class="keyword">as</span> any).listener || createListener();</span><br><span class="line">    listener.vnode = vnode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!oldOn) &#123;</span><br><span class="line">      <span class="keyword">for</span> (name <span class="keyword">in</span> on) &#123;</span><br><span class="line">        elm.addEventListener(name, listener, <span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (name <span class="keyword">in</span> on) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!oldOn[name]) &#123;<span class="comment">// name 事件未作绑定</span></span><br><span class="line">          elm.addEventListener(name, listener, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> eventListenersModule = &#123;</span><br><span class="line">  create: updateEventListeners,</span><br><span class="line">  update: updateEventListeners,</span><br><span class="line">  destroy: updateEventListeners</span><br><span class="line">&#125; <span class="keyword">as</span> Module;</span><br></pre></td></tr></table></figure>
<h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4><p>根据 (vnode | oldVnode).data.style 设置或更新节点的样式。实现上针对 – 起始的样式属性，使用 elm.style.setProperty, elm.style.removeProperty 设置样式；对于其他样式属性，直接对 elm.style 进行赋值。特别的，对于 style.delayed 样式集合，使用 setNextFrame 在下一帧进行绘制。该模块透出 pre, create, update, destroy, remove 钩子。destory 钩子会为 elm 元素设置 style.destory 样式。remove 钩子在元素移除时触发，其会为元素设置 style.remove 样式，并且再 css-transition 动效执行完成后，将调用 rm 回调。该模块透出 pre, create, update, destory, remove 钩子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reflowForced = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateStyle</span>(<span class="params">oldVnode: VNode, vnode: VNode</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cur: any, <span class="attr">name</span>: string, elm = vnode.elm,</span><br><span class="line">      oldStyle = (oldVnode.data <span class="keyword">as</span> VNodeData).style,</span><br><span class="line">      style = (vnode.data <span class="keyword">as</span> VNodeData).style;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!oldStyle &amp;&amp; !style) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (oldStyle === style) <span class="keyword">return</span>;</span><br><span class="line">  oldStyle = oldStyle || &#123;&#125; <span class="keyword">as</span> VNodeStyle;</span><br><span class="line">  style = style || &#123;&#125; <span class="keyword">as</span> VNodeStyle;</span><br><span class="line">  <span class="keyword">var</span> oldHasDel = <span class="string">'delayed'</span> <span class="keyword">in</span> oldStyle;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (name <span class="keyword">in</span> oldStyle) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!style[name]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (name[<span class="number">0</span>] === <span class="string">'-'</span> &amp;&amp; name[<span class="number">1</span>] === <span class="string">'-'</span>) &#123;</span><br><span class="line">        (elm <span class="keyword">as</span> any).style.removeProperty(name);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        (elm <span class="keyword">as</span> any).style[name] = <span class="string">''</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (name <span class="keyword">in</span> style) &#123;</span><br><span class="line">    cur = style[name];</span><br><span class="line">    <span class="keyword">if</span> (name === <span class="string">'delayed'</span> &amp;&amp; style.delayed) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> name2 <span class="keyword">in</span> style.delayed) &#123;</span><br><span class="line">        cur = style.delayed[name2];</span><br><span class="line">        <span class="keyword">if</span> (!oldHasDel || cur !== (oldStyle.delayed <span class="keyword">as</span> any)[name2]) &#123;</span><br><span class="line">          <span class="comment">// setNextFrame 调用 requestAnimationFrame 或 setTimeout 设置 elm.style[key] = value</span></span><br><span class="line">          setNextFrame((elm <span class="keyword">as</span> any).style, name2, cur);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name !== <span class="string">'remove'</span> &amp;&amp; cur !== oldStyle[name]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (name[<span class="number">0</span>] === <span class="string">'-'</span> &amp;&amp; name[<span class="number">1</span>] === <span class="string">'-'</span>) &#123;</span><br><span class="line">        (elm <span class="keyword">as</span> any).style.setProperty(name, cur);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        (elm <span class="keyword">as</span> any).style[name] = cur;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyDestroyStyle</span>(<span class="params">vnode: VNode</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> style: any, <span class="attr">name</span>: string, elm = vnode.elm, s = (vnode.data <span class="keyword">as</span> VNodeData).style;</span><br><span class="line">  <span class="keyword">if</span> (!s || !(style = s.destroy)) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">for</span> (name <span class="keyword">in</span> style) &#123;</span><br><span class="line">    (elm <span class="keyword">as</span> any).style[name] = style[name];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyRemoveStyle</span>(<span class="params">vnode: VNode, rm: (</span>) =&gt; <span class="title">void</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> s = (vnode.data <span class="keyword">as</span> VNodeData).style;</span><br><span class="line">  <span class="keyword">if</span> (!s || !s.remove) &#123;</span><br><span class="line">    rm();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(!reflowForced) &#123;</span><br><span class="line">    getComputedStyle(<span class="built_in">document</span>.body).transform;</span><br><span class="line">    reflowForced = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> name: string, elm = vnode.elm, i = <span class="number">0</span>, <span class="attr">compStyle</span>: CSSStyleDeclaration,</span><br><span class="line">      style = s.remove, amount = <span class="number">0</span>, <span class="attr">applied</span>: <span class="built_in">Array</span>&lt;string&gt; = [];</span><br><span class="line">  <span class="keyword">for</span> (name <span class="keyword">in</span> style) &#123;</span><br><span class="line">    applied.push(name);</span><br><span class="line">    (elm <span class="keyword">as</span> any).style[name] = style[name];</span><br><span class="line">  &#125;</span><br><span class="line">  compStyle = getComputedStyle(elm <span class="keyword">as</span> Element);</span><br><span class="line">  <span class="keyword">var</span> props = (compStyle <span class="keyword">as</span> any)[<span class="string">'transition-property'</span>].split(<span class="string">', '</span>);</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; props.length; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span>(applied.indexOf(props[i]) !== <span class="number">-1</span>) amount++;</span><br><span class="line">  &#125;</span><br><span class="line">  (elm <span class="keyword">as</span> Element).addEventListener(<span class="string">'transitionend'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ev: TransitionEvent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ev.target === elm) --amount;</span><br><span class="line">    <span class="keyword">if</span> (amount === <span class="number">0</span>) rm();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forceReflow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  reflowForced = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> styleModule = &#123;</span><br><span class="line">  pre: forceReflow,</span><br><span class="line">  create: updateStyle,</span><br><span class="line">  update: updateStyle,</span><br><span class="line">  destroy: applyDestroyStyle,</span><br><span class="line">  remove: applyRemoveStyle</span><br><span class="line">&#125; <span class="keyword">as</span> Module;</span><br></pre></td></tr></table></figure>
<h4 id="hero"><a href="#hero" class="headerlink" title="hero"></a>hero</h4><p>根据 vnode.data.hero.id 设置 css-transition 动效（包含元素大小和偏移量）。动效特征从 oldVnode 过渡到 vnode，在动效执行期间保留 oldVnode，等到动效执行完成，再行移除；vnode 在动效执行期间置为透明，同步调整大小，在下一帧置为非透明。该模块透出 pre, create, destory, post 钩子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTextNodeRect</span>(<span class="params">textNode: Text</span>): <span class="title">ClientRect</span> | <span class="title">undefined</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> rect: ClientRect | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.createRange) &#123;</span><br><span class="line">    <span class="keyword">var</span> range = <span class="built_in">document</span>.createRange();</span><br><span class="line">    range.selectNodeContents(textNode);</span><br><span class="line">    <span class="keyword">if</span> (range.getBoundingClientRect) &#123;</span><br><span class="line">        rect = range.getBoundingClientRect();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rect;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取中心点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calcTransformOrigin</span>(<span class="params">isTextNode: boolean,</span></span></span><br><span class="line"><span class="function"><span class="params">                             textRect: ClientRect | undefined,</span></span></span><br><span class="line"><span class="function"><span class="params">                             boundingRect: ClientRect</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isTextNode) &#123;</span><br><span class="line">    <span class="keyword">if</span> (textRect) &#123;</span><br><span class="line">      <span class="keyword">var</span> relativeCenterX = textRect.left + textRect.width/<span class="number">2</span> - boundingRect.left;</span><br><span class="line">      <span class="keyword">var</span> relativeCenterY = textRect.top + textRect.height/<span class="number">2</span> - boundingRect.top;</span><br><span class="line">      <span class="keyword">return</span> relativeCenterX + <span class="string">'px '</span> + relativeCenterY + <span class="string">'px'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'0 0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算偏移量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTextDx</span>(<span class="params">oldTextRect: ClientRect | undefined,</span></span></span><br><span class="line"><span class="function"><span class="params">                   newTextRect: ClientRect | undefined</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (oldTextRect &amp;&amp; newTextRect) &#123;</span><br><span class="line">    <span class="keyword">return</span> ((oldTextRect.left + oldTextRect.width/<span class="number">2</span>) - (newTextRect.left + newTextRect.width/<span class="number">2</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTextDy</span>(<span class="params">oldTextRect: ClientRect | undefined,</span></span></span><br><span class="line"><span class="function"><span class="params">                   newTextRect: ClientRect | undefined</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (oldTextRect &amp;&amp; newTextRect) &#123;</span><br><span class="line">    <span class="keyword">return</span> ((oldTextRect.top + oldTextRect.height/<span class="number">2</span>) - (newTextRect.top + newTextRect.height/<span class="number">2</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> removed: any, <span class="attr">created</span>: any;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pre</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  removed = &#123;&#125;;</span><br><span class="line">  created = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">oldVnode: VNode, vnode: VNode</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hero = (vnode.data <span class="keyword">as</span> VNodeData).hero;</span><br><span class="line">  <span class="keyword">if</span> (hero &amp;&amp; hero.id) &#123;</span><br><span class="line">    created.push(hero.id);<span class="comment">// 记录vnode相关的id，用于查找对应的oldVnode</span></span><br><span class="line">    created.push(vnode);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">destroy</span>(<span class="params">vnode: VNode</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hero = (vnode.data <span class="keyword">as</span> VNodeData).hero;</span><br><span class="line">  <span class="keyword">if</span> (hero &amp;&amp; hero.id) &#123;</span><br><span class="line">    <span class="keyword">var</span> elm = vnode.elm;</span><br><span class="line">    (vnode <span class="keyword">as</span> any).isTextNode = isTextElement(elm <span class="keyword">as</span> Element | Text); <span class="comment">//保存是否文本节点</span></span><br><span class="line">    (vnode <span class="keyword">as</span> any).boundingRect = (elm <span class="keyword">as</span> Element).getBoundingClientRect(); <span class="comment">//保存元素大小</span></span><br><span class="line">    (vnode <span class="keyword">as</span> any).textRect = (vnode <span class="keyword">as</span> any).isTextNode ? getTextNodeRect((elm <span class="keyword">as</span> Element).childNodes[<span class="number">0</span>] <span class="keyword">as</span> Text) : <span class="literal">null</span>; <span class="comment">//保存元素内文本节点大小</span></span><br><span class="line">    <span class="keyword">var</span> computedStyle = <span class="built_in">window</span>.getComputedStyle(elm <span class="keyword">as</span> Element, <span class="keyword">void</span> <span class="number">0</span>);</span><br><span class="line">    (vnode <span class="keyword">as</span> any).savedStyle = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(computedStyle)); <span class="comment">//保存样式拷贝</span></span><br><span class="line">    removed[hero.id] = vnode;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i: number, <span class="attr">id</span>: any, <span class="attr">newElm</span>: Element, <span class="attr">oldVnode</span>: VNode, <span class="attr">oldElm</span>: Element,</span><br><span class="line">      hRatio: number, <span class="attr">wRatio</span>: number,</span><br><span class="line">      oldRect: ClientRect, <span class="attr">newRect</span>: ClientRect, <span class="attr">dx</span>: number, <span class="attr">dy</span>: number,</span><br><span class="line">      origTransform: string | <span class="literal">null</span>, <span class="attr">origTransition</span>: string | <span class="literal">null</span>,</span><br><span class="line">      newStyle: CSSStyleDeclaration, <span class="attr">oldStyle</span>: CSSStyleDeclaration,</span><br><span class="line">      newComputedStyle: CSSStyleDeclaration, <span class="attr">isTextNode</span>: boolean,</span><br><span class="line">      newTextRect: ClientRect | <span class="literal">undefined</span>, <span class="attr">oldTextRect</span>: ClientRect | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; created.length; i += <span class="number">2</span>) &#123;</span><br><span class="line">    id = created[i];</span><br><span class="line">    newElm = created[i+<span class="number">1</span>].elm;</span><br><span class="line">    oldVnode = removed[id];</span><br><span class="line">    <span class="keyword">if</span> (oldVnode) &#123;</span><br><span class="line">      isTextNode = (oldVnode <span class="keyword">as</span> any).isTextNode &amp;&amp; isTextElement(newElm); <span class="comment">//Are old &amp; new both text?</span></span><br><span class="line">      newStyle = (newElm <span class="keyword">as</span> HTMLElement).style;</span><br><span class="line">      newComputedStyle = <span class="built_in">window</span>.getComputedStyle(newElm, <span class="keyword">void</span> <span class="number">0</span>);</span><br><span class="line">      oldElm = oldVnode.elm <span class="keyword">as</span> Element;</span><br><span class="line">      oldStyle = (oldElm <span class="keyword">as</span> HTMLElement).style;</span><br><span class="line">      newRect = newElm.getBoundingClientRect();</span><br><span class="line">      oldRect = (oldVnode <span class="keyword">as</span> any).boundingRect; </span><br><span class="line">      <span class="keyword">if</span> (isTextNode) &#123;</span><br><span class="line">        newTextRect = getTextNodeRect(newElm.childNodes[<span class="number">0</span>] <span class="keyword">as</span> Text);</span><br><span class="line">        oldTextRect = (oldVnode <span class="keyword">as</span> any).textRect;</span><br><span class="line">        dx = getTextDx(oldTextRect, newTextRect);</span><br><span class="line">        dy = getTextDy(oldTextRect, newTextRect);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dx = oldRect.left - newRect.left;</span><br><span class="line">        dy = oldRect.top - newRect.top;</span><br><span class="line">      &#125;</span><br><span class="line">      hRatio = newRect.height / (<span class="built_in">Math</span>.max(oldRect.height, <span class="number">1</span>));</span><br><span class="line">      wRatio = isTextNode ? hRatio : newRect.width / (<span class="built_in">Math</span>.max(oldRect.width, <span class="number">1</span>)); <span class="comment">//缩放率</span></span><br><span class="line">      origTransform = newStyle.transform;</span><br><span class="line">      origTransition = newStyle.transition;</span><br><span class="line">      <span class="keyword">if</span> (newComputedStyle.display === <span class="string">'inline'</span>) <span class="comment">//inline elements cannot be transformed</span></span><br><span class="line">        newStyle.display = <span class="string">'inline-block'</span>;</span><br><span class="line">      newStyle.transition = origTransition + <span class="string">'transform 0s'</span>;</span><br><span class="line">      newStyle.transformOrigin = calcTransformOrigin(isTextNode, newTextRect, newRect);</span><br><span class="line">      newStyle.opacity = <span class="string">'0'</span>;</span><br><span class="line">      newStyle.transform = origTransform + <span class="string">'translate('</span>+dx+<span class="string">'px, '</span>+dy+<span class="string">'px) '</span> +</span><br><span class="line">                               <span class="string">'scale('</span>+<span class="number">1</span>/wRatio+<span class="string">', '</span>+<span class="number">1</span>/hRatio+<span class="string">')'</span>;</span><br><span class="line">      <span class="comment">// setNextFrame 调用 requestAnimationFrame 或 setTimeout 设置 elm.style[key] = value</span></span><br><span class="line">      setNextFrame(newStyle, <span class="string">'transition'</span>, origTransition);</span><br><span class="line">      setNextFrame(newStyle, <span class="string">'transform'</span>, origTransform);</span><br><span class="line">      setNextFrame(newStyle, <span class="string">'opacity'</span>, <span class="string">'1'</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> (oldVnode <span class="keyword">as</span> any).savedStyle) &#123; <span class="comment">//re-apply saved inherited properties</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">parseInt</span>(key) != key <span class="keyword">as</span> any <span class="keyword">as</span> number) &#123;</span><br><span class="line">          <span class="keyword">var</span> ms = key.substring(<span class="number">0</span>,<span class="number">2</span>) === <span class="string">'ms'</span>;</span><br><span class="line">          <span class="keyword">var</span> moz = key.substring(<span class="number">0</span>,<span class="number">3</span>) === <span class="string">'moz'</span>;</span><br><span class="line">          <span class="keyword">var</span> webkit = key.substring(<span class="number">0</span>,<span class="number">6</span>) === <span class="string">'webkit'</span>;</span><br><span class="line">          <span class="keyword">if</span> (!ms &amp;&amp; !moz &amp;&amp; !webkit) <span class="comment">//ignore prefixed style properties</span></span><br><span class="line">            (oldStyle <span class="keyword">as</span> any)[key] = (oldVnode <span class="keyword">as</span> any).savedStyle[key];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      oldStyle.position = <span class="string">'absolute'</span>;</span><br><span class="line">      oldStyle.top = oldRect.top + <span class="string">'px'</span>;</span><br><span class="line">      oldStyle.left = oldRect.left + <span class="string">'px'</span>;</span><br><span class="line">      oldStyle.width = oldRect.width + <span class="string">'px'</span>; <span class="comment">//可能需要将相对大小调整为绝对大小</span></span><br><span class="line">      oldStyle.height = oldRect.height + <span class="string">'px'</span>;</span><br><span class="line">      oldStyle.margin = <span class="string">'0'</span>; </span><br><span class="line">      oldStyle.transformOrigin = calcTransformOrigin(isTextNode, oldTextRect, oldRect);</span><br><span class="line">      oldStyle.transform = <span class="string">''</span>;</span><br><span class="line">      oldStyle.opacity = <span class="string">'1'</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(oldElm);</span><br><span class="line">      setNextFrame(oldStyle, <span class="string">'transform'</span>, <span class="string">'translate('</span>+ -dx +<span class="string">'px, '</span>+ -dy +<span class="string">'px) scale('</span>+wRatio+<span class="string">', '</span>+hRatio+<span class="string">')'</span>); </span><br><span class="line">      setNextFrame(oldStyle, <span class="string">'opacity'</span>, <span class="string">'0'</span>);</span><br><span class="line">      oldElm.addEventListener(<span class="string">'transitionend'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ev: TransitionEvent</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ev.propertyName === <span class="string">'transform'</span>)</span><br><span class="line">          <span class="built_in">document</span>.body.removeChild(ev.target <span class="keyword">as</span> Node);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  removed = created = <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> heroModule = &#123;pre, create, destroy, post&#125; <span class="keyword">as</span> Module;</span><br></pre></td></tr></table></figure>
<h3 id="VNode-Hooks"><a href="#VNode-Hooks" class="headerlink" title="VNode-Hooks"></a>VNode-Hooks</h3><p>vnode 钩子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> type PreHook = <span class="function"><span class="params">()</span> =&gt;</span> any;</span><br><span class="line"><span class="keyword">export</span> type InitHook = <span class="function">(<span class="params">vNode: VNode</span>) =&gt;</span> any;</span><br><span class="line"><span class="keyword">export</span> type CreateHook = <span class="function">(<span class="params">emptyVNode: VNode, vNode: VNode</span>) =&gt;</span> any;</span><br><span class="line"><span class="keyword">export</span> type InsertHook = <span class="function">(<span class="params">vNode: VNode</span>) =&gt;</span> any;</span><br><span class="line"><span class="keyword">export</span> type PrePatchHook = <span class="function">(<span class="params">oldVNode: VNode, vNode: VNode</span>) =&gt;</span> any;</span><br><span class="line"><span class="keyword">export</span> type UpdateHook = <span class="function">(<span class="params">oldVNode: VNode, vNode: VNode</span>) =&gt;</span> any;</span><br><span class="line"><span class="keyword">export</span> type PostPatchHook = <span class="function">(<span class="params">oldVNode: VNode, vNode: VNode</span>) =&gt;</span> any;</span><br><span class="line"><span class="keyword">export</span> type DestroyHook = <span class="function">(<span class="params">vNode: VNode</span>) =&gt;</span> any;</span><br><span class="line"><span class="keyword">export</span> type RemoveHook = <span class="function">(<span class="params">vNode: VNode, removeCallback: (</span>) =&gt;</span> <span class="keyword">void</span>) =&gt; any;</span><br><span class="line"><span class="keyword">export</span> type PostHook = <span class="function"><span class="params">()</span> =&gt;</span> any;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface Hooks &#123;</span><br><span class="line">  pre?: PreHook;</span><br><span class="line">  init?: InitHook;</span><br><span class="line">  create?: CreateHook;</span><br><span class="line">  insert?: InsertHook;</span><br><span class="line">  prepatch?: PrePatchHook;</span><br><span class="line">  update?: UpdateHook;</span><br><span class="line">  postpatch?: PostPatchHook;</span><br><span class="line">  destroy?: DestroyHook;</span><br><span class="line">  remove?: RemoveHook;</span><br><span class="line">  post?: PostHook;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>frontend</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>虚拟 dom</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 虚拟 dom</title>
    <url>/2019/06/09/frontend/vue/%E8%99%9A%E6%8B%9Fdom/</url>
    <content><![CDATA[<p>虚拟 dom 桥接着 view-model 模型和实际的 dom 节点树。首先 view-model 通常不只包含一个节点，而是一颗节点树，和实际的 dom 节点有一对多的关联。因此借助于虚拟 dom 节点，我们就可以与实际的 dom 节点产生一对一的关联。同时，view-model 保存着全量的数据，通过它不能直接对实际的 dom 节点树进行增量更新。有了同样是树结构的虚拟 dom 作为 view-model 和实际 dom 节点树的中继者，一方面我们就能将 view-model 中的数据、模板很好地反映到实际的 dom 节点树上；另一方面 view-model 增量数据更新可表现为虚拟 dom 节点树的前后差异，从而局部重绘实际的 dom 节点树。</p>
<h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><p>虚拟 dom 的核心操作分为三个步骤：对虚拟 dom 进行建模，并创建虚拟 dom；比较虚拟 dom 树的前后差异；将差异渲染到页面上。在 Vue 中，第二步和第三步在 patch 过程中合为一体。广义的虚拟 dom 还包含从模板解析出虚拟 dom 树的过程，本文针对的是 Vue 中虚拟 dom 的实现，这里仅指明由模板生成的渲染函数。至于解析模板的具体逻辑，笔者将在后续的文章加以分析。下面是 Vue 通过模板解析出的渲染函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 由 src/compiler/codegen/index.js 中 generate 函数输出</span></span><br><span class="line"><span class="comment">// _s 函数：toString 方法</span></span><br><span class="line"><span class="comment">// _v 函数：创建文本节点</span></span><br><span class="line"><span class="comment">// _c 函数：创建标签节点</span></span><br><span class="line">&#123;</span><br><span class="line">  render: <span class="string">`with (this) &#123;</span></span><br><span class="line"><span class="string">   return _c(</span></span><br><span class="line"><span class="string">     'div', &#123; attrs: &#123; "id": "app" &#125; &#125;,</span></span><br><span class="line"><span class="string">     [</span></span><br><span class="line"><span class="string">       _c(</span></span><br><span class="line"><span class="string">         'h1', &#123; staticStyle: &#123; "color": "red" &#125;, attrs: &#123; "data-id": "1" &#125; &#125;,</span></span><br><span class="line"><span class="string">         [_v(_s(message))]</span></span><br><span class="line"><span class="string">       )</span></span><br><span class="line"><span class="string">     ]</span></span><br><span class="line"><span class="string">   )</span></span><br><span class="line"><span class="string"> &#125;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述代码中，有必要指明的是，_c 即 <a href="http://xzfyu.com/2019/05/26/Vue/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B/">Vue 生命周期 - 创建实例</a> 中的 vm._c = (a, b, c, d) =&gt; createElement(vm, a, b, c, d, false) 以及 vm.$createElement = (a, b, c, d) =&gt; createElement(vm, a, b, c, d, true)。参数 a 为 tag 节点的标签名，b 为 data 节点的数据，c 为 children 子节点，d 为 normalizationType；而 createElement 函数则用于创建 VNode。实际上，上述代码中的 render 渲染函数会被包裹成 vm.$options.render 高阶函数，最终在 vm._render 方法中以 vm.$options.render.call(vm._renderProxy, vm.$createElement) 的调用形式创建 VNode，即通过高阶函数传入 _c, _s, _v 等工具函数。</p>
<p>当通过 vm._render 获得 vnode （该 vnode 将包含从模板中解析到的父 vnode 节点信息）以后，Vue 会调用 vm._update 方法将 vnode 填入文档或进行重绘。vm._update 方法实际基于 vm.<strong>patch</strong> 方法完成组件的挂载或重绘，参考 <a href="http://xzfyu.com/2019/05/29/Vue/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-%E7%BB%84%E4%BB%B6%E6%8C%82%E8%BD%BD%E5%8F%8A%E6%9B%B4%E6%96%B0/">Vue 生命周期 - 组件挂载及更新</a>。下图是单个 Vue 组件在父模板中作为模板节点的解析过程。</p>
<img src="/2019/06/09/frontend/vue/虚拟dom/vue-render.png">
<p>对于用户手动 new 出的 Vue 实例，完成挂载需要手动调用 $mount 方法，然后将该 Vue 实例关联的模板解析为渲染函数并完成渲染。这时 template 和 _render 方法一样都是 Vue 实例的一部分。当该组件模板 template 包含其他组件节点或原生节点等时，在渲染函数执行期间，注入的 vm._c 方法将会创建与该组件节点或原生节点相对应的 vnode。对于组件节点，在 patch 过程中通过 init 钩子创建关联的 Vue 实例。处理过程参见下文的 patch 一小节。</p>
<h2 id="vnode-模型"><a href="#vnode-模型" class="headerlink" title="vnode 模型"></a>vnode 模型</h2><img src="/2019/06/09/frontend/vue/虚拟dom/vue-vnode.png">
<p>vnode 大致可以分为以下几类：</p>
<ul>
<li>EmptyVNode：注释节点，对应原生的注释节点，text 属性有值 且 isComment 属性为真值。</li>
<li>TextVNode：文本节点，对应原生的文本节点，text 属性有值。</li>
<li>ElementVNode：元素节点，对应原生的元素节点，elm 属性在渲染或重绘后有值。</li>
<li>ComponentVNode：组件节点，elm 属性在渲染或重绘后有值，包含类组件、函数式组件、异步组件等。</li>
<li>CloneVNode：拷贝节点，isCloned 属性为真值，以便于复用。</li>
</ul>
<h2 id="创建-vnode"><a href="#创建-vnode" class="headerlink" title="创建 vnode"></a>创建 vnode</h2><img src="/2019/06/09/frontend/vue/虚拟dom/vue-genVnode.png">
<p>由上文可以看出，在创建 vnode 的过程中，将调用 createElement 函数生成 vnode 的一般属性，包含 tag, data, children, text, ns, context, key。创建 vnode 有三种方式：对于内置的 html 节点，直接创建 VNode 实例；对于 Vue 组件构成的模板节点，通过 createComponent 创建 VNode 实例；对于 tag 不可识别或为对象的其他节点，同样通过 createComponent 创建 VNode 实例。</p>
<h3 id="createElement"><a href="#createElement" class="headerlink" title="createElement"></a>createElement</h3><p>在 Vue 中，createElement 函数的功能主要由 _createElement 实现。createElement 的特殊意义是对参数进行处理，余下的过程都由 _createElement 完成。createElement 通过 vm._c 注入到模板渲染函数中；当渲染函数执行过程中，可用于创建 vnode 节点树。createElement 本身的实现也较为简单：针对模板中的原生节点，直接使用 new VNode 创建 vnode 实例；针对模板中的组件节点或其他，调用 createComponent 创建 vnode 实例。以下是 _createElement 函数的扼要实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// createElement 函数处理参数，并调用 _createElement 创建 vnode</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_createElement</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  context: Component,<span class="regexp">//</span> 模板对应的 vm 实例</span></span></span><br><span class="line"><span class="function"><span class="params">  tag?: string | Class&lt;Component&gt; | Function | Object,</span></span></span><br><span class="line"><span class="function"><span class="params">  data?: VNodeData,</span></span></span><br><span class="line"><span class="function"><span class="params">  children?: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  normalizationType?: number</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">VNode</span> | <span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// v-bind:is 或 is 属性的存在，意为动态组件</span></span><br><span class="line">  <span class="keyword">if</span> (isDef(data) &amp;&amp; isDef(data.is)) &#123;</span><br><span class="line">    tag = data.is</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插槽支持单个函数作为子组件</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(children) &amp;&amp;</span><br><span class="line">    <span class="keyword">typeof</span> children[<span class="number">0</span>] === <span class="string">'function'</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    data = data || &#123;&#125;</span><br><span class="line">    data.scopedSlots = &#123; <span class="attr">default</span>: children[<span class="number">0</span>] &#125;</span><br><span class="line">    children.length = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (normalizationType === ALWAYS_NORMALIZE) &#123;</span><br><span class="line">    <span class="comment">// normalizeChildren 函数意义为：</span></span><br><span class="line">    <span class="comment">// 如果 children 是原始类型，字符串、数值、symbol或布尔值，使用 createTextVNode 创建文本节点</span></span><br><span class="line">    <span class="comment">// 如果 children 是数组，递归处理，文本节点聚合，参考 normalizeArrayChildren 函数</span></span><br><span class="line">    children = normalizeChildren(children)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (normalizationType === SIMPLE_NORMALIZE) &#123;</span><br><span class="line">    <span class="comment">// simpleNormalizeChildren 如遇到数组，不作递归处理，只是简单地拼接</span></span><br><span class="line">    children = simpleNormalizeChildren(children)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> vnode, ns</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> tag === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> Ctor</span><br><span class="line">    <span class="comment">// config 根据不同环境有不同实现</span></span><br><span class="line">    ns = (context.$vnode &amp;&amp; context.$vnode.ns) || config.getTagNamespace(tag)</span><br><span class="line">    <span class="comment">// 针对环境支持的 html 节点标签</span></span><br><span class="line">    <span class="keyword">if</span> (config.isReservedTag(tag)) &#123;</span><br><span class="line">      vnode = <span class="keyword">new</span> VNode(</span><br><span class="line">        config.parsePlatformTagName(tag), data, children,</span><br><span class="line">        <span class="literal">undefined</span>, <span class="literal">undefined</span>, context</span><br><span class="line">      )</span><br><span class="line">    <span class="comment">// resolveAsset 从 context.$options.components 获取指定的组件构造器</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((!data || !data.pre) &amp;&amp; isDef(Ctor = resolveAsset(context.$options, <span class="string">'components'</span>, tag))) &#123;</span><br><span class="line">      vnode = createComponent(Ctor, data, context, children, tag)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      vnode = <span class="keyword">new</span> VNode(</span><br><span class="line">        tag, data, children,</span><br><span class="line">        <span class="literal">undefined</span>, <span class="literal">undefined</span>, context</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    vnode = createComponent(tag, data, context, children)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(vnode)) &#123;</span><br><span class="line">    <span class="keyword">return</span> vnode</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(vnode)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(ns)) applyNS(vnode, ns)<span class="comment">// 将 ns 写入 vnode</span></span><br><span class="line">    <span class="comment">// registerDeepBindings 使用 observer 包提供的 traverse 函数递归地调用响应式数据 data 的 getter，绑定依赖</span></span><br><span class="line">    <span class="keyword">if</span> (isDef(data)) registerDeepBindings(data)</span><br><span class="line">    <span class="keyword">return</span> vnode</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> createEmptyVNode()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="createComponent"><a href="#createComponent" class="headerlink" title="createComponent"></a>createComponent</h3><p>createComponent 函数意义在于创建不同类型的组件：异步组件、函数式组件、类组件等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createComponent</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  Ctor: Class&lt;Component&gt; | Function | Object | void,</span></span></span><br><span class="line"><span class="function"><span class="params">  data: ?VNodeData,</span></span></span><br><span class="line"><span class="function"><span class="params">  context: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  children: ?Array&lt;VNode&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  tag?: string</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">VNode</span> | <span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; | <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> baseCtor = context.$options._base<span class="comment">// Vue 构造函数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isObject(Ctor)) &#123;<span class="comment">// 当 Ctor 为对象，构造 Vue 的子类</span></span><br><span class="line">    Ctor = baseCtor.extend(Ctor)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理异步组件</span></span><br><span class="line">  <span class="keyword">let</span> asyncFactory</span><br><span class="line">  <span class="keyword">if</span> (isUndef(Ctor.cid)) &#123;<span class="comment">// Ctor 异步组件形式</span></span><br><span class="line">    asyncFactory = Ctor</span><br><span class="line">    <span class="comment">// 异步组件加载过程中，Ctor 为 undefined；加载完成，Ctor 为待渲染的组件</span></span><br><span class="line">    Ctor = resolveAsyncComponent(asyncFactory, baseCtor)</span><br><span class="line">    <span class="comment">// 异步组件加载过程中，创建异步占位符</span></span><br><span class="line">    <span class="keyword">if</span> (Ctor === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> createAsyncPlaceholder(</span><br><span class="line">        asyncFactory,</span><br><span class="line">        data,</span><br><span class="line">        context,</span><br><span class="line">        children,</span><br><span class="line">        tag</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  data = data || &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新类所携带的选项</span></span><br><span class="line">  resolveConstructorOptions(Ctor)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据 Ctor.options.model 更新 data 中的指定数据以及绑定事件</span></span><br><span class="line">  <span class="comment">// model 选项的意义就在于双向绑定，可包含的属性有 prop, event, callback</span></span><br><span class="line">  <span class="comment">// prop 指定模板和响应式数据交互的 key；event, callback 指定事件和绑定函数</span></span><br><span class="line">  <span class="keyword">if</span> (isDef(data.model)) &#123;</span><br><span class="line">    transformModel(Ctor.options, data)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据 Ctor.options.props 解析出 data.attrs, data.props（父组件传入的 props）</span></span><br><span class="line">  <span class="comment">// options.props 指定子组件接受数据的 key 键</span></span><br><span class="line">  <span class="keyword">const</span> propsData = extractPropsFromVNodeData(data, Ctor, tag)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理函数式组件</span></span><br><span class="line">  <span class="keyword">if</span> (isTrue(Ctor.options.functional)) &#123;</span><br><span class="line">    <span class="keyword">return</span> createFunctionalComponent(Ctor, propsData, data, context, children)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> listeners = data.on<span class="comment">// dom 事件</span></span><br><span class="line">  data.on = data.nativeOn</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 抽象组件，data 中仅保留 slot</span></span><br><span class="line">  <span class="keyword">if</span> (isTrue(Ctor.options.abstract)) &#123;</span><br><span class="line">    <span class="keyword">const</span> slot = data.slot</span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> (slot) &#123;</span><br><span class="line">      data.slot = slot</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将 componentVNodeHooks 钩子灌入到 data.hook 中</span></span><br><span class="line">  installComponentHooks(data)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> name = Ctor.options.name || tag</span><br><span class="line">  <span class="keyword">const</span> vnode = <span class="keyword">new</span> VNode(</span><br><span class="line">    <span class="string">`vue-component-<span class="subst">$&#123;Ctor.cid&#125;</span><span class="subst">$&#123;name ? <span class="string">`-<span class="subst">$&#123;name&#125;</span>`</span> : <span class="string">''</span>&#125;</span>`</span>,</span><br><span class="line">    data, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, context,</span><br><span class="line">    &#123; Ctor, propsData, listeners, tag, children &#125;,<span class="comment">// 作为 componentOptions</span></span><br><span class="line">    asyncFactory</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> vnode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h4><p><a href="https://cn.vuejs.org/v2/guide/render-function.html#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6" target="_blank" rel="noopener">函数式组件</a> 对应 React 中的无状态组件。不同于类组件以 vm 实例作为上下文，函数式组件在生成过程中将构建新的上下文对象，因此没有对应的 vm 实例，也就没有响应的生命周期和响应式数据。</p>
<p>函数式组件所对应的 vnode 实例包含特殊属性如 fnContext, fnOptions, fnScopeId。fnContext 即模板所对应的 vm 实例；fnOptions 即 vm 构造函数所划定的选项；fnScopeId 即选项中包含的作用域 id。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建函数式-无状态组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunctionalComponent</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  Ctor: Class&lt;Component&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  propsData: ?Object,</span></span></span><br><span class="line"><span class="function"><span class="params">  data: VNodeData,</span></span></span><br><span class="line"><span class="function"><span class="params">  contextVm: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  children: ?Array&lt;VNode&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">VNode</span> | <span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; | <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> options = Ctor.options</span><br><span class="line">  <span class="keyword">const</span> props = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> propOptions = options.props</span><br><span class="line">  <span class="keyword">if</span> (isDef(propOptions)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> propOptions) &#123;</span><br><span class="line">      props[key] = validateProp(key, propOptions, propsData || emptyObject)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(data.attrs)) mergeProps(props, data.attrs)</span><br><span class="line">    <span class="keyword">if</span> (isDef(data.props)) mergeProps(props, data.props)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构建新的上下文对象，对应类组件的 vm 实例</span></span><br><span class="line">  <span class="keyword">const</span> renderContext = <span class="keyword">new</span> FunctionalRenderContext(</span><br><span class="line">    data,</span><br><span class="line">    props,</span><br><span class="line">    children,</span><br><span class="line">    contextVm,</span><br><span class="line">    Ctor</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 没有使用 vm 实例作为上下文，因此没有生命周期和响应式数据</span></span><br><span class="line">  <span class="comment">// renderContext._c 即上文中的 createElement</span></span><br><span class="line">  <span class="keyword">const</span> vnode = options.render.call(<span class="literal">null</span>, renderContext._c, renderContext)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (vnode <span class="keyword">instanceof</span> VNode) &#123;</span><br><span class="line">    <span class="keyword">return</span> cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(vnode)) &#123;</span><br><span class="line">    <span class="keyword">const</span> vnodes = normalizeChildren(vnode) || []</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">new</span> <span class="built_in">Array</span>(vnodes.length)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; vnodes.length; i++) &#123;</span><br><span class="line">      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FunctionalRenderContext</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  data: VNodeData,</span></span></span><br><span class="line"><span class="function"><span class="params">  props: Object,</span></span></span><br><span class="line"><span class="function"><span class="params">  children: ?Array&lt;VNode&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  parent: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  Ctor: Class&lt;Component&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> options = Ctor.options</span><br><span class="line">  <span class="keyword">let</span> contextVm</span><br><span class="line">  <span class="keyword">if</span> (hasOwn(parent, <span class="string">'_uid'</span>)) &#123;</span><br><span class="line">    contextVm = <span class="built_in">Object</span>.create(parent)</span><br><span class="line">    contextVm._original = parent</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    contextVm = parent</span><br><span class="line">    parent = parent._original</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> isCompiled = isTrue(options._compiled)</span><br><span class="line">  <span class="keyword">const</span> needNormalization = !isCompiled</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.data = data</span><br><span class="line">  <span class="keyword">this</span>.props = props</span><br><span class="line">  <span class="keyword">this</span>.children = children</span><br><span class="line">  <span class="keyword">this</span>.parent = parent</span><br><span class="line">  <span class="keyword">this</span>.listeners = data.on || emptyObject</span><br><span class="line">  <span class="keyword">this</span>.injections = resolveInject(options.inject, parent)</span><br><span class="line">  <span class="keyword">this</span>.slots = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.$slots) &#123;</span><br><span class="line">      normalizeScopedSlots(</span><br><span class="line">        data.scopedSlots,</span><br><span class="line">        <span class="keyword">this</span>.$slots = resolveSlots(children, parent)</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$slots</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, <span class="string">'scopedSlots'</span>, (&#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    <span class="keyword">get</span> () &#123;</span><br><span class="line">      <span class="keyword">return</span> normalizeScopedSlots(data.scopedSlots, <span class="keyword">this</span>.slots())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;: any))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isCompiled) &#123;</span><br><span class="line">    <span class="keyword">this</span>.$options = options</span><br><span class="line">    <span class="keyword">this</span>.$slots = <span class="keyword">this</span>.slots()</span><br><span class="line">    <span class="keyword">this</span>.$scopedSlots = normalizeScopedSlots(data.scopedSlots, <span class="keyword">this</span>.$slots)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (options._scopeId) &#123;</span><br><span class="line">    <span class="keyword">this</span>._c = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> vnode = createElement(contextVm, a, b, c, d, needNormalization)</span><br><span class="line">      <span class="keyword">if</span> (vnode &amp;&amp; !<span class="built_in">Array</span>.isArray(vnode)) &#123;</span><br><span class="line">        vnode.fnScopeId = options._scopeId</span><br><span class="line">        vnode.fnContext = parent</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> vnode</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>._c = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> createElement(contextVm, a, b, c, d, needNormalization)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">installRenderHelpers(FunctionalRenderContext.prototype)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝 vnode，以便于根据 isCloned 属性判断是否拷贝节点，如是，可复用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneAndMarkFunctionalResult</span> (<span class="params">vnode, data, contextVm, options, renderContext</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> clone = cloneVNode(vnode)</span><br><span class="line">  clone.fnContext = contextVm</span><br><span class="line">  clone.fnOptions = options</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    (clone.devtoolsMeta = clone.devtoolsMeta || &#123;&#125;).renderContext = renderContext</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (data.slot) &#123;</span><br><span class="line">    (clone.data || (clone.data = &#123;&#125;)).slot = data.slot</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> clone</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h4><p><a href="https://cn.vuejs.org/v2/guide/components-dynamic-async.html" target="_blank" rel="noopener">异步组件</a> 通常是 asyncFactory = (resolve, reject) =&gt; {} 或 () =&gt; ({ component }) 函数注册的组件。异步组件主要由 resolveAsyncComponent 函数处理其加载逻辑。当异步组件在加载过程中，Vue 会使用 createAsyncPlaceholder 创建占位节点。当异步组件加载完成后，Vue 会通过强制重绘父组件的方式，启动该异步组件的渲染过程。实际上，在加载完成后，Vue 会将该异步组件填充到 asyncFactory.resolved 属性中。因此，若有其他组件需要渲染该异步组件时，直接取出 asyncFactory.resolved 作为 vm 实例的构造器并完成渲染即可。</p>
<p>回溯上文的 vnode 模型，其中的 asyncFactory, asyncMeta 属性实际只存在于占位节点中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步组件的渲染机制</span></span><br><span class="line"><span class="comment">// 初次加载异步组件，二次以后直接消费已加载的异步组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveAsyncComponent</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  factory: Function,</span></span></span><br><span class="line"><span class="function"><span class="params">  baseCtor: Class&lt;Component&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Class</span>&lt;<span class="title">Component</span>&gt; | <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 当异步组件加载完成再次被使用时，factory.errorComp, factory.resolved 等属性可能填满了值</span></span><br><span class="line">  <span class="keyword">if</span> (isTrue(factory.error) &amp;&amp; isDef(factory.errorComp)) &#123;</span><br><span class="line">    <span class="keyword">return</span> factory.errorComp</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isDef(factory.resolved)) &#123;</span><br><span class="line">    <span class="keyword">return</span> factory.resolved</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> owner = currentRenderingInstance<span class="comment">// 当前渲染的组件实例，作为异步组件的父组件</span></span><br><span class="line">  <span class="comment">// factory.owners 记录异步组件的所有父组件，通过强制更新父组件渲染异步组件</span></span><br><span class="line">  <span class="keyword">if</span> (owner &amp;&amp; isDef(factory.owners) &amp;&amp; factory.owners.indexOf(owner) === <span class="number">-1</span>) &#123;</span><br><span class="line">    factory.owners.push(owner)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isTrue(factory.loading) &amp;&amp; isDef(factory.loadingComp)) &#123;</span><br><span class="line">    <span class="keyword">return</span> factory.loadingComp</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (owner &amp;&amp; !isDef(factory.owners)) &#123;</span><br><span class="line">    <span class="keyword">const</span> owners = factory.owners = [owner]</span><br><span class="line">    <span class="keyword">let</span> sync = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">let</span> timerLoading = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> timerTimeout = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    ;<span class="function">(<span class="params">owner: any</span>).<span class="params">$on</span>(<span class="params"><span class="string">'hook:destroyed'</span>, (</span>) =&gt;</span> remove(owners, owner))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过强制重绘父组件完成异步组件的渲染</span></span><br><span class="line">    <span class="keyword">const</span> forceRender = <span class="function">(<span class="params">renderCompleted: boolean</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = owners.length; i &lt; l; i++) &#123;</span><br><span class="line">        (owners[i]: any).$forceUpdate()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (renderCompleted) &#123;</span><br><span class="line">        owners.length = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (timerLoading !== <span class="literal">null</span>) &#123;</span><br><span class="line">          clearTimeout(timerLoading)</span><br><span class="line">          timerLoading = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (timerTimeout !== <span class="literal">null</span>) &#123;</span><br><span class="line">          clearTimeout(timerTimeout)</span><br><span class="line">          timerTimeout = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> resolve = once(<span class="function">(<span class="params">res: <span class="built_in">Object</span> | Class&lt;Component&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// factory.resolved 即 import 加载的组件，或者通过后端返回数据构建的 Vue 子类</span></span><br><span class="line">      factory.resolved = ensureCtor(res, baseCtor)</span><br><span class="line">      <span class="keyword">if</span> (!sync) &#123;</span><br><span class="line">        forceRender(<span class="literal">true</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        owners.length = <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> reject = once(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">      process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">        <span class="string">`Failed to resolve async component: <span class="subst">$&#123;<span class="built_in">String</span>(factory)&#125;</span>`</span> +</span><br><span class="line">        (reason ? <span class="string">`\nReason: <span class="subst">$&#123;reason&#125;</span>`</span> : <span class="string">''</span>)</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">if</span> (isDef(factory.errorComp)) &#123;</span><br><span class="line">        factory.error = <span class="literal">true</span><span class="comment">// 置为真值，以便在重绘时渲染 factory.errorComp</span></span><br><span class="line">        forceRender(<span class="literal">true</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> res = factory(resolve, reject)<span class="comment">// 加载异步组件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isObject(res)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isPromise(res)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isUndef(factory.resolved)) &#123;</span><br><span class="line">          res.then(resolve, reject)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isPromise(res.component)) &#123;</span><br><span class="line">        res.component.then(resolve, reject)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isDef(res.error)) &#123;</span><br><span class="line">          <span class="comment">// 构建 factory.errorComp，以便二次渲染</span></span><br><span class="line">          factory.errorComp = ensureCtor(res.error, baseCtor)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isDef(res.loading)) &#123;</span><br><span class="line">          factory.loadingComp = ensureCtor(res.loading, baseCtor)</span><br><span class="line">          <span class="keyword">if</span> (res.delay === <span class="number">0</span>) &#123;</span><br><span class="line">            factory.loading = <span class="literal">true</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timerLoading = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">              timerLoading = <span class="literal">null</span></span><br><span class="line">              <span class="keyword">if</span> (isUndef(factory.resolved) &amp;&amp; isUndef(factory.error)) &#123;</span><br><span class="line">                factory.loading = <span class="literal">true</span></span><br><span class="line">                forceRender(<span class="literal">false</span>)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;, res.delay || <span class="number">200</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isDef(res.timeout)) &#123;</span><br><span class="line">          timerTimeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            timerTimeout = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">if</span> (isUndef(factory.resolved)) &#123;</span><br><span class="line">              reject(</span><br><span class="line">                process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">                  ? <span class="string">`timeout (<span class="subst">$&#123;res.timeout&#125;</span>ms)`</span></span><br><span class="line">                  : <span class="literal">null</span></span><br><span class="line">              )</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, res.timeout)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sync = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 异步组件已加载完成，返回待渲染的组件</span></span><br><span class="line">    <span class="keyword">return</span> factory.loading</span><br><span class="line">      ? factory.loadingComp</span><br><span class="line">      : factory.resolved</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建占位节点</span></span><br><span class="line">createAsyncPlaceholder (</span><br><span class="line">  factory: <span class="built_in">Function</span>,</span><br><span class="line">  data: ?VNodeData,</span><br><span class="line">  context: Component,</span><br><span class="line">  children: ?<span class="built_in">Array</span>&lt;VNode&gt;,</span><br><span class="line">  tag: ?string</span><br><span class="line">): VNode &#123;</span><br><span class="line">  <span class="keyword">const</span> node = createEmptyVNode()</span><br><span class="line">  node.asyncFactory = factory</span><br><span class="line">  node.asyncMeta = &#123; data, context, children, tag &#125;</span><br><span class="line">  <span class="keyword">return</span> node</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="渲染-vnode"><a href="#渲染-vnode" class="headerlink" title="渲染 vnode"></a>渲染 vnode</h2><p>依据上文，vnode 需要通过 vm.__patch__ 方法完成渲染或重绘出真实 dom。vm.__patch__ 方法的创建过程是基于高阶函数 createPatchFunction，首先将不同平台的 dom 操作作为参数传入 createPatchFunction，然后生成实际针对不同平台的 patch 函数。在 createPatchFunction(backend) 函数中，backend 即不同平台中以钩子形式提供的 dom 操作函数集。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hooks = [<span class="string">'create'</span>, <span class="string">'activate'</span>, <span class="string">'update'</span>, <span class="string">'remove'</span>, <span class="string">'destroy'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将平台钩子注入到 createPatchFunction 函数中，以便调用</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createPatchFunction</span> (<span class="params">backend</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> cbs = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> &#123; modules, nodeOps &#125; = backend<span class="comment">// 不同环境的节点、样式、事件等操作</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从 modules 中读取平台钩子（可能是浏览器钩子），以钩子形式更新节点的属性、事件</span></span><br><span class="line">  <span class="comment">// modules 即包含 class, style, attrs, events, domProps, transition</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; hooks.length; ++i) &#123;</span><br><span class="line">    cbs[hooks[i]] = []</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; modules.length; ++j) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isDef(modules[j][hooks[i]])) &#123;</span><br><span class="line">        cbs[hooks[i]].push(modules[j][hooks[i]])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">patch</span> (<span class="params">oldVnode, vnode, hydrating, removeOnly</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因此，下面以浏览器钩子展开说明。</p>
<h3 id="浏览器钩子"><a href="#浏览器钩子" class="headerlink" title="浏览器钩子"></a>浏览器钩子</h3><p>在浏览器环境中，钩子函数集合包含 class 样式类、style 样式、attrs 节点属性、events 事件、domProps 节点内容等、transition 动效六类操作。</p>
<ul>
<li>class.js: 提供 create, update 钩子，使用 el.setAttribute(‘class’, cls) 方法设置或更新 vnode.elm 元素的样式类。</li>
<li>style.js: 提供 create, update 钩子，使用 el.style.setProperty(name, val) 或 el.style[name] = val 形式设置或更新 vnode.elm 元素的样式。</li>
<li>attrs.js: 提供 create, update 钩子，使用 el.setAttribute(key, value) 或 el.removeAttribute(key) 方法设置或更新 vnode.elm 元素的 html 属性。</li>
<li>events.js: 提供 create, update 钩子，使用 el.addEventListener, el.removeEventListener 方法设置或更新 vnode.elm 元素的绑定函数。</li>
<li>domProps.js: 提供 create, update 钩子，包含：当 vnode.data.domProps 属性包含 textContent, innerHTML 时，使用 el.removeChild 移除子节点，并将值写入 el 属性中等。</li>
<li>transition.js: 提供 create, activate, remove 钩子，用于实现 css transition，这里不作解读。</li>
</ul>
<p>钩子的种类以及执行时机为：</p>
<ul>
<li>create: 创建真实 dom 节点时。</li>
<li>activate: transition 过程中动效执行时。</li>
<li>update: 更新真实 dom 节点时。</li>
<li>remove: transition 过程中移除节点时。</li>
<li>destroy: 移除真实 dom 节点时，即组件卸载或 keep-alive 子组件置为非激活状态时。</li>
</ul>
<h3 id="vnode-钩子"><a href="#vnode-钩子" class="headerlink" title="vnode 钩子"></a>vnode 钩子</h3><p>除了平台钩子以外，patch 执行过程中还包含 vnode 钩子。通过上文也可以发现，Vue 在执行 createComponent 函数时，会通过调用 installComponentHooks 函数将 vnode 钩子注入到 vnode.data.hook 中。</p>
<ul>
<li>init 钩子: 如果 vnode 对应未销毁状态的 keep-alive 组件，更新该 keep-alive 组件；如果 vnode 对应组件节点，实例化该组件，使用该组件的内置模板完成渲染，生成 vnode.elm。执行时机为更新组件时。</li>
<li>prepatch 钩子: 更新组件。执行时机为更新组件时。</li>
<li>insert 钩子: 将完成挂载或更新的 vnode 节点插入到父节点中，且调用组件的 mounted 生命周期。执行时机为组件所对应的节点树都渲染到文档中时。</li>
<li>destroy 钩子: 卸载组件，或者将 keep-alive 子组件置为非激活状态。执行时机为 vnode 节点移除时。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> componentVNodeHooks = &#123;</span><br><span class="line">  <span class="comment">// 更新 keep-alive 组件，或实例化模板中的子节点组件并完成挂载</span></span><br><span class="line">  init (vnode: VNodeWithData, <span class="attr">hydrating</span>: boolean): ?boolean &#123;</span><br><span class="line">    <span class="comment">// keep-alive 组件，复用 vnode，并对其追加补丁</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      vnode.componentInstance &amp;&amp;</span><br><span class="line">      !vnode.componentInstance._isDestroyed &amp;&amp;</span><br><span class="line">      vnode.data.keepAlive</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">const</span> mountedNode: any = vnode </span><br><span class="line">      componentVNodeHooks.prepatch(mountedNode, mountedNode)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如模板节点为组件节点，实例化该组件，并予以挂载</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> child = vnode.componentInstance = createComponentInstanceForVnode(</span><br><span class="line">        vnode,</span><br><span class="line">        activeInstance</span><br><span class="line">      )</span><br><span class="line">      <span class="comment">// vm.$mount 方法通过 vm._update 挂载组件</span></span><br><span class="line">      child.$mount(hydrating ? vnode.elm : <span class="literal">undefined</span>, hydrating)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新组件</span></span><br><span class="line">  prepatch (oldVnode: MountedComponentVNode, <span class="attr">vnode</span>: MountedComponentVNode) &#123;</span><br><span class="line">    <span class="keyword">const</span> options = vnode.componentOptions</span><br><span class="line">    <span class="keyword">const</span> child = vnode.componentInstance = oldVnode.componentInstance</span><br><span class="line">    <span class="comment">// 更新组件 vm 实例的属性，并酌情重绘</span></span><br><span class="line">    updateChildComponent(</span><br><span class="line">      child,</span><br><span class="line">      options.propsData, <span class="comment">// updated props</span></span><br><span class="line">      options.listeners, <span class="comment">// updated listeners</span></span><br><span class="line">      vnode, <span class="comment">// new parent vnode</span></span><br><span class="line">      options.children <span class="comment">// new children</span></span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当组件所对应的 vnode 树都渲染到文档中时，调用 mounted 生命周期</span></span><br><span class="line">  insert (vnode: MountedComponentVNode) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; context, componentInstance &#125; = vnode</span><br><span class="line">    <span class="comment">// 调用组件的 mounted 生命周期</span></span><br><span class="line">    <span class="keyword">if</span> (!componentInstance._isMounted) &#123;</span><br><span class="line">      componentInstance._isMounted = <span class="literal">true</span></span><br><span class="line">      callHook(componentInstance, <span class="string">'mounted'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (vnode.data.keepAlive) &#123;</span><br><span class="line">      <span class="keyword">if</span> (context._isMounted) &#123;</span><br><span class="line">        <span class="comment">// 缓存 vm 实例，直到 patch 过程结束才予以激活</span></span><br><span class="line">        queueActivatedComponent(componentInstance)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 直接激活 vm 实例</span></span><br><span class="line">        activateChildComponent(componentInstance, <span class="literal">true</span> <span class="comment">/* direct */</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启动卸载、或将 keep-alive 组件置为未激活状态</span></span><br><span class="line">  destroy (vnode: MountedComponentVNode) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; componentInstance &#125; = vnode</span><br><span class="line">    <span class="keyword">if</span> (!componentInstance._isDestroyed) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!vnode.data.keepAlive) &#123;</span><br><span class="line">        componentInstance.$destroy()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        deactivateChildComponent(componentInstance, <span class="literal">true</span> <span class="comment">/* direct */</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="钩子触发器"><a href="#钩子触发器" class="headerlink" title="钩子触发器"></a>钩子触发器</h3><p>Vue 封装了如下的钩子触发器：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 触发 create 平台钩子以及 vnode 钩子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invokeCreateHooks</span> (<span class="params">vnode, insertedVnodeQueue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cbs.create.length; ++i) &#123;</span><br><span class="line">    cbs.create[i](emptyNode, vnode)</span><br><span class="line">  &#125;</span><br><span class="line">  i = vnode.data.hook <span class="comment">// Reuse variable</span></span><br><span class="line">  <span class="keyword">if</span> (isDef(i)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(i.create)) i.create(emptyNode, vnode)</span><br><span class="line">    <span class="keyword">if</span> (isDef(i.insert)) insertedVnodeQueue.push(vnode)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// vnode 树中的子节点须等待组件内容都渲染到文档中时，才执行 insert 钩子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invokeInsertHook</span> (<span class="params">vnode, queue, initial</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 根组件中的子节点须等待跟组件实际渲染到文档中</span></span><br><span class="line">  <span class="keyword">if</span> (isTrue(initial) &amp;&amp; isDef(vnode.parent)) &#123;</span><br><span class="line">    vnode.parent.data.pendingInsert = queue</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; queue.length; ++i) &#123;</span><br><span class="line">      queue[i].data.hook.insert(queue[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归销毁组件、移除 vnode 节点属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invokeDestroyHook</span> (<span class="params">vnode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i, j</span><br><span class="line">  <span class="keyword">const</span> data = vnode.data</span><br><span class="line">  <span class="keyword">if</span> (isDef(data)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(i = data.hook) &amp;&amp; isDef(i = i.destroy)) i(vnode)</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.destroy.length; ++i) cbs.destroy[i](vnode)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isDef(i = vnode.children)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; vnode.children.length; ++j) &#123;</span><br><span class="line">      invokeDestroyHook(vnode.children[j])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h3><p>vnode 的 patch 过程就是完成挂载、重绘或卸载。patch 过程中渲染的直接表现是生成 vnode.elm 或 vnode.text。</p>
<img src="/2019/06/09/frontend/vue/虚拟dom/vue-patch.png">
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patch</span> (<span class="params">oldVnode, vnode, hydrating, removeOnly</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 组件卸载</span></span><br><span class="line">  <span class="keyword">if</span> (isUndef(vnode)) &#123;</span><br><span class="line">    <span class="comment">// 深度优先遍历 oldVnode 树中子节点，执行 cbs.destory 以及 vnode.data.hook.destory 钩子</span></span><br><span class="line">    <span class="keyword">if</span> (isDef(oldVnode)) invokeDestroyHook(oldVnode)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> isInitialPatch = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">const</span> insertedVnodeQueue = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 组件挂载</span></span><br><span class="line">  <span class="keyword">if</span> (isUndef(oldVnode)) &#123;</span><br><span class="line">    isInitialPatch = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// createElm 函数将 vnode 及 children 解析成节点树 vnode.elm</span></span><br><span class="line">    createElm(vnode, insertedVnodeQueue)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 组件更新</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> isRealElement = isDef(oldVnode.nodeType)<span class="comment">// 原生节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 组件节点的数据发生变更，更新组件</span></span><br><span class="line">    <span class="keyword">if</span> (!isRealElement &amp;&amp; sameVnode(oldVnode, vnode)) &#123;</span><br><span class="line">      <span class="comment">// patchVnode 函数更新组件节点或原生节点</span></span><br><span class="line">      patchVnode(oldVnode, vnode, insertedVnodeQueue, <span class="literal">null</span>, <span class="literal">null</span>, removeOnly)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (isRealElement) &#123;</span><br><span class="line">        <span class="comment">// 服务端渲染的是元素节点，采用 hydrate 函数进行渲染，oldVnode 即真实的 dom 元素</span></span><br><span class="line">        <span class="keyword">if</span> (oldVnode.nodeType === <span class="number">1</span> &amp;&amp; oldVnode.hasAttribute(SSR_ATTR)) &#123;</span><br><span class="line">          oldVnode.removeAttribute(SSR_ATTR)</span><br><span class="line">          hydrating = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isTrue(hydrating)) &#123;</span><br><span class="line">          <span class="comment">// hydrate 函数将 oldVnode 作为 vnode 的 elm 属性，并递归处理子节点等</span></span><br><span class="line">          <span class="comment">// 当为 component 模板节点或原生节点、文本节点、注释节点时返回真值，否则返回否值</span></span><br><span class="line">          <span class="keyword">if</span> (hydrate(oldVnode, vnode, insertedVnodeQueue)) &#123;</span><br><span class="line">            <span class="comment">// invokeInsertHook 函数对于根节点，将 insertedVnodeQueue 存入 vnode.parent.data.pendingInsert 中，等待调用 initComponent 时执行</span></span><br><span class="line">            <span class="comment">// 其他，触发 insertedVnodeQueue 数组项中的 data.hook.insert 钩子</span></span><br><span class="line">            invokeInsertHook(vnode, insertedVnodeQueue, <span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">return</span> oldVnode<span class="comment">// 真实的 dom 节点</span></span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">            warn(</span><br><span class="line">              <span class="string">'The client-side rendered virtual DOM tree is not matching '</span> +</span><br><span class="line">              <span class="string">'server-rendered content. This is likely caused by incorrect '</span> +</span><br><span class="line">              <span class="string">'HTML markup, for example nesting block-level elements inside '</span> +</span><br><span class="line">              <span class="string">'&lt;p&gt;, or missing &lt;tbody&gt;. Bailing hydration and performing '</span> +</span><br><span class="line">              <span class="string">'full client-side render.'</span></span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// emptyNodeAt 函数构建一个 VNode 实例，该实例使用 oldVnode 作为 elm 属性</span></span><br><span class="line">        oldVnode = emptyNodeAt(oldVnode)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> oldElm = oldVnode.elm</span><br><span class="line">      <span class="keyword">const</span> parentElm = nodeOps.parentNode(oldElm)</span><br><span class="line"></span><br><span class="line">      createElm(</span><br><span class="line">        vnode,</span><br><span class="line">        insertedVnodeQueue,</span><br><span class="line">        oldElm._leaveCb ? <span class="literal">null</span> : parentElm,<span class="comment">// 在执行 leave 动效时不将 vnode 插入到 parentElm 中</span></span><br><span class="line">        nodeOps.nextSibling(oldElm)<span class="comment">// 使用兄弟节点锁定插入 parentElm 时的位置</span></span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      <span class="comment">// vnode.parent 查找模板节点</span></span><br><span class="line">      <span class="keyword">if</span> (isDef(vnode.parent)) &#123;</span><br><span class="line">        <span class="keyword">let</span> ancestor = vnode.parent</span><br><span class="line">        <span class="comment">// isPatchable 函数向上寻找非 keep-alive 组件，且须判断该组件对应的 vnode.tag 为已定义</span></span><br><span class="line">        <span class="comment">// patchable 意味着 keep-alive 组件下复用已缓存的某子组件</span></span><br><span class="line">        <span class="keyword">const</span> patchable = isPatchable(vnode)</span><br><span class="line">        <span class="keyword">while</span> (ancestor) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cbs.destroy.length; ++i) &#123;</span><br><span class="line">            cbs.destroy[i](ancestor)</span><br><span class="line">          &#125;</span><br><span class="line">          ancestor.elm = vnode.elm</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 渲染已缓存的某子组件</span></span><br><span class="line">          <span class="keyword">if</span> (patchable) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cbs.create.length; ++i) &#123;</span><br><span class="line">              cbs.create[i](emptyNode, ancestor)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">const</span> insert = ancestor.data.hook.insert</span><br><span class="line">            <span class="keyword">if</span> (insert.merged) &#123;</span><br><span class="line">              <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; insert.fns.length; i++) &#123;<span class="comment">// i 从 1 起始，避免执行组件的 mounted 钩子</span></span><br><span class="line">                insert.fns[i]()</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// registerRef 函数为外层组件实例 ancestor.context 设置 ref 引用</span></span><br><span class="line">            registerRef(ancestor)</span><br><span class="line">          &#125;</span><br><span class="line">          ancestor = ancestor.parent</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (isDef(parentElm)) &#123;</span><br><span class="line">        <span class="comment">// 移除原始节点</span></span><br><span class="line">        removeVnodes(parentElm, [oldVnode], <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldVnode.tag)) &#123;</span><br><span class="line">        <span class="comment">// 执行 destroy 平台钩子以及 vnode 钩子</span></span><br><span class="line">        invokeDestroyHook(oldVnode)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 只针对 createElm, hybrate 收集到插入情形</span></span><br><span class="line">  invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch)</span><br><span class="line">  <span class="keyword">return</span> vnode.elm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000008291645" target="_blank" rel="noopener">Vue原理解析之Virtual Dom</a><br><a href="https://github.com/ustbhuangyi/vue-analysis/blob/master/docs/components/patch.md" target="_blank" rel="noopener">patch</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 生命周期 - 组件挂载及更新</title>
    <url>/2019/05/29/frontend/vue/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-%E7%BB%84%E4%BB%B6%E6%8C%82%E8%BD%BD%E5%8F%8A%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<h2 id="挂载组件"><a href="#挂载组件" class="headerlink" title="挂载组件"></a>挂载组件</h2><p>在 <a href="http://xzfyu.com/2019/05/26/Vue/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B/">生命周期-创建实例</a> 一文中，我们了解到，vm.$mount 方法可用于挂载组件。vm.$mount 有两种使用场景：当开发者显式调用 new Vue(options) 语句构建 vm 实例时，vm.$mount 方法将在实例化过程的尾部得到调用；当从父模板解析并渲染出子组件时，vm.$mount 方法将在 createComponent 函数阶段由 Vue 框架内部调用。</p>
<p>vm.$mount 方法的实现按环境的不同有所差异，比如浏览器环境和 weex 环境。这里只描述浏览器环境中的组件挂载、卸载机制，至于 weex 环境下的组件挂载、卸载机制，笔者将在后续的文章加以展开。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  el?: string | Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line">  el = el &amp;&amp; inBrowser ? query(el) : <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">return</span> mountComponent(<span class="keyword">this</span>, el, hydrating)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="mountComponent"><a href="#mountComponent" class="headerlink" title="mountComponent"></a>mountComponent</h3><p>mountComponent 函数往前承接 vm.$mount 方法；在其实现中会构建 updateComponent 函数，用以约定 Watcher 实例将以何种方式监听 vm 实例的数据变化。初始化渲染阶段，直接使用 vm.<strong>patch</strong> 方法将 vnode 挂载到 vm.$el 父元素下，并构建新的 vm.$el；更新阶段，使用 vm.<strong>patch</strong> 方法追加补丁。vm.<strong>patch</strong> 方法取决于环境。整体过程如下：</p>
<ol>
<li>vm.$mount 根据客户端环境挂载组件。</li>
<li>mountComponent 构建 updateComponent 函数，初始化渲染和更新节点均通过 vm._update 将 vnode 装载到 vm.$el 文档父元素或模板父元素上。</li>
<li>绑定 vm.$el 和 vm 实例的相关关联。</li>
</ol>
<p>在这个过程中，Vue 会调用组件的 beforeMount, mounted, beforeCreate 生命周期钩子。</p>
<p>关于 vm.<strong>patch</strong> 方法的实现原理，笔者将在后续的文章加以介绍。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lifecycleMixin</span> (<span class="params">Vue: Class&lt;Component&gt;</span>) </span>&#123;</span><br><span class="line">  Vue.prototype._update = <span class="function"><span class="keyword">function</span> (<span class="params">vnode: VNode, hydrating?: boolean</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">const</span> prevEl = vm.$el</span><br><span class="line">    <span class="keyword">const</span> prevVnode = vm._vnode</span><br><span class="line">    <span class="keyword">const</span> restoreActiveInstance = setActiveInstance(vm)<span class="comment">// 记录当前实例</span></span><br><span class="line">    vm._vnode = vnode</span><br><span class="line">    <span class="keyword">if</span> (!prevVnode) &#123;</span><br><span class="line">      <span class="comment">// 初始化渲染，挂载到父元素 vm.$el 下，父元素相应改变</span></span><br><span class="line">      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, <span class="literal">false</span> <span class="comment">/* removeOnly */</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 更新节点，追加补丁</span></span><br><span class="line">      vm.$el = vm.__patch__(prevVnode, vnode)</span><br><span class="line">    &#125;</span><br><span class="line">    restoreActiveInstance()<span class="comment">// 恢复前一个实例，即父实例</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (prevEl) &#123;</span><br><span class="line">      prevEl.__vue__ = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (vm.$el) &#123;</span><br><span class="line">      vm.$el.__vue__ = vm</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HOC 组件通过子组件渲染内容，父组件渲染内容和子组件相等</span></span><br><span class="line">    <span class="keyword">if</span> (vm.$vnode &amp;&amp; vm.$parent &amp;&amp; vm.$vnode === vm.$parent._vnode) &#123;</span><br><span class="line">      vm.$parent.$el = vm.$el</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mountComponent</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  vm: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  el: ?Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line">  vm.$el = el<span class="comment">// 父节点元素</span></span><br><span class="line">  <span class="comment">// 渲染根节点或模板节点时，如 render 方法未解析到，报错处理</span></span><br><span class="line">  <span class="keyword">if</span> (!vm.$options.render) &#123;</span><br><span class="line">    vm.$options.render = createEmptyVNode</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((vm.$options.template &amp;&amp; vm.$options.template.charAt(<span class="number">0</span>) !== <span class="string">'#'</span>) ||</span><br><span class="line">        vm.$options.el || el) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">'You are using the runtime-only build of Vue where the template '</span> +</span><br><span class="line">          <span class="string">'compiler is not available. Either pre-compile the templates into '</span> +</span><br><span class="line">          <span class="string">'render functions, or use the compiler-included build.'</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">'Failed to mount component: template or render function not defined.'</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  callHook(vm, <span class="string">'beforeMount'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构架 updateComponent 函数，用于实际调用 vm._render 渲染函数</span></span><br><span class="line">  <span class="keyword">let</span> updateComponent</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class="line">    updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> name = vm._name</span><br><span class="line">      <span class="keyword">const</span> id = vm._uid</span><br><span class="line">      <span class="keyword">const</span> startTag = <span class="string">`vue-perf-start:<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line">      <span class="keyword">const</span> endTag = <span class="string">`vue-perf-end:<span class="subst">$&#123;id&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">      mark(startTag)</span><br><span class="line">      <span class="comment">// vm._render 在 [生命周期-创建实例](http://xzfyu.com/2019/05/26/Vue/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B/) 一文中有所描述</span></span><br><span class="line">      <span class="comment">// 主要用于解析插槽，调用 vm.$options.render 渲染出 vnode</span></span><br><span class="line">      <span class="keyword">const</span> vnode = vm._render()</span><br><span class="line">      mark(endTag)</span><br><span class="line">      measure(<span class="string">`vue <span class="subst">$&#123;name&#125;</span> render`</span>, startTag, endTag)</span><br><span class="line"></span><br><span class="line">      mark(startTag)</span><br><span class="line">      <span class="comment">// 通过 vm._update 完成初始化渲染和更新</span></span><br><span class="line">      vm._update(vnode, hydrating)</span><br><span class="line">      mark(endTag)</span><br><span class="line">      measure(<span class="string">`vue <span class="subst">$&#123;name&#125;</span> patch`</span>, startTag, endTag)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      vm._update(vm._render(), hydrating)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第一个参数表示 Watcher 实例关联的 vm 实例</span></span><br><span class="line">  <span class="comment">// 第二个参数 updateComponent 表示通过何种方式监听数据变动</span></span><br><span class="line">  <span class="comment">// 第三个参数 cb 作为回调，这里是空函数</span></span><br><span class="line">  <span class="comment">// 第四个参数 options 在 Watcher 实例执行前调用 options.before 方法</span></span><br><span class="line">  <span class="comment">// 第五个参数 isRenderWatcher 将 Watcher 实例赋值给 vm._watcher</span></span><br><span class="line">  <span class="keyword">new</span> Watcher(vm, updateComponent, noop, &#123;</span><br><span class="line">    before () &#123;</span><br><span class="line">      <span class="keyword">if</span> (vm._isMounted &amp;&amp; !vm._isDestroyed) &#123;</span><br><span class="line">        callHook(vm, <span class="string">'beforeUpdate'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="literal">true</span> <span class="comment">/* isRenderWatcher */</span>)</span><br><span class="line">  hydrating = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 针对手动创建的 Vue 实例，在父模板中占位节点 vm.$vnode 为空</span></span><br><span class="line">  <span class="comment">// 对于由父模板创建的实例，mounted 生命周期钩子在 insert 阶段调用，参考 create-component.js</span></span><br><span class="line">  <span class="keyword">if</span> (vm.$vnode == <span class="literal">null</span>) &#123;</span><br><span class="line">    vm._isMounted = <span class="literal">true</span></span><br><span class="line">    callHook(vm, <span class="string">'mounted'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="更新组件"><a href="#更新组件" class="headerlink" title="更新组件"></a>更新组件</h2><h3 id="vm-数据变更"><a href="#vm-数据变更" class="headerlink" title="vm 数据变更"></a>vm 数据变更</h3><p>mountComponent 一小节已表明，当 vm 实例数据发生改变时，通过 Watcher 会驱动 updateComponent 方法执行，以追加补丁的方式更新 vm.$el 挂载节点。</p>
<p>除此之外，Vue 像 React 那样提供了 vm.$forceUpdate 方法，该方法仍借助 Watcher 实例实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.prototype.$forceUpdate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">if</span> (vm._watcher) &#123;</span><br><span class="line">    vm._watcher.update()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="父组件注入数据变更"><a href="#父组件注入数据变更" class="headerlink" title="父组件注入数据变更"></a>父组件注入数据变更</h3><p>上一小节中的 vm 实例数据变更并不包含父组件注入子组件的数据发生变更。那么，当父组件注入子组件的数据发生变更时，Vue 会怎样处理呢？为此，Vue 提供了 updateChildComponent 函数用于刷新 vm 实例。这一 vm 实例刷新操作包含插槽数据发生变更、props 注入数据变更、或绑定事件发生变更等。至于更新 vm 实例后发生的事情，笔者也将在后续的文章中加以分析。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateChildComponent</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  vm: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  propsData: ?Object,</span></span></span><br><span class="line"><span class="function"><span class="params">  listeners: ?Object,</span></span></span><br><span class="line"><span class="function"><span class="params">  parentVnode: MountedComponentVNode,</span></span></span><br><span class="line"><span class="function"><span class="params">  renderChildren: ?Array&lt;VNode&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    isUpdatingChildComponent = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插槽的名称动态改变，采用强制重绘</span></span><br><span class="line">  <span class="keyword">const</span> newScopedSlots = parentVnode.data.scopedSlots</span><br><span class="line">  <span class="keyword">const</span> oldScopedSlots = vm.$scopedSlots</span><br><span class="line">  <span class="keyword">const</span> hasDynamicScopedSlot = !!(</span><br><span class="line">    (newScopedSlots &amp;&amp; !newScopedSlots.$stable) ||</span><br><span class="line">    (oldScopedSlots !== emptyObject &amp;&amp; !oldScopedSlots.$stable) ||</span><br><span class="line">    (newScopedSlots &amp;&amp; vm.$scopedSlots.$key !== newScopedSlots.$key)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> needsForceUpdate = !!(</span><br><span class="line">    renderChildren ||               <span class="comment">// has new static slots</span></span><br><span class="line">    vm.$options._renderChildren ||  <span class="comment">// has old static slots</span></span><br><span class="line">    hasDynamicScopedSlot</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  vm.$options._parentVnode = parentVnode</span><br><span class="line">  vm.$vnode = parentVnode <span class="comment">// update vm's placeholder node without re-render</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (vm._vnode) &#123; <span class="comment">// update child tree's parent</span></span><br><span class="line">    vm._vnode.parent = parentVnode</span><br><span class="line">  &#125;</span><br><span class="line">  vm.$options._renderChildren = renderChildren</span><br><span class="line"></span><br><span class="line">  vm.$attrs = parentVnode.data.attrs || emptyObject</span><br><span class="line">  vm.$listeners = listeners || emptyObject</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新 props</span></span><br><span class="line">  <span class="keyword">if</span> (propsData &amp;&amp; vm.$options.props) &#123;</span><br><span class="line">    toggleObserving(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">const</span> props = vm._props</span><br><span class="line">    <span class="keyword">const</span> propKeys = vm.$options._propKeys || []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; propKeys.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> key = propKeys[i]</span><br><span class="line">      <span class="keyword">const</span> propOptions: any = vm.$options.props <span class="comment">// wtf flow?</span></span><br><span class="line">      props[key] = validateProp(key, propOptions, propsData, vm)</span><br><span class="line">    &#125;</span><br><span class="line">    toggleObserving(<span class="literal">true</span>)</span><br><span class="line">    vm.$options.propsData = propsData</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新绑定事件</span></span><br><span class="line">  listeners = listeners || emptyObject</span><br><span class="line">  <span class="keyword">const</span> oldListeners = vm.$options._parentListeners</span><br><span class="line">  vm.$options._parentListeners = listeners</span><br><span class="line">  updateComponentListeners(vm, listeners, oldListeners)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (needsForceUpdate) &#123;</span><br><span class="line">    vm.$slots = resolveSlots(renderChildren, parentVnode.context)</span><br><span class="line">    vm.$forceUpdate()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    isUpdatingChildComponent = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="卸载组件"><a href="#卸载组件" class="headerlink" title="卸载组件"></a>卸载组件</h2><p>vm.$destroy 方法主要用于重置状态数据、清除数据、解绑事件，以及将渲染内容从父节点中移除等。至于 vm.$destroy 方法由哪一方发起调用，笔者也将在后续的文章中加以分析。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.prototype.$destroy = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">if</span> (vm._isBeingDestroyed) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    callHook(vm, <span class="string">'beforeDestroy'</span>)</span><br><span class="line">    vm._isBeingDestroyed = <span class="literal">true</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> parent = vm.$parent</span><br><span class="line">    <span class="keyword">if</span> (parent &amp;&amp; !parent._isBeingDestroyed &amp;&amp; !vm.$options.abstract) &#123;</span><br><span class="line">      remove(parent.$children, vm)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (vm._watcher) &#123;</span><br><span class="line">      vm._watcher.teardown()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> i = vm._watchers.length</span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">      vm._watchers[i].teardown()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (vm._data.__ob__) &#123;</span><br><span class="line">      vm._data.__ob__.vmCount--</span><br><span class="line">    &#125;</span><br><span class="line">    vm._isDestroyed = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// invoke destroy hooks on current rendered tree</span></span><br><span class="line">    vm.__patch__(vm._vnode, <span class="literal">null</span>)</span><br><span class="line">    callHook(vm, <span class="string">'destroyed'</span>)</span><br><span class="line">    vm.$off()</span><br><span class="line">    <span class="keyword">if</span> (vm.$el) &#123;</span><br><span class="line">      vm.$el.__vue__ = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (vm.$vnode) &#123;</span><br><span class="line">      vm.$vnode.parent = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>frontend</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 生命周期 - 创建实例</title>
    <url>/2019/05/26/frontend/vue/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-%E5%88%9B%E5%BB%BA%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<img src="/2019/05/26/frontend/vue/生命周期-创建实例/lifecycle.png">
<p>对应上图前半部分，当执行 new Vue(options) 语句创建 vm 实例（即 Vue 实例）时，在 Vue 框架内到底发生了什么呢？为此，我们简要地把执行过程小结为如下步骤：</p>
<ol>
<li>解析 options 配置项。</li>
<li>通过 initProxy 函数构建 vm 代理，其将作为模板渲染函数的参数，而不是 vm 实例。</li>
<li>通过 initLifecycle 函数初始化设置生命周期相关实例属性。</li>
<li>通过 initEvents 绑定父组件传入的事件。</li>
<li>通过 initRender 解析插槽，父组件传入的数据，创建 createElement 方法等。</li>
<li>执行 beforeCreate 生命周期方法。</li>
<li>通过 initInjections 解析 inject。</li>
<li>通过 initState 初始化 props, methods, data, computed, watch。</li>
<li>通过 initProvide 解析 provide。</li>
<li>执行 created 生命周期方法。</li>
<li>在 1-10 步骤执行过程中，使用 performance 接口记录耗时。</li>
<li>若 options.el 为真值，通过 vm.$mount 方法挂载组件。</li>
</ol>
<p>下面，我们将以上步骤拆解了看。</p>
<h2 id="解析选项"><a href="#解析选项" class="headerlink" title="解析选项"></a>解析选项</h2><p>创建 vm 实例有两种方式：显式调用 new Vue(options) 语句或者解析模板中组件形式的自定义元素。解析选项按这两种方式分为两种可能。我们将这两种方式分为如下两个小节：显式构建组件、解析模板组件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解析模板组件</span></span><br><span class="line"><span class="keyword">if</span> (options &amp;&amp; options._isComponent) &#123;</span><br><span class="line">  initInternalComponent(vm, options)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显式构建组件</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  vm.$options = mergeOptions(</span><br><span class="line">    resolveConstructorOptions(vm.constructor),</span><br><span class="line">    options || &#123;&#125;,</span><br><span class="line">    vm</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如 mergeOptions 函数所展示的那样，options 包含 props, methods, inject, computed, data, provider, watch, el, propsData，以及 beforeCreate 等生命周期钩子函数，以及 components 组件, directives 指令, filters 过滤器。props 声明父子组件通信的 key 键；methods 组件中所使用的方法；inject 用于组件跨级通信接值；computed 为计算属性。data 响应式数据；provider 用于组件跨级通信传值，响应式；watch 以键作为观察的数据 key，监听数据变化；el 与 propsData 等同，等价于父组件传入子组件的 prop 值。beforeCreate 等生命周期钩子函数可以使用数组形式或构造函数预先声明的方式声明多个。</p>
<h3 id="显式构建组件"><a href="#显式构建组件" class="headerlink" title="显式构建组件"></a>显式构建组件</h3><img src="/2019/05/26/frontend/vue/生命周期-创建实例/new_Vue.png">
<p>new Vue(options) 语句处理 options 选项的大致逻辑如上图：即把 Vue 或自定义构造函数的 options 静态属性混入实例的显式 options 配置中，以此获得实例最终的 options 属性。有两个过程需要加以说明：Vue 或自定义构造函数的 options 因何而来？实例最终的 options 属性怎样产生？</p>
<p>对于第一个过程，Vue 会通过 initAssetRegisters 函数生成 Vue.component, Vue.directive, Vue.filter 方法，这些方法可用于注册全局组件、指令和过滤器。而全局组件、指令或过滤器正是通过 Vue.options.components 等属性存储的。这样就可以把这些全局组件、指令和过滤器作为某个特定组件的依赖项。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ASSET_TYPES = [</span><br><span class="line">  <span class="string">'component'</span>,</span><br><span class="line">  <span class="string">'directive'</span>,</span><br><span class="line">  <span class="string">'filter'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成 Vue.component, Vue.directive, Vue.filter 注册方法</span></span><br><span class="line">initAssetRegisters (Vue: GlobalAPI) &#123;</span><br><span class="line">  ASSET_TYPES.forEach(<span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">    Vue[type] = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">      id: string,</span></span></span><br><span class="line"><span class="function"><span class="params">      definition: Function | Object</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>): <span class="title">Function</span> | <span class="title">Object</span> | <span class="title">void</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!definition) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.options[type + <span class="string">'s'</span>][id]</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; type === <span class="string">'component'</span>) &#123;</span><br><span class="line">          validateComponentName(id)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (type === <span class="string">'component'</span> &amp;&amp; isPlainObject(definition)) &#123;</span><br><span class="line">          definition.name = definition.name || id</span><br><span class="line">          definition = <span class="keyword">this</span>.options._base.extend(definition)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (type === <span class="string">'directive'</span> &amp;&amp; <span class="keyword">typeof</span> definition === <span class="string">'function'</span>) &#123;</span><br><span class="line">          definition = &#123; <span class="attr">bind</span>: definition, <span class="attr">update</span>: definition &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.options[type + <span class="string">'s'</span>][id] = definition</span><br><span class="line">        <span class="keyword">return</span> definition</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>除此而外，Vue.mixin 方法用于扩展 Vue.options 属性，这样就便于一次性注册全局组件、指令或过滤器。Vue.extend(extendOptions) 方法用于构造子类，该子类犹如工厂，可以批量生产含有特定 options 的组件；extendOptions 可包含 prop 和计算属性等。特别的，当 extendOptions 为对象变量时，Vue 会将子类工厂缓存到该对象变量的 _Ctor 属性中，方便下次直接获取。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 扩展 Vue.options</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initMixin</span> (<span class="params">Vue: GlobalAPI</span>) </span>&#123;</span><br><span class="line">  Vue.mixin = <span class="function"><span class="keyword">function</span> (<span class="params">mixin: Object</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.options = mergeOptions(<span class="keyword">this</span>.options, mixin)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initExtend</span> (<span class="params">Vue: GlobalAPI</span>) </span>&#123;</span><br><span class="line">  Vue.cid = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> cid = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  Vue.extend = <span class="function"><span class="keyword">function</span> (<span class="params">extendOptions: Object</span>): <span class="title">Function</span> </span>&#123;</span><br><span class="line">    extendOptions = extendOptions || &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> Super = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">const</span> SuperId = Super.cid</span><br><span class="line">    <span class="keyword">const</span> cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = &#123;&#125;)</span><br><span class="line">    <span class="keyword">if</span> (cachedCtors[SuperId]) &#123;</span><br><span class="line">      <span class="keyword">return</span> cachedCtors[SuperId]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> name = extendOptions.name || Super.options.name</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; name) &#123;</span><br><span class="line">      validateComponentName(name)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Sub = <span class="function"><span class="keyword">function</span> <span class="title">VueComponent</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>._init(options)</span><br><span class="line">    &#125;</span><br><span class="line">    Sub.prototype = <span class="built_in">Object</span>.create(Super.prototype)</span><br><span class="line">    Sub.prototype.constructor = Sub</span><br><span class="line">    Sub.cid = cid++</span><br><span class="line">    Sub.options = mergeOptions(</span><br><span class="line">      Super.options,</span><br><span class="line">      extendOptions</span><br><span class="line">    )</span><br><span class="line">    Sub[<span class="string">'super'</span>] = Super</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 props、计算属性</span></span><br><span class="line">    <span class="keyword">if</span> (Sub.options.props) &#123;</span><br><span class="line">      initProps(Sub)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Sub.options.computed) &#123;</span><br><span class="line">      initComputed(Sub)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Sub.extend = Super.extend</span><br><span class="line">    Sub.mixin = Super.mixin</span><br><span class="line">    Sub.use = Super.use</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成 Sub.component, Sub.directive, Sub.filter 注册方法</span></span><br><span class="line">    ASSET_TYPES.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">type</span>) </span>&#123;</span><br><span class="line">      Sub[type] = Super[type]</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (name) &#123;</span><br><span class="line">      Sub.options.components[name] = Sub</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Sub.superOptions = Super.options<span class="comment">// 父类 options</span></span><br><span class="line">    Sub.extendOptions = extendOptions<span class="comment">// 自定义 options</span></span><br><span class="line">    Sub.sealedOptions = extend(&#123;&#125;, Sub.options)<span class="comment">// 综合 options 备份</span></span><br><span class="line"></span><br><span class="line">    cachedCtors[SuperId] = Sub</span><br><span class="line">    <span class="keyword">return</span> Sub</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initProps</span> (<span class="params">Comp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> props = Comp.options.props</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> props) &#123;</span><br><span class="line">    proxy(Comp.prototype, <span class="string">`_props`</span>, key)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initComputed</span> (<span class="params">Comp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> computed = Comp.options.computed</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> computed) &#123;</span><br><span class="line">    defineComputed(Comp.prototype, key, computed[key])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于第二个过程，Vue 提供 resolveConstructorOptions 函数，用于向上递归获取构造函数携带的 options 属性，并将其与构造实例时获得的 options 选项混合，最终生成 vm 实例的 options 属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveConstructorOptions</span> (<span class="params">Ctor: Class&lt;Component&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> options = Ctor.options</span><br><span class="line">  <span class="keyword">if</span> (Ctor.super) &#123;</span><br><span class="line">    <span class="comment">// 递归获取父级构造函数的 options，这里考虑了父级构造函数的 options 变更的情况</span></span><br><span class="line">    <span class="keyword">const</span> superOptions = resolveConstructorOptions(Ctor.super)</span><br><span class="line">    <span class="keyword">const</span> cachedSuperOptions = Ctor.superOptions</span><br><span class="line">    <span class="keyword">if</span> (superOptions !== cachedSuperOptions) &#123;</span><br><span class="line">      Ctor.superOptions = superOptions</span><br><span class="line"></span><br><span class="line">      <span class="comment">// https://github.com/vuejs/vue/issues/4976</span></span><br><span class="line">      <span class="comment">// 避免延迟注入构造函数的 options 引发 bug？？？</span></span><br><span class="line">      <span class="keyword">const</span> modifiedOptions = resolveModifiedOptions(Ctor)</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (modifiedOptions) &#123;</span><br><span class="line">        extend(Ctor.extendOptions, modifiedOptions)</span><br><span class="line">      &#125;</span><br><span class="line">      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions)</span><br><span class="line">      <span class="keyword">if</span> (options.name) &#123;</span><br><span class="line">        options.components[options.name] = Ctor</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> options</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveModifiedOptions</span> (<span class="params">Ctor: Class&lt;Component&gt;</span>): ?<span class="title">Object</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> modified</span><br><span class="line">  <span class="keyword">const</span> latest = Ctor.options</span><br><span class="line">  <span class="keyword">const</span> sealed = Ctor.sealedOptions</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> latest) &#123;</span><br><span class="line">    <span class="keyword">if</span> (latest[key] !== sealed[key]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!modified) modified = &#123;&#125;</span><br><span class="line">      modified[key] = latest[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> modified</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解析模板组件"><a href="#解析模板组件" class="headerlink" title="解析模板组件"></a>解析模板组件</h3><p>在 Vue 中，父组件模板会被解析成虚拟 dom（即 vNode）。该 vNode 包含当前组件的构造函数、以及通过模板注入的数据和绑定函数等信息。在此基础上，Vue 就可以对子组件进行实例化了。这一过程可以称为 Vue 组建的内部实例化过程。区别于显式实例化，Vue 会把 options._isComponent 置为真值，以此标明这是内部实例化过程。同时，在内部实例化的过程中，Vue 会把从模板中解析到的配置信息传入 vm.$options 终极选项中，如 options._parentVnode 当前组件在父组件中的占位节点、options.parent 父组件实例、options.render 渲染函数、options._parentListeners 子组件绑定的事件信息、options._renderChildren 子组件包含的下级节点。有了这些从父组件模板中透传过来的信息以后，Vue 就可以在实例化过程中消费这些数据，笔者将在下文予以展开。</p>
<p>以下是内部实例化过程中生成最终选项 vm.$options 的源码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initInternalComponent</span> (<span class="params">vm: Component, options: InternalComponentOptions</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> opts = vm.$options = <span class="built_in">Object</span>.create(vm.constructor.options)<span class="comment">// 构造函数中携带的选项</span></span><br><span class="line">  <span class="keyword">const</span> parentVnode = options._parentVnode<span class="comment">// 组件在父组件模板的占位节点</span></span><br><span class="line">  opts.parent = options.parent<span class="comment">// 父组件实例</span></span><br><span class="line">  opts._parentVnode = parentVnode</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> vnodeComponentOptions = parentVnode.componentOptions</span><br><span class="line">  opts.propsData = vnodeComponentOptions.propsData<span class="comment">// 父组件传入的 props 数据</span></span><br><span class="line">  opts._parentListeners = vnodeComponentOptions.listeners<span class="comment">// 父组件传入的绑定事件</span></span><br><span class="line">  opts._renderChildren = vnodeComponentOptions.children<span class="comment">// 父组件传入的 children</span></span><br><span class="line">  opts._componentTag = vnodeComponentOptions.tag<span class="comment">// 组件的 tag</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 渲染函数</span></span><br><span class="line">  <span class="keyword">if</span> (options.render) &#123;</span><br><span class="line">    opts.render = options.render</span><br><span class="line">    opts.staticRenderFns = options.staticRenderFns</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="initProxy"><a href="#initProxy" class="headerlink" title="initProxy"></a>initProxy</h2><p>有了上一小节的 vm.$options.render 方法（从父组件模板中解析到子组件渲染函数），Vue 仍需要将 vm 实例作为执行上下文灌入到 render 方法中，以使 render 方法执行期间可以访问到 vm 实例的属性或方法。为什么要构建 vm 实例的代理呢？当 render 方法访问 vm 实例不存在的属性时，通过 vm 代理就可以予以提示。详情参阅源码。</p>
<h2 id="initLifecycle"><a href="#initLifecycle" class="headerlink" title="initLifecycle"></a>initLifecycle</h2><p>initLifecycle 主要用于创建生命周期相关属性。源码见下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initLifecycle</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> options = vm.$options</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取非抽象父组件</span></span><br><span class="line">  <span class="keyword">let</span> parent = options.parent</span><br><span class="line">  <span class="keyword">if</span> (parent &amp;&amp; !options.abstract) &#123;</span><br><span class="line">    <span class="keyword">while</span> (parent.$options.abstract &amp;&amp; parent.$parent) &#123;</span><br><span class="line">      parent = parent.$parent</span><br><span class="line">    &#125;</span><br><span class="line">    parent.$children.push(vm)<span class="comment">// 作为子组件</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  vm.$parent = parent<span class="comment">// 父组件</span></span><br><span class="line">  vm.$root = parent ? parent.$root : vm<span class="comment">// 根组件</span></span><br><span class="line"></span><br><span class="line">  vm.$children = []</span><br><span class="line">  vm.$refs = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  vm._watcher = <span class="literal">null</span></span><br><span class="line">  vm._inactive = <span class="literal">null</span></span><br><span class="line">  vm._directInactive = <span class="literal">false</span></span><br><span class="line">  vm._isMounted = <span class="literal">false</span><span class="comment">// 是否挂载</span></span><br><span class="line">  vm._isDestroyed = <span class="literal">false</span><span class="comment">// 是否销毁</span></span><br><span class="line">  vm._isBeingDestroyed = <span class="literal">false</span><span class="comment">// 是否开始销毁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="initEvents"><a href="#initEvents" class="headerlink" title="initEvents"></a>initEvents</h2><p>首先 Vue 通过 eventsMixin 自建事件系统 vm.$on, vm.$.once, vm.$off, vm.$emit。事件的绑定函数以对象数组的形式存储在 vm._events 属性中。结合解析模板组件一节由父组件模板配置的 options._parentListeners 信息，Vue 中的 initEvents 方法可用于更新 vm 实例上挂载的事件处理函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initEvents</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  vm._events = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">  vm._hasHookEvent = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">const</span> listeners = vm.$options._parentListeners</span><br><span class="line">  <span class="keyword">if</span> (listeners) &#123;</span><br><span class="line">    <span class="comment">// 更新绑定函数</span></span><br><span class="line">    updateComponentListeners(vm, listeners)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="initRender"><a href="#initRender" class="headerlink" title="initRender"></a>initRender</h2><p>initRender 用于解析插槽 vm.$slots（与 React 中 props.chidren 同等功用，但能传多个），创建 vm._c, vm.$createElement 方法用于为子组件构建 vnode，同时将从父模板中注入的节点属性或事件存储为响应式数据 vm.$attrs, vm.$listeners。有了 vm.$createElement 方法后，原型方法 vm._render 就能实际调用 vm.$options.render.call(vm._renderProxy, vm.$createElement) 方法了，进而实现将模板真正解析为 vnode。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initRender</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  vm._vnode = <span class="literal">null</span> <span class="comment">// 当前组件的节点树根元素</span></span><br><span class="line">  vm._staticTrees = <span class="literal">null</span> <span class="comment">// 当前组件的节点树</span></span><br><span class="line">  <span class="keyword">const</span> options = vm.$options</span><br><span class="line">  <span class="keyword">const</span> parentVnode = vm.$vnode = options._parentVnode <span class="comment">// 当前组件在父模板中的占位节点</span></span><br><span class="line">  <span class="keyword">const</span> renderContext = parentVnode &amp;&amp; parentVnode.context</span><br><span class="line">  vm.$slots = resolveSlots(options._renderChildren, renderContext)<span class="comment">// 解析插槽</span></span><br><span class="line">  vm.$scopedSlots = emptyObject</span><br><span class="line">  <span class="comment">// 创建 vnode 的内部方法，解析父模板后由 Vue 自动调用</span></span><br><span class="line">  <span class="comment">// 参数依次为 vm 实例、tag 节点标签、data 父模板传入数据、children 父模板传入的子节点、</span></span><br><span class="line">  <span class="comment">//    normalizationType 序列化子节点的方式，alwaysNormalize 是否需要序列化子节点</span></span><br><span class="line">  vm._c = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class="literal">false</span>)</span><br><span class="line">  <span class="comment">// 创建 vnode 的公共方法，当开发者显式执行 new Vue 语句时调用</span></span><br><span class="line">  vm.$createElement = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过父模板绑定的属性值</span></span><br><span class="line">  <span class="keyword">const</span> parentData = parentVnode &amp;&amp; parentVnode.data</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    defineReactive(vm, <span class="string">'$attrs'</span>, parentData &amp;&amp; parentData.attrs || emptyObject, () =&gt; &#123;</span><br><span class="line">      !isUpdatingChildComponent &amp;&amp; warn(<span class="string">`$attrs is readonly.`</span>, vm)</span><br><span class="line">    &#125;, <span class="literal">true</span>)</span><br><span class="line">    defineReactive(vm, <span class="string">'$listeners'</span>, options._parentListeners || emptyObject, () =&gt; &#123;</span><br><span class="line">      !isUpdatingChildComponent &amp;&amp; warn(<span class="string">`$listeners is readonly.`</span>, vm)</span><br><span class="line">    &#125;, <span class="literal">true</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    defineReactive(vm, <span class="string">'$attrs'</span>, parentData &amp;&amp; parentData.attrs || emptyObject, <span class="literal">null</span>, <span class="literal">true</span>)</span><br><span class="line">    defineReactive(vm, <span class="string">'$listeners'</span>, options._parentListeners || emptyObject, <span class="literal">null</span>, <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析插槽，将父模板中灌入子组件的 children 解析为 slots 对象或 slots.default 数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveSlots</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  children: ?Array&lt;VNode&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  context: ?Component</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): </span>&#123; [key: string]: <span class="built_in">Array</span>&lt;VNode&gt; &#125; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!children || !children.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> slots = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = children.length; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> child = children[i]</span><br><span class="line">    <span class="keyword">const</span> data = child.data</span><br><span class="line">    <span class="keyword">if</span> (data &amp;&amp; data.attrs &amp;&amp; data.attrs.slot) &#123;</span><br><span class="line">      <span class="keyword">delete</span> data.attrs.slot</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((child.context === context || child.fnContext === context) &amp;&amp;</span><br><span class="line">      data &amp;&amp; data.slot != <span class="literal">null</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">const</span> name = data.slot</span><br><span class="line">      <span class="keyword">const</span> slot = (slots[name] || (slots[name] = []))</span><br><span class="line">      <span class="keyword">if</span> (child.tag === <span class="string">'template'</span>) &#123;</span><br><span class="line">        slot.push.apply(slot, child.children || [])</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        slot.push(child)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      (slots.default || (slots.default = [])).push(child)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> name <span class="keyword">in</span> slots) &#123;</span><br><span class="line">    <span class="keyword">if</span> (slots[name].every(isWhitespace)) &#123;</span><br><span class="line">      <span class="keyword">delete</span> slots[name]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> slots</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isWhitespace</span> (<span class="params">node: VNode</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (node.isComment &amp;&amp; !node.asyncFactory) || node.text === <span class="string">' '</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="initInjections、initProvide"><a href="#initInjections、initProvide" class="headerlink" title="initInjections、initProvide"></a>initInjections、initProvide</h2><p>vm.$options.provide，vm.$options.inject 辅助于组件之间跨级传递数据。provide 约定祖先组件传给子孙组件的数据，inject 约定子孙组件接受祖先组件的哪些数据。initProvide 函数用于将 vm.$options.provide 以实际数据的形式写入 vm._provided；initInjections 函数先解析到当前组件实际需要从祖先组件获得的数据或默认数据，然后将这部分数据以响应式数据形式写入 vm 实例属性中，以在数据变更时可引起重绘。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initProvide</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> provide = vm.$options.provide</span><br><span class="line">  <span class="keyword">if</span> (provide) &#123;</span><br><span class="line">    vm._provided = <span class="keyword">typeof</span> provide === <span class="string">'function'</span></span><br><span class="line">      ? provide.call(vm)</span><br><span class="line">      : provide</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initInjections</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = resolveInject(vm.$options.inject, vm)</span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    toggleObserving(<span class="literal">false</span>)</span><br><span class="line">    <span class="built_in">Object</span>.keys(result).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">        defineReactive(vm, key, result[key], () =&gt; &#123;</span><br><span class="line">          warn(</span><br><span class="line">            <span class="string">`Avoid mutating an injected value directly since the changes will be `</span> +</span><br><span class="line">            <span class="string">`overwritten whenever the provided component re-renders. `</span> +</span><br><span class="line">            <span class="string">`injection being mutated: "<span class="subst">$&#123;key&#125;</span>"`</span>,</span><br><span class="line">            vm</span><br><span class="line">          )</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        defineReactive(vm, key, result[key])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    toggleObserving(<span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得从祖先组件传入的数据或者取默认值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveInject</span> (<span class="params">inject: any, vm: Component</span>): ?<span class="title">Object</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (inject) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">const</span> keys = hasSymbol</span><br><span class="line">      ? <span class="built_in">Reflect</span>.ownKeys(inject)</span><br><span class="line">      : <span class="built_in">Object</span>.keys(inject)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> key = keys[i]</span><br><span class="line">      <span class="comment">// #6574 in case the inject object is observed...</span></span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">'__ob__'</span>) <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">const</span> provideKey = inject[key].from</span><br><span class="line">      <span class="keyword">let</span> source = vm</span><br><span class="line">      <span class="keyword">while</span> (source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source._provided &amp;&amp; hasOwn(source._provided, provideKey)) &#123;</span><br><span class="line">          result[key] = source._provided[provideKey]</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        source = source.$parent</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'default'</span> <span class="keyword">in</span> inject[key]) &#123;</span><br><span class="line">          <span class="keyword">const</span> provideDefault = inject[key].default</span><br><span class="line">          result[key] = <span class="keyword">typeof</span> provideDefault === <span class="string">'function'</span></span><br><span class="line">            ? provideDefault.call(vm)</span><br><span class="line">            : provideDefault</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">          warn(<span class="string">`Injection "<span class="subst">$&#123;key&#125;</span>" not found`</span>, vm)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="initState"><a href="#initState" class="headerlink" title="initState"></a>initState</h2><p>initState 函数用于依次初始化 vm 实例的 props, methods, data, computed, watch 相关信息。其中，在 key 键不冲突的理想状况下，props, methods, data, computed 中的子属性都可以通过 vm 实例进行访问。关于这部分内容，笔者将在后续的文章中加以分析。</p>
<h2 id="vm-mount"><a href="#vm-mount" class="headerlink" title="vm.$mount"></a>vm.$mount</h2><p>当 vm.$options.el 为真值时，创建 vm 实例的过程中将会显式调用 vm.$mount 挂载组件。对于从模板中解析渲染的 vm 实例，将由 Vue 框架调用 vm.$mount 方法挂载组件。参考 <a href="http://xzfyu.com/2019/05/29/Vue/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-%E7%BB%84%E4%BB%B6%E6%8C%82%E8%BD%BD%E5%8F%8A%E6%9B%B4%E6%96%B0/">Vue 生命周期 - 组件挂载及更新</a>。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>集合</title>
    <url>/2019/05/13/backend/java/%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<p>同大多数数据结构类库相同，Java 集合类库在设计上采用接口（interface）和实现（implementation）分离的模式。在强类型语言中，接口和实现的分离有利于在声明实例时切换实现类。Java 核心技术卷以先进先出队列 Queue 接口为例，既可以用循环数组 CircuralArrayQueue 形式实现，又可以用链表 LinkedListQueue 形式实现。循环数组比链表更高效，但是长度受限。在声明实例时，我们可以按条件使用循环数组 Queue<customer> expressLane = new CircuralArrayQueue&lt;&gt;() 或者使用 Queue<customer> expressLane = new LinkedListQueue&lt;&gt;()。同时设计者会制作 AbstractQueue 抽象类，以方便类库制作者快速实现自己的队列类，因为扩展 AbstractQueue 抽象类会比实现 Queue 接口轻松得多。</customer></customer></p>
<p>Java 集合类库的实现结构为：</p>
<img src="/2019/05/13/backend/java/集合/collection.gif">
<p>Java 集合框架有两个基本接口：集合 Collection 和映射 Map。集合使用 add, remove 添加或移除元素，通过迭代器读取元素；映射使用 put 添加元素，get 读取元素。在 Collection, Map 之外，List 有序集合接口允许以索引形式访问元素；Set 接口不能有重复的元素，对于元素相同的两个 Set 需要保证 hashCode 方法会返回相同的散列码；SortedSet, SortedMap 均提供了用于排序的比较器对象；NavigableSet, NavigableMap 均提供了用于搜索和遍历的方法。</p>
<p>具体的集合类大致如下：</p>
<ul>
<li>ArrayList 可动态增长和缩减的索引序列</li>
<li>LinkedList 可在任何位置高效插人和删除元素的有序序列</li>
<li>HashSet 没有重复元素的无序集合</li>
<li>TreeSet 有序集合</li>
<li>EnumSet 包含枚举类型值的集合</li>
<li>LinkedHashSet 可记住元素插入次序的集合</li>
<li>HashMap 存储键值对的映射表</li>
<li>TreeMap 键值有序排列的映射表</li>
<li>EnumMap 键值属于枚举类型的映射表</li>
<li>LinkedHashMap 可记住键值对添加次序的映射表</li>
<li>WeakHashMap 其值无用武之地后可被垃圾回收的映射表</li>
<li>IdentityHashMap 用 = 而不是用 equals 比较键值的映射表</li>
<li>PriorityQueue 允许高效删除最小元素的集合</li>
<li>ArrayDeque 用循环数组实现的双端队列</li>
</ul>
<h2 id="基础支撑"><a href="#基础支撑" class="headerlink" title="基础支撑"></a>基础支撑</h2><h3 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h3><p>迭代器可用于遍历元素。元素被访问的顺序取决于集合的实现类，如 ArrayList 支持从索引 0 位置的有序访问；HashSet 支持无序访问。在 Java 中，查找操作与位置变更紧密关联，只能调用 next 方法逐个访问元素；C++ 中，迭代器根据数组索引建模，通过变更索引就可以访问特定的元素。</p>
<ul>
<li>hasNext 判断集合中是否还有剩余的元素</li>
<li>next 逐个访问元素</li>
<li>remove 删除上次调用 next 方法访问的元素</li>
<li>forEachRemaining 使用 lambda 表达式逐个处理元素</li>
</ul>
<p>但凡实现了 Iterable 接口的类都支持使用 for each 语句循环，因此标准集合类库都允许使用 for each 语句循环。在实现了 Iterable 接口的类中，iterator 方法用于迭代器；forEach 方法可以使用 lambda 表达式逐个处理元素；spliterator 方法用于创建一个可分割迭代器，以支持并行遍历。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">for</span> (T t : <span class="keyword">this</span>) &#123;</span><br><span class="line">            action.accept(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> Spliterator&lt;T&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Spliterators.spliteratorUnknownSize(iterator(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ListIterator"><a href="#ListIterator" class="headerlink" title="ListIterator"></a>ListIterator</h3><p>首先需要说明的是，Java 以双向链表的形式实现 List。因为双向链表比起数组具有如下优点：在指定位置插入元素时，数组需要移动该位置后的元素，双向链表不需要；删除元素时也相同。因为是双向链表，ListIterator 支持反向遍历元素。</p>
<ul>
<li>hasNext 判断集合中是否还有剩余的元素</li>
<li>next 逐个访问元素</li>
<li>hasPrevious 判断集合中是否还有打头的元素</li>
<li>previous 反向逐个访问元素</li>
<li>remove 基于遍历的方向删除元素</li>
<li>set(e) 修改当前访问的元素</li>
<li>add(e) 基于当前访问的元素位置插入元素</li>
</ul>
<h3 id="Spliterator"><a href="#Spliterator" class="headerlink" title="Spliterator"></a>Spliterator</h3><p>Spliterator 分割迭代器用于分割遍历数据，可分割的数据包含数组、集合、IO 通道、生成器函数。Spliterator.OfPrimitive, Spliterator.OfInt, Spliterator.OfLong, Spliterator.OfDouble 是半指定或全指定类型的分割迭代器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Spliterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 使用 lambda 表达式逐个处理元素</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">do</span> &#123; &#125; <span class="keyword">while</span> (tryAdvance(action));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 估算剩余元素</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">estimateSize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 Spliterator 分割成小的 Spliterator，原始 Spliterator 的大小相应改变，分割的方式取决于实现类</span></span><br><span class="line">    <span class="function">Spliterator&lt;T&gt; <span class="title">trySplit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当迭代器拥有 SIZED 特征时，返回剩余元素个数；否则返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">long</span> <span class="title">getExactSizeIfKnown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (characteristics() &amp; SIZED) == <span class="number">0</span> ? -<span class="number">1L</span> : estimateSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 包含哪些特征</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">characteristics</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 是否具有某特征</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">hasCharacteristics</span><span class="params">(<span class="keyword">int</span> characteristics)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (characteristics() &amp; characteristics) == characteristics;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 特征</span></span><br><span class="line">    <span class="comment">// 元素是否有序，可以用索引访问元素，如 List</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ORDERED    = <span class="number">0x00000010</span>;</span><br><span class="line">    <span class="comment">// 元素是否唯一，如 Set</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DISTINCT   = <span class="number">0x00000001</span>;</span><br><span class="line">    <span class="comment">// 元素是否有序排列，如 SortedSet</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SORTED     = <span class="number">0x00000004</span>;</span><br><span class="line">    <span class="comment">// 是否有大小，大多数集合都可以计算大小，HashSet 不能？</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZED      = <span class="number">0x00000040</span></span><br><span class="line">    <span class="comment">// 元素不能为 null</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NONNULL    = <span class="number">0x00000100</span>;</span><br><span class="line">    <span class="comment">// 元素是否可修改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IMMUTABLE  = <span class="number">0x00000400</span>;</span><br><span class="line">    <span class="comment">// 可否并行处理。可并行处理不具备线程安全，其大小在另一个线程中可能被修改，因此也不具备 SIZED 特征</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONCURRENT = <span class="number">0x00001000</span>;</span><br><span class="line">    <span class="comment">// 使用 trySplit 分割出来的子迭代器都具有 SIZED, SUBSIZED 特征</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SUBSIZED = <span class="number">0x00004000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回 Comparator 排序方式；自然排序返回 null；不支持排序报错</span></span><br><span class="line">    <span class="keyword">default</span> Comparator&lt;? <span class="keyword">super</span> T&gt; getComparator() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h3><h3 id="Cloneable"><a href="#Cloneable" class="headerlink" title="Cloneable"></a>Cloneable</h3><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>Collection 和 Iterator 都是泛型接口，内含操作任意集合的实用方法。为了实现 Collection 接口的方便，java.util 提供了 AbstractCollection 抽象类，以抽象常见的处理逻辑。</p>
<img src="/2019/05/13/backend/java/集合/Collection.png">
<p>AbstractCollection 抽象类实现了 finishToArray, hugeCapacity 方法可用于辅助扩容。</p>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>List 接口最大的特征是可以借助索引插入、获取和删除元素，即元素是有序的。</p>
<img src="/2019/05/13/backend/java/集合/List.png">
<h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>ArrayList 是一种支持长度弹性收缩的有序列表。在实现上，ArrayList 使用 elementData 属性以数组形式存储元素，这样就简便地支持了索引读写；ArrayList 提供 ensureCapacity 方法在插值时动态改变 elementData 属性的大小；ArrayList 可使用 writeObject 方法将数据序列化写入输出流中，readObject 方法从输入流中反序列化读取出数据，以赋值到 elementData 属性中。</p>
<p>ArrayList 不是线程安全的；Vector 是线程安全的（Vector 包含了许多不属于集合框架的传统方法），但需要耗费大量的精力实现同步操作。</p>
<p>以下是 ArrayList 中数组扩容的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部扩容</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">            ? <span class="number">0</span> : DEFAULT_CAPACITY;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class="line">            ensureExplicitCapacity(minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内部扩容</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">            Integer.MAX_VALUE :</span><br><span class="line">            MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>LinkedList 采用双向链表实现。在 LinkedList 中，每个元素 Node 均包含 prev, next 属性引用相邻元素；若无相邻元素，prev, next 属性均置为自身，使首尾相连。LinkedList 保有 first, last 属性引用双向链表中的首个以及最后一个元素。</p>
<p>LinkedList 支持索引访问，然而双向链表实际会基于遍历找到指定位置的元素，并不高效。LinkedList 同样支持读取输入流、写入输出流。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E item;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.item = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 头部插入</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, e, f);</span><br><span class="line">        first = newNode;</span><br><span class="line">        <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">            last = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            f.prev = newNode;</span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 尾部插入</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">        last = newNode;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">            first = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map 映射是<a href="http://xzfyu.com/2019/04/21/%E7%AE%97%E6%B3%95/%E7%AC%A6%E5%8F%B7%E8%A1%A8%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/">符号表</a>的一种，用于存储和操纵键值对。</p>
<img src="/2019/05/13/backend/java/集合/Map.png">
<p>关于 Map 接口的实现类如 HashMap, WeakHashMap, TreeMap，以及相关的 Hashtable 类，可参考 <a href="http://xzfyu.com/2019/04/20/java/%E9%80%8F%E8%BF%87%E6%95%A3%E5%88%97%E8%A1%A8%E7%9C%8BHashMap/">透过散列表看HashMap</a>、<a href="http://xzfyu.com/2019/04/14/%E7%AE%97%E6%B3%95/HashMap%E4%B8%AD%E7%9A%84%E7%BA%A2%E9%BB%91%E6%A0%91/">HashMap中的红黑树</a>。</p>
<p>IdentityHashMap 完全通过数组存储键值对，而不是数组链表。首先通过基于哈希函数计算数组的索引（该哈希函数通过 System.identityHashCode 计算内存地址的散列码，因此允许 key 键重复），然后将键值对先后存入数组的相邻索引位中。当哈希函数算得的索引相同时，IdentityHashMap 首先会比较 key 键，如果 key 键的内存地址相同，就替换为新值；如果不同，在其后插入键值对。因此，在查找键值对时，极限情况下 IdentityHashMap 会遍历整个数组。</p>
<p>LinkedHashMap 会额外使用双向链表保存每个插入的节点，且新修改的节点始终在链表的尾部。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; head;<span class="comment">// 链表中的首节点</span></span><br><span class="line">    <span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; tail;<span class="comment">// 链表中的尾节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 hashMap.removeNode 方法中执行，用于移除双向链表中的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterNodeRemoval</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// unlink</span></span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">        p.before = p.after = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="keyword">null</span>)</span><br><span class="line">            head = a;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b.after = a;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="keyword">null</span>)</span><br><span class="line">            tail = b;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            a.before = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterNodeInsertion</span><span class="params">(<span class="keyword">boolean</span> evict)</span> </span>&#123; <span class="comment">// possibly remove eldest</span></span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; first;</span><br><span class="line">        <span class="comment">// 订制的 removeEldestEntry 可在链表超过指定长度，移除顶部的节点</span></span><br><span class="line">        <span class="keyword">if</span> (evict &amp;&amp; (first = head) != <span class="keyword">null</span> &amp;&amp; removeEldestEntry(first)) &#123;</span><br><span class="line">            K key = first.key;</span><br><span class="line">            removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 hashMap.putVal 等方法中执行，将新插入或新修改的节点插入到双向链表的尾部</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// move node to last</span></span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class="line">        <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">            LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">                (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">            p.after = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (b == <span class="keyword">null</span>)</span><br><span class="line">                head = a;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                b.after = a;</span><br><span class="line">            <span class="keyword">if</span> (a != <span class="keyword">null</span>)</span><br><span class="line">                a.before = b;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                last = b;</span><br><span class="line">            <span class="keyword">if</span> (last == <span class="keyword">null</span>)</span><br><span class="line">                head = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p.before = last;</span><br><span class="line">                last.after = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tail = p;</span><br><span class="line">            ++modCount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><img src="/2019/05/13/backend/java/集合/Set.png">
<p>HashSet 使用 HashMap 存储元素，且以元素作为 key 键，因此其所存储的元素是无序的、不重复的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.keySet().iterator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>TreeSet 使用 TreeMap 存储元素，同样以元素作为 key 键，因此其所存储的元素是有序的、不重复的。借助于 TreeMap，TreeSet 可对元素进行分组提取。</p>
<p>关于 EnumSet，可参考 <a href="http://xzfyu.com/2019/05/12/java/%E6%9E%9A%E4%B8%BE/">枚举</a>。</p>
<h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><img src="/2019/05/13/backend/java/集合/Queue.png">
<p>PriorityQueue 优先级队列，表现上以数组形式存储元素，实际数组项按索引构成一棵二叉树（即将索引展开为二叉树）。在这棵二叉树中，从根节点起，元素从小到大分层排列。PriorityQueue 同样实现了扩容方法。特别的，在添加元素的过程中，PriorityQueue 提供 siftUp 方法保证二叉树中父子节点的优先级按从小到大排列。在移除元素的过程中，PriorityQueue 提供 siftDown 方法取队尾元素填补被删除元素留下的空位，并酌情重新调整二叉树中父子节点的位置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">transient</span> Object[] queue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftUp</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (comparator != <span class="keyword">null</span>)</span><br><span class="line">            siftUpUsingComparator(k, x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            siftUpComparable(k, x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftUpComparable</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">        Comparable&lt;? <span class="keyword">super</span> E&gt; key = (Comparable&lt;? <span class="keyword">super</span> E&gt;) x;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 中值作为二叉树的父节点，若插入元素小于父节点，顺势插入</span></span><br><span class="line">            <span class="comment">// 若插入元素大于父节点，将父节点下移，并向上比较</span></span><br><span class="line">            <span class="keyword">int</span> parent = (k - <span class="number">1</span>) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            Object e = queue[parent];</span><br><span class="line">            <span class="keyword">if</span> (key.compareTo((E) e) &gt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            queue[k] = e;</span><br><span class="line">            k = parent;</span><br><span class="line">        &#125;</span><br><span class="line">        queue[k] = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftUpUsingComparator</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> parent = (k - <span class="number">1</span>) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            Object e = queue[parent];</span><br><span class="line">            <span class="keyword">if</span> (comparator.compare(x, (E) e) &gt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            queue[k] = e;</span><br><span class="line">            k = parent;</span><br><span class="line">        &#125;</span><br><span class="line">        queue[k] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// x 为队尾元素</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDown</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (comparator != <span class="keyword">null</span>)</span><br><span class="line">            siftDownUsingComparator(k, x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            siftDownComparable(k, x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDownComparable</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">        Comparable&lt;? <span class="keyword">super</span> E&gt; key = (Comparable&lt;? <span class="keyword">super</span> E&gt;)x;</span><br><span class="line">        <span class="keyword">int</span> half = size &gt;&gt;&gt; <span class="number">1</span>;        <span class="comment">// loop while a non-leaf</span></span><br><span class="line">        <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">            <span class="keyword">int</span> child = (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>; <span class="comment">// assume left child is least</span></span><br><span class="line">            Object c = queue[child];</span><br><span class="line">            <span class="keyword">int</span> right = child + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 若左子节点的优先级大于右子节点，取右子节点，即在左右子节点中最小优先级的节点</span></span><br><span class="line">            <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">                ((Comparable&lt;? <span class="keyword">super</span> E&gt;) c).compareTo((E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">                c = queue[child = right];</span><br><span class="line">            <span class="keyword">if</span> (key.compareTo((E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 如果父节点的优先级大于最小优先级的子节点，交换位置</span></span><br><span class="line">            queue[k] = c;</span><br><span class="line">            k = child;</span><br><span class="line">        &#125;</span><br><span class="line">        queue[k] = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDownUsingComparator</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> half = size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">            <span class="keyword">int</span> child = (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">            Object c = queue[child];</span><br><span class="line">            <span class="keyword">int</span> right = child + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">                comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">                c = queue[child = right];</span><br><span class="line">            <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            queue[k] = c;</span><br><span class="line">            k = child;</span><br><span class="line">        &#125;</span><br><span class="line">        queue[k] = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/ioriogami/article/details/12782141" target="_blank" rel="noopener">Lambda表达式</a><br><a href="https://www.jianshu.com/p/8f4f58b4b8ab" target="_blank" rel="noopener">图解LinkedHashMap原理</a><br><a href="https://www.cnblogs.com/lemon-flm/p/7877898.html" target="_blank" rel="noopener">java队列——queue详细分析</a><br><a href="https://cloud.tencent.com/developer/article/1152628" target="_blank" rel="noopener">PriorityQueue 源码分析</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>枚举</title>
    <url>/2019/05/12/backend/java/%E6%9E%9A%E4%B8%BE/</url>
    <content><![CDATA[<h2 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h2><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>枚举使用 enum 关键字声明。枚举不能使用 abstract, final 修饰。除非枚举至少包含一个以类构造的枚举常量，否则枚举都是隐式 final 的。嵌套的枚举类型是隐式 static 的，这就使得枚举类型不能在类中使用 static 声明。典型的枚举声明如下（即包含类修饰符，enum 关键字，枚举标识符，由枚举常量或类语句构成的枚举体）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumTest &#123;</span><br><span class="line">    MON, TUE, WED, THU, FRI, SAT, SUN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在编译阶段，这个声明会被转换成类。它会有七个实例，且不能构造新的实例（即不能通过 clone 方法创建枚举实例；不能通过反射实例化；不能通过反序列化构建实例）。EnumTest 经反编译的结果为（可以看出，EnumTest.MON 静态属性会指向 EnumTest 实例）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 所有枚举类型都是 Enum 的子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Enum</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">E</span>&gt;&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 枚举常量名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 枚举常量的序号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> ordinal;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">ordinal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ordinal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Enum</span><span class="params">(String name, <span class="keyword">int</span> ordinal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.ordinal = ordinal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回用户友好的枚举常量名</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>==other;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CloneNotSupportedException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(E o)</span> </span>&#123;</span><br><span class="line">        Enum&lt;?&gt; other = (Enum&lt;?&gt;)o;</span><br><span class="line">        Enum&lt;E&gt; self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span> (self.getClass() != other.getClass() &amp;&amp; <span class="comment">// optimization</span></span><br><span class="line">            self.getDeclaringClass() != other.getDeclaringClass())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException();</span><br><span class="line">        <span class="keyword">return</span> self.ordinal - other.ordinal;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Class&lt;E&gt; <span class="title">getDeclaringClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = getClass();</span><br><span class="line">        Class&lt;?&gt; zuper = clazz.getSuperclass();</span><br><span class="line">        <span class="keyword">return</span> (zuper == Enum.class) ? (Class&lt;E&gt;)clazz : (Class&lt;E&gt;)zuper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取指定的枚举常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Enum&lt;T&gt;&gt; <span class="function">T <span class="title">valueOf</span><span class="params">(Class&lt;T&gt; enumType,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                String name)</span> </span>&#123;</span><br><span class="line">        T result = enumType.enumConstantDirectory().get(name);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Name is null"</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">            <span class="string">"No enum constant "</span> + enumType.getCanonicalName() + <span class="string">"."</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">        ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"can't deserialize enum"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObjectNoData</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"can't deserialize enum"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">hmw</span>.<span class="title">test</span>.<span class="title">EnumTest</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Enum</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.hmw.test.EnumTest MON;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.hmw.test.EnumTest TUE;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.hmw.test.EnumTest WED;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.hmw.test.EnumTest THU;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.hmw.test.EnumTest FRI;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.hmw.test.EnumTest SAT;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> com.hmw.test.EnumTest SUN;</span><br><span class="line">    <span class="keyword">static</span> &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRest</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> com.hmw.test.EnumTest[] values();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> com.hmw.test.<span class="function">EnumTest <span class="title">valueOf</span><span class="params">(java.lang.String)</span></span>;</span><br><span class="line">    com.hmw.test.EnumTest(java.lang.String, <span class="keyword">int</span>, <span class="keyword">int</span>, com.hmw.test.EnumTest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>枚举常量可以基于类构造，即允许在枚举体内添加构造器、方法和域。这些构造器不能使用 public, protected 修饰，也不允许有父类。其实，在没有构造器的枚举声明中，枚举将使用默认的构造器；编译器可能通过在默认构造函数中声明 String 和 Int 参数来镜像枚举类型。基于构造器的枚举典型如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Size &#123; SMALL, MEDUIM, LARGE, EXTRA_LARGE &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Size &#123; </span><br><span class="line">    SMALL(<span class="string">"S"</span>), MEDUIM(<span class="string">"M"</span>), LARGE(<span class="string">"L"</span>), EXTRA_LARGE(<span class="string">"XL"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String abbreviation;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Size</span><span class="params">(String abbreviation)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.abbreviation = abbreviation;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAbbreviation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> abbreviation;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>枚举成员包含：在枚举体中声明的成员；继承自 Enum 的成员；values 方法获取所有枚举常量；valueOf(name) 获取指定的枚举常量；以枚举常量名构成的静态属性（即 EnumTest.MON 等）。</p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><h4 id="作为常量"><a href="#作为常量" class="headerlink" title="作为常量"></a>作为常量</h4><p>基于枚举，我们无需使用 public static fianl 语句定义常量，倒可以使用枚举分组定义常量。</p>
<h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><p>枚举可以打破 switch 语句只能针对 int, char, enum 类型的藩篱。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Coin &#123;</span><br><span class="line">    PENNY(<span class="number">1</span>), NICKEL(<span class="number">5</span>), DIME(<span class="number">10</span>), QUARTER(<span class="number">25</span>);</span><br><span class="line">    Coin(<span class="keyword">int</span> value) &#123; </span><br><span class="line">        <span class="keyword">this</span>.value = value; </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> value; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">enum</span> CoinColor &#123; COPPER, NICKEL, SILVER &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> CoinColor <span class="title">color</span><span class="params">(Coin c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">            <span class="keyword">case</span> PENNY:</span><br><span class="line">                <span class="keyword">return</span> CoinColor.COPPER;</span><br><span class="line">            <span class="keyword">case</span> NICKEL:</span><br><span class="line">                <span class="keyword">return</span> CoinColor.NICKEL;</span><br><span class="line">            <span class="keyword">case</span> DIME: <span class="keyword">case</span> QUARTER:</span><br><span class="line">                <span class="keyword">return</span> CoinColor.SILVER;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"Unknown coin: "</span> + c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Coin c : Coin.values())</span><br><span class="line">            System.out.println(c + <span class="string">"\t\t"</span> +</span><br><span class="line">                               c.value() + <span class="string">"\t"</span> + color(c));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="枚举方法"><a href="#枚举方法" class="headerlink" title="枚举方法"></a>枚举方法</h4><p>因为枚举已经继承了 Enum，而 Java 又不支持多重继承，所以只能通过接口约定枚举包含的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Behaviour</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;  </span><br><span class="line">    <span class="function">String <span class="title">getInfo</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color implements Behaviour &#123;  </span><br><span class="line">    RED(<span class="string">"红色"</span>, <span class="number">1</span>), GREEN(<span class="string">"绿色"</span>, <span class="number">2</span>), BLANK(<span class="string">"白色"</span>, <span class="number">3</span>), YELLO(<span class="string">"黄色"</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String name, <span class="keyword">int</span> index)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.name = name;  </span><br><span class="line">        <span class="keyword">this</span>.index = index;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">for</span> (Color c : Color.values()) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (c.getIndex() == index) &#123;  </span><br><span class="line">                <span class="keyword">return</span> c.name;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> name;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> index;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.index = index;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="keyword">this</span>.index+<span class="string">":"</span>+<span class="keyword">this</span>.name);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="类语法常量"><a href="#类语法常量" class="headerlink" title="类语法常量"></a>类语法常量</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Operation &#123;</span><br><span class="line">    PLUS &#123;</span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">eval</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123; <span class="keyword">return</span> x + y; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    MINUS &#123;</span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">eval</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123; <span class="keyword">return</span> x - y; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    TIMES &#123;</span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">eval</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123; <span class="keyword">return</span> x * y; &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    DIVIDED_BY &#123;</span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">eval</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123; <span class="keyword">return</span> x / y; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Each constant supports an arithmetic operation</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">eval</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x = Double.parseDouble(args[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">double</span> y = Double.parseDouble(args[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (Operation op : Operation.values())</span><br><span class="line">            System.out.println(x + <span class="string">" "</span> + op + <span class="string">" "</span> + y +</span><br><span class="line">                               <span class="string">" = "</span> + op.eval(x, y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="多重枚举"><a href="#多重枚举" class="headerlink" title="多重枚举"></a>多重枚举</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Card</span>&gt;,</span></span><br><span class="line"><span class="class">                      <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Rank &#123; DEUCE, THREE, FOUR, FIVE, SIX, SEVEN,</span><br><span class="line">                       EIGHT, NINE, TEN,JACK, QUEEN, KING, ACE &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Suit &#123; CLUBS, DIAMONDS, HEARTS, SPADES &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Rank rank;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Suit suit;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Rank <span class="title">rank</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> rank; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Suit <span class="title">suit</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> suit; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Card</span><span class="params">(Rank rank, Suit suit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rank == <span class="keyword">null</span> || suit == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(rank + <span class="string">", "</span> + suit);</span><br><span class="line">        <span class="keyword">this</span>.rank = rank;</span><br><span class="line">        <span class="keyword">this</span>.suit = suit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> rank + <span class="string">" of "</span> + suit; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Primary sort on suit, secondary sort on rank</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Card c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> suitCompare = suit.compareTo(c.suit);</span><br><span class="line">        <span class="keyword">return</span> (suitCompare != <span class="number">0</span> ?</span><br><span class="line">                    suitCompare :</span><br><span class="line">                    rank.compareTo(c.rank));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Card&gt; prototypeDeck =</span><br><span class="line">        <span class="keyword">new</span> ArrayList&lt;Card&gt;(<span class="number">52</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Suit suit : Suit.values())</span><br><span class="line">            <span class="keyword">for</span> (Rank rank : Rank.values())</span><br><span class="line">                prototypeDeck.add(<span class="keyword">new</span> Card(rank, suit));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns a new deck</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Card&gt; <span class="title">newDeck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Card&gt;(prototypeDeck);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="EnumSet"><a href="#EnumSet" class="headerlink" title="EnumSet"></a>EnumSet</h2><p>EnumSet 作为了抽象类，它继承了 AbstractSet 抽象类，并保证了枚举实例的有序性。EnumSet 的子类均通过 elementType 属性存储枚举类；universe 属性存储着指定枚举类下的所有枚举实例。在 EnumSet 子类中，elements 属性标记了 EnumSet 实例可以访问哪些枚举实例。EnumSet 有两个私有实现类 RegularEnumSet, JumboEnumSet，两者均只能通过 EnumSet 提供的方法创建，如 EnumSet.noneOf 方法等。在 RegularEnumSet 中，elements 属性以二进制形式标记着哪些枚举实例是可以访问的；在 JumboEnumSet 中，elements 属性以二进制数组的形式标记着哪些枚举实例是可以访问的。关于 elements 属性，详见下文。</p>
<p>EnumSet 抽象了如下方法：</p>
<ul>
<li>noneOf(Class<e> elementType)：通过指定的枚举类创建空的枚举集合。</e></li>
<li>allOf(Class<e> elementType)：创建一个包含所有枚举实例的集合。</e></li>
<li>copyOf(EnumSet<e> s)：拷贝枚举集合。</e></li>
<li>copyOf(Collection<e> c)：拷贝集合，包含枚举集合。</e></li>
<li>complementOf(EnumSet<e> s)：基于相同的枚举类创建集合，该集合内包含 s 所未曾有的枚举实例（补集）。</e></li>
<li>of(E e), of(E e1, E e2), of(E e1, E e2, E e3), of(E e1, E e2, E e3, E e4), of(E e1, E e2, E e3, E e4, E e5), of(E first, E… rest)：创建包含指定枚举实例的集合（该方法作用于 elements 标记，以指定 EnumSet 实例可以访问哪些枚举实例，下同）。</li>
<li>range(E from, E to)：从指定区间中抽出枚举实例创建集合。</li>
<li>clone()：拷贝集合。</li>
<li>addAll()：将指定枚举类下的枚举实例加入集合中。</li>
<li>addRange(E from, E to)：将指定区间的枚举实例加入集合中。</li>
<li>complement()：以指定枚举类下的枚举实例求差集。</li>
<li>getUniverse(Class<e> elementType)：获取指定枚举类下的枚举实例，数组形式。</e></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumSet</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">E</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Class&lt;E&gt; elementType;<span class="comment">// 枚举类</span></span><br><span class="line">    <span class="keyword">final</span> Enum&lt;?&gt;[] universe;<span class="comment">// 全量枚举实例</span></span><br><span class="line"></span><br><span class="line">    EnumSet(Class&lt;E&gt;elementType, Enum&lt;?&gt;[] universe) &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementType = elementType;</span><br><span class="line">        <span class="keyword">this</span>.universe    = universe;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 容量大于 64 时，创建 JumboEnumSet 实例；否则创建 RegularEnumSet 实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Enum&lt;E&gt;&gt; <span class="function">EnumSet&lt;E&gt; <span class="title">noneOf</span><span class="params">(Class&lt;E&gt; elementType)</span> </span>&#123;</span><br><span class="line">        Enum&lt;?&gt;[] universe = getUniverse(elementType);</span><br><span class="line">        <span class="keyword">if</span> (universe == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException(elementType + <span class="string">" not an enum"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (universe.length &lt;= <span class="number">64</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RegularEnumSet&lt;&gt;(elementType, universe);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JumboEnumSet&lt;&gt;(elementType, universe);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有枚举实例</span></span><br><span class="line">    <span class="comment">// 通过 SharedSecrets.getJavaLangAccess().getEnumConstantsShared 找出 JVM 栈帧中的所有类实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;E extends Enum&lt;E&gt;&gt; E[] getUniverse(Class&lt;E&gt; elementType) &#123;</span><br><span class="line">        <span class="keyword">return</span> SharedSecrets.getJavaLangAccess()</span><br><span class="line">                                        .getEnumConstantsShared(elementType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="RegularEnumSet"><a href="#RegularEnumSet" class="headerlink" title="RegularEnumSet"></a>RegularEnumSet</h3><p>RegularEnumSet 实例的 elements 属性以长整型 —— 二进制形式存储 RegularEnumSet 实例可以访问哪些元素，如 …0100 表示 RegularEnumSet 实例可以访问第三个枚举元素。elements 属性的更新通过位运算实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegularEnumSet</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">E</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">EnumSet</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 位向量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> elements = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取枚举实例的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Long.bitCount(elements);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 辅助添加枚举实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        typeCheck(e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> oldElements = elements;</span><br><span class="line">        elements |= (<span class="number">1L</span> &lt;&lt; ((Enum&lt;?&gt;)e).ordinal());</span><br><span class="line">        <span class="keyword">return</span> elements != oldElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EnumSetIterator&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumSetIterator</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">E</span>&gt;&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> unseen;</span><br><span class="line">        <span class="keyword">long</span> lastReturned = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        EnumSetIterator() &#123;</span><br><span class="line">            unseen = elements;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> unseen != <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (unseen == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            lastReturned = unseen &amp; -unseen;<span class="comment">// 计算 unseen 的二进制最低位</span></span><br><span class="line">            unseen -= lastReturned;<span class="comment">// 计算 lastReturned 从最低位开始，第一位为 1 的下标值</span></span><br><span class="line">            <span class="keyword">return</span> (E) universe[Long.numberOfTrailingZeros(lastReturned)];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lastReturned == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            elements &amp;= ~lastReturned;</span><br><span class="line">            lastReturned = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="JumboEnumSet"><a href="#JumboEnumSet" class="headerlink" title="JumboEnumSet"></a>JumboEnumSet</h3><p>与 RegularEnumSet 不同的是，JumboEnumSet 实例的 elements 属性是数组结构，每个数组项又跟 RegularEnumSet 实例的 elements 属性相同，以二进制 —— 长整型形式标识着哪些枚举实例是可以访问的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JumboEnumSet</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">E</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">EnumSet</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> elements[];</span><br><span class="line"></span><br><span class="line">    JumboEnumSet(Class&lt;E&gt;elementType, Enum&lt;?&gt;[] universe) &#123;</span><br><span class="line">        <span class="keyword">super</span>(elementType, universe);</span><br><span class="line">        elements = <span class="keyword">new</span> <span class="keyword">long</span>[(universe.length + <span class="number">63</span>) &gt;&gt;&gt; <span class="number">6</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        typeCheck(e);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> eOrdinal = e.ordinal();</span><br><span class="line">        <span class="keyword">int</span> eWordNum = eOrdinal &gt;&gt;&gt; <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> oldElements = elements[eWordNum];</span><br><span class="line">        <span class="comment">// 每个数组项的特征与 RegularEnumSet 实例的 elements 属性相同</span></span><br><span class="line">        elements[eWordNum] |= (<span class="number">1L</span> &lt;&lt; eOrdinal);</span><br><span class="line">        <span class="keyword">boolean</span> result = (elements[eWordNum] != oldElements);</span><br><span class="line">        <span class="keyword">if</span> (result)</span><br><span class="line">            size++;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="EnumMap"><a href="#EnumMap" class="headerlink" title="EnumMap"></a>EnumMap</h2><p>EnumMap 使用枚举实例作为键，值自定义。与 EnumSet 相类，EnumMap 同样使用 JavaLangAccess, SharedSecrets 获取枚举类下的所有枚举实例，并存入 keyUniverse 数组中。大致实现原理见下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumMap</span>&lt;<span class="title">K</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">K</span>&gt;, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Cloneable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;K&gt; keyType;<span class="comment">// 枚举类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> K[] keyUniverse;<span class="comment">// 全量枚举实例，枚举实例作为键</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Object[] vals;<span class="comment">// 全量值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">maskNull</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (value == <span class="keyword">null</span> ? NULL : value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> V <span class="title">unmaskNull</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (V)(value == NULL ? <span class="keyword">null</span> : value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EnumMap</span><span class="params">(Class&lt;K&gt; keyType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.keyType = keyType;</span><br><span class="line">        keyUniverse = getKeyUniverse(keyType);</span><br><span class="line">        vals = <span class="keyword">new</span> Object[keyUniverse.length];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        typeCheck(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = key.ordinal();</span><br><span class="line">        Object oldValue = vals[index];</span><br><span class="line">        vals[index] = maskNull(value);</span><br><span class="line">        <span class="keyword">if</span> (oldValue == <span class="keyword">null</span>)</span><br><span class="line">            size++;</span><br><span class="line">        <span class="keyword">return</span> unmaskNull(oldValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取全量枚举实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;K extends Enum&lt;K&gt;&gt; K[] getKeyUniverse(Class&lt;K&gt; keyType) &#123;</span><br><span class="line">        <span class="keyword">return</span> SharedSecrets.getJavaLangAccess()</span><br><span class="line">                                        .getEnumConstantsShared(keyType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.9" target="_blank" rel="noopener">Java SE 规范</a><br><a href="https://blog.csdn.net/testcs_dn/article/details/78604547" target="_blank" rel="noopener">Java 枚举(enum) 详解7种常见的用法</a><br><a href="https://www.cnblogs.com/hyl8218/p/5088287.html" target="_blank" rel="noopener">java enum(枚举)使用详解 + 总结</a><br><a href="https://blog.csdn.net/yums467/article/details/53005292" target="_blank" rel="noopener">使用JavaLangAccess和SharedSecrets来获取JVM中的实例</a><br><a href="https://www.jianshu.com/p/f7035c5816b1" target="_blank" rel="noopener">Java1.8-RegularEnumSet和JumboEnumSet源码解析</a><br><a href="https://www.jianshu.com/p/a691419bdce0" target="_blank" rel="noopener">Java位运算学习</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>符号表与二叉查找树</title>
    <url>/2019/04/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%AE%97%E6%B3%95/%E7%AC%A6%E5%8F%B7%E8%A1%A8%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/</url>
    <content><![CDATA[<h2 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h2><p>符号表用于存储键值对。通常符号表按功能提供了如下 API（由 API 可逐步深入到设计决策、测试用例、实现等）：</p>
<ul>
<li>get: 获取指定 key 键的值。</li>
<li>put: 将键值对存入符号表中。</li>
<li>delete: 删除指定的键值对。</li>
<li>contains: 判断符号表中是否包含指定的键。</li>
<li>isEmpty: 判断符号表是否为空。</li>
<li>size: 获取符号表中键值对的数量。</li>
<li>keys: 获取符号表中所有 key 键的集合。</li>
</ul>
<p>符号表分为无序符号表和有序符号表两种。</p>
<h3 id="无序符号表"><a href="#无序符号表" class="headerlink" title="无序符号表"></a>无序符号表</h3><p>以下是基于单向链表实现的无序符号表：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequentialSearchST</span>&lt;<span class="title">Key</span>, <span class="title">Value</span>&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Node&lt;Key, Value&gt; first;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> N;<span class="comment">// 键值对数量</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 链表节点模型</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">Key</span>, <span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Key key;</span><br><span class="line">    <span class="keyword">public</span> Value val;</span><br><span class="line">    <span class="keyword">public</span> Node&lt;Key, Value&gt; next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key, Value val, Node&lt;Key, Value&gt; next)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.key = k;</span><br><span class="line">      <span class="keyword">this</span>.val = val;</span><br><span class="line">      <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;Key, Value&gt; x = first ; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">      <span class="keyword">if</span> (x.key.equals(key))  </span><br><span class="line">        <span class="keyword">return</span> x.val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;Key, Value&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">      <span class="keyword">if</span> (x.key.equals(key)) &#123;</span><br><span class="line">        x.val = val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    first = <span class="keyword">new</span> Node&lt;Key, Value&gt;(key, val, first);</span><br><span class="line">    N++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="有序符号表"><a href="#有序符号表" class="headerlink" title="有序符号表"></a>有序符号表</h3><p>有序符号表需要额外实现如下接口：</p>
<ul>
<li>min, max: 获取最小键、最大键。</li>
<li>floor, ceiling: 向下取整、向上取整。</li>
<li>select: 获取指定排名的键。该操作可应用于搜索引擎的排名等。</li>
<li>rank: 获取小于指定 key 键的节点数量。该操作可应用于搜索引擎的排名等。</li>
<li>deleteMin: 删除最小键。</li>
<li>deleteMax: 删除最大键。</li>
</ul>
<p>基于有序数组实现的有序符号表，可借助两分查找法快速插入和获取键值对，其核心方法为 rank。相比于链表，基于有序数组实现的符号表能保证查找的高效，但是在插入节点需要对后续节点执行额外的移位动作。以下为其实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinarySearchST</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;, <span class="title">Value</span>&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Key[] keys;</span><br><span class="line">  <span class="keyword">private</span> Value[] vals;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> N;<span class="comment">// 键值对数量</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BinarySearchST</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">    keys = (Key[]) <span class="keyword">new</span> Comparable[capacity];</span><br><span class="line">    vals = (Value[]) <span class="keyword">new</span> Object[capacity];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 基于两分查找法，获取小于指定 key 键的节点数量</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lo = <span class="number">0</span>, hi = N - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(lo &lt;= hi)&#123;</span><br><span class="line">      <span class="keyword">int</span> mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">int</span> cmp = key.compareTo(keys[mid]);</span><br><span class="line">      <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) hi = mid - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) lo = mid + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lo;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> i = rank(key);</span><br><span class="line">    <span class="keyword">if</span> (i &lt; N &amp;&amp; keys[i].compareTo(key) == <span class="number">0</span>) <span class="keyword">return</span> vals[i];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = rank(key);</span><br><span class="line">    <span class="keyword">if</span> (i &lt; N &amp;&amp; keys[i].compareTo(key) == <span class="number">0</span>)&#123;<span class="comment">// 有则替换</span></span><br><span class="line">      vals[i] = val;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后续键值对移位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = N; j &gt; i; j--)&#123;</span><br><span class="line">      keys[j] = keys[j - <span class="number">1</span>];</span><br><span class="line">      vals[j] = vals[j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    keys[i] = key;</span><br><span class="line">    vals[i] = val;</span><br><span class="line">    N++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h2><p>二叉查找树 Binary Search Tree(BST) 是有序符号表的一种。在二叉树中，每个父节点下的左右子节点按 key 键有序排列，这样在查找和插入节点时就能保证如快速排序的高效。二叉树的设计原则包含：私有方法提供抽象，公共方法提供接口；二叉树基于节点建模，节点保有子节点和子树的信息，私有方法须实现可递归性。二叉查找树的 API 如有序符号表，包含基本的查找、插入、删除操作：</p>
<ul>
<li>size: 获取节点数量。</li>
<li>get: 向下递归查找节点。</li>
<li>put: 插入节点。基于向下递归插入节点，向上递归更新节点数量。</li>
<li>min, max: 获取最小键、最大键。</li>
<li>floor, ceiling: 向下取整、向上取整。</li>
<li>select: 获取指定排名的键。</li>
<li>rank: 获取小于指定 key 键的节点数量。</li>
<li>delete: 删除节点。当被删除节点为父节点时，使用前驱或后继节点与该节点换位的方式删除。</li>
<li>deleteMin: 删除最小键，该方法可用于后继节点替换模式的删除操作。</li>
<li>deleteMax: 删除最大键，该方法可用于前驱节点替换模式的删除操作。</li>
<li>keys: 借助于中序遍历，获取二叉树中或指定范围内所有键的集合。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BST</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;, <span class="title">Value</span>&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Node root;</span><br><span class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Key key;</span><br><span class="line">    <span class="keyword">private</span> Value val;</span><br><span class="line">    <span class="keyword">private</span> Node left, right;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> N;<span class="comment">// 子树中的节点总数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key, Value val, <span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.key = key;</span><br><span class="line">      <span class="keyword">this</span>.val = val;</span><br><span class="line">      <span class="keyword">this</span>.N = N;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size(root);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(Node x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x.N;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> get(root, key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> Value <span class="title">get</span><span class="params">(Node x, Key key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> cmp = key.compateTo(x.key);</span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> get(x.left, key);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) <span class="keyword">return</span> get(x.right, key);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x.val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span></span>&#123;</span><br><span class="line">    root = put(root, key, val);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node x, Key key, Value val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> Node(key, val, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) x.left = put(x.left, key, val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) x.right = put(x.right, key, val);</span><br><span class="line">    <span class="keyword">else</span> x.val = val;</span><br><span class="line">    x.N = size(x.left) + size(x.right) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取最小键；max 方法与之相类</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Key <span class="title">min</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> min(root).key;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> Node <span class="title">min</span><span class="params">(Node x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.left == <span class="keyword">null</span>) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> min(x.left);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 向下取整；ceiling 向上取整与之相类</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Key <span class="title">floor</span><span class="params">(Key key)</span></span>&#123;</span><br><span class="line">    Node x = floor(root, key);</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> x.key;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> Node <span class="title">floor</span><span class="params">(Node x, Key key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">    <span class="keyword">if</span> (cmp == <span class="number">0</span>) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> floor(x.left, key);<span class="comment">// 保证输出左子树中的节点</span></span><br><span class="line">    Node t = floor(x.right, key);<span class="comment">// 向上递归获取左子树中的节点</span></span><br><span class="line">    <span class="keyword">if</span> (t != <span class="keyword">null</span>) <span class="keyword">return</span> t;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x;<span class="comment">// 返回左子树中的节点，以便向上递归</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取排名为 k 的键</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Key <span class="title">select</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> select(root, k).key;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> Node <span class="title">select</span><span class="params">(Node x, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> t = size(x.left);</span><br><span class="line">    <span class="keyword">if</span> (t &gt; k) <span class="keyword">return</span> select(x.left, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; k) <span class="keyword">return</span> select(x.right, k-t-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取小于 key 键的数量，入参 key 键在二叉树中已存在</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rank(key, root);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key, Node x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) <span class="keyword">return</span> rank(key, x.left);<span class="comment">// 右子树中会包含大于 key 的键</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> + size(x.left) + rank(key, x.right);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> size(x.left);<span class="comment">// 父节点与 key 键相同，统计左子树的节点数量</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteMin</span><span class="params">()</span></span>&#123;</span><br><span class="line">    root = deleteMin(root);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> Node <span class="title">deleteMin</span><span class="params">(Node x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.left == <span class="keyword">null</span>) <span class="keyword">return</span> x.right;</span><br><span class="line">    x.left = deleteMin(x.left);</span><br><span class="line">    x.N = size(x.left) + size(x.right) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span></span>&#123;</span><br><span class="line">    root = delete(root, key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> Node <span class="title">delete</span><span class="params">(Node x, Key key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) x.left = delete(x.left, key);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) x.right = delete(x.right, key);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (x.right == <span class="keyword">null</span>) <span class="keyword">return</span> x.left;</span><br><span class="line">      <span class="keyword">if</span> (x.left == <span class="keyword">null</span>) <span class="keyword">return</span> x.right;</span><br><span class="line">      Node t = x;</span><br><span class="line">      x = min(t.right);<span class="comment">// 以后继节点代替待删除节点位置</span></span><br><span class="line">      x.right = deleteMin(t.right);<span class="comment">// 移除后继节点</span></span><br><span class="line">      x.left = t.left;</span><br><span class="line">    &#125;</span><br><span class="line">    x.N = size(x.left) + size(x.right) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取二叉树中所有键的集合</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> keys(min(), max());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取指定范围内所有键的集合</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">(Key lo, Key hi)</span></span>&#123;</span><br><span class="line">    Queue&lt;Key&gt; queue = <span class="keyword">new</span> Queue&lt;Key&gt;();</span><br><span class="line">    keys(root, queue, lo, hi);</span><br><span class="line">    <span class="keyword">return</span> queue;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">keys</span><span class="params">(Node x, Queue&lt;key&gt; queue, Key lo, Key hi)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> comlo = lo.compareTo(x.key);</span><br><span class="line">    <span class="keyword">int</span> comhi = hi.compareTo(x.key);</span><br><span class="line">    <span class="keyword">if</span> (comlo &lt; <span class="number">0</span>) keys(x.left, queue, lo, hi);<span class="comment">// 收集左子树中的 key</span></span><br><span class="line">    <span class="keyword">if</span> (comlo &lt;= <span class="number">0</span> &amp;&amp; comhi &gt;= <span class="number">0</span>) queue.enqueue(x.key);<span class="comment">// 在指定范围内，收集 key 键</span></span><br><span class="line">    <span class="keyword">if</span> (comhi &gt; <span class="number">0</span>) keys(x.right, queue, lo, hi);<span class="comment">// 收集右子树中的 key</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机科学</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>透过散列表看HashMap</title>
    <url>/2019/04/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%AE%97%E6%B3%95/%E9%80%8F%E8%BF%87%E6%95%A3%E5%88%97%E8%A1%A8%E7%9C%8BHashMap/</url>
    <content><![CDATA[<p>散列表用于存储键值对。先举两个例子：如果使用有序数组存储键值对，那么当存在某个较大的键时，整个数组所占用的内存空间就会很大；如果使用无序数组存储键值对，那么在查找元素时就需要遍历数组项，造成了性能的低效。与这两个例子不同的是，散列表有效地平衡了时间和空间复杂度。创建散列表的流程分为：</p>
<ol>
<li>通过散列函数将键转化为散列码，以作为数组的索引。</li>
<li>通过碰撞处理解决两个或多个散列码等值的情况。</li>
</ol>
<h2 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h2><p>制作散列函数时需要面对的问题是：对于任意数据类型的键，都需要将其转化为可接受的数组索引；计算过程应尽可能的简便，计算结果应尽可能地均匀分布。可针对如下情形实现不同的散列策略：</p>
<ol>
<li>正整数 k：可采用除留余数法，即当数组长度为 M 时，散列码就是 k%M。当 M 是素数时，得到的散列码会均匀分布。</li>
<li>浮点数 k：可采用 k*M 再四舍五入的方式计算码；也可采用将 k 表示为二进制数，然后再使用除留余数法。后一种方式更均匀，因为在使用前一种方式时，浮点数高位起到的作用会更大。</li>
<li>字符串 k：可采用 <a href="https://blog.csdn.net/liyuanbhu/article/details/38678515" target="_blank" rel="noopener">horner 算法</a>获取散列码，即 <img src="/2019/04/20/计算机科学/算法/透过散列表看HashMap/horner.svg"> 其中，s.charAt(i) 将以非负 16 位整数形式获取 char 值。当 R 为较小的素数如 31 时，就可以保证结果的均匀分布。</li>
<li>组合键 k：如果键包含多个整型变量时，可以使用如字符串的形式将其拆解。以 Date 为例，可拆解为 day, month, year 三个整型，这时就可以通过 (((day <em> R + month) % M) </em> R + year) % M 计算散列码。</li>
</ol>
<p>在 Java 中，每种数据类型都有对应的散列函数。同时每种数据类型的 hashCode 方法须与 equals 方法表现一致，即当 a.equals(b) 返回 true 时，那么 a.hashCode() 结果须与 b.hashCode() 相同；反之则不然，即当 a.hashCode() 与 b.hashCode() 返回值相同时，a.equals(b) 未必返回 true。默认的散列函数会返回对象的内存地址，但只适用于极少数情况。字节型 Byte, 短整型 Short, 整型 Integer, 长整型 Long 的 hashCode 方法都以 32 位 4 字节整数作为散列码；字符型 Character 以 8 位整数为散列码；布尔型 Boolean 以 1231, 1237 作为散列码，true 时为 1231。其他类型的 hashCode 方法或可参见下方代码（特别的，对于自定义的 Java 类，可采用与 String 相类的手法计算散列码，即通过各属性的散列码计算对象的散列码）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单精度浮点型；双精度浮点型 Double 与此相类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Float</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Float</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// native 关键字的函数由操作系统实现（使用如 c 语言），java 只能调用</span></span><br><span class="line">    <span class="comment">// 单精度浮点型第 31 位为符号，30-23 位为指数，22-0 为有效数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">floatToRawIntBits</span><span class="params">(<span class="keyword">float</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">floatToIntBits</span><span class="params">(<span class="keyword">float</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = floatToRawIntBits(value);</span><br><span class="line">        <span class="comment">// Check for NaN based on values of bit fields, maximum</span></span><br><span class="line">        <span class="comment">// exponent and nonzero significand.</span></span><br><span class="line">        <span class="comment">// EXP_BIT_MASK = 2139095040; SIGNIF_BIT_MASK = 8388607;</span></span><br><span class="line">        <span class="keyword">if</span> ( ((result &amp; FloatConsts.EXP_BIT_MASK) ==</span><br><span class="line">              FloatConsts.EXP_BIT_MASK) &amp;&amp;</span><br><span class="line">             (result &amp; FloatConsts.SIGNIF_BIT_MASK) != <span class="number">0</span>)</span><br><span class="line">            result = <span class="number">0x7fc00000</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">(<span class="keyword">float</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> floatToIntBits(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Float.hashCode(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用 hash 作为软缓存，避免重复计算，第二次执行 hashCode 都将返回计算好的 hash</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// Default to 0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h = hash;</span><br><span class="line">        <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">char</span> val[] = value;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value.length; i++) &#123;</span><br><span class="line">                h = <span class="number">31</span> * h + val[i];</span><br><span class="line">            &#125;</span><br><span class="line">            hash = h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>HashMap 中的散列码通过静态方法 hash 计算，即取 key 键的散列码，并与右移 16 位的散列码进行异或。执行 (n - 1) &amp; hash 计算，可以将散列码转化为数组索引。与此不同的是，Hashtable 的散列码通过执行 key.hashCode 直接获取，再执行 (hash &amp; 0x7FFFFFFF) % M 计算出数组索引。散列码计算方式改易的原因不详。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HashMap 中的散列码</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常规散列码，也是 Hashtable 中的散列码</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (key.hashCode() &amp; <span class="number">0x7FFFFFFF</span>) % M;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="碰撞冲突"><a href="#碰撞冲突" class="headerlink" title="碰撞冲突"></a>碰撞冲突</h2><p>当键的散列码等值时，有两种方式可用于处理这类碰撞冲突的情况：其一是拉链法，即在数组项中以链表的形式存储散列码等值的元素；其一是基于线性探测法等实现开放地址散列表，即存储的元素量不能超过数组长度，使数组足够容纳冲突的键。</p>
<h3 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h3><p>拉链法既可使用原始链表实现，也可使用符号表实现。不同的是，原始链表对链表节点进行建模，符号表基于单向链表对整体进行建模。以下是基于符号表的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 符号表</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequentialSearchST</span>&lt;<span class="title">Key</span>, <span class="title">Value</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node first;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        Key key;</span><br><span class="line">        Value val;</span><br><span class="line">        Node next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key, Value val, Node next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Node x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.equals(x.key)) &#123;</span><br><span class="line">                <span class="keyword">return</span> x.val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Node x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.equals(x.key)) &#123;</span><br><span class="line">                x.val = val;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        first = <span class="keyword">new</span> Node(key, val, first);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于符号表、拉链法的散列表</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeparateChainingHashST</span>&lt;<span class="title">Key</span>, <span class="title">Value</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INIT_CAPACITY = <span class="number">997</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> N;<span class="comment">// 键值对总数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> M;<span class="comment">// 散列表大小</span></span><br><span class="line">    <span class="keyword">private</span> SequentailSearchST&lt;Key, Value&gt;[] st;<span class="comment">// 链表数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeparateChainingHashST</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(INIT_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeparateChainingHashST</span><span class="params">(<span class="keyword">int</span> M)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.M = M;</span><br><span class="line">        <span class="comment">// Java 不支持泛型数组，先需经过类型转换</span></span><br><span class="line">        st = (SequentailSearchST&lt;Key, value&gt;[]) <span class="keyword">new</span> SequentailSearchST[M];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            st[i] = <span class="keyword">new</span> SequentailSearchST&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (key.hashCode() &amp; <span class="number">0x7fffffff</span>) % M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Value) st[hash(key)].get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span> </span>&#123;</span><br><span class="line">        st[hash(key)].put(key, val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 java 中，Hashtable 和 HashMap 都是基于拉链法构建的，且每个数组项被称为桶。无论 Hashtable，还是 HashMap，散列表的大小都可基于插入的元素量进行动态调整，这一过程被称为再散列 rehash。</p>
<h4 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h4><p>Hashtable 的 rehash 过程为：当元素量超过 hashtable.threshold 阈值（散列表的长度乘以装填因子 loadFactor）时，首先创建长度翻倍的新数组，再将原有元素按新的索引值插入到数组中，最后废弃旧数组。</p>
<p>Hashtable 的公共方法都加上了 synchronized 关键字，因此它是线程安全的，能保证在插值过程中找到正确的索引，而不会引起当另一个线程变更数组长度时导致的索引不定问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hashtable</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Dictionary</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;?,?&gt;[] table;<span class="comment">// 以链表数组形式存储元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> threshold;<span class="comment">// 阈值，超过该值将 rehash，值为当前长度 ✖ 装填因子</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> loadFactor;<span class="comment">// 装填因子</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">        <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 长度变更使得元素索引不定，需要遍历数组查找元素是否已在散列表中</span></span><br><span class="line">        <span class="keyword">for</span>(; entry != <span class="keyword">null</span> ; entry = entry.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</span><br><span class="line">                V old = entry.value;</span><br><span class="line">                entry.value = value;</span><br><span class="line">                <span class="keyword">return</span> old;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        addEntry(hash, key, value, index);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有方法，结合 rehash 添加新元素</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">        <span class="keyword">if</span> (count &gt;= threshold) &#123;</span><br><span class="line">            rehash();</span><br><span class="line"></span><br><span class="line">            tab = table;</span><br><span class="line">            hash = key.hashCode();</span><br><span class="line">            index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) tab[index];</span><br><span class="line">        tab[index] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再散列</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> oldCapacity = table.length;</span><br><span class="line">        Entry&lt;?,?&gt;[] oldMap = table;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> newCapacity = (oldCapacity &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;<span class="comment">// 长度放大两倍</span></span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (oldCapacity == MAX_ARRAY_SIZE)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            newCapacity = MAX_ARRAY_SIZE;</span><br><span class="line">        &#125;</span><br><span class="line">        Entry&lt;?,?&gt;[] newMap = <span class="keyword">new</span> Entry&lt;?,?&gt;[newCapacity];</span><br><span class="line"></span><br><span class="line">        modCount++;</span><br><span class="line">        threshold = (<span class="keyword">int</span>)Math.min(newCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">        table = newMap;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = oldCapacity ; i-- &gt; <span class="number">0</span> ;) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;K,V&gt; old = (Entry&lt;K,V&gt;)oldMap[i] ; old != <span class="keyword">null</span> ; ) &#123;</span><br><span class="line">                Entry&lt;K,V&gt; e = old;</span><br><span class="line">                old = old.next;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> index = (e.hash &amp; <span class="number">0x7FFFFFFF</span>) % newCapacity;</span><br><span class="line">                e.next = (Entry&lt;K,V&gt;)newMap[index];</span><br><span class="line">                newMap[index] = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 链表节点模型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Entry&lt;K,V&gt; next;<span class="comment">// 构成单向链表</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> hash ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="WeakHashMap"><a href="#WeakHashMap" class="headerlink" title="WeakHashMap"></a>WeakHashMap</h4><p>一言以蔽之，WeakHashMap 是基于 Map 接口实现的线程不安全的 Hashtable。</p>
<h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p>因为 Hashtable 通过遍历链表的方式查找和插入元素并不高效，HashMap 在桶的容量超过指定值时，就会将桶的存储结构转化为红黑树，这样就提升了查找和插入的效率。关于红黑树的更多内容，可参见<a href="http://xzfyu.com/2019/04/14/java/HashMap%E4%B8%AD%E7%9A%84%E7%BA%A2%E9%BB%91%E6%A0%91/">HashMap中的红黑树</a>。</p>
<p>至于为什么在 Java 中，HashMap 被设计成线程不安全的？因为线程安全的实现方式会增加检查、加锁、解锁的开销。Java 另外提供了线程安全的 ConcurrentHashMap 类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;<span class="comment">// 以链表数组形式存储元素</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 桶中的首节点就是查找的元素</span></span><br><span class="line">            <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">                ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="keyword">return</span> first;</span><br><span class="line">            <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 从红黑树查找节点</span></span><br><span class="line">                <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">                <span class="comment">// 从链表中查找节点</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">return</span> e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插入元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="comment">// 保证散列表的长度不为 0</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        <span class="comment">// 桶中首个节点</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="comment">// 链表、红黑二叉树的首节点与插入元素含有相同 key 键</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="comment">// 将元素插入红黑树中</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="comment">// 将元素插入链表中；当超过阈值时，转化为红黑树</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 遍历链表</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 将元素插入到链表的尾端；newNode 方法创建链表节点</span></span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 超过指定长度 TREEIFY_THRESHOLD = 8，将链表转化成红黑树</span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>)</span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 链表中存在相同的 key 键</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 链表或红黑二叉树中存在相同的 key 键</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);<span class="comment">// 触发 LinkedHashMap 的动作</span></span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);<span class="comment">// 触发 LinkedHashMap 的动作</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将链表转化成红黑树</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="comment">// 散列表红黑树化前的最小长度 MIN_TREEIFY_CAPACITY = 64，未满足，则扩容</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">            resize();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">// replacementTreeNode 将链表节点转化为红黑树节点</span></span><br><span class="line">                TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">if</span> (tl == <span class="keyword">null</span>)<span class="comment">// 填充首节点</span></span><br><span class="line">                    hd = p;</span><br><span class="line">                <span class="comment">// 修正链表节点的 prev, next 属性</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    p.prev = tl;</span><br><span class="line">                    tl.next = p;</span><br><span class="line">                &#125;</span><br><span class="line">                tl = p;<span class="comment">// 记录上一个节点</span></span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">// 将链表转化成红黑树</span></span><br><span class="line">                hd.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再散列，在保证容量和阈值不为 0 的前提下，把容量翻倍，老数据分拆注入新数组中</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">        <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 散列表容器超过最大值 MAXIMUM_CAPACITY = 1 &lt;&lt; 30，只调整阈值</span></span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 散列表容量翻倍</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>)</span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        <span class="comment">// 设置初始容量 DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4 和阈值</span></span><br><span class="line">        <span class="comment">// 装填因子 DEFAULT_LOAD_FACTOR = 0.75f</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        threshold = newThr;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];<span class="comment">// 链表数组</span></span><br><span class="line">        table = newTab;</span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">// 桶中只有节点，将节点直接添加到新的桶中</span></span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    <span class="comment">// 桶的数据结构为红黑树，将红黑树分拆到两个桶中（j, j + oldCap），其数据结构为红黑树或链表</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="comment">// 桶的数据结构为链表，将链表分拆到两个桶中（j, j + oldCap），其数据结构仍为链表</span></span><br><span class="line">                    <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                        Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; next;</span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = e;<span class="comment">// 记录上一个节点</span></span><br><span class="line">                                loTail = e;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</span><br><span class="line">            <span class="keyword">null</span> : e.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, index;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 先找到待删除的节点</span></span><br><span class="line">            Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; K k; V v;</span><br><span class="line">            <span class="comment">// 待删除为首节点</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                node = p;</span><br><span class="line">            <span class="comment">// 从红黑树或链表中找到待删除节点</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key ||</span><br><span class="line">                             (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                            node = e;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        p = e;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 删除节点</span></span><br><span class="line">            <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                                 (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                    tab[index] = node.next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    p.next = node.next;</span><br><span class="line">                ++modCount;</span><br><span class="line">                --size;</span><br><span class="line">                afterNodeRemoval(node);</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="概率问题"><a href="#概率问题" class="headerlink" title="概率问题"></a>概率问题</h4><p>本节所要致力于解决的问题是，当散列表的大小为 M 时，长度为 k 的链表出现的概率是多少？为什么要解决这个问题呢？因为只有在链表长度足够短时，查找和插入节点才会显得高效。</p>
<p>假设散列函数能将所有的元素均匀且独立地分配到数组中，即元素放入某个链表中的概率为 1/M，没有放入该链表的概率为 1-1/M。因此由二项分布可知，该链表长度为 k 的概率为（α = N/M 为期望）：</p>
<img src="/2019/04/20/计算机科学/算法/透过散列表看HashMap/p(k).svg">
<p>当 α 足够小时，可以转化为泊松分布的数学表达式：</p>
<img src="/2019/04/20/计算机科学/算法/透过散列表看HashMap/p(k)2.svg">
<p>介于此，对于初始大小为 16 的 HashMap，链表长度等于 8 的可能性为 0.00000006，这时就需要将链表转换成红黑树。</p>
<h3 id="线性探测法"><a href="#线性探测法" class="headerlink" title="线性探测法"></a>线性探测法</h3><p>因为开放地址散列表的长度大于待插入的元素量，当插入元素的数组索引已被占用时，就可以通过索引自增 1 的方式向下查找并插入。在这个过程中，插入元素可能已经存在在散列表中，因此就需要检测数组元素的键是否和插入元素的键相同，这一过程称为探测。需要说明的是，开放地址散列表中的空位譬如磁盘碎片，不只有一处，而是会散落多处。探测的成本在于需要遍历连续无间断的元素量（即键簇中包含的元素量）。</p>
<p>开放地址散列表的性能也依赖于 N/M 的比值，即数组的使用率。我们需要动态调整数组大小的方式来保证使用率在 1/8 到 1/2 之间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinearProbingHashST</span>&lt;<span class="title">Key</span>, <span class="title">Value</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> M;</span><br><span class="line">    <span class="keyword">private</span> Key[] keys;</span><br><span class="line">    <span class="keyword">private</span> Value[] vals;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinearProbingHashST</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        keys = (Key[]) <span class="keyword">new</span> Object[M];</span><br><span class="line">        values = (Value[]) <span class="keyword">new</span> Object[M];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (N &gt;= M / <span class="number">2</span>) resize(M * <span class="number">2</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="comment">// 采用余数计算索引，在保证索引正确的同时，也能跳回到 0 索引位置</span></span><br><span class="line">        <span class="keyword">for</span> (i = hash(key); keys[i] != <span class="keyword">null</span>; i = (i + <span class="number">1</span>) % M) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.equals(keys[i])) &#123;</span><br><span class="line">                vals[i] = val;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        keys[i] = key;</span><br><span class="line">        vals[i] = val;</span><br><span class="line">        N++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = hash(key); keys[i] != <span class="keyword">null</span>; i = (i + <span class="number">1</span>) % M) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.equals(keys[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> vals[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!contains(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = hash(key);</span><br><span class="line">        <span class="comment">// 找到 key 键</span></span><br><span class="line">        <span class="keyword">while</span> (!key.equals(keys[i])) &#123;</span><br><span class="line">            i = (i + <span class="number">1</span>) % M;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        keys[i] = <span class="keyword">null</span>;</span><br><span class="line">        values[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        i = (i + <span class="number">1</span>) % M;</span><br><span class="line">        <span class="comment">// 遍历调整后续元素的位置</span></span><br><span class="line">        <span class="keyword">while</span> (keys[i] != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Key keyToRehash = keys[i];</span><br><span class="line">            Value valueToRehash = values[i];</span><br><span class="line">            keys[i] = <span class="keyword">null</span>;</span><br><span class="line">            values[i] = <span class="keyword">null</span>;</span><br><span class="line">            N--;</span><br><span class="line">            put(keyToRehash, valueToRehash);</span><br><span class="line">            i = (i + <span class="number">1</span>) % M;</span><br><span class="line">        &#125;</span><br><span class="line">        N--;</span><br><span class="line">        <span class="keyword">if</span> (N &gt; <span class="number">0</span> &amp;&amp; N == M / <span class="number">8</span>) &#123;</span><br><span class="line">            resize(M / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/KingIceMou/p/7239668.html" target="_blank" rel="noopener">Java中Native关键字的作用</a><br><a href="https://blog.csdn.net/ccnt_2012/article/details/81114920" target="_blank" rel="noopener">如何通俗理解泊松分布？</a><br><a href="https://blog.csdn.net/Mollychin/article/details/80444967" target="_blank" rel="noopener">HashMap桶中链表转红黑树为什么选择数字8？</a><br><a href="https://blog.csdn.net/VIP_WangSai/article/details/70182933" target="_blank" rel="noopener">hashMap线程不安全的原因及表现</a></p>
]]></content>
      <categories>
        <category>计算机科学</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap中的红黑树</title>
    <url>/2019/04/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%AE%97%E6%B3%95/HashMap%E4%B8%AD%E7%9A%84%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
    <content><![CDATA[<p>HashMap 预期以链表数组的形式存储数据，即以 key 键的散列码计算索引，然后将元素插入到作为数组项的链表中（每个数组项称为桶）。为了提升查询的效率，HashMap 中存在一个阈值，当桶中的元素量超过这个阈值时，桶的数据结构就会从链表转变成红黑树。与红宝书中基于 2-3 树实现的红黑树不同，HashMap 中的红黑树基于 2-3-4 树实现。补充说明的是，Java 中的 TreeMap 也是基于 2-3-4 树实现的。</p>
<p>HashMap 中的红黑树节点通过 TreeNode 类构造，并按照按 key 键的散列码由大到小排列，这样就保证了红黑树的有序性。在链表中，相同的散列码只能存储一个元素；在红黑树中却能存储多个元素。当散列码相同时，HashMap 会通过 compareComparables 比较 key 键乃至 tieBreakOrder 实例方法比较内存地址的散列码，以决定元素在红黑树中的位置。因此，HashMap 以静态方法形式实现了两个辅助函数：comparableClassFor 用于判断 key 键的构造器是否实现了 Comparable 接口；compareComparables 静态方法用于比较 key 键。</p>
<p>HashMap 中的红黑树需要解决以下问题：查询节点、插入节点、删除节点、以及红黑树和链表数据结构的相互转换。为了保证红黑树和链表数据结构的高效转换，TreeNode 实例包含 prev, next 属性指向上一个或下一个节点，因此 TreeNode 既携带着红黑树的结构信息，又携带着双向链表的结构信息。</p>
<ol>
<li>插入节点：HashMap 首先会通过 putTreeVal 方法根据散列码顺序插入节点，然后通过 balanceInsertion 调整红黑树的平衡性。当树中存在相同的 key 键时，putTreeVal 方法会返回已插入的节点。</li>
<li>删除节点：HashMap 首先会通过 removeTreeNode 方法删除节点；特定情况下，删除节点后需要 balanceDeletion 调整红黑树的平衡性。</li>
<li>查询节点：依次通过比较 key 键的散列码、key 键、key 键内存地址的散列码在左右子树中查找节点。</li>
<li>红黑树和链表转换：在转换之前，无论红黑树和链表都保证了 key 键的唯一性。因此，当链表转换成红黑树时，只需根据 key 键的散列码或 key 键内存地址的散列码将链表节点插入到红黑树中的特定位置，然后使用 balanceInsertion 调整树的平衡性。红黑树转换成链表时，只需顺序遍历 treeNode 节点的 next 属性即可。</li>
</ol>
<p>以下是 TreeNode 的基本模型，同链表一样，红黑树以引用的方式构建整棵树：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断对象 x 的类是否实现了 Comparable 接口</span></span><br><span class="line"><span class="keyword">static</span> Class&lt;?&gt; comparableClassFor(Object x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x <span class="keyword">instanceof</span> Comparable) &#123;</span><br><span class="line">        Class&lt;?&gt; c; Type[] ts, as; Type t; ParameterizedType p;</span><br><span class="line">        <span class="comment">// getClass 方法用于在运行时获取对象的类</span></span><br><span class="line">        <span class="keyword">if</span> ((c = x.getClass()) == String.class) <span class="comment">// bypass checks</span></span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        <span class="comment">// getGenericInterfaces 方法以 Type[] 形式获取类直接实现的接口，包含泛型参数信息</span></span><br><span class="line">        <span class="keyword">if</span> ((ts = c.getGenericInterfaces()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ts.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (((t = ts[i]) <span class="keyword">instanceof</span> ParameterizedType) &amp;&amp;</span><br><span class="line">                    ((p = (ParameterizedType)t).getRawType() ==</span><br><span class="line">                        Comparable.class) &amp;&amp;</span><br><span class="line">                    (as = p.getActualTypeArguments()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                    as.length == <span class="number">1</span> &amp;&amp; as[<span class="number">0</span>] == c) <span class="comment">// type arg is c</span></span><br><span class="line">                    <span class="keyword">return</span> c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无法使用 Comparable 接口比较 key 键返回 0，否则返回对比结果</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;) <span class="comment">// for cast to Comparable</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareComparables</span><span class="params">(Class&lt;?&gt; kc, Object k, Object x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x == <span class="keyword">null</span> || x.getClass() != kc ? <span class="number">0</span> :</span><br><span class="line">            ((Comparable)k).compareTo(x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; parent;<span class="comment">// 父节点</span></span><br><span class="line">    TreeNode&lt;K,V&gt; left;<span class="comment">// 左子节点</span></span><br><span class="line">    TreeNode&lt;K,V&gt; right;<span class="comment">// 右子节点</span></span><br><span class="line">    TreeNode&lt;K,V&gt; prev;<span class="comment">// 上一个节点</span></span><br><span class="line">    <span class="keyword">boolean</span> red;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">super</span>(hash, key, val, next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当散列码等值且 key 键比较结果为 0 时，使用内存地址的散列码进行比较</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tieBreakOrder</span><span class="params">(Object a, Object b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="keyword">null</span> || b == <span class="keyword">null</span> ||</span><br><span class="line">            (d = a.getClass().getName().</span><br><span class="line">                compareTo(b.getClass().getName())) == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// System.identityHashCode 根据对象在内存中的地址计算出散列码</span></span><br><span class="line">            d = (System.identityHashCode(a) &lt;= System.identityHashCode(b) ?</span><br><span class="line">                    -<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="左旋、右旋"><a href="#左旋、右旋" class="headerlink" title="左旋、右旋"></a>左旋、右旋</h2><p>左旋、右旋操作的功能点在于：</p>
<ol>
<li>左旋：将作为右链接的红节点置为左链接。当父节点为左链接红节点、子节点为右链接红节点，通过左旋可以将红节点集中在左侧。</li>
<li>右旋：将作为左链接的红节点置为右链接。当左侧父子节点同时为红节点时，通过右旋可以将其转变成 4- 节点。</li>
</ol>
<h3 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h3><p>红宝书中的左旋操作会返回子树的根节点，以便于向上递归；HashMap 中的左旋操作不会返回子树的根节点，因此在左旋操作仍需要将新添加为子树根节点的 r 节点挂到祖父节点 pp 上（当 pp 为 null 时，则 r 为红黑树的根节点）。右旋操作同此。</p>
<img src="/2019/04/14/计算机科学/算法/HashMap中的红黑树/rotate-left.gif">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// p 图示中的 E，r 图示中的 S</span></span><br><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">rotateLeft</span><span class="params">(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; r, pp, rl;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (r = p.right) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 将 3 结点的中间部分挂在左节点 p（原始父节点）下</span></span><br><span class="line">        <span class="keyword">if</span> ((rl = p.right = r.left) != <span class="keyword">null</span>)</span><br><span class="line">            rl.parent = p;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将红链接中的右节点 r（原始子节点）上移，左节点（原始父节点）下移为右节点的子节点</span></span><br><span class="line">        <span class="comment">// 子树（可能是包含根节点的完整二叉树）在父节点 pp 中的位置保持不变</span></span><br><span class="line">        <span class="keyword">if</span> ((pp = r.parent = p.parent) == <span class="keyword">null</span>)</span><br><span class="line">            (root = r).red = <span class="keyword">false</span>;<span class="comment">// 原始父节点即为根节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pp.left == p)</span><br><span class="line">            pp.left = r;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.right = r;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 父子节点反转</span></span><br><span class="line">        r.left = p;</span><br><span class="line">        p.parent = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h3><img src="/2019/04/14/计算机科学/算法/HashMap中的红黑树/rotate-right.gif">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// p 图示中的 S，l 图示中的 E</span></span><br><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">rotateRight</span><span class="params">(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; l, pp, lr;</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="keyword">null</span> &amp;&amp; (l = p.left) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 将 3 结点的中间部分挂在右节点 p（原始父节点）下</span></span><br><span class="line">        <span class="keyword">if</span> ((lr = p.left = l.right) != <span class="keyword">null</span>)</span><br><span class="line">            lr.parent = p;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将红链接中的左节点 l（原始子节点）上移，右节点（原始父节点）下移为左节点的子节点</span></span><br><span class="line">        <span class="comment">// 子树（可能是包含根节点的完整二叉树）在父节点 pp 中的位置保持不变</span></span><br><span class="line">        <span class="keyword">if</span> ((pp = l.parent = p.parent) == <span class="keyword">null</span>)</span><br><span class="line">            (root = l).red = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pp.right == p)</span><br><span class="line">            pp.right = l;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.left = l;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 父子节点反转</span></span><br><span class="line">        l.right = p;</span><br><span class="line">        p.parent = l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h2><p>插入节点包含两个步骤：</p>
<ol>
<li>通过 putTreeVal 方法根据散列码将节点插入树的底部。</li>
<li>通过 balanceInsertion 方法调整树的平衡性。</li>
<li>通过 moveRootToFront 方法将根节点置于链表的首位。</li>
</ol>
<h3 id="putTreeVal"><a href="#putTreeVal" class="headerlink" title="putTreeVal"></a>putTreeVal</h3><p>putTreeVal 基于以下逻辑插入节点：</p>
<ol>
<li>首先比较 key 键的散列码，若不同，就通过比较值将节点插入到左子树或右子树中。</li>
<li>其次比较 key 键与树中节点是否等值，若等值，返回树中已存在的节点。</li>
<li>其次使用 Comparable 接口比较 key 键，根据比较结果将节点插入左子树或右子树中。</li>
<li>其次使用 tieBreakOrder 方法比较内存地址的散列码，再根据比较结果将节点插入左子树或右子树中。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// h 插入节点的散列码；k 插入节点的 key；pk 红黑二叉树节点的 key</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">putTreeVal</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">int</span> h, K k, V v)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> searched = <span class="keyword">false</span>;</span><br><span class="line">    TreeNode&lt;K,V&gt; root = (parent != <span class="keyword">null</span>) ? root() : <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> dir, ph; K pk;</span><br><span class="line">        <span class="comment">// 散列码大的放在右侧，小的放在左侧</span></span><br><span class="line">        <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">            dir = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">            dir = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 散列码相等，比较 key 键</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                    (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                    (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!searched) &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; q, ch;</span><br><span class="line">                searched = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (((ch = p.left) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                        (q = ch.find(h, k, kc)) != <span class="keyword">null</span>) ||</span><br><span class="line">                    ((ch = p.right) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                        (q = ch.find(h, k, kc)) != <span class="keyword">null</span>))</span><br><span class="line">                    <span class="keyword">return</span> q;</span><br><span class="line">            &#125;</span><br><span class="line">            dir = tieBreakOrder(k, pk);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">        <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node&lt;K,V&gt; xpn = xp.next;</span><br><span class="line">            TreeNode&lt;K,V&gt; x = map.newTreeNode(h, k, v, xpn);</span><br><span class="line">            <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                xp.left = x;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                xp.right = x;</span><br><span class="line">            xp.next = x;</span><br><span class="line">            x.parent = x.prev = xp;</span><br><span class="line">            <span class="comment">// 新插入的节点置于链表的左侧</span></span><br><span class="line">            <span class="keyword">if</span> (xpn != <span class="keyword">null</span>)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)xpn).prev = x;</span><br><span class="line"></span><br><span class="line">            moveRootToFront(tab, balanceInsertion(root, x));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="balanceInsertion"><a href="#balanceInsertion" class="headerlink" title="balanceInsertion"></a>balanceInsertion</h3><p>balanceInsertion 方法在向上递归的过程中需要处理的情况有以下几种：</p>
<ol>
<li>插入根节点，只需将根节点转变成黑链接即可。</li>
<li>黑节点下插入子节点，左右两侧都是红链接，构成 4- 节点。</li>
<li>4- 节点下插入子节点，将 4- 节点转变成 3 个 2- 节点子树。</li>
<li>单侧插入两个红节点，通过左旋、右旋转变成 3 个 2- 节点子树。</li>
</ol>
<img src="/2019/04/14/计算机科学/算法/HashMap中的红黑树/balanceInsertion.png">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 首层插入根节点，黑链接</span></span><br><span class="line"><span class="comment">// 2. 第二层插入的两个节点通常情况下均为红链接</span></span><br><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">balanceInsertion</span><span class="params">(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class="line">    x.red = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) &#123;</span><br><span class="line">        <span class="comment">// x 作为根节点</span></span><br><span class="line">        <span class="keyword">if</span> ((xp = x.parent) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            x.red = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        <span class="comment">// 父节点为普通节点或者父节点作为根节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!xp.red || (xpp = xp.parent) == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以下均基于父子节点同时为红链接，且必然存在祖父节点的情况</span></span><br><span class="line">        <span class="keyword">if</span> (xp == (xppl = xpp.left)) &#123;</span><br><span class="line">            <span class="comment">// 祖父节点下两侧节点均为红链接，构成 4- 节点，通过颜色转换将左右两侧节点置为黑链接</span></span><br><span class="line">            <span class="comment">// 此时将祖父节点置为红链接，以便于向上递归</span></span><br><span class="line">            <span class="keyword">if</span> ((xppr = xpp.right) != <span class="keyword">null</span> &amp;&amp; xppr.red) &#123;</span><br><span class="line">                xppr.red = <span class="keyword">false</span>;</span><br><span class="line">                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                x = xpp;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 祖父节点下单侧出现两个红链接，通过旋转调整</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 右节点左旋，使红链接集中在左侧，同时反转父子节点</span></span><br><span class="line">                <span class="keyword">if</span> (x == xp.right) &#123;</span><br><span class="line">                    root = rotateLeft(root, x = xp);</span><br><span class="line">                    xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 将集中在左侧的父子节点右旋成 4- 节点</span></span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    xp.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateRight(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (xppl != <span class="keyword">null</span> &amp;&amp; xppl.red) &#123;</span><br><span class="line">                xppl.red = <span class="keyword">false</span>;</span><br><span class="line">                xp.red = <span class="keyword">false</span>;</span><br><span class="line">                xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                x = xpp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (x == xp.left) &#123;</span><br><span class="line">                    root = rotateRight(root, x = xp);</span><br><span class="line">                    xpp = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.parent;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    xp.red = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (xpp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xpp.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateLeft(root, xpp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="moveRootToFront"><a href="#moveRootToFront" class="headerlink" title="moveRootToFront"></a>moveRootToFront</h3><p>moveRootToFront 方法用于将红黑树的根节点置于链表的顶部。因为通过 balanceInsertion 等方法调整树平衡性时，原本子节点可能成为根节点，这样新的根节点在链表中的位置就需要得到调整。针对这种情况，moveRootToFront 方法先从链表中剔除这个新的根节点，然后将这个根节点置于链表的首位。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function"><span class="keyword">void</span> <span class="title">moveRootToFront</span><span class="params">(Node&lt;K,V&gt;[] tab, TreeNode&lt;K,V&gt; root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span> &amp;&amp; tab != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> index = (n - <span class="number">1</span>) &amp; root.hash;</span><br><span class="line">        TreeNode&lt;K,V&gt; first = (TreeNode&lt;K,V&gt;)tab[index];</span><br><span class="line">        <span class="keyword">if</span> (root != first) &#123;</span><br><span class="line">            Node&lt;K,V&gt; rn;</span><br><span class="line">            tab[index] = root;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将新根节点 root 从原始链表中剔除，再插入为根节点</span></span><br><span class="line">            TreeNode&lt;K,V&gt; rp = root.prev;</span><br><span class="line">            <span class="keyword">if</span> ((rn = root.next) != <span class="keyword">null</span>)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)rn).prev = rp;</span><br><span class="line">            <span class="keyword">if</span> (rp != <span class="keyword">null</span>)</span><br><span class="line">                rp.next = rn;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 将链表的原始首节点 first 置于新的根节点 root 后</span></span><br><span class="line">            <span class="keyword">if</span> (first != <span class="keyword">null</span>)</span><br><span class="line">                first.prev = root;</span><br><span class="line">            root.next = first;</span><br><span class="line"></span><br><span class="line">            root.prev = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">checkInvariants</span><span class="params">(root)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><p>删除节点包含两个步骤：</p>
<ol>
<li>通过 removeTreeNode 方法删除当前节点。当待删除节点存在左右子节点时，删除过程中需要使用后继节点替换当前节点。</li>
<li>移位后的待删除节点为 3- 节点的父节点，通过 balanceInsertion 方法调整树的平衡性。</li>
<li>通过 moveRootToFront 方法将根节点置于链表的首位。</li>
</ol>
<h3 id="removeTreeNode"><a href="#removeTreeNode" class="headerlink" title="removeTreeNode"></a>removeTreeNode</h3><p>removeTreeNode 基于以下逻辑删除当前节点：</p>
<ol>
<li>通过重置 prev, next 属性调整双向链表的结构信息。</li>
<li>重置根节点；当树中节点过少时，将树转换成链表。</li>
<li>若待删除节点包含左右子节点，交换待删除节点和其后继节点的位置。可想而知的是，在完美平衡树中，这一操作会将待删除节点移到 2-3-4 树的底部。如果待删除节点为红节点，那么就构成了 4- 节点；否则构成了 3- 节点或普通 2- 节点。</li>
<li>若待删除节点在移位后为 3- 节点中的父节点，删除节点，然后通过 balanceDeletion 调整树的平衡性。若待删除节点在移位后为 4- 节点中的子节点，直接删除。若待删除节点在移位后为普通 2- 节点，通过 balanceDeletion 调整树的平衡性，然后删除。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">removeTreeNode</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> index = (n - <span class="number">1</span>) &amp; hash;</span><br><span class="line">    TreeNode&lt;K,V&gt; first = (TreeNode&lt;K,V&gt;)tab[index], root = first, rl;</span><br><span class="line">    TreeNode&lt;K,V&gt; succ = (TreeNode&lt;K,V&gt;)next, pred = prev;</span><br><span class="line">    <span class="comment">// 调整双向链表的结构信息</span></span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">        tab[index] = first = succ;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pred.next = succ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (succ != <span class="keyword">null</span>)</span><br><span class="line">        succ.prev = pred;</span><br><span class="line">    <span class="keyword">if</span> (first == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重置根节点</span></span><br><span class="line">    <span class="keyword">if</span> (root.parent != <span class="keyword">null</span>)</span><br><span class="line">        root = root.root();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 树中节点过少，将树转化成链表</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span> || root.right == <span class="keyword">null</span> ||</span><br><span class="line">        (rl = root.left) == <span class="keyword">null</span> || rl.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">        tab[index] = first.untreeify(map);  <span class="comment">// too small</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode&lt;K,V&gt; p = <span class="keyword">this</span>, pl = left, pr = right, replacement;</span><br><span class="line">    <span class="keyword">if</span> (pl != <span class="keyword">null</span> &amp;&amp; pr != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 查找后继节点 s</span></span><br><span class="line">        TreeNode&lt;K,V&gt; s = pr, sl;</span><br><span class="line">        <span class="keyword">while</span> ((sl = s.left) != <span class="keyword">null</span>) <span class="comment">// find successor</span></span><br><span class="line">            s = sl;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> c = s.red; s.red = p.red; p.red = c; <span class="comment">// swap colors</span></span><br><span class="line">        TreeNode&lt;K,V&gt; sr = s.right;</span><br><span class="line">        TreeNode&lt;K,V&gt; pp = p.parent;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 交换待删除节点 p 和后继节点 s 的位置</span></span><br><span class="line">        <span class="keyword">if</span> (s == pr) &#123; <span class="comment">// p was s's direct parent</span></span><br><span class="line">            p.parent = s;</span><br><span class="line">            s.right = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; sp = s.parent;</span><br><span class="line">            <span class="keyword">if</span> ((p.parent = sp) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s == sp.left)</span><br><span class="line">                    sp.left = p;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    sp.right = p;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((s.right = pr) != <span class="keyword">null</span>)</span><br><span class="line">                pr.parent = s;</span><br><span class="line">        &#125;</span><br><span class="line">        p.left = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ((p.right = sr) != <span class="keyword">null</span>)</span><br><span class="line">            sr.parent = p;</span><br><span class="line">        <span class="keyword">if</span> ((s.left = pl) != <span class="keyword">null</span>)</span><br><span class="line">            pl.parent = s;</span><br><span class="line">        <span class="keyword">if</span> ((s.parent = pp) == <span class="keyword">null</span>)</span><br><span class="line">            root = s;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">            pp.left = s;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.right = s;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sr != <span class="keyword">null</span>)</span><br><span class="line">            replacement = sr;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            replacement = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pl != <span class="keyword">null</span>)</span><br><span class="line">        replacement = pl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pr != <span class="keyword">null</span>)</span><br><span class="line">        replacement = pr;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        replacement = p;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若 p 下还有子节点 replacement，将 replacement 挂在祖父节点下，并剔除 p</span></span><br><span class="line">    <span class="keyword">if</span> (replacement != p) &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; pp = replacement.parent = p.parent;</span><br><span class="line">        <span class="keyword">if</span> (pp == <span class="keyword">null</span>)</span><br><span class="line">            root = replacement;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">            pp.left = replacement;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp.right = replacement;</span><br><span class="line">        p.left = p.right = p.parent = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 首先 p 已经移到了 2-3-4 树的底部，与其他节点构成 3- 节点或普通 2- 节点、或 4- 节点</span></span><br><span class="line">    <span class="comment">// 当 p 为红节点时，即作为 4- 节点的子节点，无需通过 balanceDeletion 调整树的平衡性</span></span><br><span class="line">    <span class="comment">// 当 p 为黑节点，即作为 3- 节点的父节点或普通 2- 节点，调整树的平衡性</span></span><br><span class="line">    <span class="comment">// 当构成 3- 节点时，replacement 作为 p 的子节点，必为红节点</span></span><br><span class="line">    <span class="comment">// 当构成 2- 节点时，replacement 即为 p</span></span><br><span class="line">    TreeNode&lt;K,V&gt; r = p.red ? root : balanceDeletion(root, replacement);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若 p 下没有子节点（p 的位置可能经过 balanceDeletion 调整），剔除 p</span></span><br><span class="line">    <span class="keyword">if</span> (replacement == p) &#123;  <span class="comment">// detach</span></span><br><span class="line">        TreeNode&lt;K,V&gt; pp = p.parent;</span><br><span class="line">        p.parent = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (pp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p == pp.left)</span><br><span class="line">                pp.left = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p == pp.right)</span><br><span class="line">                pp.right = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (movable)</span><br><span class="line">        moveRootToFront(tab, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="balanceDeletion"><a href="#balanceDeletion" class="headerlink" title="balanceDeletion"></a>balanceDeletion</h3><p>removeTreeNode 方法保证了 balanceDeletion 的执行时机，即 x 在树的底部，且 x 只可能是 3- 节点或普通 2- 节点，不可能是 4- 节点中的子红节点。在完美平衡树的机制下，x 的兄弟节点也只可能包含一级子节点。</p>
<p>balanceDeletion 在向上递归的过程中需要处理的情况有以下几种：</p>
<ol>
<li>当 x 为根节点或空节点，无需调整树的平衡性。</li>
<li>当 x 为 3- 节点中的子红节点，将其转换成普通 2- 节点，无需调整树的平衡性。向上递归过程也可能导致 x 为红节点，这是也只需转换颜色即可。</li>
<li>当 x 为 2- 节点，这时需要保障兄弟节点树的平衡性。若兄弟节点两侧都不是红节点或都不存在时，这时兄弟节点树的平衡性有所保障，只需将兄弟节点标红即可。若兄弟节点单侧包含红节点时，需要保障从父节点起的树的平衡性，这时可以按条件先将红节点右旋至右侧，再通过左旋将父节点下移、兄弟节点上移、左侄子节点挂在父节点下，以保障树的平衡性。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">TreeNode&lt;K,V&gt; <span class="title">balanceDeletion</span><span class="params">(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; xp, xpl, xpr;;)  &#123;</span><br><span class="line">        <span class="comment">// x 作为空节点或根节点，无需调整</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span> || x == root)</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((xp = x.parent) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            x.red = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// x 作为 3- 节点中的子红节点，将其转换为普通 2- 节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x.red) &#123;</span><br><span class="line">            x.red = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// x 作为普通 2-节点，且位于左侧</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((xpl = xp.left) == x) &#123;</span><br><span class="line">            <span class="comment">// 兄弟节点是红节点，左旋将父节点转换为红节点</span></span><br><span class="line">            <span class="keyword">if</span> ((xpr = xp.right) != <span class="keyword">null</span> &amp;&amp; xpr.red) &#123;</span><br><span class="line">                xpr.red = <span class="keyword">false</span>;</span><br><span class="line">                xp.red = <span class="keyword">true</span>;</span><br><span class="line">                root = rotateLeft(root, xp);</span><br><span class="line">                <span class="comment">// 原兄弟节点的左子节点作为新的 xpr 兄弟节点</span></span><br><span class="line">                xpr = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (xpr == <span class="keyword">null</span>)</span><br><span class="line">                x = xp;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; sl = xpr.left, sr = xpr.right;</span><br><span class="line">                <span class="comment">// 兄弟节点的两个子节点都不是红节点或都不存在时，兄弟节点树的平衡性有所保障，只需将兄弟节点标红</span></span><br><span class="line">                <span class="keyword">if</span> ((sr == <span class="keyword">null</span> || !sr.red) &amp;&amp;</span><br><span class="line">                    (sl == <span class="keyword">null</span> || !sl.red)) &#123;</span><br><span class="line">                    xpr.red = <span class="keyword">true</span>;</span><br><span class="line">                    x = xp;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 只兄弟节点的左子节点为红节点，右旋将红节点挂于右侧</span></span><br><span class="line">                    <span class="keyword">if</span> (sr == <span class="keyword">null</span> || !sr.red) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (sl != <span class="keyword">null</span>)</span><br><span class="line">                            sl.red = <span class="keyword">false</span>;</span><br><span class="line">                        xpr.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateRight(root, xpr);</span><br><span class="line">                        xpr = (xp = x.parent) == <span class="keyword">null</span> ?</span><br><span class="line">                            <span class="keyword">null</span> : xp.right;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 只兄弟节点的右子节点为红节点，将颜色标黑</span></span><br><span class="line">                    <span class="keyword">if</span> (xpr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xpr.red = (xp == <span class="keyword">null</span>) ? <span class="keyword">false</span> : xp.red;</span><br><span class="line">                        <span class="keyword">if</span> ((sr = xpr.right) != <span class="keyword">null</span>)</span><br><span class="line">                            sr.red = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 左旋将父节点下移，兄弟节点上移</span></span><br><span class="line">                    <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xp.red = <span class="keyword">false</span>;</span><br><span class="line">                        root = rotateLeft(root, xp);</span><br><span class="line">                    &#125;</span><br><span class="line">                    x = root;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// symmetric</span></span><br><span class="line">            <span class="keyword">if</span> (xpl != <span class="keyword">null</span> &amp;&amp; xpl.red) &#123;</span><br><span class="line">                xpl.red = <span class="keyword">false</span>;</span><br><span class="line">                xp.red = <span class="keyword">true</span>;</span><br><span class="line">                root = rotateRight(root, xp);</span><br><span class="line">                xpl = (xp = x.parent) == <span class="keyword">null</span> ? <span class="keyword">null</span> : xp.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (xpl == <span class="keyword">null</span>)</span><br><span class="line">                x = xp;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; sl = xpl.left, sr = xpl.right;</span><br><span class="line">                <span class="keyword">if</span> ((sl == <span class="keyword">null</span> || !sl.red) &amp;&amp;</span><br><span class="line">                    (sr == <span class="keyword">null</span> || !sr.red)) &#123;</span><br><span class="line">                    xpl.red = <span class="keyword">true</span>;</span><br><span class="line">                    x = xp;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (sl == <span class="keyword">null</span> || !sl.red) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (sr != <span class="keyword">null</span>)</span><br><span class="line">                            sr.red = <span class="keyword">false</span>;</span><br><span class="line">                        xpl.red = <span class="keyword">true</span>;</span><br><span class="line">                        root = rotateLeft(root, xpl);</span><br><span class="line">                        xpl = (xp = x.parent) == <span class="keyword">null</span> ?</span><br><span class="line">                            <span class="keyword">null</span> : xp.left;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xpl != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xpl.red = (xp == <span class="keyword">null</span>) ? <span class="keyword">false</span> : xp.red;</span><br><span class="line">                        <span class="keyword">if</span> ((sl = xpl.left) != <span class="keyword">null</span>)</span><br><span class="line">                            sl.red = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (xp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        xp.red = <span class="keyword">false</span>;</span><br><span class="line">                        root = rotateRight(root, xp);</span><br><span class="line">                    &#125;</span><br><span class="line">                    x = root;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="查询节点"><a href="#查询节点" class="headerlink" title="查询节点"></a>查询节点</h2><p>查询节点包含如下三个方法：</p>
<ul>
<li>root 获取红黑树的根节点。</li>
<li>find 查找当前子树中的节点。</li>
<li>getTreeNode 查找完整红黑树中的节点。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取根节点</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">root</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; r = <span class="keyword">this</span>, p;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((p = r.parent) == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        r = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从当前节点起查找节点：h 散列码，k key键</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k, Class&lt;?&gt; kc)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; p = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> ph, dir; K pk;</span><br><span class="line">        TreeNode&lt;K,V&gt; pl = p.left, pr = p.right, q;</span><br><span class="line">        <span class="comment">// 比较散列码</span></span><br><span class="line">        <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">            p = pl;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">            p = pr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 散列码相等，判断 key 是否等值</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pl == <span class="keyword">null</span>)</span><br><span class="line">            p = pr;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pr == <span class="keyword">null</span>)</span><br><span class="line">            p = pl;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用 compareComparables 比较 key 键</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((kc != <span class="keyword">null</span> ||</span><br><span class="line">                    (kc = comparableClassFor(k)) != <span class="keyword">null</span>) &amp;&amp;</span><br><span class="line">                    (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)</span><br><span class="line">            p = (dir &lt; <span class="number">0</span>) ? pl : pr;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 节点按 key 键内存地址的散列码决定位置，从左右子树中查找</span></span><br><span class="line">        <span class="comment">// 右子树递归调用 find 方法</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((q = pr.find(h, k, kc)) != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> q;</span><br><span class="line">        <span class="comment">// 左子树循环</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p = pl;</span><br><span class="line">    &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从根节点起查找节点</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">getTreeNode</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((parent != <span class="keyword">null</span>) ? root() : <span class="keyword">this</span>).find(h, k, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="桶交互"><a href="#桶交互" class="headerlink" title="桶交互"></a>桶交互</h2><h3 id="链表-gt-红黑树"><a href="#链表-gt-红黑树" class="headerlink" title="链表 -&gt; 红黑树"></a>链表 -&gt; 红黑树</h3><p>将链表转换成红黑树就是节点插入的过程，其特殊性是在这个插入过程中，key 键不存在重复值。因此该过程可分为步骤：</p>
<ol>
<li>插入根节点。</li>
<li>根据散列码将节点插入二叉树的底部。</li>
<li>通过 balanceInsertion 调整树的平衡性。</li>
<li>通过 moveRootToFront 将根节点置于链表的首位。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将链表转化成红黑二叉树，存储结构仍为链表，首节点是红黑二叉树的根节点</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeify</span><span class="params">(Node&lt;K,V&gt;[] tab)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; root = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = <span class="keyword">this</span>, next; x != <span class="keyword">null</span>; x = next) &#123;</span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)x.next;</span><br><span class="line">        x.left = x.right = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;<span class="comment">// 填充根节点</span></span><br><span class="line">            x.parent = <span class="keyword">null</span>;</span><br><span class="line">            x.red = <span class="keyword">false</span>;</span><br><span class="line">            root = x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            K k = x.key;<span class="comment">// 链表节点的 key，待插入红黑二叉树中</span></span><br><span class="line">            <span class="keyword">int</span> h = x.hash;</span><br><span class="line">            Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">                <span class="keyword">int</span> dir, ph;</span><br><span class="line">                K pk = p.key;<span class="comment">// 红黑二叉树节点的 key</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 顺序比较 key 键的散列码、key 键、内存地址的散列码，确定节点的位置 dir</span></span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                    dir = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    dir = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                            (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                            (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</span><br><span class="line">                    dir = tieBreakOrder(k, pk);</span><br><span class="line"></span><br><span class="line">                TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将 x 插入底部，不设置红链接标识，散列码大的位于左侧</span></span><br><span class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    x.parent = xp;</span><br><span class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                        xp.left = x;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        xp.right = x;</span><br><span class="line">                    root = balanceInsertion(root, x);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    moveRootToFront(tab, root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="红黑树-gt-链表"><a href="#红黑树-gt-链表" class="headerlink" title="红黑树 -&gt; 链表"></a>红黑树 -&gt; 链表</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将红黑二叉树转化成链表</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">untreeify</span><span class="params">(HashMap&lt;K,V&gt; map)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt; q = <span class="keyword">this</span>; q != <span class="keyword">null</span>; q = q.next) &#123;</span><br><span class="line">        <span class="comment">// 通过 replacementNode 方法将 TreeNode 转化成 Node</span></span><br><span class="line">        Node&lt;K,V&gt; p = map.replacementNode(q, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">            hd = p;<span class="comment">// hd 即链表中的首节点</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tl.next = p;</span><br><span class="line">        tl = p;<span class="comment">// 记录上一个节点，以绑定上一个节点和当前节点的关联</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><p>当需要扩容时，调用 split 方法可以将红黑树中的元素分拆到两个桶中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> index, <span class="keyword">int</span> bit)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;K,V&gt; b = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 将红黑树拆分为两个链表</span></span><br><span class="line">    TreeNode&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">    TreeNode&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; e = b, next; e != <span class="keyword">null</span>; e = next) &#123;</span><br><span class="line">        next = (TreeNode&lt;K,V&gt;)e.next;</span><br><span class="line">        e.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash &amp; bit) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.prev = loTail) == <span class="keyword">null</span>)</span><br><span class="line">                loHead = e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                loTail.next = e;</span><br><span class="line">            loTail = e;<span class="comment">// 记录上一个节点</span></span><br><span class="line">            ++lc;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.prev = hiTail) == <span class="keyword">null</span>)</span><br><span class="line">                hiHead = e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                hiTail.next = e;</span><br><span class="line">            hiTail = e;</span><br><span class="line">            ++hc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据元素量转换为红黑树或链表，并分配到不同的桶中</span></span><br><span class="line">    <span class="keyword">if</span> (loHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">            tab[index] = loHead.untreeify(map);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tab[index] = loHead;</span><br><span class="line">            <span class="keyword">if</span> (hiHead != <span class="keyword">null</span>) <span class="comment">// (else is already treeified)</span></span><br><span class="line">                loHead.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hiHead != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">            tab[index + bit] = hiHead.untreeify(map);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tab[index + bit] = hiHead;</span><br><span class="line">            <span class="keyword">if</span> (loHead != <span class="keyword">null</span>)</span><br><span class="line">                hiHead.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>文章草草整理完，回头想想，我仍感觉自己没法把握红黑树为什么会采用这种方式实现，就好像困惑于红黑树这个主意到底是谁在什么契机下想出来的那般。种种奥妙，尚未窥破，仍需努力。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/oldbai/p/9890808.html" target="_blank" rel="noopener">balanceInsertion 红黑树平衡插入</a><br><a href="https://www.jianshu.com/p/7b38abfc3298" target="_blank" rel="noopener">图解红黑树-算法导论-java实现基于HashMap1.8</a></p>
]]></content>
      <categories>
        <category>计算机科学</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>红黑树</title>
    <url>/2019/04/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E7%AE%97%E6%B3%95/%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
    <content><![CDATA[<p>与数组相比，链表提升了插入元素的效率。因为数组在插入元素时，需要移动后续元素的位置；而链表只需要改变后继元素的 prev 属性。然而在查询元素时，链表需要遍历所有元素，并不高效。借助于红黑树，既能提升查询的效率，又能保证插入的效率。</p>
<p>为什么说红黑树有助于提升查询和插入的效率呢？因为红黑树本质上是一棵完美平衡的<a href="http://xzfyu.com/2019/04/21/%E7%AE%97%E6%B3%95/%E7%AC%A6%E5%8F%B7%E8%A1%A8%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/">二叉查找树</a>，可以通过节点的有序性保证查找和插入操作的便捷，其作时间复杂度就是树的高度 O(lgN)，自然比链表的 O(N) 高效很多。红黑树有如下两个特征：有序性、平衡性。我们讲一棵红黑树是有序的，通常指的是树中的节点会遵照 key 键自小到大或自大到小的顺序。有序性是实现二叉树完美平衡的先决条件。完美平衡指的是树从根节点到每个底部节点的高度大致相当，这样才能保证查询操作的时间复杂度为 O(lgN)。设想当二叉树出现了单边有值的极端情况时，其查询效率就和链表一样同为 O(N)。因此，实际上是完美平衡的二叉树便于查询节点，而红黑树是完美平衡二叉树的一种实现方式。</p>
<p>犹如红黑树是完美平衡树的一种实现方式，红黑树自身也有多种实现方式。本文所介绍的红黑树（即算法红宝书中的红黑树）是基于 2-3 树实现的。在插入元素方面，2-3 树所具有的优点为：当向 2- 节点插入新节点时，通过将 2- 节点转变成 3- 节点，可以迅速接纳新的节点；当向 3- 节点插入新节点时，通过将 3- 节点转变成 4- 节点，再将 4- 节点转变成 3 个 2- 节点构成的子树，也可以迅速接纳新的节点。在实现上，若使用不同的数据类型表示 2- 节点或 3- 节点及其附属信息，接着实现不同类型节点的转换，这样势必会使程序相当复杂，且容易遇上性能问题。红黑树就应运而生了。</p>
<p>红宝书中的红黑树有如下性质：</p>
<ul>
<li>红链接均为左链接</li>
<li>没有任何一个节点同时和两条红链接相连</li>
<li>该树是完美黑色平衡的，即任意空链接到根节点的路径上的黑链接数量相同</li>
</ul>
<p>第一条性质指的是红黑树中构成 3- 节点的方式总是唯一的。当红链接为右链接时，需要通过左旋操作将其转变为标准的左链接 3- 节点。第二条性质包含以下两种情况：父子节点不能同时为红链接（无论子节点是左链接还是右链接）；父节点下的两个子节点不能同时为红链接。当父子节点同时为红链接时，可通过旋转操作将其转变为 3 个 2- 节点的子树，这样就能同时消除父子节点的红链接。当父节点下的两个子节点同时为红链接时，可通过颜色转换操作将两个子节点变为黑链接。从 2-3 树的角度直观地看第二条性质，也是指红黑树中的每一个节点不能同时从属于两个 3- 节点。因此，第二条性质和第三条性质一样，表明红黑树是和 2-3 树一一对应的。</p>
<p>需要说明的是：2- 节点是包含 2 个子节点的节点，在红黑树中就是普通节点；3- 节点由两个节点构成，其下包含 3 个子节点，在红黑树中就是左子节点为红链接；4- 节点由三个节点构成，其下包含 4 个子节点，在红黑树中就是左右两侧子节点均为红链接。当分析红黑树的直观视图时，我们只需要考虑 2- 节点和 3- 节点。在插入和删除元素时，我们才需要考虑 4- 节点。红黑树的直观视图就是二叉树。特别的，当将 3- 节点拉平后，红黑树的直观视图就会变成 2-3 树。</p>
<img src="/2019/04/07/计算机科学/算法/红黑树/red-black.png">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> RED = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> BLACK = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    Key key;</span><br><span class="line">    Value value;</span><br><span class="line">    Node left, right;<span class="comment">// 左右子树</span></span><br><span class="line">    <span class="keyword">int</span> N;<span class="comment">// 节点总数</span></span><br><span class="line">    <span class="keyword">boolean</span> color;<span class="comment">// 标识红链接或黑链接</span></span><br><span class="line"></span><br><span class="line">    Node(Key key, Value value, <span class="keyword">int</span> N, <span class="keyword">boolean</span> color)&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.N = N;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRed</span><span class="params">(Node x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> x.color == RED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在分析红黑树时，我们需要致力于解决如下这样一个命题：怎样在插入和删除节点时保证树的平衡性？</p>
<h2 id="左旋、右旋、颜色转换"><a href="#左旋、右旋、颜色转换" class="headerlink" title="左旋、右旋、颜色转换"></a>左旋、右旋、颜色转换</h2><p>红黑树抽象了三种抽象操作：左旋转、右旋转和颜色转换。这三种抽象操作都是局部变换。简单地说，左旋转用于将红链接从右链接转变成左链接，即红链接均为左链接的标准红黑树；右旋转用于将父节点和左子节点均为红链接的子树转变成 3 个 2- 节点的子树；颜色转换将两个子节点同时为红链接的子树转变成 3 个 2- 节点的子树，同时子树的根节点转变为红链接，颜色转换操作可以向上递归，以实现整颗红黑树中不能有两个子节点同时为红链接。</p>
<h3 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h3><img src="/2019/04/07/计算机科学/算法/红黑树/rotate-left.gif">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Node <span class="title">rotateLeft</span><span class="params">(Node h)</span></span>&#123;</span><br><span class="line">  Node x = h.right;<span class="comment">// 取出原红链接节点 x</span></span><br><span class="line">  h.right = x.left;<span class="comment">// 将中间部分 x.left 置于左节点 h 下</span></span><br><span class="line">  x.left = h;<span class="comment">// 因 x 将作为子树的根节点，将左节点 h 置为红链接节点 x 的左子节点</span></span><br><span class="line">  x.color = h.color;<span class="comment">// 不改变子树根节点的颜色</span></span><br><span class="line">  h.color = RED;<span class="comment">// 将子树中的红链接节点置为 h，即左移 </span></span><br><span class="line">  x.N = h.N;<span class="comment">// 调整节点数目</span></span><br><span class="line">  h.N = <span class="number">1</span> + size(h.left) + size(h.right);</span><br><span class="line">  <span class="keyword">return</span> x;<span class="comment">// 返回子树的根节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上文已指出，左旋的目的就是将作为右链接的红链接转变为标准的左链接。</p>
<h3 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h3><img src="/2019/04/07/计算机科学/算法/红黑树/rotate-right.gif">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Node <span class="title">rotateRight</span><span class="params">(Node h)</span></span>&#123;</span><br><span class="line">  Node x = h.left;<span class="comment">// 取出原红链接节点 x</span></span><br><span class="line">  h.left = x.right;<span class="comment">// 将中间部分 x.left 置于右节点 h 下</span></span><br><span class="line">  x.right = h;<span class="comment">// 因 x 将作为子树的根节点，右节点 h 置为红链接节点 x 的右子节点</span></span><br><span class="line">  x.color = h.color;<span class="comment">// 不改变子树根节点的颜色</span></span><br><span class="line">  h.color = RED;<span class="comment">// 将子树中的红链接节点置为 h，即右移</span></span><br><span class="line">  x.N = h.N;<span class="comment">// 调整节点数目</span></span><br><span class="line">  h.N = <span class="number">1</span> + size(h.left) + size(h.right);</span><br><span class="line">  <span class="keyword">return</span> x;<span class="comment">// 返回子树的根节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>右旋的目的需要结合使用场景，即当在父节点和左子节点同时为红链接时，通过右旋和颜色转换可以将子树转变为包含 3 个 2- 节点的子树。试想一下，当父节点和左侧子节点都为红链接时，即上图中 less than E 子树的根节点也是红链接，右旋操作就可以使旋转后的根节点 E 与其两侧子节点构成 4- 节点（即两侧子节点同时为红链接）。这时再通过颜色转换就可以把这两个子节点均置为黑链接，以避免单个节点同时和两条红链接相连。图示参见节点插入部分。</p>
<h4 id="颜色转换"><a href="#颜色转换" class="headerlink" title="颜色转换"></a>颜色转换</h4><img src="/2019/04/07/计算机科学/算法/红黑树/flip-colors.png">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flipColors</span><span class="params">(Node h)</span></span>&#123;</span><br><span class="line">  h.color = RED;<span class="comment">// 根节点置为红链接</span></span><br><span class="line">  h.left.color = BLACK;<span class="comment">// 左右子节点置为黑链接</span></span><br><span class="line">  h.right.color = BLACK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上文已经指出，在父节点和左侧子节点同时为红链接的情形下，通过右旋操作可以使祖父节点拥有两个红链接子节点，再通过颜色转换可以将这两个节点都转换成黑链接。因为左旋、右旋和颜色转换都基于红链接，将子树的根节点置为红链接有助于向上递归调整树的平衡性（即使得左旋、右旋、颜色转换操作能作用于自根节点始的整棵树）。</p>
<h2 id="节点插入"><a href="#节点插入" class="headerlink" title="节点插入"></a>节点插入</h2><p>节点插入需要针对以下情况：</p>
<img src="/2019/04/07/计算机科学/算法/红黑树/2-node.png">
<ul>
<li>当插入对象为 2- 节点时，向左插入就是在根节点左侧直接添加一个红链接，使父子节点构成一个 3- 节点；向右插入就是在根节点右侧先添加一个红链接，然后通过左旋反转父子节点的位置。</li>
</ul>
<img src="/2019/04/07/计算机科学/算法/红黑树/3-node.png">
<ul>
<li>当插入对象为 3- 节点时，向左插入就使得父子节点同时为红链接，因此就需要通过右旋和颜色转换将其转变为包含 3 个 2- 节点的子树；中间插入就使得父子节点既同时是红链接，子节点又是非法的右链接，因此先需通过左旋将子树变更为向左插入一样的形态，然后再沿用向左插入的调整策略；向右插入可以通过颜色转换将两个子节点变为黑链接。完成以上操作后，向上递归调整自根节点始的整棵树。</li>
</ul>
<p>插入算法的实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span></span>&#123;</span><br><span class="line">    root = put(root, key, val);</span><br><span class="line">    root.color = BLACK;<span class="comment">// 根节点始终为黑链接</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node h, Key key, Value val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (h == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> Node(key, val, <span class="number">1</span>, RED);<span class="comment">// 创建根节点或底部节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向下递归插入节点</span></span><br><span class="line">    <span class="keyword">int</span> cmp = key.CompareTo(h.key);</span><br><span class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) h.left = put(h.left, key, val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) h.right = put(h.right, key, val);</span><br><span class="line">    <span class="keyword">else</span> h.val = val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向上递归调整树的平衡性</span></span><br><span class="line">    <span class="comment">// [左旋]，[右旋，颜色转换]是连贯一体的操作，可能有，也可能没有</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 红链接为右链接，左旋，针对 2- 节点或 3-节点中插入情况</span></span><br><span class="line">    <span class="comment">// 可能会引起向上递归执行左旋操作</span></span><br><span class="line">    <span class="keyword">if</span> (isRed(h.right) &amp;&amp; !isRed(h.left)) h = rotateLeft(h);</span><br><span class="line">    <span class="comment">// 父子节点均为红链接，右旋</span></span><br><span class="line">    <span class="keyword">if</span> (isRed(h.left) &amp;&amp; isRed(h.left.left)) h = rotateRight(h);</span><br><span class="line">    <span class="comment">// 两侧子节点均为红链接，颜色转换</span></span><br><span class="line">    <span class="keyword">if</span> (isRed(h.left) &amp;&amp; isRed(h.right)) h = flipColors(h);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调整节点数目</span></span><br><span class="line">    h.Number = Size(h.left) + Size(h.right) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> h;<span class="comment">// 返回根节点，便于向上递归</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="节点删除"><a href="#节点删除" class="headerlink" title="节点删除"></a>节点删除</h2><p>可想而知，当待删除的节点在 3- 节点中，如果 3- 节点在底部，那么这个节点就可以直接删除；如果 3- 节点不在底部，就可以用该节点的前驱或后继节点替换这个节点，然后再删除这个节点。当删除的节点在 2- 节点中，删除操作将破坏树的平衡性，这时就需要从父节点或兄弟节点中借一个节点构成 3- 节点或 4- 节点，然后再执行删除操作。在删除节点的过程中，程序会自顶向下构建 3- 节点或 4- 节点；删除结点后，再自底向上拆解 4- 节点。</p>
<p>需要指出的是，上文中左旋、右旋操作所具有的一般性为：即便子节点不是红链接，左旋、右旋在反转父子节点时，还能创建红链接。因此，构建 3- 节点需要借助于左旋、右旋操作；构建 4- 节点借助于反向颜色转换操作。</p>
<h3 id="反向颜色转换"><a href="#反向颜色转换" class="headerlink" title="反向颜色转换"></a>反向颜色转换</h3><p>反向颜色转换是上文 flipColors 方法的反向操作，即将左右子节点均置为红链接，这会使得单侧父子节点构成一个 3- 节点（可视为将父节点借给子节点），同时父节点和两侧子节点又会构成一个 4- 节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveFlipColors</span><span class="params">(Node h)</span></span>&#123;</span><br><span class="line">    h.color = Black;            </span><br><span class="line">    h.left.color = Red;       </span><br><span class="line">    h.right.color = Red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="左移"><a href="#左移" class="headerlink" title="左移"></a>左移</h3><p>左移操作适用于子树中的最小键，即左侧节点。对比上文，左移操作包含如下两个步骤：</p>
<ol>
<li>通过反向颜色转换 moveFlipColors 操作构建 4- 节点。</li>
<li>若右侧为 3- 节点，将 3- 节点中的最小键左移到左节点下，使左节点变为 3- 节点。这时需要通过颜色转换 flipColors 拿掉 4- 节点。</li>
</ol>
<img src="/2019/04/07/计算机科学/算法/红黑树/moveRedLeft.png">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">moveRedLeft</span><span class="params">(Node h)</span></span>&#123;</span><br><span class="line">    moveFlipColors(h);<span class="comment">// 从父节点中借一个</span></span><br><span class="line">    <span class="keyword">if</span> (isRed(h.right.left))&#123;<span class="comment">// 兄弟节点不是 2- 节点，从兄弟节点中借一个</span></span><br><span class="line">        h.right = rotateRight(h.right);</span><br><span class="line">        h = rotateLeft(h);</span><br><span class="line">        flipColors(h);<span class="comment">// 从兄弟节点借了一个后，把从父节点中借来的还回去</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="右移"><a href="#右移" class="headerlink" title="右移"></a>右移</h3><p>右移操作适用于子树中的最大键，即右侧节点。同样包含两个步骤：</p>
<ol>
<li>通过反向颜色转换 moveFlipColors 操作构建 4- 节点。</li>
<li>若左侧为 2- 节点，将该 2- 节点的父节点右移，使右节点变为 3- 节点。这时需要通过颜色转换 flipColors 拿掉 4- 节点。</li>
</ol>
<img src="/2019/04/07/计算机科学/算法/红黑树/moveRedRight.png">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">moveRedRight</span><span class="params">(Node h)</span></span>&#123;</span><br><span class="line">    moveFlipColors(h);<span class="comment">// 从父节点中借一个</span></span><br><span class="line">    <span class="keyword">if</span> (!isRed(h.left.left))&#123;<span class="comment">// 兄弟节点是 2- 节点，从兄弟节点中借一个</span></span><br><span class="line">        h = rotateRight(h);</span><br><span class="line">        flipColors(h);<span class="comment">// 从兄弟节点借了一个后，把从父节点中借来的还回去</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="再平衡"><a href="#再平衡" class="headerlink" title="再平衡"></a>再平衡</h3><p>无论在删除左侧节点还是在删除右侧节点时，都可能会在右侧创建新的红链接，所以我们需要通过左旋操作移除该红链接。且删除操作会破坏红黑树的性质，使红黑树下拥有不合法的作为右链接的红链接，或者父节点和左子节点同时为红链接，或者两侧子节点同时为红链接，这时就需要借助节点插入时的左旋、右旋、颜色转换操作逐级向上调整了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">balance</span><span class="params">(Node h)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 删除左节点可能会创建 4- 节点，右链接为红链接</span></span><br><span class="line">    <span class="comment">// 删除右节点可能会使用左旋创建居于右侧的红链接</span></span><br><span class="line">    <span class="comment">// 两种情况均通过 rotateLeft 还原</span></span><br><span class="line">    <span class="keyword">if</span> (isRed(h.right)) h = rotateLeft(h);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 和节点插入时相同，通过[左旋]、[右旋，颜色转换]调整树的平衡性</span></span><br><span class="line">    <span class="keyword">if</span> (isRed(h.right) &amp;&amp; !isRed(h.left)) h = rotateLeft(h);</span><br><span class="line">    <span class="keyword">if</span> (isRed(h.left) &amp;&amp; isRed(h.left.left)) h = rotateRight(h);</span><br><span class="line">    <span class="keyword">if</span> (isRed(h.left) &amp;&amp; isRed(h.right)) flipColors(h);</span><br><span class="line"></span><br><span class="line">    h.N = size(h.left) + size(h.right) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="删除最小键"><a href="#删除最小键" class="headerlink" title="删除最小键"></a>删除最小键</h3><img src="/2019/04/07/计算机科学/算法/红黑树/deleteMin.png">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteMin</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 当 flipColors, moveFlipColors 由同一个函数实现时，需要将根节点置红，以便进行反向颜色转换</span></span><br><span class="line">    <span class="keyword">if</span>(!isRed(root.left) &amp;&amp; !isRed(root.right))&#123;</span><br><span class="line">        root.color = Red;</span><br><span class="line">    &#125;</span><br><span class="line">    root = deleteMin(root);</span><br><span class="line">    <span class="keyword">if</span> ( !isEmpty() ) root.color = Black;<span class="comment">// 根节点颜色复原</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">deleteMin</span><span class="params">(Node h)</span></span>&#123;</span><br><span class="line">    <span class="comment">// h 就是为最小键，置为 null 移除</span></span><br><span class="line">    <span class="keyword">if</span>(h.left == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向下递归构建 3- 节点和 4- 节点，并删除节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 左子节点为 2- 节点，通过左移操作向右子节点或父节点中借一个</span></span><br><span class="line">    <span class="keyword">if</span>(!isRed(h.left) &amp;&amp; !isRed(h.left.left))</span><br><span class="line">        h = moveRedLeft(h);</span><br><span class="line">    h.left = deleteMin(h.left);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向上递归移除临时的 4- 节点，调整树的平衡性</span></span><br><span class="line">    <span class="keyword">return</span> balance(h);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="删除最大键"><a href="#删除最大键" class="headerlink" title="删除最大键"></a>删除最大键</h3><img src="/2019/04/07/计算机科学/算法/红黑树/deleteMax.png">
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!isRed(root.left) &amp;&amp; isRed(root.right))&#123;</span><br><span class="line">        root.color = Red;</span><br><span class="line">    &#125;</span><br><span class="line">    root = deleteMax(root);</span><br><span class="line">    <span class="keyword">if</span> ( !isEmpty() ) root.color = Black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">deleteMax</span><span class="params">(Node h)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 左子节点为红链接时，通过右旋将其给到右侧，以构建 3- 节点</span></span><br><span class="line">    <span class="keyword">if</span>(isRed(h.left))&#123;                                     </span><br><span class="line">        h = rotateRight(h);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// h 就是为最大键，置为 null 移除</span></span><br><span class="line">    <span class="keyword">if</span>(h.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向下递归构建 3- 节点和 4- 节点，并删除节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 右子节点为 2- 节点，通过右移操作向左子节点或父节点中借一个</span></span><br><span class="line">    <span class="keyword">if</span>(!isRed(h.right) &amp;&amp; !isRed(h.right.left))&#123;</span><br><span class="line">        h = moveRedRight(h);</span><br><span class="line">    &#125;</span><br><span class="line">    h.right = deleteMax(h.right);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向上递归移除临时的 4- 节点，调整树的平衡性</span></span><br><span class="line">    <span class="keyword">return</span> balance(h);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!isRed(root.left)&amp;&amp; !isRed(root.right))&#123;</span><br><span class="line">        root.color = Red;</span><br><span class="line">    &#125;</span><br><span class="line">    root = delete(root, key);</span><br><span class="line">    <span class="keyword">if</span> ( !isEmpty() ) root.color = Black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">delete</span><span class="params">(Node h, Key key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key.compareTo(h.key) &lt; <span class="number">0</span>)&#123; </span><br><span class="line">        <span class="comment">// 向下递归构建 3- 节点和 4- 节点，并删除节点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 左子节点为 2- 节点，通过左移操作向右子节点或父节点中借一个       </span></span><br><span class="line">        <span class="keyword">if</span> (!isRed(h.left) &amp;&amp; !isRed(h.left.left)) </span><br><span class="line">            h = moveRedLeft(h);    </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归删除</span></span><br><span class="line">        h.left = delete(h.left, key);         </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 左子节点为红链接时，通过右旋将其给到右侧，以构建 3- 节点</span></span><br><span class="line">        <span class="keyword">if</span> (isRed(h.left)) </span><br><span class="line">            h = rotateRight(h);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 无后继节点，意味待删除节点为底部节点，置为 null 删除</span></span><br><span class="line">        <span class="comment">// 怎么保证 h 是 3- 节点？</span></span><br><span class="line">        <span class="keyword">if</span> (key.compareTo(h.key) == <span class="number">0</span> &amp;&amp; (h.right == <span class="keyword">null</span>)) </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下递归构建 3- 节点和 4- 节点，并删除节点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 右子节点为 2- 节点，通过右移操作向左子节点或父节点中借一个</span></span><br><span class="line">        <span class="keyword">if</span> (!isRed(h.right) &amp;&amp; !isRed(h.right.left)) </span><br><span class="line">            h = moveRedRight(h);           </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用后继节点替换</span></span><br><span class="line">        <span class="keyword">if</span> (key.compareTo(h.key) == <span class="number">0</span>)&#123;      </span><br><span class="line">            h.val = get(h.right, min(h.right).key);            </span><br><span class="line">            h.key = min(h.right).key;                   </span><br><span class="line">            h.right = deleteMin(h.right);             </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归删除</span></span><br><span class="line">        <span class="keyword">else</span> h.right = delete(h.right, key);  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> balance(h);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h2><p>这篇文章是我在理解 HashMap 过程中的一阵整理。回头想想，仍觉得自己对红黑树的理解不是很透彻。留在网上暂作为一种记录，以便于渐进式修改。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.cnblogs.com/yangecnu/p/Introduce-Red-Black-Tree.html" target="_blank" rel="noopener">浅谈算法和数据结构: 九 平衡查找树之红黑树</a><br><a href="https://www.jianshu.com/p/37c845a5add6" target="_blank" rel="noopener">一篇文章搞懂红黑树的原理及实现</a></p>
]]></content>
      <categories>
        <category>计算机科学</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet</title>
    <url>/2019/03/23/backend/web%20%E6%9C%8D%E5%8A%A1/Servlet/</url>
    <content><![CDATA[<p>我们先来看一下，作为 Servlet 容器（也称为 web 容器）的 Tomcat 的一般工作机制：</p>
<ol>
<li>客户端首次发送请求，Tomcat 将实例化特定的 Servlet 类并执行 init 方法。</li>
<li>Tomcat 将请求解析成 request，并将其转发给 servlet。</li>
<li>servlet调用 service 方法处理请求，获得 reponse 并发送回客户端。</li>
<li>当客户端再次发送请求，重复 2, 3 步。</li>
<li>当 Servlet 销毁时（卸载应用程序或关闭 Servlet 容器），调用 destory 方法。</li>
</ol>
<p>Servlet 是运行在 web 服务器上用于接受和处理请求、获得响应的程序。javax.servlet 包提供了一组接口和类，用于定义和描述 Servlet 类和 Servlet 容器（提供 servlet的运行时环境）的契约。</p>
<p>The javax.servlet package contains a number of classes and interfaces that describe and define the contracts between a servlet class and the runtime environment provided for an instance of such a class by a conforming servlet container.</p>
<p>和一般的容器技术相同，Servlet 容器会协调 servlet 的生命周期，并为 servlet 提供全局上下文 ServletContext，以便于使用通用的工具函数、全局配置或缓存、访问全量的 servlet、动态注册 Servlet 等。因此，对于单机环境部署的 web 应用，针对不同的路由会有多个 servlet，servletContext 却只有一个；这也使得在单机环境中 servletContext 可用于缓存全局数据。当然在分布式环境下，每台虚拟机都会有一个 servletContext，不宜再使用 servletContext 缓存数据。</p>
<p>聊回容器技术，抽象类 ServletContext 是由容器实现的，就是说容器在应用启动阶段就会实例化全局上下文，并将 Servlet 类加载到内存中。在 ServletContext 抽象类中，我们可以看见 setInitParameter 方法用于对接全局的初始参数，addServlet 方法用于注册 Servlet（实现类完全可以用实例属性缓存全量的 Servlet）。在 javax.servlet 的设计中，Servlet 的初始参数和路由规则等配置项同 Servlet 呈轻耦合关系，addServlet 方法实际注册的是 servletRegistration，这样就使得 servlet 不能变更路由规则了。</p>
<p>由 servletContext 向上封装构成 servletConfig，该实例既作为 servlet.init 方法的参数，又可以通过 servlet.getServletConfig 方法间接访问。每个 servlet 对应一个 servletConfig。通过这个 servletConfig，既可以获取全局上下文（全局的初始参数可通过上下文进行获取），又在于获取 servlet 自有的初始参数。因此，容器会维护 servletContext, servletConfig 实例，并协调 servlet 生命周期方法的调用。Servlet 包含如下三个生命周期方法：</p>
<ul>
<li>init(ServletConfig config) 初始化方法。通常当 Servlet 容器初次接受请求时，就会尝试实例化 Servlet 并调用其 init 方法。如果将 Servlet 配置为 loadOnStartup，那么 init 方法就会在容器启动时调用。</li>
<li>service(ServletRequest req, ServletResponse res) 处理请求以获取响应。需要注意的是，Servlet 容器会以多进程的方式运行，共享的资源、缓存需要及时作同步。</li>
<li>destroy() 当 Servlet 移出 Servlet 容器时被调用，如杀死进程等。实现 destory 方法一般用于销毁状态、及时同步资源或缓存。</li>
</ul>
<p>javax.servlet 开具了 Filter 过滤器的机制，该机制可用于作公共层面的权限校验、日志打印、数据转换等。它同样通过 servletContext 注册和维护，由容器提供 filterConfig 以获取全局上下文及配置。它也具有三个生命周期方法：</p>
<ul>
<li>init(FilterConfig filterConfig) 初始化方法。</li>
<li>doFilter(ServletRequest request, ServletResponse response, FilterChain chain) 过滤逻辑，调用 chain.doFilter 执行下一个过滤器或将请求转交给 servlet。</li>
<li>destroy() 销毁。</li>
</ul>
<p>filter 有其适用范围，默认为 DispatcherType.REQUEST 过滤常规请求。当将 Filter 的初始参数 dispatcherTypes 配置为 DispatcherType.FORWARD, DispatcherType.INCLUDE, DispatcherType.ERROR, DispatcherType.ASYNC 时，将分别对 requestDispatcher.forward(req, res) 重定向、 requestDispatcher.include(req, res) 资源包含、404 响应、异步请求作过滤。</p>
<h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><p>ServletContext 的功能如下：</p>
<ol>
<li>获取资源或查看其媒体类型。</li>
<li>注册 servlet 并作管理。</li>
<li>注册 filter 并作管理。</li>
<li>缓存全局数据，在数据变更时触发 listener。</li>
<li>设置 session 超时时间等…</li>
</ol>
<p>servletContext 及其 attribute 属性均会经由 java.util.EventObject 包装，并由实现类组织事件的触发时机。因此对于 servletContext 的初始化及其 attribute 属性的变动，都可以订制监听器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Servlet 容器初始化时调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServletContainerInitializer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; c, ServletContext ctx)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServletContext</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 全局初始参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInitParameter</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setInitParameter</span><span class="params">(String name, String value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取资源或资源的媒体类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMimeType</span><span class="params">(String file)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getResourcePaths</span><span class="params">(String path)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> URL <span class="title">getResource</span><span class="params">(String path)</span> <span class="keyword">throws</span> MalformedURLException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> InputStream <span class="title">getResourceAsStream</span><span class="params">(String path)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 requestDispatcher，以重定向或作资源包含</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestDispatcher <span class="title">getRequestDispatcher</span><span class="params">(String path)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestDispatcher <span class="title">getNamedDispatcher</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印日志，日志的名称和类型由容器决定</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message, Throwable throwable)</span></span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 缓存或获取全局状态，其值变更时将会通知 listener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getAttribute</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getAttributeNames</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name, Object object)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册或获取 Servlet</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistration.<span class="function">Dynamic <span class="title">addServlet</span><span class="params">(String servletName, String className)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> ServletRegistration.<span class="function">Dynamic <span class="title">addServlet</span><span class="params">(String servletName, Servlet servlet)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> ServletRegistration.<span class="function">Dynamic <span class="title">addServlet</span><span class="params">(String servletName,</span></span></span><br><span class="line"><span class="function"><span class="params">            Class&lt;? extends Servlet&gt; servletClass)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> ServletRegistration.<span class="function">Dynamic <span class="title">addJspFile</span><span class="params">(String jspName, String jspFile)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> &lt;T extends Servlet&gt; <span class="function">T <span class="title">createServlet</span><span class="params">(Class&lt;T&gt; c)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistration <span class="title">getServletRegistration</span><span class="params">(String servletName)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, ? extends ServletRegistration&gt; getServletRegistrations();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册或获取过滤器</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistration.<span class="function">Dynamic <span class="title">addFilter</span><span class="params">(String filterName, String className)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> FilterRegistration.<span class="function">Dynamic <span class="title">addFilter</span><span class="params">(String filterName, Filter filter)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> FilterRegistration.<span class="function">Dynamic <span class="title">addFilter</span><span class="params">(String filterName,</span></span></span><br><span class="line"><span class="function"><span class="params">            Class&lt;? extends Filter&gt; filterClass)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> &lt;T extends Filter&gt; <span class="function">T <span class="title">createFilter</span><span class="params">(Class&lt;T&gt; c)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistration <span class="title">getFilterRegistration</span><span class="params">(String filterName)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, ? extends FilterRegistration&gt; getFilterRegistrations();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SessionCookieConfig <span class="title">getSessionCookieConfig</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSessionTrackingModes</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            Set&lt;SessionTrackingMode&gt; sessionTrackingModes)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;SessionTrackingMode&gt; <span class="title">getDefaultSessionTrackingModes</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;SessionTrackingMode&gt; <span class="title">getEffectiveSessionTrackingModes</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加 listener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">(String className)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> &lt;T extends EventListener&gt; <span class="function"><span class="keyword">void</span> <span class="title">addListener</span><span class="params">(T t)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addListener</span><span class="params">(Class&lt;? extends EventListener&gt; listenerClass)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> &lt;T extends EventListener&gt; <span class="function">T <span class="title">createListener</span><span class="params">(Class&lt;T&gt; c)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取、设置 session 超时时间</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSessionTimeout</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSessionTimeout</span><span class="params">(<span class="keyword">int</span> sessionTimeout)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取、设置请求体 request body 编码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRequestCharacterEncoding</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequestCharacterEncoding</span><span class="params">(String encoding)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取、设置响应体 reponse body 编码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResponseCharacterEncoding</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResponseCharacterEncoding</span><span class="params">(String encoding)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JspConfigDescriptor <span class="title">getJspConfigDescriptor</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClassLoader <span class="title">getClassLoader</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>关于 Servlet 的讲解见于上文，我们知道，开发者可以实现特定的 init, service, destory 方法。在讲解 HttpServlet 前，我们先来了解一下 ServletRequest, ServletResponse。</p>
<h3 id="req-amp-amp-res"><a href="#req-amp-amp-res" class="headerlink" title="req &amp;&amp; res"></a>req &amp;&amp; res</h3><p>顾名思义，当接受到请求时，Servlet 容器会将其封装为 servletRequest，便于读取请求内容。容器既实现了 ServletRequest 接口，又实现了 ServletInputStream 抽象类，通过 servletInputStream.read 方法可读取请求内容。ServletRequest 接口包含如下功能：</p>
<ul>
<li>访问全局上下文。</li>
<li>getInputStream 返回 ServletInputStream 实例，便于以二进制形式读取请求体。</li>
<li>getReader 返回 BufferedReader 实例，便于以字符串形式读取请求体。</li>
<li>getParameter 获取查询参数。</li>
<li>getPart, getParts 返回 Part 实例或集合，便于获取 multipart/form-data 媒体类型上传的文件，</li>
<li>setAttribute 设置缓存数据。</li>
<li>获取其他请求相关信息。</li>
<li>获取服务器或客户端 ip 地址信息等…</li>
</ul>
<p>用于处理 http 请求的 HttpServletRequest 接口增加了如下功能：</p>
<ul>
<li>getQueryString 获取查询参数。</li>
<li>getMethod 获取请求方式。</li>
<li>getRequestURI 获取请求地址。</li>
<li>getCookies 获取 cookie，返回值为 Cookie 实例构成的数组（Cookie 类用于便捷处理 cookie）。</li>
<li>getRequestedSessionId 获取 sessionId。</li>
<li>getSession 获取 session，返回值为 HttpSession 实例（HttpSession 类用于便捷处理 session）。</li>
<li>getHeader 获取请求头。</li>
<li>newPushBuilder 通过 PushBuilder 伪造请求等。</li>
</ul>
<p>servletResponse 用于生成响应。同样，容器既实现了 ServletResponse 接口，又实现了 ServletOutputStream 抽象类，通过 servletOutputStream.write 方法可读取请求内容。servletResponse.getOutputStream 方法返回 ServletOutputStream 实例，便于以二进制形式发送数据；servletResponse.getWriter 方法返回 PrintWriter 实例，便于以字符串形式发送数据。因为 http 会在发送响应前先发送响应头，所以响应头需要提前创建。</p>
<p>继承 ServletResponse 的 HttpServletResponse 接口增加了如下功能：</p>
<ul>
<li>加密 url。</li>
<li>添加 cookie。</li>
<li>设置响应头。</li>
<li>设置状态码。</li>
<li>sendError 发送错误响应。</li>
<li>sendRedirect 重定向。</li>
</ul>
<p>额外的，javax.servlet.http 提供了 HttpServletRequestWrapper, HttpServletResponseWrapper 允许开发者以子类的形式制作适配器，便于快速处理请求和响应。</p>
<h3 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h3><p>javax.servlet 中的 GenericServlet 抽象类同时实现了 Servlet, ServletConfig 接口，因此 GenericServlet 子类既可以实现 init, service, destory 生命周期方法，又可以获取初始参数、servletConfig。</p>
<p>抽象类 HttpServlet 就是 GenericServlet 的子类，在其保护方法 service 中，将根据请求方式的不同分别调用 doGet 等方法处理请求。HttpServlet 子类可实现的方法包含：</p>
<ul>
<li>doGet 处理 get 请求。</li>
<li>doHead 处理 head 请求，只返回响应头。</li>
<li>doPost 处理 post 请求。</li>
<li>doPut 处理 put 请求，用于发送文件等。</li>
<li>doDelete 处理 delete 请求，用于删除服务端的文件等。</li>
<li>doOptions 处理 options 请求，通过 ALLOW 响应头获得服务端对请求路由支持的请求方式，比如通过实现 doGet 方式判断是否支持 get 请求。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADER_IFMODSINCE = <span class="string">"If-Modified-Since"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">getLastModified</span><span class="params">(HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">maybeSetLastModified</span><span class="params">(HttpServletResponse resp,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      <span class="keyword">long</span> lastModified)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (resp.containsHeader(HEADER_LASTMOD))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (lastModified &gt;= <span class="number">0</span>)</span><br><span class="line">            resp.setDateHeader(HEADER_LASTMOD, lastModified);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String method = req.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class="line">            <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">            <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</span><br><span class="line">                doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> ifModifiedSince;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalArgumentException iae) &#123;</span><br><span class="line">                    ifModifiedSince = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 资源更新</span></span><br><span class="line">                <span class="keyword">if</span> (ifModifiedSince &lt; (lastModified / <span class="number">1000</span> * <span class="number">1000</span>)) &#123;</span><br><span class="line">                    maybeSetLastModified(resp, lastModified);</span><br><span class="line">                    doGet(req, resp);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">            <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">            maybeSetLastModified(resp, lastModified);</span><br><span class="line">            doHead(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">            doPost(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">            doPut(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">            doDelete(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">            doOptions(req,resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">            doTrace(req,resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String errMsg = lStrings.getString(<span class="string">"http.method_not_implemented"</span>);</span><br><span class="line">            Object[] errArgs = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">            errArgs[<span class="number">0</span>] = method;</span><br><span class="line">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line"></span><br><span class="line">            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest  request;</span><br><span class="line">        HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            request = (HttpServletRequest) req;</span><br><span class="line">            response = (HttpServletResponse) res;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(lStrings.getString(<span class="string">"http.non_http"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="annotation"><a href="#annotation" class="headerlink" title="annotation"></a>annotation</h2><p>javax.servlet.annotation 提供了一些常用注解：</p>
<ul>
<li>WebServlet 声明 Servlet，设置初始化参数、路由规则等。</li>
<li>WebFilter 声明 Filter。</li>
<li>MultipartConfig 声明 Servlet 将用于处理文件上传操作，期望请求头的媒体类型为 multipart/form-data。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MultipartConfig &#123;</span><br><span class="line">    <span class="comment">// 容器暂存文件的临时目录</span></span><br><span class="line">    <span class="function">String <span class="title">location</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">maxFileSize</span><span class="params">()</span> <span class="keyword">default</span> -1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">maxRequestSize</span><span class="params">()</span> <span class="keyword">default</span> -1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文件多大时写入临时目录，小于此值的作内存缓存</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fileSizeThreshold</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p>Servlet 容器包含可复用线程组成的线程池，避免创建、销毁线程带来的性能消耗。当容器接收到请求时，它将在线程池中取出可用的线程处理请求。当没有可用的线程时，请求将被放入到一个先进先出队列中等待处理。多线程所带来的问题是，Servlet 中的静态属性和实例属性可以被多个线程同时访问，这样就可能会引起一致性问题：在某个线程中已修改的实例属性不能被并行处理的另一个线程感知到。在多线程的情况中，方法创建的对象和变量在发放执行过程中都是安全的，其他线程没法访问到它们。因此，我们需要避免使用静态属性或实例属性缓存可变内容；非到万不得已，可使用 synchronized 同步代码块处理，保证其他线程无法同时执行代码。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>可借鉴的点：</p>
<ol>
<li>协调组件生命周期的容器，在前端层面可以构建管理 page 的容器。</li>
<li>使用抽象类和接口设立规范。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://tomcat.apache.org/tomcat-8.0-doc/servletapi/javax/servlet/package-summary.html" target="_blank" rel="noopener">Package javax.servlet</a><br><a href="https://blog.csdn.net/qq_19782019/article/details/80292110" target="_blank" rel="noopener">JavaWeb——Servlet（全网最详细教程包括Servlet源码分析）</a><br><a href="https://blog.csdn.net/tangiwang/article/details/83149693" target="_blank" rel="noopener">ServletContext理解学习</a><br><a href="http://www.blogjava.net/yongboy/archive/2010/12/30/346209.html" target="_blank" rel="noopener">servlet 3.0笔记之servlet的动态注册</a><br><a href="https://www.cnblogs.com/zr520/p/6103410.html" target="_blank" rel="noopener">Servlet3.0的异步</a><br><a href="https://blog.csdn.net/lmy86263/article/details/51219072" target="_blank" rel="noopener">Java Web基础知识之Filter</a><br><a href="https://blog.csdn.net/sky786905664/article/details/79433123" target="_blank" rel="noopener">tomcat 与 nginx，apache的区别及优缺点</a><br><a href="http://www.importnew.com/21866.html" target="_blank" rel="noopener">Java中synchronized的用法</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>web 服务</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot试水</title>
    <url>/2019/03/17/backend/spring/spring%20boot%E8%AF%95%E6%B0%B4/</url>
    <content><![CDATA[<p>Spring Boot 使用了约定大于配置的理念，极大地简化了 Spring 项目的配置环节。</p>
<h2 id="搭建项目"><a href="#搭建项目" class="headerlink" title="搭建项目"></a>搭建项目</h2><ol>
<li>安装 <a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">Java</a>, <a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">Maven</a>, <a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noopener">IntelliJ IDEA</a>。为 Java, Maven 配置环境变量。</li>
<li>通过 IDEA 创建项目：create project - spring initializr - 设置 name（项目名）, GroupId（项目所属组织的唯一标识符）, ArtifactId（项目在组中的唯一标识符） 等 - 初始化选择 dependencies，暂且只选择 web - 设置 project name。IDEA 会自动创建 pom.xml 文件和启动类等。</li>
<li>删除 .mvn, mvnw, mvnw.cmd。</li>
<li>Maven 面板点击 Reimport All Maven Projects，以加载依赖及插件。</li>
<li>项目的启动类右键选择 Run/Debug。这会自动生成本地调试模式的 Configuration 配置文件。启动成功后，就可以在 localhost:8080 访问页面了。</li>
<li>编写 controller，访问 localhost:8080/hello 测试内容。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/main/java 目录下的启动类，右键选择 Run/Debug 启动</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// controller 目录 HelloController.java</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>备注：</p>
<ol>
<li>GroupId 同 ArtifactId 一起构成 Maven 项目的唯一性。</li>
<li>初始化选择 web 将在 pom.xml 文件中添加 spring-boot-starter-web 依赖。作为 starter pom，spring-boot-starter-web 实际整合了 spring-boot-starter, spring-boot-starter-tomcat, spring-web, spring-webmvc, hibernate-validator 等包（参考 <a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web/2.1.3.RELEASE），以简化" target="_blank" rel="noopener">https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web/2.1.3.RELEASE），以简化</a> Maven 配置。在项目中执行 mvn dependency:tree 命令，既可以下载依赖，又可以查看依赖的结构。同时，内嵌 Tomcat 的方式，也使 Spring Boot 项目无须以 war 包形式部署。Spring Boot 还支持 Jetty, Undertow 等 Servlet 容器。</li>
<li>Java 1.5 版本过时报错问题：检查 Project Structure - Project | Modules 指定的当前项目 jdk 版本、Setting - Java Compiler 指定的 Java 版本是否正确。</li>
<li><a href="https://www.cnblogs.com/sword-successful/p/6408281.html" target="_blank" rel="noopener">Maven 配置阿里云中央仓库</a>。在 IDEA 中，pom.xml 点击 Alt + Insert 可以快速添加依赖；在添加过程中，可以到<a href="https://maven.aliyun.com/mvn/search" target="_blank" rel="noopener">阿里 maven</a>查看依赖的版本。IDEA 支持<a href="https://www.cnblogs.com/hongdada/p/6024574.html" target="_blank" rel="noopener">自动导入包</a>。</li>
<li>@SpringBootApplication 实际是个组合注解，包含 @Configuration, @EnableAutoConfiguration, @ComponentScan。@EnableAutoConfiguration 作用是从 classpath 中搜索所有 META-INF/spring.factories 配置文件，然后将其中 org.springframework.boot.autoconfigure.EnableAutoConfiguration 置为 true 的配置项加载到 spring 容器中，并启用自动配置。@ComponentScan 使 Spring Boot 自动扫描启动类同级目录及其下集目录，以自动加载 Bean。@Configuration用于定义配置类，可以被 AnnotationConfigApplicationContext 或 AnnotationConfigWebApplicationContext 类扫描到，用于构建配置类内部的 Bean，以初始化 Spring 容器。</li>
</ol>
<h3 id="jetty"><a href="#jetty" class="headerlink" title="jetty"></a>jetty</h3><p>如果想用禁用 Tomcat，使用其他 servlet 容器如 Jetty，pom.xml 文件可以作如下修改：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/xkzju2010/article/details/69487723" target="_blank" rel="noopener">IDEA快捷键</a><br><a href="https://www.cnblogs.com/EasonJim/p/6816340.html" target="_blank" rel="noopener">Maven的构建生命周期理解</a><br><a href="https://blog.csdn.net/newbie_907486852/article/details/79798700" target="_blank" rel="noopener">starter pom详解</a><br><a href="https://www.cnblogs.com/whx7762/p/7832985.html" target="_blank" rel="noopener">@EnableAutoConfiguration注解原理</a><br><a href="https://blog.csdn.net/koflance/article/details/59304090" target="_blank" rel="noopener">@Configuration详解</a><br><a href="https://blog.csdn.net/lhw_csd/article/details/82183008" target="_blank" rel="noopener">idea创建springboot多模块项目</a></p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>Spring Boot 支持使用 application.properties 或 application.yml 作为全局配置文件，通常会配置在 src/main/resources 目录下。Spring Boot 项目的启动类会搜索并加载配置文件来获取配置项。搜索的文件目录包含当前目录的 config 子目录、当前目录、classpath 中的 config 包、classpath。通过 spring.config.location 添加额外的配置文件搜索路径。</p>
<p>配置文件中的配置项可以通过 @Value 注入到 Bean 中，如 @Value(“${alfred.test}”)。配置文件中的配置项也可以通过 @ConfigurationProperties 注解构建 POJO 读取，如 @ConfigurationProperties(prefix = “alfred”) 读取。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">application.yml</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9090</span></span><br><span class="line"></span><br><span class="line"><span class="string">//</span> <span class="string">application-dev.yml</span></span><br><span class="line"><span class="attr">alfred:</span></span><br><span class="line"><span class="attr">  test:</span> <span class="string">'测试'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/alfred"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlfredController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String test;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;alfred.test&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest</span><span class="params">(String test)</span> </span>&#123;</span><br><span class="line">        AlfredController.test = test;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>针对不同的环境，Spring 支持创建 application-dev.yml, application-test.yml, application-prod.yml 文件，并在 application.yml 指定当前所采用的配置文件，这被称为 Profile 配置。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">application.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>
<h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/hry2015/article/details/72353994" target="_blank" rel="noopener">@Value详解</a><br><a href="https://www.cnblogs.com/liaojie970/p/8043150.html" target="_blank" rel="noopener">spring boot 使用@ConfigurationProperties</a></p>
<h2 id="Controller-那些事"><a href="#Controller-那些事" class="headerlink" title="Controller 那些事"></a>Controller 那些事</h2><p>首先来看一下 Spring MVC 提供的一些注解：</p>
<ul>
<li>@Controller：组合了 @Component，声明一个控制器。</li>
<li>@RestController：组合注解，组合了 @Controller 和 @ResponseBody，将返回值放在 response 体内，以传递 json 数据。</li>
<li>@ResponseBody：将 controller 返回值放在 response 体内。</li>
<li>@RequestMapping：用于映射 Web 请求（访问路径和参数）、处理类和方法等。@RequestMapping 支持 Servlet 的 request 和 response 作为参数，也支持对 request 和 response 的媒体类型进行配置。典型形式如如 @RequestMapping(‘/users’) 或 @RequestMapping(value = ‘/users’, method = RequestMethod.GET) 或 @RequestMapping(path = “/users”, method = RequestMethod.PUT, consumes = “application/json”) 或 @RequestMapping(path = “/users”, method = RequestMethod.POST, produces = “application/json;charset=UTF-8”) 或 @RequestMapping(path = “/users”, method = RequestMethod.GET, params = “myParam=myValue”) 或 @RequestMapping(path = “/pets”, method = RequestMethod.GET, headers = “myHeader=myValue”)。method 请求方法可以是 RequestMethod.GET, RequestMethod.POST, RequestMethod.PUT, RequestMethod.DELETE。</li>
<li>@GetMapping，@PostMapping, @PutMapping, @DeleteMapping, @PatchMapping：简便形式映射 get, post 等请求。</li>
<li>@PathVariable：用来接收路径参数，如 users/{id} 路径中的 id。</li>
<li>@RequestParam：用来接收 get, post 请求中查询路径中的参数，可处理 Content-Type: application/x-www-form-urlencoded 编码格式的数据，形式如 @RequestParam(value=”id”) int id。</li>
<li>@RequestBody：用来接收 json 格式的数据，可将其转换成对应的数据类型，一般用于处理非 Content-Type: application/x-www-form-urlencoded 编码格式的数据，不能处理 get 请求。</li>
<li>@ModelAttribute：将参数绑定到 Model 对象上。</li>
<li>@RequestHeader：获取消息头中的内容。</li>
<li>@CookieValue：用来接收 cookie 的值。</li>
<li>@SessionAttributes：用来将指定实体类的数据存储到 session，一般用在类级别。</li>
<li>@SessionAttribute：用来接收已经存储的 session，一般用在方法级别。</li>
<li>@RequestAttribute：用来接收请求参数，一般用在过滤器或拦截器上。</li>
<li>HttpServletRequest：获取请求内容。</li>
</ul>
<p>针对请求头 ContentType 指定的编码格式，有如下三种情况：</p>
<ol>
<li>application/x-www-form-urlencoded：@RequestParam, @ModelAttribute, @RequestBody 均可以处理。</li>
<li>multipart/form-data：不能使用 @RequestBody 处理（form表单中有文件时，必须指定 enctype 属性为 multipart/form-data，意为以二进制流的形式传输文件）。</li>
<li>application/json、application/xml等：必须使用 @RequestBody 处理。</li>
</ol>
<p>针对 ajax 请求，首先制作 ResultUtil 统一处理返回值；然后使用注解编写 controller，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 ResultUtil 统一处理返回值</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(Integer code)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSuccess</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccess</span><span class="params">(Boolean success)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.success = success;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">success</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        Result result = <span class="keyword">new</span> Result();</span><br><span class="line">        result.setCode(<span class="number">200</span>);</span><br><span class="line">        result.setMsg(<span class="string">"success"</span>);</span><br><span class="line">        result.setSuccess(<span class="keyword">true</span>);</span><br><span class="line">        result.setData(object);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">success</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> success(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">error</span><span class="params">(Integer code, String msg)</span></span>&#123;</span><br><span class="line">        Result result = <span class="keyword">new</span> Result();</span><br><span class="line">        result.setCode(code);</span><br><span class="line">        result.setMsg(msg);</span><br><span class="line">        result.setSuccess(<span class="keyword">false</span>);</span><br><span class="line">        result.setData(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/request"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/pathVariableTest/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">pathVariableTest</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/requestParamTest"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">requestParamTest</span><span class="params">(@RequestParam(value = <span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/requestBodyTest"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">requestBodyTest</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/modelAttributeTest"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">modelAttributeTest</span><span class="params">(@ModelAttribute User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"httpServletRequestTest"</span>, method = RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">httpServletRequestTest</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>针对页面，Spring Boot 支持使用 FreeMarker, Groovy, Thymeleaf, Velocity, Mustache 作为模板引擎，推荐使用 Thymeleaf，因为其提供了完美的 Spring MVC 的支持。编写方法为：pom.xml 文件添加 thymeleaf 依赖，制作 controller 直接返回页面模板在 resources/templates 中的位置，添加 html 页面。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    just a demo</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/zeroingToOne/p/8992746.html" target="_blank" rel="noopener">@RequestParam、@RequestBody和@ModelAttribute区别</a><br><a href="http://www.imooc.com/article/details/id/262098" target="_blank" rel="noopener">@SessionAttributes与@SessionAttribute会话数据控制</a><br><a href="https://www.cnblogs.com/xdp-gacl/p/3798347.html" target="_blank" rel="noopener">HttpServletRequest对象</a><br><a href="https://www.jianshu.com/p/d6424d98b02e" target="_blank" rel="noopener">利用 Spring Boot 设计风格良好的Restful API及错误响应</a><br><a href="https://www.cnblogs.com/mr-yang-localhost/p/7812038.html" target="_blank" rel="noopener">springboot使用hibernate validator校验</a></p>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>面向切面编程能把横切关注点和业务逻辑相互分离开，以便于为横切关注点单独制作模块。通常，横切关注点包括日志、安全和事务管理等通用内容。以比方论，面向切面编程就是在一个处理过程中定位一个切点，然后在这个切点前后添加一个或多个动作；其实现依赖于 Java 编程的同步性。因此，面向切面编程需要包含切点定位、动作定义、动作相对于切点的执行位置等。在一个处理过程中添加动作本可以借助显式调用函数的方式实现，但这样处理过程就会与一个或多个特定的动作高度耦合，且当另一个处理过程需要添加这一个或多个特定的动作时，仍需要显式调用。如果在处理过程中插入一个空跑的函数声明这是个切点，然后再使用代理封装该函数，就可以在切点前后以松耦合的方式执行特定动作了。特定动作和待封装的函数可能是一对多的关系。spring AOP 以切面（Aspect）为视角，首先以切点（PointCut）声明待封装的函数在哪个位置，其次使用 @After, @Before, @Around 注解声明在切点前后需要执行哪些动作。使用 @PointCut 定义切点是不必要的，它只是一种语法糖；因为在 @After 注解后可直接使用 execution 表达式锁定待封装函数的位置，同时 execution 表达式也能定位到多个待封装函数。特别的，当 execution 表达式定位 controller 时，就可以对特定或所有的 controller 进行拦截，而无需插入在 controller 插入定义为连接点（JoinPoint）的动作，controller 就作为连接点。想要实现这一过程，spring 容器在创建 controller 等定义了连接点的实例时，就必须知道哪些是 Aspect，且这些 Aspect 都需要注明为 Bean 以实例化，然后再使用这些实例去封装定义了连接点的实例。基于上述，AOP 有三种使用方式：</p>
<ol>
<li>execution 表达式直接定位 controller, service 的方法。</li>
<li>execution 表达式定位辅助类，再通过辅助类将 controller, service 的方法声明为连接点。</li>
<li>execution 表达式定位辅助类，在 controller, service 中显式调用辅助类中作为连接点的方法。</li>
</ol>
<p>编码过程如下：</p>
<ol>
<li>使用 @Aspect, @Bean 注解声明一个切面。</li>
<li>在切面中使用 @After, @AfterReturning, @AfterThrowing, @Before, @Around 注解定义一个建言（advice）。或者以 execution 表达式定位连接点的位置；或者在切面中 @PointCut 定义切点，并在 @After, @AfterReturning, @AfterThrowing, @Before, @Around 注解中使用该切点作为参数。</li>
<li>controller, service 的方法作为连接点，无需额外编程；辅助类的方法作为连接点，或者在 controller, service 的方法上添加注解，或者在 controller, service 的方法中显示调用辅助类的方法。</li>
</ol>
<p>本节以 AOP 统一日志处理为例，说明其使用过程：</p>
<p>（1）pom.xml 添加 aop, log4j 依赖。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 禁用默认日志模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>（2）resources 目录中添加 log4j.properties 配置文件。<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">log4j.rootLogger=INFO,</span> <span class="string">CONSOLE,</span> <span class="string">ROLLING_FILE,</span> <span class="string">DAILY_ROLLING_FILE</span></span><br><span class="line"></span><br><span class="line"><span class="string">log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="string">log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="string">log4j.appender.CONSOLE.layout.ConversionPattern=&lt;%d&gt;[%5p]</span> <span class="string">%m</span> <span class="bullet">-</span> <span class="string">%c%n</span></span><br><span class="line"></span><br><span class="line"><span class="string">log4j.appender.ROLLING_FILE=org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="string">log4j.appender.ROLLING_FILE.File=./logs/client.log</span></span><br><span class="line"><span class="string">log4j.appender.ROLLING_FILE.Append=true</span></span><br><span class="line"><span class="string">log4j.appender.ROLLING_FILE.MaxFileSize=20000KB</span></span><br><span class="line"><span class="string">log4j.appender.ROLLING_FILE.MaxBackupIndex=100</span></span><br><span class="line"><span class="string">log4j.appender.ROLLING_FILE.layout=org.apache.log4j.PatternLayout</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#log4j.appender.ROLLING_FILE.layout.ConversionPattern=&lt;%d&gt;[%5p] %c - %m%n</span></span><br><span class="line"><span class="string">log4j.appender.ROLLING_FILE.layout.ConversionPattern=%d</span> <span class="string">%c</span> <span class="string">[%t]</span> <span class="string">(%F:%L)</span> <span class="string">%-5p</span> <span class="bullet">--&gt;</span> <span class="string">%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="string">log4j.appender.DAILY_ROLLING_FILE=org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="string">log4j.appender.DAILY_ROLLING_FILE.File=./logs/client</span></span><br><span class="line"><span class="string">log4j.appender.DAILY_ROLLING_FILE.DatePattern='.'yyyy-MM-dd'.log'</span></span><br><span class="line"><span class="string">log4j.appender.DAILY_ROLLING_FILE.Append=true</span></span><br><span class="line"><span class="string">log4j.appender.DAILY_ROLLING_FILE.layout=org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="string">log4j.appender.DAILY_ROLLING_FILE.layout.ConversionPattern=%d</span> <span class="string">%c</span> <span class="string">[%t]</span> <span class="string">(%F:%L)</span> <span class="string">%-5p</span> <span class="bullet">--&gt;</span> <span class="string">%m%n</span></span><br></pre></td></tr></table></figure></p>
<p>（3）制作 Aspect 类。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(LogAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//申明一个切点 里面是 execution表达式</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.example.demo.aop.Log)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">controllerAspect</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//请求method前打印内容</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(public * com.example.demo.controller..*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodBefore</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = requestAttributes.getRequest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印请求内容</span></span><br><span class="line">        log.info(<span class="string">"===============请求内容==============="</span>);</span><br><span class="line">        log.info(<span class="string">"请求地址:"</span>+request.getRequestURL().toString());</span><br><span class="line">        log.info(<span class="string">"请求方式:"</span>+request.getMethod());</span><br><span class="line">        log.info(<span class="string">"请求类方法:"</span>+joinPoint.getSignature());</span><br><span class="line">        log.info(<span class="string">"请求类方法参数:"</span>+ Arrays.toString(joinPoint.getArgs()));</span><br><span class="line">        log.info(<span class="string">"===============请求内容==============="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//在方法执行完结后打印返回内容</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(returning = <span class="string">"o"</span>,pointcut = <span class="string">"controllerAspect()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAfterReturing</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"--------------返回内容----------------"</span>);</span><br><span class="line">        log.info(<span class="string">"Response内容:"</span> + JSON.toJSONString(o));</span><br><span class="line">        log.info(<span class="string">"--------------返回内容----------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>（4）声明辅助类。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log &#123;</span><br><span class="line">    <span class="function">String <span class="title">log</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>（5）被拦截的处理过程。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/aop"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Log</span>(log = <span class="string">"注解式拦截的方法"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">getTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<img src="/2019/03/17/backend/spring/spring%20boot试水/aop切面.png">
<h3 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/xiaoxiaoyusheng2012/article/details/79486784" target="_blank" rel="noopener">Spring Boot项目中使用log4j</a><br><a href="https://www.cnblogs.com/gmq-sh/p/4798194.html" target="_blank" rel="noopener">annotation(@Retention@Target)详解</a></p>
<h2 id="mybaits"><a href="#mybaits" class="headerlink" title="mybaits"></a>mybaits</h2><p>Spring Boot 中整合 mybaits 有两种方式：基于注解或者基于 xml 配置。</p>
<p>（1）pom.xml 添加 mysql, mybatis 依赖。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mysql 连接依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>（2）修改配置文件。<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/demo</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于 xml 配置添加</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapping/*Mapper.xml</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.example.demo</span></span><br></pre></td></tr></table></figure></p>
<p>（3）制作 mapper 文件或 *Mapper.xml 文件，以及实体类。<br>（3.1）实体类：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNickName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNickName</span><span class="params">(String nickName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>（3.2）基于注解的方式：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dao/mapper 层制作 mapper 文件</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MybatisUserAnnotationMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT id,nickname FROM demo.user WHERE id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">getUser</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"INSERT INTO demo.user(nickname)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createUser</span><span class="params">(Map&lt;String, Object&gt; reqMap)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"UPDATE demo.user SET nickname = #&#123;nickName&#125; WHERE id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id, @<span class="title">Param</span><span class="params">(<span class="string">"nickName"</span>)</span> String nickName)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"DELETE FROM demo.user WHERE id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>（3.2）基于 xml 配置：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dao/mapper 层制作 mapper 文件</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MybatisUserAnnotationMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">getUser</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createUser</span><span class="params">(Map&lt;String, Object&gt; reqMap)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id, @<span class="title">Param</span><span class="params">(<span class="string">"nickName"</span>)</span> String nickName)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(@Param(<span class="string">"id"</span>)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- resources/mapper 中添加 mapper.xml --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.example.demo.dao.mapper.MybatisUserAnnotationMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUser"</span> <span class="attr">resultType</span>=<span class="string">"com.example.demo.dao.entity.User"</span>&gt;</span></span><br><span class="line">        SELECT id,nickname FROM demo.user WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"createUser"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.Map"</span>&gt;</span></span><br><span class="line">        INSERT INTO demo.user(nickname) VALUES (#&#123;nickname&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span>&gt;</span></span><br><span class="line">      UPDATE demo.user SET nickname = #&#123;nickName&#125; WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span>&gt;</span></span><br><span class="line">      DELETE FROM demo.user WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="druid"><a href="#druid" class="headerlink" title="druid"></a>druid</h3><p>druid 是阿里推出的数据库监控驱动。</p>
<p>（1）添加 druid 依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- druid 数据库监控驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>（2）修改配置文件。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/demo</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">    initialSize:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    minIdle:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">    maxActive:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">    maxWait:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">    timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">    minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line"><span class="attr">    validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line"><span class="attr">    testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    testOnReturn:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">    filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line"><span class="attr">    connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span></span><br><span class="line"><span class="attr">    useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>（3）添加 DruidConfig 文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(LogAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(<span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">druidStatViewServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br><span class="line">        registrationBean.addInitParameter(<span class="string">"allow"</span>, <span class="string">"127.0.0.1"</span>);<span class="comment">// IP白名单 (没有配置或者为空，则允许所有访问)</span></span><br><span class="line">        registrationBean.addInitParameter(<span class="string">"deny"</span>, <span class="string">""</span>);<span class="comment">// IP黑名单 (存在共同时，deny优先于allow)</span></span><br><span class="line">        registrationBean.addInitParameter(<span class="string">"loginUsername"</span>, <span class="string">"admin"</span>);</span><br><span class="line">        registrationBean.addInitParameter(<span class="string">"loginPassword"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        registrationBean.addInitParameter(<span class="string">"resetEnable"</span>, <span class="string">"false"</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">druidWebStatViewFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registrationBean = <span class="keyword">new</span> FilterRegistrationBean(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">        registrationBean.addInitParameter(<span class="string">"urlPatterns"</span>, <span class="string">"/*"</span>);</span><br><span class="line">        registrationBean.addInitParameter(<span class="string">"exclusions"</span>, <span class="string">"*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（4）localhost:9090/druid/index.html 登录访问监控数据。</p>
<h3 id="参考-4"><a href="#参考-4" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/de6f1d2d37bf" target="_blank" rel="noopener">Homebrew介绍和使用</a><br><a href="https://blog.csdn.net/normalizer/article/details/83478834" target="_blank" rel="noopener">Homebrew安装Mysql步骤及注意事项（配合Navicat使用）</a><br><a href="https://blog.csdn.net/u011583336/article/details/80999043" target="_blank" rel="noopener">mysql 报错Authentication method ‘caching_sha2_password’ is not supported</a><br><a href="https://www.jianshu.com/p/e3cd2e1c2b0c" target="_blank" rel="noopener">springboot中使用Druid</a></p>
<h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><p>（1）pom.xml 添加 redis, jedis 依赖。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>（2）添加 config/RedisConfig 文件。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.host&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShardedJedisPool <span class="title">shardedJedisPool</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JedisPoolConfig jedisPoolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        jedisPoolConfig.setMinIdle(<span class="number">100</span>);</span><br><span class="line">        jedisPoolConfig.setMaxIdle(<span class="number">1000</span>);</span><br><span class="line">        jedisPoolConfig.setMaxTotal(<span class="number">10000</span>);</span><br><span class="line">        ArrayList&lt;JedisShardInfo&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        JedisShardInfo redisShardInfo = <span class="keyword">new</span> JedisShardInfo(host, port);</span><br><span class="line">        redisShardInfo.setPassword(password);</span><br><span class="line">        arrayList.add(redisShardInfo);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShardedJedisPool(jedisPoolConfig, arrayList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>（3）制作 RedisUtils 模块。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// redis/RedisUtils</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RedisUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set存数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">set</span><span class="params">(String key, String value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get获取数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">get</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置有效天数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expire</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">expire</span><span class="params">(String key, Integer expire)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">del</span><span class="params">(String key)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// redis/RedisUtilsImpl</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtilsImpl</span> <span class="keyword">implements</span> <span class="title">RedisUtils</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> ShardedJedisPool shardedJedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">excute</span><span class="params">(Function&lt;ShardedJedis, T&gt; func)</span></span>&#123;</span><br><span class="line">        ShardedJedis shardedJedis = shardedJedisPool.getResource();</span><br><span class="line">        <span class="keyword">return</span> func.apply(shardedJedis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">set</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> excute(e -&gt; e.set(key, value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> excute(e -&gt; e.get(key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">expire</span><span class="params">(<span class="keyword">final</span> String key, Integer expire)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> excute(e -&gt; e.expire(key, expire));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">del</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> excute(e -&gt; e.del(key));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>（4）使用。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/redis"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RedisUtils redisUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/set/&#123;str&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">set</span><span class="params">(@PathVariable(<span class="string">"str"</span>)</span> String str)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisUtils.set(<span class="string">"test"</span>, str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/get"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisUtils.get(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="参考-5"><a href="#参考-5" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/e1e5717049e8" target="_blank" rel="noopener">MAC使用homeBrew安装Redis</a></p>
<h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>（1）启动类中添加 @EnableScheduling 注解开启定时任务。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"com.example.demo.*"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>（2）实现定时任务 service。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 每分钟执行</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 0/1 * * * ?"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timerToNow</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"now time:"</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="参考-6"><a href="#参考-6" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/tommyli/p/3760671.html" target="_blank" rel="noopener">cron表达式</a></p>
<h2 id="参考-7"><a href="#参考-7" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/reference/htmlsingle/" target="_blank" rel="noopener">Spring Boot文档</a><br><a href="https://docs.spring.io/spring/docs/5.1.5.RELEASE/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">Spring MVC文档</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>spring</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器渲染机制及性能优化</title>
    <url>/2019/03/03/frontend/architecture/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6%E5%8F%8A%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="网页渲染机制"><a href="#网页渲染机制" class="headerlink" title="网页渲染机制"></a>网页渲染机制</h2><p>网页渲染过程包含页面加载和页面渲染两个过程。页面加载过程指的是从服务器请求资源并构建 DOM 树的过程。网页渲染过程指的是通过 DOM 树渲染出视图内容。这两个过程有重合内容，因为异步加载的 js 脚本可能会修改 DOM 结构。</p>
<p>在 webkit 中，针对不同类型的资源，会有多个加载类进行处理。其大体策略为：先从本地缓存池中查找资源；如果找不到，再从网络上获取以 url 为标识的资源。缓存分为两种：其一是内存缓存，其二是磁盘缓存。页面资源通常是同步加载；以同步模式加载 js 资源时会打断 DOM 树的构建。</p>
<p>浏览器首先加载网页内容，使用 html 解释器将网页转变成一系列的 token，再根据 token 构建 DOM 树。当一个可见的 DOM 节点（不包含 head 元素和 display 置为 none 的节点）插入到 DOM 树时，浏览器就会构建一个 RenderObject 节点并将其插入到 Render 树中（Render 树即 RenderObject 节点构成的树）。Render 树包含节点的样式信息，可以简单地理解为由 DOM + CSS 构成（css 样式会经由 css 解释器计算出各元素的样式，然后再将挂到 RenderObject 节点上）。Render 树将交由排版引擎处理，计算出每一个 RenderObject 节点的大小和位置等信息；然后再交由渲染引擎完成页面内容的绘制。</p>
<img src="/2019/03/03/frontend/architecture/浏览器渲染机制及性能优化/RenderTree.png">
<p>在 Render 树之外，为方便处理 Positioning（定位），Clipping（裁剪），Overflow-scroll（页內滚动），CSS Transform/Opacity/Animation/Filter，Mask or Reflection，Z-indexing（Z排序）等，浏览器还会生成  Layer 树。比如根节点从属于一个 RenderLayer 节点，绝对定位的节点从属于另一个 RenderLayer 节点，这样就能有效地处理视图元素的层次结构。如果某 DOM 节点没有对应的 RenderLayer，就从属于父节点的 RenderLayer。</p>
<img src="/2019/03/03/frontend/architecture/浏览器渲染机制及性能优化/LayerTree.png">
<p>Layer 树会交由浏览器渲染引擎处理。渲染引擎首先以一个布局信息不够明确的矩形绘制 RenderLayer 节点；再向下遍历子 RenderLayer 节点，并完成相关的 RenderObject 节点的绘制；然后向上递归并调整 RenderLayer 节点的布局（即回流）。可以理解的是，Render 树决定了网页的内容，Layer 树决定了网页的层次结构。RenderLayer 布局由 CPU 处理，并将位图作为纹理上传给 GPU，由 GPU 绘制内容并缓存（缓存的意义在于避免重绘）。完整过程如下：</p>
<img src="/2019/03/03/frontend/architecture/浏览器渲染机制及性能优化/RenderFlow.png">
<p>对于网页中的 js 脚本，浏览器首先会使用 js 引擎解释脚本，然后再通过 DOM 接口和 CSSOM 接口修改网页内容和样式，最终也以影响 Render 树的方式干预绘制过程。</p>
<p>在 chrome 浏览器中，F12 开发者工具 - more tools - Layers、rendering 插件可用于查看网页层级及渲染性能。</p>
<h2 id="Navigation-Timing"><a href="#Navigation-Timing" class="headerlink" title="Navigation Timing"></a>Navigation Timing</h2><p>Navigation Timing 说明了当用户在键入 url 后，浏览器中所发生的行为过程，主要包含：unload（卸载前一份文档），redirect（重定向），App Cache（重用缓存资源），DNS（DNS 查询） ，TCP（建立 TCP 连接），Request（请求网络资源），Processing（DOM 构建），onload（资源加载完成）。见下图：</p>
<img src="/2019/03/03/frontend/architecture/浏览器渲染机制及性能优化/NavigationTiming.png">
<p>Performance API 可用于分析网页的渲染性能，如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> performanceTest = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; timing &#125; = performance;</span><br><span class="line">  <span class="keyword">const</span> readyStart = timing.fetchStart - timing.navigationStart;</span><br><span class="line">  <span class="keyword">const</span> redirectTime = timing.redirectEnd - timing.redirectStart;</span><br><span class="line">  <span class="keyword">const</span> appcacheTime = timing.domainLookupStart - timing.fetchStart;</span><br><span class="line">  <span class="keyword">const</span> unloadEventTime = timing.unloadEventEnd - timing.unloadEventStart;</span><br><span class="line">  <span class="keyword">const</span> lookupDomainTime = timing.domainLookupEnd - timing.domainLookupStart;</span><br><span class="line">  <span class="keyword">const</span> connectTime = timing.connectEnd - timing.connectStart;</span><br><span class="line">  <span class="keyword">const</span> requestTime = timing.reponseEnd - timing.requestStart;</span><br><span class="line">  <span class="keyword">const</span> initDomTreeTime = timing.domInteractive - timing.reponseEnd;</span><br><span class="line">  <span class="keyword">const</span> domReadyTime = timing.domComplete - timing.domInteractive;</span><br><span class="line">  <span class="keyword">const</span> loadEventTime = timing.loadEventEnd - timing.loadEventStart;</span><br><span class="line">  <span class="keyword">const</span> loadTime = timing.loadEventEnd - timing.navigationStart;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`准备新页面时间耗时：<span class="subst">$&#123;readyStart&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`redirect 重定向耗时：<span class="subst">$&#123;redirectTime&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Appcache 耗时：<span class="subst">$&#123;appcacheTime&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`unload 前文档耗时：<span class="subst">$&#123;unloadEventTime&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`DNS 查询耗时：<span class="subst">$&#123;lookupDomainTime&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`TCP 连接耗时：<span class="subst">$&#123;connectTime&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`request 请求耗时：<span class="subst">$&#123;requestTime&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`请求完毕至 DOM 加载：<span class="subst">$&#123;initDomTreeTime&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`解析 DOM 树耗时：<span class="subst">$&#123;domReadyTime&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`load 事件耗时：<span class="subst">$&#123;domReadyTime&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`加载时间耗时：<span class="subst">$&#123;loadTime&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="单资源加载过程"><a href="#单资源加载过程" class="headerlink" title="单资源加载过程"></a>单资源加载过程</h3><p>点开浏览器 Network 面板，鼠标悬浮在某资源的 waterfall 区域，可以查看某一资源的加载过程。如下图：</p>
<img src="/2019/03/03/frontend/architecture/浏览器渲染机制及性能优化/download.png">
<ul>
<li>Queuing：请求排队中。在 HTTP 1 上，浏览器仅允许每个源拥有六个 TCP 连接；若请求的资源为低优先级资源，将让位给高优先级的样式或脚本资源</li>
<li>Stalled：请求等待发送所用的时间，包含代理协商所用的任何时间</li>
<li>DNS Lookup：执行 DNS 查询所用的时间。页面上的每一个新域都需要完整的往返才能执行 DNS 查询</li>
<li>Initial Connection：建立连接所用的时间，包括 TCP 握手/重试和协商 SSL 的时间</li>
<li>SSL：完成 SSL 握手所用的时间</li>
<li>Request Sent：发出网络请求所用的时间</li>
<li>Waiting(TTFB)：等待初始响应所用的时间，也称为至第一字节的响应时间</li>
<li>Content Download：接收响应数据所用的时间</li>
</ul>
<p>performance.getEntries() 可用于获取页面所有资源的 performance timing 情况。</p>
<h2 id="回流、重绘"><a href="#回流、重绘" class="headerlink" title="回流、重绘"></a>回流、重绘</h2><p>回流（重排）指的是，当元素的布局或显示等信息改变时，引起 Render 树部分或整体的重新构建，即网页布局的调整。重绘指的是，Render 树中节点属性的更新。因此，回流必然会引起重绘，重绘不一定引起回流。与布局无关的元素属性操作将只引起重绘，否则将同时引起回流和重绘。可能引起回流、重绘的行为如下：</p>
<ul>
<li>添加、删除元素（回流+重绘）</li>
<li>隐藏元素：display:none（回流+重绘）；visibility:hidden（只重绘，不回流）</li>
<li>移动元素：改变 top,left（不一定引起回流）；将元素移动到另一个父元素中（回流+重绘）等</li>
<li>改变 style：布局相关属性如 padding, border-width, font-size（回流+重绘）；布局无关属性（只重绘，不回流）。可查看 <a href="https://csstriggers.com/" target="_blank" rel="noopener">https://csstriggers.com/</a> 以获取更多信息</li>
<li>用户操作：改变浏览器大小，改变浏览器的字体大小等（回流+重绘）</li>
</ul>
<p>回流的开销比重绘大。如果 body 顶部插入一个节点，将引起整个 body 的回流；如果尾部插入一个节点，将只引起部分内容的回流，因此开销较小。浏览器为提升回流、重绘的性能，会构建队列以执行批量处理。但是，访问节点的 offsetTop, scrollTop, clientTop, width, height 类属性或调用了 getComputedStyle 方法，将迫使浏览器提前执行队列以获得最新的样式。减少回流、重绘的方法如下：</p>
<ol>
<li>className 或 cssText 批量更新样式，避免单属性操作引起的频繁回流或重绘</li>
<li>新创建的元素改完样式后，再插入文档；或者先将节点的 display 属性置为 none，调整样式后再置回显示状态</li>
<li>使用变量缓存元素的样式，避免频繁读取元素的样式，致使浏览器提前执行回流队列（以计算元素的布局信息）</li>
<li>指定图片的宽高，避免新加载的图片调整大小时引起的回流</li>
<li>[慎用]使频繁回流、重绘的元素单独有一个 RenderLayer：借助 video 元素、WebGL、Canvas、CSS3 3D、CSS滤镜、z-index 大于某个相邻节点的元素都会有独立的 RenderLayer，比如通过添加 transform: translateZ(0);<br>backface-visibility: hidden; 样式即可。</li>
</ol>
<p>回流、重绘可借助 dynaTrace（测试ie）、Speed Tracer（测试Chrome） 测试。</p>
<h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><h3 id="performance"><a href="#performance" class="headerlink" title="performance"></a>performance</h3><p>Performance API 除了可以用于分析网页渲染过程的性能外，也可以用于分析某个方法的执行性能等。</p>
<ul>
<li>performance.memory：内存占用的具体数据</li>
<li>performance.now()：获取从 navigationStart 到当前时间的时间，可用于计算方法的执行时间</li>
<li>performance.mark(markName)：给相应的视点做标记</li>
<li>performance.measure(name, startMark, endMark)：计算方法的执行时间</li>
<li>performance.getEntriesByName(name)：获取指定 measure</li>
<li>performance.clearMarks()：清除标记</li>
<li>performance.clearMeasures()：清除 measure</li>
</ul>
<h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>console.profile() 或 console.profileEnd() 可用于分析 js 脚本的内存、cpu 占用情况。以下代码为使用 performance，profile 监控某方法执行性能的示例（）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> analyse = <span class="function">(<span class="params">fn, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; measureName &#125; = options;</span><br><span class="line"></span><br><span class="line">  performance.mark(<span class="string">`<span class="subst">$&#123;measureName&#125;</span>-start`</span>);</span><br><span class="line">  <span class="built_in">console</span>.profile();</span><br><span class="line"></span><br><span class="line">  fn();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.profileEnd();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 标记一个结束点</span></span><br><span class="line">  performance.mark(<span class="string">`<span class="subst">$&#123;measureName&#125;</span>-end`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 标记开始点和结束点之间的时间戳</span></span><br><span class="line">  performance.measure(</span><br><span class="line">    measureName,</span><br><span class="line">    <span class="string">`<span class="subst">$&#123;measureName&#125;</span>-start`</span>,</span><br><span class="line">    <span class="string">`<span class="subst">$&#123;measureName&#125;</span>-end`</span>,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取所有名称为mySetTimeout的measures</span></span><br><span class="line">  <span class="keyword">const</span> measures = performance.getEntriesByName(measureName);</span><br><span class="line">  <span class="keyword">const</span> measure = measures[<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;measureName&#125;</span> milliseconds: <span class="subst">$&#123;measure.duration&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清除标记</span></span><br><span class="line">  performance.clearMarks();</span><br><span class="line">  performance.clearMeasures();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">analyse(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  measureName: <span class="string">'cycle'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="分析工具"><a href="#分析工具" class="headerlink" title="分析工具"></a>分析工具</h3><ul>
<li>chrome 浏览器的 Page Speed 扩展工具能帮助我们查看网页加载性能，并给出有效的建议。</li>
</ul>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><p>YSlow 性能优化原则主要包含网络加载类、页面渲染类、css 优化类、js 执行类、缓存类、图片类、架构协议类等几大类。概要性总结如下：</p>
<h3 id="网络加载类"><a href="#网络加载类" class="headerlink" title="网络加载类"></a>网络加载类</h3><ol>
<li>减少 http 请求次数，可以利用构建工具合并文件、使用雪碧图等。原因是浏览器同域资源的请求数有所限制。</li>
<li>减小 http 请求大小，可以利用构建工具压缩混淆 js 脚本或 css 样式，使用 base64 图片等。</li>
<li>避免使用 style 或 script 标签直接引入代码块，使用外部文件引入（这样做会增加请求数，手机端可以酌情引入样式、代码块）。</li>
<li>避免空的 href 和 src。原因是渲染过程中仍会引起加载动作。</li>
<li><p>为 html 指定 Cache-Control 或 Expires 以缓存页面。如 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Cache-Control"</span> <span class="attr">content</span>=<span class="string">"max-age=7200"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Expires"</span> <span class="attr">content</span>=<span class="string">"Mon, 20 Jul 2019 23:00:00 GMT"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>为 html 指定 Etag 或 Last-Modified 以缓存页面。对于未修改的文件，浏览器会从本地缓存中读取。如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"last-modified"</span> <span class="attr">content</span>=<span class="string">"Mon, 20 Jul 2019 23:00:00 GMT"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>避免重定向，每次重定向会消耗大约 600 毫秒的时间。</p>
</li>
<li>使用静态资源粉鱼存放来增加并行下载数。原因还是浏览器同域资源的请求数有所限制。</li>
<li>使用 CDN 内容分发网络。CDN 可以提升静态资源的加载速度。</li>
<li>使用 CDN Combo，即将多个文件请求打包成一个文件，这样可以服用同一个 http 请求，加快资源下载速度。 </li>
<li>使用 ajax 缓存：针对 get 请求，消息头添加 Expires，可以缓存响应。</li>
<li>使用 get 请求。原因是 post 请求先发送文件头，再发送 http 正文；get 请求只发送文件头。</li>
<li>减少 cookie 的大小并进行 cookie 隔离（即使用不同域名存放静态资源，这样就隔离了 cookie）；设置合适的域级别和有效期。</li>
<li>减小 favicon.ico 的大小并缓存。</li>
<li>推荐使用异步 js 资源；异步的 js 资源不会阻塞文档解析。</li>
<li>合理拆分 css 及 js 资源，避免阻塞渲染。</li>
<li>避免在 import 方式加载 css 资源。原因是 import 方式需等解析到 @import 时才会加载指定的 css 资源，会大大延后 css 渲染完成的时间。</li>
<li>通过 Content-Encoding: gzip 响应头压缩资源。以下是基于 nginx 压缩文件。<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">etag</span> <span class="string">on;</span> <span class="comment"># 开启etag验证</span></span><br><span class="line"><span class="string">expires</span> <span class="number">7</span><span class="string">d;</span> <span class="comment"># 设置缓存过期时间为7天</span></span><br><span class="line"><span class="string">gzip</span> <span class="string">on;</span> <span class="comment"># 压缩资源</span></span><br><span class="line"><span class="string">gzip_types</span> <span class="string">text/plain</span> <span class="string">application/javascriptapplication/x-javascripttext/css</span> <span class="string">application/xml</span> <span class="string">text/javascriptapplication/x-httpd-php</span> <span class="string">application/vnd.ms-fontobject</span> <span class="string">font/ttf</span> <span class="string">font/opentype</span> <span class="string">font/x-woff</span> <span class="string">image/svg+xml;</span> <span class="comment"># 压缩资源类型（压缩图片会占用后台资源，效果也不佳）</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="页面渲染类"><a href="#页面渲染类" class="headerlink" title="页面渲染类"></a>页面渲染类</h3><ol>
<li>把 css 资源放在 html 顶部，保证浏览器尽早完成页面渲染。</li>
<li>把 js 资源放在 html 尾部，避免加载和解析 js 过程中阻塞页面渲染。</li>
<li>避免在 html 中直接缩放图片。原因是缩放图片的动作会引起重排重绘。</li>
<li>减少 dom 节点的数量和深度，以提升 dom 树构建的速度。</li>
<li>避免使用 table, iframe 等慢元素。原因是 table 会等到它的 dom 树全部生成后再一次性插入页面中；iframe 内资源的下载过程会阻塞父页面静态资源的下载及 css, dom 树的解析。</li>
<li>避免运行耗时的 js；采用预加载方式加载资源，即当浏览器空闲候，再预加载资源（包含跳转页面的资源、新版本的资源等）。</li>
<li>避免使用运行较慢的 css 表达式或滤镜。</li>
</ol>
<h3 id="移动端优化策略"><a href="#移动端优化策略" class="headerlink" title="移动端优化策略"></a>移动端优化策略</h3><h4 id="网络加载类-1"><a href="#网络加载类-1" class="headerlink" title="网络加载类"></a>网络加载类</h4><ol>
<li>首屏数据提前请求，避免 js 文件加载后再请求数据。</li>
<li>首屏加载和按需加载，非首屏内容滚屏加载，保证首屏内容最小化。</li>
<li>模块化资源异步并行下载，可借助 webpack 达成 dynamic-import 实现。</li>
<li>inline 首屏必要的 css 和 js，避免页面出现空白。</li>
<li><p>设置文件资源的 DNS 预解析，让浏览器提前解析获取静态资源的主机 IP，避免等到请求时才发起 DNS 解析请求。如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-dns-prefetch-control"</span> <span class="attr">content</span>=<span class="string">"on"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//cdn.domain.com"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>资源预加载。</p>
</li>
<li>保证 html 内容在 1KB 以内。TCP 网络传输的最大传输单元（Maximum Transimission Unit，MTU）为 1500B，即一个 RTT（Round-Tip Time，网络请求往返时间）内可以传输的数据量最大为 1500 字节。保证 html 内容在 1KB 以内，可以使 html 在一个 RTT 内加载完成。</li>
</ol>
<h4 id="缓存类"><a href="#缓存类" class="headerlink" title="缓存类"></a>缓存类</h4><ol>
<li>合理利用浏览器缓存，Cache-Control, Expires, Etag, Last-Modified 以及 localStorage 等，尽可能减少网络请求。</li>
<li>静态资源离线方案？？？</li>
<li>尝试使用 <a href="https://segmentfault.com/a/1190000012311882" target="_blank" rel="noopener">AMP HTML</a>？？？</li>
</ol>
<h4 id="图片类"><a href="#图片类" class="headerlink" title="图片类"></a>图片类</h4><ol>
<li>压缩图片，合理使用 base64 图片。</li>
<li>使用更高压缩比格式的图片，如 webp 等。</li>
<li><p>图片懒加载。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"//cdn.domain.com/path/photo.js"</span> <span class="attr">alt</span>=<span class="string">"懒加载"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 media query 或 srcset 根据不同屏幕加载不同大小的图片。</p>
</li>
<li><p>使用 iconfront 代替图片图标。可使用 <a href="https://www.iconfont.cn/" target="_blank" rel="noopener">阿里矢量图标库</a> 制作图标。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: iconfront;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"./iconfront.eot"</span>);</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"./iconfront.eot?#iefix"</span>) <span class="built_in">format</span>(<span class="string">"eot"</span>),</span><br><span class="line">       <span class="built_in">url</span>(<span class="string">"./iconfront.woff"</span>) <span class="built_in">format</span>(<span class="string">"woff"</span>),</span><br><span class="line">       <span class="built_in">url</span>(<span class="string">"./iconfront.ttf"</span>) <span class="built_in">format</span>(<span class="string">"truetype"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>限制图片大小：推荐 10KB 以内，不能超过 30KB。</p>
</li>
</ol>
<h4 id="脚本类"><a href="#脚本类" class="headerlink" title="脚本类"></a>脚本类</h4><ol>
<li>尽量使用 id 选择器。原因选择 id 元素时执行速度最快。</li>
<li>尽量缓存 dom 对象，避免每次使用时需要从 dom 树中重新查找。</li>
<li>尽量使用事件代理，避免直接使用事件绑定。这样可以避免不必要的内存泄露及需要动态添加元素的事件绑定问题。</li>
<li>使用 touchstart 代替 click。因为移动端 touchstart 事件和 click 事件之间存在 300 毫秒的延时。</li>
<li>避免 touchmove, scroll 链接事件处理，事件触发频繁容易使页面卡顿，可每隔 16ms （60 帧的真间隔为 16.7ms）再触发事件。</li>
<li>避免使用 eval, with，使用 join 代替连接符 +，推荐使用 es6 的模板字符串。这样更安全。</li>
<li>尽量使用 es6+ 的特性来编程。这样更安全高效。</li>
</ol>
<h4 id="渲染类"><a href="#渲染类" class="headerlink" title="渲染类"></a>渲染类</h4><ol>
<li><p>使用 viewport 固定品目渲染，可以加载渲染过程，同时可以避免缩放导致的重排重绘。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>避免各种形式的重排重绘。</p>
</li>
<li>使用 css3 动画，使用 transform: translateZ(0) 开启 GPU 加速，让动画更流畅。</li>
<li>合理使用 canvas 和 requestAnimationFrame 等更高效的动画实现方式，避免 setTimeout, setInterval 等方式直接处理连续动画。</li>
<li>使用 svg 代替图片，因为 svg 内容更小，结构更方便调整。</li>
<li>避免 float 比较耗时的布局方式，推荐使用固定布局或弹性布局。</li>
<li>避免过多的 font-size 声明，这样会增加字体的大小计算。</li>
</ol>
<h4 id="架构协议类"><a href="#架构协议类" class="headerlink" title="架构协议类"></a>架构协议类</h4><ol>
<li>尝试使用 SPDY 和 http2 协议。SPDY 协议可复用连接，以加快传输过程，缩短资源加载时间。</li>
<li>使用后端数据渲染（数据回填到 html 中），这样可以避免空白页的出现，同时可以解决移动端 SEO 问题。</li>
<li>使用 Native View 代替 DOM，以便将页面内容渲染提升到接近客户端 Native 应用级别。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.nowamagic.net/academy/detail/48110562" target="_blank" rel="noopener">Render树、RenderObject与RenderLayer</a><br><a href="https://segmentfault.com/a/1190000015808716" target="_blank" rel="noopener">webkit渲染机制浅析</a><br><a href="https://developers.google.cn/web/tools/chrome-devtools/network-performance/understanding-resource-timing" target="_blank" rel="noopener">了解 Resource Timing</a><br><a href="https://blog.csdn.net/xingsilong/article/details/80624765" target="_blank" rel="noopener">页面呈现、重绘、回流</a><br><a href="https://www.cnblogs.com/bldxh/p/6857324.html" target="_blank" rel="noopener">Performance — 前端性能监控利器</a><br><a href="https://blog.csdn.net/qq_40128367/article/details/82920370" target="_blank" rel="noopener">首屏时间从12.67s到1.06s，我是如何做到的？</a><br><a href="https://www.cnblogs.com/xianyulaodi/p/5755079.html" target="_blank" rel="noopener">雅虎前端优化的35条军规</a><br><a href="http://www.barretlee.com/blog/2016/04/01/optimization-in-taobao-homepage/" target="_blank" rel="noopener">淘宝首页性能优化实践</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>architecture</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>性能</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx</title>
    <url>/2019/02/26/backend/%E9%83%A8%E7%BD%B2/nginx/</url>
    <content><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">nginx主站</a> 下载 nginx</li>
<li>cd 到 nginx 目录，start nginx 启动</li>
<li>修改 conf/nginx.conf 全局配置，nginx -s reload 重启</li>
</ol>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>start nginx 启动<br>nginx -s stop 强制退出<br>nginx -s quit 平滑退出<br>nginx -s reload 修改配置后，平滑重启</p>
<p>taskkill /F /IM nginx.exe &gt; null 强制杀死 nginx 进程<br>taskkill /fi “imagename nginx.exe” 查看 nginx 进程</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">worker_process</span> <span class="number">1</span><span class="string">;</span></span><br><span class="line"></span><br><span class="line"><span class="string">events</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">worker_connection</span> <span class="number">1024</span><span class="string">;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">http</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">include</span> <span class="string">mime.types;</span> <span class="comment"># 缺失会导致 css 解析无效</span></span><br><span class="line">  <span class="string">default_type</span> <span class="string">application/octet-stream;</span></span><br><span class="line"></span><br><span class="line">  <span class="string">gzip</span> <span class="string">on;</span></span><br><span class="line"></span><br><span class="line">  <span class="string">server</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="string">listen</span> <span class="number">80</span><span class="string">;</span></span><br><span class="line">    <span class="string">server_name</span> <span class="string">localhost;</span></span><br><span class="line">    <span class="string">root</span> <span class="attr">D:/git/test;</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/fengff/p/8892590.html" target="_blank" rel="noopener">Nginx安装及配置详解</a><br><a href="https://blog.csdn.net/wangzhenyu177/article/details/78679053" target="_blank" rel="noopener">nginx常用配置—-作为web服务端</a><br><a href="http://nginx.org/en/docs/windows.html" target="_blank" rel="noopener">nginx for Windows</a></p>
]]></content>
      <categories>
        <category>backend</category>
        <category>部署</category>
      </categories>
      <tags>
        <tag>carrier</tag>
      </tags>
  </entry>
  <entry>
    <title>换种角度</title>
    <url>/2019/02/24/%E9%9A%8F%E7%AC%94/%E6%8D%A2%E7%A7%8D%E8%A7%92%E5%BA%A6/</url>
    <content><![CDATA[<p>视图层有两种要素：页面元素和用户行为。作为可见的实体，页面元素根据用户行为施加的影响，变化着形态。假使把页面元素比作我们自学生时代就接触的弹簧，按照实验数据抽象的弹性系数就是页面元素自有的属性，施加的外力就是用户针对该节点的操作，click 或 change 之流。我们可以仿照胡克定律的方式，使用数学函数阐述视图层的变化，如 view = handler(action)。与自然现象那种冥冥中的物理机制不同的是，在人为的视图层机制中，handler 是可控的。我们既可以在 node.onClick 中看见 handler 的影子，又可以在 node.addEventListener(‘onClick’, handler) 看见 handler 的影子。当我们以弹性系数是弹簧固有的物理特征这种方式思忖这两种实现时，我们就能意识到：前一种方式是较为直观的，施加哪种影响，产生哪种变化，比如先作力的合成，再计算力的影响；后一种是可量化的、轻耦合的，不限于物质实体而抽象物理机制，再使用这套物理机制演绎物质实体的表现，比如先作力的分解，再叠加力的影响。这样我们就可以认为，作为平台的浏览器提供了力学定律，前端开发者定义了物质实体的物理特征，用户施加了作用力，继而使物质实体发生了变化。以这种方式理解浏览器的事件机制既是我个人的一种癖好，又可以拉近与浏览器实现的亲近感。在延伸面上，我们还可以把事件委托看成是”隔山打牛“这种武侠招式的浏览器表现，不是很有趣吗？</p>
<p>有什么在妨碍我们看清浏览器的实现机制就是 view = handler(action) 呢？在浏览器中，页面元素被抽象成了具有样式属性且富有层次结构的节点。在内存中驻留的节点属性就像实时变化的运动量那样，让我们不能直观地感受到输入输出模型，而是更容易只看到等式的右半部分：在 handler(action) 执行过程中，node 节点的形态发生着变化。让我们再聚焦于脚蹬自行车这种”隔山打牛“的情景，我们想必会直观地认为在 handler(action) 执行过程中，脚踏板、链条、轮轴、车轮都在运动，而不能定位到输入输出模型。一个 handler(action) 过程中的多节点变化不正是这样的吗？我们书写的代码不也正是这样的吗？因此而论，就像我们基于力学定律阐释脚蹬自行车这一物理过程一样，view = handler(action) 就是我们的力学定律，节点的种种变化就是我们的物理过程。也因此，在单输入单输出模型下，基于操作节点的前端编码方式就退化成了学生时代的解题，或者我们找到了学生时代解题的意义。以下就是单输入输出模型中常见的任务流处理方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">x1 = f1(x0);</span><br><span class="line">x2 = f2(x1);</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
<p>当我们再把眼光投向多输入多输出模型，或者整体构造比自行车复杂得多的现代汽车，面向过程的思考方式势必会让我们遭遇分岔的支路。这时候，面向对象的方式就隆重登场了。在面向对象的思维方式中，实体的状态变更可以归结为实体自有的特征，如前文提到的弹性系数。环绕弹性系数，弹簧拉伸长度和受力的机制都可以内化为实体的状态及方法。如果实体的特征仅止于此，以面向对象的方式对实体进行建模看似是不必要的。我们可以感知到面向过程的方式在这样一种单输入单输出模型上的便利性和清晰性。当然，当实体并不止于单方面的特征，面向对象的方式就会优于面向过程的方式。在这方面，我们以自带搜索表单和编辑弹窗的列表组件加以说明。如果我们以面向对象的方式封装每个组件的状态和行为，每个组件即构成交互网络中的一个节点，其所缺的就是上下游节点的通信方式。作为上游的列表组件，既可以集成弹窗的显示隐藏状态以及操纵弹窗显示隐藏的方法；又可以直接调用弹窗组件的显示隐藏方法。列表组件和搜索表单的交互方式也是一样的。因此，面向对象的方式更像一个节点网络，每个节点都各自组织节点内部的状态和行为，节点之间又通过交互接口完成通信。这和面向过程的方式有着着眼点上的不同：面向过程聚焦于输入输出流的传递和变更，更适合在单任务流串联各实体变化的脉络轨线；面向对象在于对单实体的丰富特征进行抽象，然后在节点网络中组织上下游的通信，更适合机制复杂的系统。</p>
<img src="/2019/02/24/随笔/换种角度/节点网络.png">
<p>在面向对象的编码方式中，除了 uml 类图之外，通过节点网络阐述各节点的组织关系以及各节点的内在特征也许是可行的。我们知道，以类实现的实体之间可以有依赖、聚合、继承关系，比如列表组件聚合了搜索表单和编辑弹窗，这三个组件可能都依赖了状态管理类、继承自实现生命周期管理方法的基类组件。状态管理类可视为 mobx 等类库在组件状态管理上提供的解决方案；基类组件可视为 react 等框架在视图层提供的抽象。当我们在业务层面在进一步抽象，就可以针对列表组件分别抽象两个类去封装其与搜索表单和编辑弹窗的状态管理和交互逻辑，以避免代码的重复书写。为此，typescript 像 java 那样提供了抽象类、接口、多重继承、私有属性等，为我们以面向对象的方式编写前端代码提供了许多弹药。正如这篇文章旨在于换种角度思考编程、盘活思路，这里不对具体的编码实现作深入，遗留下来的可探讨、可推敲空间仍在于展开问题，或者寻找提升编程技术的切入点。当然，这样会显得虎头蛇尾、泛泛而谈，也是笔者编程造诣不够精深的佐证吧。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>css 总汇</title>
    <url>/2019/02/08/frontend/css/css%20%E6%80%BB%E6%B1%87/</url>
    <content><![CDATA[<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><table>
<thead>
<tr>
<th>选择器</th>
<th>意义</th>
<th>版本</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>通用选择器</td>
<td>2.1</td>
<td>*</td>
</tr>
<tr>
<td>E</td>
<td>标签选择器</td>
<td>1</td>
<td>p</td>
</tr>
<tr>
<td>.class</td>
<td>类选择器</td>
<td>1</td>
<td>.nav</td>
</tr>
<tr>
<td>#id</td>
<td>ID选择器</td>
<td>1</td>
<td>#wrapper</td>
</tr>
<tr>
<td>E[attr]</td>
<td>属性选择器，匹配带 ‘data-url’ 属性的 a 元素</td>
<td>2.1</td>
<td>a[data-url]</td>
</tr>
<tr>
<td>E[attr=val]</td>
<td>属性选择器，匹配 type 属性为 ‘text’ 的 input 元素</td>
<td>2.1</td>
<td>input[type=’text’]</td>
</tr>
<tr>
<td>E[attr~=val]</td>
<td>属性选择器，匹配 keywords 属性包含 ‘round’ 的 div 元素</td>
<td>2.1</td>
<td>div[keywords~=’round’]</td>
</tr>
<tr>
<td>E[attr=val]</td>
<td>属性选择器，匹配 lang 属性以 ‘zh’ 开始的 label 元素</td>
<td>2.1</td>
<td>label[lang=’zh’]</td>
</tr>
<tr>
<td>E[attr^=val]</td>
<td>属性选择器，匹配 href 属性以 ‘http://‘ 开始的 a 元素</td>
<td>3</td>
<td>a[href^=’http://‘]</td>
</tr>
<tr>
<td>E[attr$=val]</td>
<td>属性选择器，匹配 src 属性以 ‘.png’ 结尾的 img 元素</td>
<td>3</td>
<td>img[src$=’.png’]</td>
</tr>
<tr>
<td>E[attr*=val]</td>
<td>属性选择器，匹配 href 属性中包含 ‘baidu.com’ 的 a 元素</td>
<td>3</td>
<td>a[href*=’baidu.com’]</td>
</tr>
<tr>
<td>E F</td>
<td>后代选择器</td>
<td>1</td>
<td>.blog p</td>
</tr>
<tr>
<td>E&gt;F</td>
<td>子选择器</td>
<td>2.1</td>
<td>.nav &gt; button</td>
</tr>
<tr>
<td>E+F</td>
<td>相邻兄弟选择器</td>
<td>2.1</td>
<td>label + input</td>
</tr>
<tr>
<td>E~F</td>
<td>兄弟选择器</td>
<td>3</td>
<td>header ~ div</td>
</tr>
<tr>
<td>S1, S2</td>
<td>选择器分组</td>
<td>1</td>
<td>input, select, textarea</td>
</tr>
</tbody>
</table>
<h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><table>
<thead>
<tr>
<th>选择器</th>
<th>意义</th>
<th>版本</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>:link</td>
<td>动态伪类，匹配未访问过的链接</td>
<td>1</td>
<td>a:link</td>
</tr>
<tr>
<td>:visited</td>
<td>动态伪类，匹配被访问过的链接</td>
<td>1</td>
<td>a:visited</td>
</tr>
<tr>
<td>:hover</td>
<td>动态伪类，匹配鼠标悬浮的元素</td>
<td>1</td>
<td>div:hover</td>
</tr>
<tr>
<td>:active</td>
<td>动态伪类，匹配鼠标按下的元素</td>
<td>1</td>
<td>a:active</td>
</tr>
<tr>
<td>:focus</td>
<td>动态伪类，匹配获得焦点的元素</td>
<td>2.1</td>
<td>input:focus</td>
</tr>
<tr>
<td>:target</td>
<td>目标伪类，匹配活动的锚</td>
<td>2.1</td>
<td>#tab1:target</td>
</tr>
<tr>
<td>:lang(val)</td>
<td>语言伪类，匹配指定 lang 属性的元素</td>
<td>2.1</td>
<td>p:lang(zh)</td>
</tr>
<tr>
<td>:enabled</td>
<td>状态伪类，匹配启用的元素</td>
<td>3</td>
<td>input:enabled</td>
</tr>
<tr>
<td>:disabled</td>
<td>状态伪类，匹配禁用的元素</td>
<td>3</td>
<td>input:disabled</td>
</tr>
<tr>
<td>:checked</td>
<td>状态伪类，匹配选中的元素</td>
<td>3</td>
<td>input:checked</td>
</tr>
<tr>
<td>:root</td>
<td>结构性伪类，文档根元素</td>
<td>3</td>
<td>:root</td>
</tr>
<tr>
<td>:nth-child(n)</td>
<td>结构性伪类，匹配父元素的第 n 个子元素</td>
<td>3</td>
<td>:nth-child</td>
</tr>
<tr>
<td>:nth-last-child(n)</td>
<td>结构性伪类，匹配父元素的倒数第 n 个子元素</td>
<td>3</td>
<td>:nth-last-child</td>
</tr>
<tr>
<td>:nth-of-type(n)</td>
<td>结构性伪类，匹配父元素的第 n 个相同子元素</td>
<td>3</td>
<td>:nth-of-type</td>
</tr>
<tr>
<td>:nth-last-of-type(n)</td>
<td>结构性伪类，匹配父元素的倒数第 n 个相同子元素</td>
<td>3</td>
<td>:nth-last-of-type</td>
</tr>
<tr>
<td>:first-child</td>
<td>结构性伪类，匹配父元素的第一个子元素</td>
<td>3</td>
<td>:first-child</td>
</tr>
<tr>
<td>:last-child</td>
<td>结构性伪类，匹配父元素的最后一个子元素</td>
<td>3</td>
<td>:last-child</td>
</tr>
<tr>
<td>:first-of-type</td>
<td>结构性伪类，匹配父元素的第一个相同子元素</td>
<td>3</td>
<td>:first-of-type</td>
</tr>
<tr>
<td>:last-of-type</td>
<td>结构性伪类，匹配父元素的最后一个相同子元素</td>
<td>3</td>
<td>:last-of-type</td>
</tr>
<tr>
<td>:only-child</td>
<td>结构性伪类，匹配父元素的唯一一个子元素</td>
<td>3</td>
<td>:only-child</td>
</tr>
<tr>
<td>:only-of-type</td>
<td>结构性伪类，匹配父元素的唯一一个相同子元素</td>
<td>3</td>
<td>:only-of-type</td>
</tr>
<tr>
<td>:empty</td>
<td>结构性伪类，匹配没有子元素的元素</td>
<td>3</td>
<td>:empty</td>
</tr>
<tr>
<td>::first-line</td>
<td>伪元素，匹配元素文本内容的首行</td>
<td>1</td>
<td>p::first-line</td>
</tr>
<tr>
<td>::first-letter</td>
<td>伪元素，匹配元素文本内容的首字母</td>
<td>1</td>
<td>p::first-letter</td>
</tr>
<tr>
<td>::before</td>
<td>伪元素，匹配元素之前的内容</td>
<td>2.1</td>
<td>div::before</td>
</tr>
<tr>
<td>::after</td>
<td>伪元素，匹配元素之后的内容</td>
<td>2.1</td>
<td>div::after</td>
</tr>
</tbody>
</table>
<h3 id="选择器权重"><a href="#选择器权重" class="headerlink" title="选择器权重"></a>选择器权重</h3><p>选择器分为 4 个优先级，分别是：内联样式；ID 选择器；类、伪类，属性选择器；元素，伪元素。其权重通常是 1000, 100, 10, 1。需要注明的是，11 个类选择器的权重并不会超过 1 个 ID 选择器。除此之外，!important 可将对应规则的权重提升到最高。</p>
<h2 id="响应式开发"><a href="#响应式开发" class="headerlink" title="响应式开发"></a>响应式开发</h2><h3 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h3><p>在介绍响应式开发前，先须理清如下三个概念，各设备的物理像素和设备像素比也见于下表：</p>
<ul>
<li>物理像素：屏幕实际的像素点。</li>
<li>设备独立像素：逻辑像素，用于定义应用的 UI。</li>
<li>屏幕像素比：物理像素和设备独立像素的比值。</li>
</ul>
<table>
<thead>
<tr>
<th>设备名称</th>
<th>物理像素</th>
<th>设备独立像素</th>
<th>屏幕像素比</th>
</tr>
</thead>
<tbody>
<tr>
<td>iPhone 7, 6, 6S</td>
<td>750*1334</td>
<td>373*667</td>
<td>2</td>
</tr>
<tr>
<td>iPhone 7 plus, 6S plus, 6 plus</td>
<td>1080*1920</td>
<td>414*736</td>
<td>3</td>
</tr>
<tr>
<td>iPhone 5, 5S, 5C, 5E</td>
<td>640*1136</td>
<td>320*568</td>
<td>2</td>
</tr>
<tr>
<td>iPhone 4</td>
<td>640*960</td>
<td>320*480</td>
<td>2</td>
</tr>
<tr>
<td>iPod Touch</td>
<td>640*1136</td>
<td>320*568</td>
<td>2</td>
</tr>
<tr>
<td>Galaxy S7, S7 edge, S6</td>
<td>1440*2560</td>
<td>360*640</td>
<td>4</td>
</tr>
<tr>
<td>Galaxy S5, S4</td>
<td>1080*1920</td>
<td>360*640</td>
<td>3</td>
</tr>
<tr>
<td>Galaxy S4 mini</td>
<td>540*960</td>
<td>360*640</td>
<td>1.5</td>
</tr>
<tr>
<td>Galaxy S3</td>
<td>720*1280</td>
<td>360*640</td>
<td>2</td>
</tr>
<tr>
<td>Galaxy Note 4</td>
<td>1440*2560</td>
<td>360*640</td>
<td>4</td>
</tr>
<tr>
<td>Galaxy Note 3</td>
<td>1080*1920</td>
<td>360*640</td>
<td>3</td>
</tr>
<tr>
<td>Galaxy Note 2</td>
<td>720*1280</td>
<td>360*640</td>
<td>2</td>
</tr>
<tr>
<td>Mi 4, 3</td>
<td>1080*1920</td>
<td>360*640</td>
<td>3</td>
</tr>
<tr>
<td>HTC One</td>
<td>1080*1920</td>
<td>360*640</td>
<td>3</td>
</tr>
<tr>
<td>Sony Xperia 23</td>
<td>1080*1920</td>
<td>360*640</td>
<td>3</td>
</tr>
<tr>
<td>Lenovo K900</td>
<td>1080*1920</td>
<td>360*640</td>
<td>3</td>
</tr>
<tr>
<td>ZTE Grand S</td>
<td>1080*1920</td>
<td>360*640</td>
<td>3</td>
</tr>
<tr>
<td>iPad Pro</td>
<td>2048*2732</td>
<td>1024*1366</td>
<td>2</td>
</tr>
<tr>
<td>iPad 3, 4, Air, Air2</td>
<td>1536*2048</td>
<td>768*1024</td>
<td>2</td>
</tr>
<tr>
<td>iPad mini 2, 3</td>
<td>1536*2048</td>
<td>768*1024</td>
<td>2</td>
</tr>
<tr>
<td>iPad mini</td>
<td>768*1024</td>
<td>768*1024</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>大多数设备的视口宽度都为 980 px，通过设置 <meta name="viewport" content="width=device-width, initial-scale=1"> 可调整视口（viewport）的宽度。关于视口的概念，可参考 <a href="https://www.cnblogs.com/2050/p/3877280.html" target="_blank" rel="noopener">移动前端开发之viewport的深入理解</a>。其中，meta 标签包含的属性含义如下：</p>
<ul>
<li>width：设置 viewport 宽度。</li>
<li>initial-scale：设置 viewport 初始缩放值。</li>
<li>minimum-scale：设置 viewport 最小缩放值。</li>
<li>maximum-scale：设置 viewport 最大缩放值。</li>
<li>height：设置 viewport 高度。</li>
<li>user-scalable：是否允许用户缩放。</li>
</ul>
<h3 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h3><p>flex 弹性布局示意图：</p>

<p>在 flex 容器内，水平轴称为交叉轴，垂直轴称为主轴；容器内分布 flex 项目。flex 容器包含以下属性：</p>
<table>
<thead>
<tr>
<th>属性名称</th>
<th>意义</th>
<th>可选值</th>
</tr>
</thead>
<tbody>
<tr>
<td>flex-direction</td>
<td>决定 item 排列方向</td>
<td>row 从左至右；column 从上到下；row-reverse；column-reverse</td>
</tr>
<tr>
<td>flex-wrap</td>
<td>决定 item 换行方式</td>
<td>nowrap 不换行；wrap；wrap-reverse 第一行在下面</td>
</tr>
<tr>
<td>justify-content</td>
<td>决定 item 在主轴上的对齐方式</td>
<td>flex-start；flex-end；center；space-between 两端对齐；space-around 沿轴线均匀分布</td>
</tr>
<tr>
<td>align-items</td>
<td>决定 item 在交叉轴上的对齐方式</td>
<td>flex-start；flex-end；center；baseline；stretch 当 item 未设置高度时，item 将与容器等高度</td>
</tr>
<tr>
<td>align-content</td>
<td>决定多行 item 的对齐方式</td>
<td>flex-start；flex-end；center；space-between；space-around；stretch</td>
</tr>
</tbody>
</table>
<p>flex 项目包含如下属性：</p>
<table>
<thead>
<tr>
<th>属性名称</th>
<th>意义</th>
<th>可选值</th>
</tr>
</thead>
<tbody>
<tr>
<td>order</td>
<td>决定 item 排列顺序，默认值为 0</td>
<td>-</td>
</tr>
<tr>
<td>flex-grow</td>
<td>决定 item 放大比例，默认值为 0</td>
<td>-</td>
</tr>
<tr>
<td>flex-shrink</td>
<td>决定 item 缩小比例，默认值为 1</td>
<td>-</td>
</tr>
<tr>
<td>flex-basis</td>
<td>决定 item 在主轴上占据的空间，默认值为 auto</td>
<td>-</td>
</tr>
<tr>
<td>align-self</td>
<td>决定 item 在交叉轴上的对齐方式</td>
<td>auto；flex-start；flex-end；center；baseline；stretch</td>
</tr>
</tbody>
</table>
<p>关于 flex 布局，可参考 <a href="https://www.cnblogs.com/nuannuan7362/p/5823381.html" target="_blank" rel="noopener">flex弹性布局学习总结</a>。</p>
<h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><p>媒体查询可以定义在 css 中，也可以定义在 link 元素的 media 属性内。后一种方法始终会加载 css 样式，通过 media 属性决定是否应用 css 样式。</p>
<p>媒体查询可使用如下属性，并可加以 min- 或 max- 前缀：</p>
<ul>
<li>width：视口的宽度。</li>
<li>height：视口的高度。</li>
<li>aspect-ratio：视口的宽高比。</li>
<li>orientation：设备横竖屏，值为 portrait 或 landscape。</li>
<li>resolution：设备分辨率，值可以是每英寸 dpi 或每厘米 dpcm。</li>
</ul>
<p>媒体查询以 @media 起始；以 not 为逻辑非，’,’ 号为逻辑或。@media 后可使用不同的媒体类型或媒体属性。媒体类型包含：all 所有媒体类型；print 打印设备；screen 显示器；speech 辅助设备。</p>
<h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>css 中的计量单位有 px, pt, em, rem 等。em 相对当前元素的字体大小；rem 相对根元素的字体大小。使用 rem 制作响应式页面，先须根据屏幕大小调整切换根元素的字体大小。关于如何动态调整根元素的字体大小，可参考 <a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">lib-flexible</a>。</p>
<h3 id="多列布局"><a href="#多列布局" class="headerlink" title="多列布局"></a>多列布局</h3><p>在 css3 中，文本可采用多列布局，其中施以影响的样式有：</p>
<ul>
<li>column-count：设定列数。</li>
<li>column-width：设定列宽度。</li>
<li>column-gap：设定列间距。</li>
<li>column-rule：设定列间距的样式规则。</li>
</ul>
<h2 id="动效"><a href="#动效" class="headerlink" title="动效"></a>动效</h2><h3 id="transform-转换"><a href="#transform-转换" class="headerlink" title="transform 转换"></a>transform 转换</h3><ul>
<li>translate(x, y)：平移。</li>
<li>translate3d(x, y, z)：平移。</li>
<li>translateX(x)：平移。</li>
<li>translateY(y)：平移。</li>
<li>translateZ(z)：平移。</li>
<li>scale(x, y)：缩放。</li>
<li>scale3d(x, y, z)：缩放。</li>
<li>scaleX(x)：缩放。</li>
<li>scaleY(y)：缩放。</li>
<li>scaleZ(z)：缩放。</li>
<li>rotate(angle)：旋转。</li>
<li>rotate3d(x, y, z, angle)：旋转。</li>
<li>rotateX(angle)：旋转。</li>
<li>rotateY(angle)：旋转。</li>
<li>rotateZ(angle)：旋转。</li>
<li>skew(x-angle, y-angle)：倾斜变形。</li>
<li>skewX(angle)：倾斜变形。</li>
<li>skewY(angle)：倾斜变形。</li>
<li>matrix(n, n, n, n, n, n)：自定义转换。</li>
<li>matrix3d(n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n)：自定义转换。</li>
<li>prespective(n)：透视图。</li>
</ul>
<h3 id="transition-过渡"><a href="#transition-过渡" class="headerlink" title="transition 过渡"></a>transition 过渡</h3><p>transition 在指定 css 属性发生变化时，开始执行动效。它的格式以及包含的属性如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">transition-property</span> <span class="selector-tag">transition-duration</span> <span class="selector-tag">transition-timing-function</span> <span class="selector-tag">transition-delay</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>transition-property：指定将发生变化的 css 属性。</li>
<li>transition-duration：指定动效执行的时长。</li>
<li>transition-timing-function：指定动效的速度曲线。可能的值包含：linea 以相同的速度执行动效，等同于贝济埃曲线（0.0, 0.0, 1.0, 1.0）；ease 以逐渐变慢的速度执行动效，等同于贝济埃曲线（0.25, 1.0, 0.25, 1.0）；ease-in 以慢速开始执行动效，等同于贝济埃曲线（0.42, 0.0, 1.0, 1.0）；ease-out 以慢速结束执行动效，等同于贝济埃曲线（0.0, 0.0, 0.58, 1.0）；ease-in-out 以慢速开始并结束执行动效，等同于贝济埃曲线（0.42, 0.0, 0.58, 1.0）；cubic-bezier(n, n, n, n) 自定义时间曲线，即自定义贝济埃曲线。</li>
<li>transition-delay：指定动效的延迟时间。</li>
</ul>
<h3 id="animation-动画"><a href="#animation-动画" class="headerlink" title="animation 动画"></a>animation 动画</h3><p>animation 适用于块状和内联元素。它的格式以及包含的属性如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">animation</span>: <span class="selector-tag">animation-name</span> <span class="selector-tag">animation-duration</span> <span class="selector-tag">animation-timing-function</span> <span class="selector-tag">animation-delay</span> <span class="selector-tag">animation-iteration-count</span> <span class="selector-tag">animation-direction</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>animation-name：值可以为 @keyframes 创建的动画名称，默认值为 none，即不会有任何动画效果。</li>
<li>animation-duration：动画播放时长。</li>
<li>animation-timing-function：指定动画的速度曲线，值可以是 linea, ease, ease-in, ease-out, ease-in-out, cubic-bezier(n, n, n, n)。</li>
<li>animation-delay：动画的延迟时间。</li>
<li>animation-iteration-count：动画的播放次数。</li>
<li>animation-direction：动画的播放方向，默认值为 normal。当指定为 alternate 时，偶数次向前播放，奇数次向后播放。</li>
</ul>
<h2 id="常用特性"><a href="#常用特性" class="headerlink" title="常用特性"></a>常用特性</h2><h3 id="开放字体格式-WOFF"><a href="#开放字体格式-WOFF" class="headerlink" title="开放字体格式 WOFF"></a>开放字体格式 WOFF</h3><p>通过 css3 中的 @font-face 可使用开放字体格式（Web Open Font Format，简称 WOFF）。@font-face 规则如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: &lt;开放字体格式名&gt;;</span><br><span class="line">  <span class="attribute">src</span>: &lt;字体路径&gt; [&lt;字体格式&gt;] [,&lt;字体路径&gt; [&lt;字体格式&gt;]] *;</span><br><span class="line">  [font-weight: &lt;字体粗细&gt;]; </span><br><span class="line">  <span class="selector-attr">[font-style: &lt;字体样式&gt;]</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'fontello'</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'./font/fontello.eot?69798120'</span>);</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'./font/fontello.eot?69798120#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-open-type'</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'./font/fontello.woff?69798120'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'./font/fontello.tff?69798120'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'./font/fontello.svg?69798120#fontello'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: normal; </span><br><span class="line">  <span class="attribute">font-style</span>: normal; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>字体格式包含如下值：</p>
<ul>
<li>.tff：TrueType 格式，是 windows, mac 上常见的字体。</li>
<li>.otf: OpenType 格式，一种原始的字体。</li>
<li>.woff: Web Open Font Format 格式，Web 字体中最佳格式，TrueType/OpenType 格式的压缩版。</li>
<li>.eot：Embedded Open Type 格式，可以从 TrueType 创建此格式的字体，IE 专用格式，支持此字体的浏览器有 IE4+。</li>
<li>.svg：SVG 格式。</li>
</ul>
<p>@font-face 可用于加载字体图标 IconFont。字体图标可参考 <a href="https://www.cnblogs.com/hjvsdr/p/6639649.html" target="_blank" rel="noopener">iconfont字体图标的使用方法–超简单!</a>。</p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ul>
<li>background-color：指定背景色。</li>
<li>background-position：指定背景图像的位置。</li>
<li>background-size：指定背景图像的尺寸，值可以指定背景的宽度和高度，也可以是 cover 使背景图像覆盖背景区域，超出部分将会裁剪, contain 使背景图像适应背景区域。</li>
<li>background-repeat：指定是否重复背景图像。</li>
<li>background-origin：指定背景的定位区域，值可以是 padding, padding-box, border, border-box, content, content-box，即从内边距或外边距开始。</li>
<li>background-clip：指定背景的绘制区域，指定区域将被裁剪，值可以是 border-box, padding-box, content-box。</li>
<li>background-attachment：指定背景图像是否固定或者随着页面的其余部分滚动。</li>
<li>background-image：指定背景图像。</li>
</ul>
<h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>颜色取值可以指定颜色名称，如 black；或 HEX 以十六进制表示颜色，如 #000000；或 RGB 记法，如 rgb(0, 0, 0)；或 RGBA 记法，alpha 为透明度，如 rgba(0, 0, 0, 0.5)；或 HSL 记法，如 hsl(360, 50%, 50%)；或 HSLA 记法，如 hsla(360, 50%, 50%, 0.5)；或 transparent 全透明色彩；或 currentcolor 当前标签继承的文字颜色。</p>
<p>颜色也可以设置渐变。linear-gradient 线性渐变，如 linear-gradient(direction, color-stop1, color-stop2, …)；或 radial-gradient 径向渐变，如 radial-gradient(position, shape size, start-color, …, last-color)。</p>
<p>也可以使用 opacity 指定透明度。</p>
<h3 id="文字效果"><a href="#文字效果" class="headerlink" title="文字效果"></a>文字效果</h3><ul>
<li>text-shadow：字体阴影，格式如 text-shadow: h-shadow v-shadow blur color。其中，h-shadow 为水平阴影的位置；v-shadow 为垂直阴影的位置；blur 模糊的距离；color 阴影的颜色。</li>
<li>text-overflow：指定文本溢出的处理方式。值可以是 clip 裁剪；ellipsis 省略号显示；string 指定字符串替代被裁剪的文本。</li>
<li>word-wrap：指定长单词或 url 地址是否自动换行，值可以是 normal, break-word。normal 在允许的断字点换行；break-word 在长单词或 url 地址内部进行换行。</li>
<li>word-break：指定自动换行的处理方式，值可以是 normal, break-all, keep-all。normal 默认的换行方式；break-all 允许在单次内换行；keep-all 只能在半角空格或连字符处换行。</li>
</ul>
<h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><ul>
<li>border-width：指定边框的宽度。</li>
<li>border-style：指定边框样式。</li>
<li>border-color：指定边框颜色。</li>
<li>border-radius：指定圆角边框。</li>
<li>border-image：指定边框背景图像。</li>
<li>box-shadow：指定边框阴影。格式如 box-shadow: h-shadow v-shadow blur spread color inset。</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>box-sizing：盒模式。<br>calc：函数计算样式。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>carrier</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>移动Web高效开发实践</title>
    <url>/2019/02/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%A7%BB%E5%8A%A8Web%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p>本文档主要用于汇总待整理的问题点，后续将以文章形式逐条剖析。</p>
<h2 id="开发环境或工具"><a href="#开发环境或工具" class="headerlink" title="开发环境或工具"></a>开发环境或工具</h2><ul>
<li>NProxy：web 代理工具，参考 <a href="http://www.cnblogs.com/wenber/p/3893308.html" target="_blank" rel="noopener">前端调试利器—nproxy</a>。</li>
<li>http-server：搭建 http 服务器，参考 <a href="https://www.cnblogs.com/Janejxt/p/9394989.html" target="_blank" rel="noopener">本地搭建http-server服务器</a>。</li>
<li>caniuse：查询浏览器对样式的支持度。</li>
<li>modernizr：嵌入脚本，检测浏览器对样式或特征的支持度。</li>
</ul>
<h2 id="html5"><a href="#html5" class="headerlink" title="html5"></a>html5</h2><ul>
<li>布局元素：Header, Nav, Article, Section, Aside, Footer。</li>
<li>input[type=?]：search, tel, url, email, date, color, number, range, datetime, month, week。</li>
<li>input[?=]：required, pattern, autofocus, form, placeholder。</li>
<li>新元素：progress 进度条, meter 标尺。</li>
<li>新属性：contenteditable 使元素可编辑。</li>
<li>audio 音频、video 视频：包含 controls 展示默认控件, autoplay, loop 循环播放, preload 预加载, volumn 音量属性，通过 source 元素加载音频、视频；可以用 api 形式操作音频。</li>
<li>navigator.geolocation.getCurrentPosition(success, error, options)：获取当前地理位置。</li>
<li>navigator.mediaDevices.getUserMedia(contraints).then(success).catch(error)：调用摄像头拍照，success 回调的参数 stream 可通过 window.URL.createObjectURL(stream) 赋值给 video 元素的 src 属性。</li>
<li>deviceorientation 事件：可监听设备旋转角度的变化，绕上下坐标旋转称为 alpha 弧度，绕左右坐标称为 beta，绕前后坐标旋转称为 gamma。</li>
<li>devicemotion 事件：可监听设备移动的距离以及旋转角度的变化。</li>
<li>离线存储：以 ‘.mainfest’ 或 ‘.appcache’ 描述文件设定待存储的资源目录，html 指定 mainfest 属性关联该描述文件，这样可以在断网状态下加载本地缓存的资源。结合 LocalStorage，可以缓存本地用户填写的数据。除此之外，service worker 可以用指定的方式加载本地缓存。关于 service worker，可参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API" target="_blank" rel="noopener">Service Worker API</a>, <a href="https://www.jianshu.com/p/0e2dee4c77bc" target="_blank" rel="noopener">构建 Web 应用之 Service Worker 初探</a>, <a href="https://www.cnblogs.com/dojo-lzz/p/8047336.html" target="_blank" rel="noopener">Web离线应用解决方案——ServiceWorker</a>。</li>
<li>LocalStorage, SessionStorage：本地存储。</li>
<li>IndexedDB：浏览器本地的结构化数据库，使用 new LocalDB(dbName, tableName) 创建。</li>
<li>Canvas 画布。</li>
<li>SVG 矢量图。</li>
<li>WebGL 三维图像。渲染引擎可参考 <a href="https://github.com/pixijs/pixi.js" target="_blank" rel="noopener">pixi.js</a>。</li>
<li>window.postMessage(message, target, [transfer])：跨域传送。</li>
<li>xhr2：添加 ontimeout, onprogress 方法，可传送 FormData 数据。</li>
<li>EventSource：创建 EventSource 对象接受服务端主动推送的消息。</li>
<li>WebSocket 全双工通信。</li>
<li>WebRTC 实时通信。</li>
<li>drag, drop 拖拽。</li>
<li><a href="http://xzfyu.com/2019/01/27/history%E6%BA%90%E7%A0%81/">history api</a>。</li>
<li>web workers 多线程。</li>
<li>performance api 网站性能。</li>
<li>microdata：参考 <a href="https://lepture.com/zh/2015/fe-microdata" target="_blank" rel="noopener">前端的基礎修養：Microdata</a>。</li>
</ul>
<h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><p>参考 <a href="http://xzfyu.com/2019/02/08/css/css%20%E6%80%BB%E6%B1%87/">css 总汇</a>。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>carrier</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>react-router</title>
    <url>/2019/01/31/frontend/library/react-router%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="react-router"><a href="#react-router" class="headerlink" title="react-router"></a>react-router</h2><p>基于 <a href="http://xzfyu.com/2019/01/27/history%E6%BA%90%E7%A0%81/">history</a> 创建的 history 对象、以及 <a href="https://github.com/jamiebuilds/create-react-context" target="_blank" rel="noopener">create-react-context</a> 为上下游组件传递 context 数据，上游的 Router 组件用于监听地址栏的变更，随后将 history 对象以及当前的 state.location 信息写入 context；下游的 Route 组件通过工具函数 matchPath 判断 location.pathname 是否匹配 props.path，以此渲染出内容。</p>
<p>在这种机制下，存在两个问题：如果 location.pathname 与多个 Route 匹配时，react-router 将会渲染出这几个 Route 的内容；如果嵌套使用的 Route 元素均需要与 location.pathname 当前的地址栏信息加以比较的话，那么这个 Route 元素的 props.path 属性也需要感知父 Route 元素的 props.path 信息。针对第一个问题，react-router 提供了 Switch 组件。借助 Switch 组件，react-router 将只渲染首个匹配的 Route 元素，且为子组件注入 props.computedMatch 属性（以避免 matchPath 的多次调用）。针对第二个问题，react-router 通过 Switch 组件或父 Route 组件向子组件注入 props.match 属性，再通过 match.path 设置子 Route 的 props.path 属性（参见 <a href="https://reacttraining.com/react-router/web/example/basic" target="_blank" rel="noopener">basic 示例</a>）。</p>
<p>除了改变子组件的 props.match 属性外，Switch 和 Route 组件均能改变子组件的 props.location 属性。react-router 以 <a href="https://reacttraining.com/react-router/web/example/animated-transitions" target="_blank" rel="noopener">Animated Transitions 示例</a> 指出 props.location 属性可应用于动效渲染场景。在示例中，react-router 使用指定 location 属性的 Switch 组件包裹前后两个页面级渲染内容，再经由指定 key 键为 location.key 的 CSSTransition 组件包裹（指定 key 键是为了在 CSSTransition 组件重绘期间，使该组件一前一后、卸载再挂载的机制切合视图上的移入移出动效），而后统一由 TransitionGroup 组件管理 CSSTransition 组件的动效切换过程。这样就可以实现：在地址栏变更过程中，前一个 CSSTransition 组件同步驻留，执行完隐藏动效后再移出；后一个 CSSTransition 组件执行完显示动效后再移入。</p>
<p>顺带指出的是，因为 Route 或 Switch 组件都可以指定动态的 props.location 属性，那就可以设想如下的黑魔法：自定义的、且与历史堆栈无甚关联的动态 location 属性将主导子 Route 的渲染状态。当然，这一黑魔法并不规范，理应避免使用。</p>
<p>在 Router 之外，react-router 还提供 MemoryRouter, StaticRouter 组件。MemoryRouter 组件可根据虚拟的缓存历史堆栈控制子 Route 的渲染状态，适用于测试或 native 环境。StaticRouter 组件适用于服务端渲染：react-router 会根据地址栏渲染出指定的内容，因此可以在 node 端设定 controller 对不同的前端路由统一发送 html 内容（通过 ReactDOMServer.renderToString 获得指定路由的 html 内容）；但是当地址栏与前端路由不匹配时，我们需要跳转到 404 页面，react-router 就会通过 StaticRouter 组件的机制在 ReactDOMServer.renderToString 方法执行期间，使用 content 引用对象收集待 404 页面地址，然后在 node 端进行重定向。引用对象 content 收集数据的方式有两种：第一种在虚拟跳转页面环节（为此，react-router 为 StaticRouter 组件提供了特定的 push, replace 方法实现）；第二种在待渲染页面 render 期间对 content 属性进行赋值。当然，这两种收集方式都在 ReactDOMServer.renderToString 方法执行期间完成。以上机制，可参考官方的 <a href="https://reacttraining.com/react-router/web/guides/server-rendering" target="_blank" rel="noopener">Server Rendering 示例</a>。</p>
<p>上一个段落的 ReactDOMServer.renderToString 方法执行期间，前端代码会虚拟地重定向到 404 页面；node 端再通过 context 感知到这一虚拟重定向过程，然后再发起真实的重定向。在这个过程中，虚拟重定向是由 Redirect 组件完成的。在 react-router4 中，Redirect 组件的机制就是在组件的生命周期中跳转页面、或者在渲染期间改变 context 的属性（服务端渲染时，将待跳转页面上报给 node 服务器），并无其他内容。因此，如果不需要重定向，就需要条件语句控制 Redirect 组件的渲染。参考 <a href="https://reacttraining.com/react-router/web/example/auth-workflow" target="_blank" rel="noopener">Redirects (Auth) 示例</a>。</p>
<p>在 Redirect 组件之外，借助 history 库封装的 block 方法，Prompt 组件用于拦截地址栏的变更，如默认会使用 window.confirm 提醒用户是否要进行跳转。Prompt 组件按两种条件决定是否需要对用户进行提示，其一是 props.when 属性，当其为真值进入条件二（因此可以将 state 状态赋值给 props.when 以设定条件）；其二是 props.message 属性，即 history 库中的 prompt，该值可以为函数，允许开发者根据待变更地址的 location, action 动态加以判断，是否需要提示用户。</p>
<p>我们用下图表示上文中组件的层级关系（虚线表示可有无可）：<br><img src="/2019/01/31/frontend/library/react-router源码分析/react-router层级关系.png"></p>
<p>以下列表简要概括各组价的输出能力和特点：</p>
<ul>
<li>StaticRouter: 服务器端渲染时，配合收集跳转页面地址并完成服务器端重定向。</li>
<li>MemoryRouter: native 环境使用虚拟历史堆栈实现前端路由。</li>
<li>Router: 将真实或虚拟的路由信息注入到子组件中，以控制 Route 内容的渲染。</li>
<li>Switch: 控制渲染首个匹配路由信息的 Route 内容。</li>
<li>Route: 设定单个路由规则，匹配时渲染内容。渲染内容可以是 children, Component, render 懒加载。其中，children 可以 React 元素，或 render props 形式。</li>
<li>Render: 作为 Route 下的渲染内容。</li>
<li>Redirect: 渲染时即重定向。</li>
<li>Prompt: 拦截地址栏变更。</li>
</ul>
<h3 id="RouterContext"><a href="#RouterContext" class="headerlink" title="__RouterContext"></a>__RouterContext</h3><p>基于 <a href="https://github.com/jamiebuilds/create-react-context" target="_blank" rel="noopener">create-react-context</a>，__RouterContext 用于为上下游组件传递 context。</p>
<h3 id="withRouter"><a href="#withRouter" class="headerlink" title="withRouter"></a>withRouter</h3><p>withRouter 装饰器将构造 HOC 组件，用于将 context 内容注入到子组件的 props 中。并且，HOC 组件基于 <a href="https://github.com/mridgway/hoist-non-react-statics" target="_blank" rel="noopener">hoist-non-react-statics</a>，拷贝了原始组件的非 react 类静态属性或方法。</p>
<h3 id="工具函数"><a href="#工具函数" class="headerlink" title="工具函数"></a>工具函数</h3><ul>
<li>Lifecycle: 生命周期方法管理组件。</li>
<li>generatePath(path, params): 基于 <a href="https://github.com/pillarjs/path-to-regexp" target="_blank" rel="noopener">path-to-regexp</a>，将路径规则 path 和路由参数 params 解析为实际的路径。实现上，根据路径规则的解析函数会以对象形式缓存在内存中。</li>
<li>matchPath(pathname, { path, exact, strict, sensitive }): 基于 <a href="https://github.com/pillarjs/path-to-regexp" target="_blank" rel="noopener">path-to-regexp</a>，将实际路径 pathname 解析为 { path, url, isExact, params } 形式。其中，path 为路径规则；url 为匹配的路径内容；isExact 指实际路径 path 和路径规则 pathname 是否相等；params 为路由参数。</li>
</ul>
<h2 id="react-router-config"><a href="#react-router-config" class="headerlink" title="react-router-config"></a>react-router-config</h2><p>react-router-config 输出如下两个工具函数：</p>
<ul>
<li>matchRoutes(routes, pathname): 从类树形结构的路由中获取当前匹配的路由节点分叉。主要针对 react-router4 没有在全局层面缓存全量的路由配置信息，路由配置散落在 Route 组件中。</li>
<li>renderRoutes(routes, extraProps, switchProps): 使用 Switch, Route 组件渲染单层结构的数组路由 routes。</li>
</ul>
<h2 id="react-router-dom"><a href="#react-router-dom" class="headerlink" title="react-router-dom"></a>react-router-dom</h2><p>基于 react-router 包，react-router-dom 针对浏览器环境提供了如下组件：</p>
<ul>
<li>BrowserRouter: 使用 history 库输出的 createBrowserHistory，构建前端路由。</li>
<li>HashRouter: 使用 history 库输出的 createBrowserHistory, 构建 hash 路由。</li>
<li>Link: 基于 __RouterContext，绘制 a 标签跳转链接。在配置 props.onClick 方法的情景中，可以采用采用浏览器机制跳转。</li>
<li>NavLink: 根据路由匹配情况，为 Link 元素设置特殊的样式。</li>
</ul>
<h2 id="react-router-native"><a href="#react-router-native" class="headerlink" title="react-router-native"></a>react-router-native</h2><p>基于 react-router 包，react-router-dom 针对 native 环境提供了如下组件：</p>
<ul>
<li>NativeRouter: 基于 MemoryRouter 组件，构建前端路由。默认的 props.getUserConfirmation 方法通过 react-native 输出的 Alert 实现。</li>
<li>BackButton: 基于 react-native 输出的 BackHandler 绑定 hardwareBackPress 事件，实现点击 back 按钮回退页面的功能。</li>
<li>Link: 通过为 props.Component 组件绑定 onPress 事件并渲染，实现页面跳转。</li>
<li>DeepLinking: 基于 react-native 输出的 Linking 绑定 url 事件，以使 Linking.openURL 调用过程中移除参数 url 中 ‘://‘ 及其前的内容。关于深度链接，可参看 <a href="https://www.jianshu.com/p/117a2cd510a6" target="_blank" rel="noopener">浅析移动应用深度链接 (Deeplinking)</a>， <a href="https://facebook.github.io/react-native/docs/linking.html" target="_blank" rel="noopener">Linking</a>。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文的写作基于反向演绎，缺少遇到问题时正向推理的顺畅感，又介于笔者水平有限，文中难免谬误，仍望海涵。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>library</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>history</title>
    <url>/2019/01/27/frontend/library/history%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<p>history 库基于 html5 的 history 接口，用于操控和观察浏览器地址栏的变更。本文分为两部分：介绍 html5 的 history 接口；再介绍 history 库的实现。</p>
<h2 id="history-接口"><a href="#history-接口" class="headerlink" title="history 接口"></a>history 接口</h2><p>为实现浏览器地址栏变更，又不至使页面刷新，html 提供了 history.pushState(state, title, url) 方法。该方法结合 ajax 请求一起使用，就可以实现地址栏变更时的局部刷新。实现详情可参阅 <a href="http://diveintohtml5.info/history.html" target="_blank" rel="noopener">MANIPULATING HISTORY FOR FUN &amp; PROFIT</a> 这篇文章。同时，这篇文章也指出，若想保证回退按钮也实现局部刷新，须监听 popstate 事件。以下整理的是 mozilla 开列的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History" target="_blank" rel="noopener">history 文档</a>。</p>
<ul>
<li>history.length: 存储在回话历史堆栈中的元素数量。</li>
<li>history.state: 获取栈顶——历史堆栈入口的状态值。</li>
<li>history.back(): 前往上一页，浏览器的回退按钮可以模拟此方法。</li>
<li>history.forward(): 前往下一页，浏览器的前进按钮可以模拟此方法。</li>
<li>history.go(num): 前往历史堆栈中的指定页面。</li>
<li>history.pushState(state, title, url): 将数据压入历史堆栈中。state 数据量须小于 640kb，firefox 会将其保存到本地磁盘中。firefox 也会忽略 title 参数。这一过程将触发 popstate 事件，但不会触发 hashchange 事件。</li>
<li>history.replaceState(state, title, url): 替换历史堆栈入口的数据。</li>
<li>popstate: 当历史堆栈入口数据变更时，均会触发 popstate 事件，包含调用 history.back, history.forward, history.go 方法，以及点击前进、回退按钮。history.pushState, history.replaceState 方法不会触发 popstate 事件。</li>
<li>window.onpopstate = (event) =&gt; {}; window.addEventListener(‘popstate’, (event) =&gt; {}): 监听 popstate 事件。</li>
<li>hashchange: hash 路径变更，将会触发 hashchange 事件。</li>
<li>window.onhashchange = (event) =&gt; {}; window.addEventListener(‘hashchange’, (event) =&gt; {}): 监听 hashchange 事件。</li>
</ul>
<h2 id="history-库"><a href="#history-库" class="headerlink" title="history 库"></a>history 库</h2><p>history 库创建了一个虚拟的 history 对象，以操纵浏览器地址栏的变更（createBrowserHistory）、或者操纵 hash 路径的变更（createHashHistory）、或者管理内存中的虚拟历史堆栈（createMemoryHistory）。各 history 对象均含有如下属性或方法：</p>
<ul>
<li>push(path, state): 往历史堆栈中压入数据。</li>
<li>replace(path, state): 变更历史堆栈入口数据。</li>
<li>go, goBack, goForward: 根据历史堆栈信息进行跳页。</li>
<li>block(prompt): 根据条件 prompt 阻断地址栏变更。</li>
<li>listen((location, action) =&gt; {}): 监听地址栏变更。</li>
<li>length: 历史堆栈中的数据量。</li>
<li>action: history 前次执行的方法名，值包含 ‘POP’, ‘PUSH’, ‘REPLACE’。</li>
<li>location: 历史堆栈入口的数据内容，数据结构为 { pathname, search, hash, key, state }，通过 LocationUtils.createLocation 创建。</li>
</ul>
<p>监听函数 listener 会在地址栏变更后予以执行。实现上，history 先收集历史堆栈入口的变更数据，并写入虚拟的 history 对象中，然后再执行 listener。这一过程表现为 createBrowserHistory, createHashHistory, createMemoryHistory 模块中的 setState 函数。因此，通过 pushState, replaceState, go 方法，或者通过对 location 对象赋值变更地址栏后，就可以调用 setState 执行监听函数了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setState</span>(<span class="params">nextState</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.assign(history, nextState);</span><br><span class="line">  history.length = globalHistory.length;</span><br><span class="line">  transitionManager.notifyListeners(history.location, history.action);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>history 有两种阻断地址栏变更的方法：在变更前拦截；在变更后回滚。相对于变更地址栏的三种方式：对 location 对象直接赋值，或者调用 pushState, replaceState 方法，或者调用 go 方法。前两种方法，我们都知道地址栏将要变更为何值，因此 history 选择在变更前拦截；后一种方法，我们不知道地址栏将会变更为何值，因此 history 选择在变更后回滚。实现上，history 使用 transitionManager.confirmTransitionTo 包裹前两种方法的调用过程；通过监听 popstate, hashchange 事件获得变更后的 location 数据，同样使用 transitionManager.confirmTransitionTo 判断是否需要回滚，还是维持现状。回滚机制的典型实现如 createBrowserHistory, createHashHistory 模块中的 handlePop 函数等。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 回滚到前几页时，跳过回滚机制</span></span><br><span class="line"><span class="keyword">let</span> forceNextPop = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlePop</span>(<span class="params">location</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (forceNextPop) &#123;</span><br><span class="line">    forceNextPop = <span class="literal">false</span>;</span><br><span class="line">    setState();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> action = <span class="string">'POP'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 prompt 判断是否需要回滚</span></span><br><span class="line">    transitionManager.confirmTransitionTo(</span><br><span class="line">      location,</span><br><span class="line">      action,</span><br><span class="line">      getUserConfirmation,</span><br><span class="line">      ok =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">          <span class="comment">// 维持现状</span></span><br><span class="line">          setState(&#123; action, location &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 回滚</span></span><br><span class="line">          revertPop(location);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">revertPop</span>(<span class="params">fromLocation</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> toLocation = history.location;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> We could probably make this more reliable by</span></span><br><span class="line">  <span class="comment">// keeping a list of keys we've seen in sessionStorage.</span></span><br><span class="line">  <span class="comment">// Instead, we just default to 0 for keys we don't know.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// allKeys 缓存历史堆栈中的数据标识</span></span><br><span class="line">  <span class="keyword">let</span> toIndex = allKeys.indexOf(toLocation.key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (toIndex === <span class="number">-1</span>) toIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> fromIndex = allKeys.indexOf(fromLocation.key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fromIndex === <span class="number">-1</span>) fromIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> delta = toIndex - fromIndex;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (delta) &#123;</span><br><span class="line">    forceNextPop = <span class="literal">true</span>;</span><br><span class="line">    go(delta);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>transitionManager 由 createTransitionManager 模块创建，提供了如下四种方法：</p>
<ul>
<li>appendListener(fn)：添加 fn 监听函数，返回函数可用于移除添加的监听函数。</li>
<li>notifyListeners(…args)：执行所有已添加的监听函数。</li>
<li>setPrompt(nextPrompt)：字符串时为提示；函数形式 (location, action) =&gt; {} 既可用于判断变更条件是否达成，或者输出提示文案；布尔值作为变更条件判断的结果。</li>
<li>confirmTransitionTo(location, action, getUserConfirmation, callback)：变更地址栏时，通过 prompt 判断变更条件是否达成或者获取提示文案；若取得提示文案，由 getUserConfirmation = (prompt, callback) =&gt; {} 设定 callback 的调用机制，否则以变更条件达成与否的状态值作为 callback 的参数，并执行 callback 回调。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">confirmTransitionTo</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  location,</span></span></span><br><span class="line"><span class="function"><span class="params">  action,</span></span></span><br><span class="line"><span class="function"><span class="params">  getUserConfirmation,</span></span></span><br><span class="line"><span class="function"><span class="params">  callback</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> If another transition starts while we're still confirming</span></span><br><span class="line">  <span class="comment">// the previous one, we may end up in a weird state. Figure out the</span></span><br><span class="line">  <span class="comment">// best way to handle this.</span></span><br><span class="line">  <span class="keyword">if</span> (prompt != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result =</span><br><span class="line">      <span class="keyword">typeof</span> prompt === <span class="string">'function'</span> ? prompt(location, action) : prompt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> result === <span class="string">'string'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> getUserConfirmation === <span class="string">'function'</span>) &#123;</span><br><span class="line">        getUserConfirmation(result, callback);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        warning(</span><br><span class="line">          <span class="literal">false</span>,</span><br><span class="line">          <span class="string">'A history needs a getUserConfirmation function in order to use a prompt message'</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        callback(<span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Return false from a transition hook to cancel the transition.</span></span><br><span class="line">      callback(result !== <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    callback(<span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基于以上触发监听函数、阻断地址栏变更的机制，下面我们一一揭开 createBrowserHistory, createHashHistory, createMemoryHistory 模块的面纱。</p>
<h3 id="createBrowserHistory"><a href="#createBrowserHistory" class="headerlink" title="createBrowserHistory"></a>createBrowserHistory</h3><p>createBrowserHistory 基于 html5 中的 pushState, replaceState 变更地址栏。地址栏变更内容不限于 hash 路径。当浏览器不支持 html5 的 history 接口时，createBrowserHistory 将直接变更 location.href 或者调用 location.replace 方法实现地址栏变更。</p>
<p>首先，createBrowserHistory 接受 props 参数。其中，props.forceRefresh 设定以刷新页面的形式变更地址栏；getUserConfirmation 配合 browserHistory.block 方法，可根据地址栏变更信息决定是否允许本次变更；props.keyLength 决定每条历史数据标识符 key 键的长度；props.basename 设置地址栏变更的基本路径。</p>
<p>其次，实现 push, replace 方法，用于变更历史入口。在支持 html5 history 接口的浏览器中，createBrowserHistory 将调用 setState 方法监听函数的执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">path, state</span>) </span>&#123;</span><br><span class="line">  warning(</span><br><span class="line">    !(</span><br><span class="line">      <span class="keyword">typeof</span> path === <span class="string">'object'</span> &amp;&amp;</span><br><span class="line">      path.state !== <span class="literal">undefined</span> &amp;&amp;</span><br><span class="line">      state !== <span class="literal">undefined</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="string">'You should avoid providing a 2nd state argument to push when the 1st '</span> +</span><br><span class="line">      <span class="string">'argument is a location-like object that already has state; it is ignored'</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> action = <span class="string">'PUSH'</span>;</span><br><span class="line">  <span class="keyword">const</span> location = createLocation(path, state, createKey(), history.location);</span><br><span class="line"></span><br><span class="line">  transitionManager.confirmTransitionTo(</span><br><span class="line">    location,</span><br><span class="line">    action,</span><br><span class="line">    getUserConfirmation,</span><br><span class="line">    ok =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (!ok) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> href = createHref(location);</span><br><span class="line">      <span class="keyword">const</span> &#123; key, state &#125; = location;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (canUseHistory) &#123;</span><br><span class="line">        globalHistory.pushState(&#123; key, state &#125;, <span class="literal">null</span>, href);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (forceRefresh) &#123;</span><br><span class="line">          <span class="built_in">window</span>.location.href = href;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> prevIndex = allKeys.indexOf(history.location.key);</span><br><span class="line">          <span class="keyword">const</span> nextKeys = allKeys.slice(</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            prevIndex === <span class="number">-1</span> ? <span class="number">0</span> : prevIndex + <span class="number">1</span></span><br><span class="line">          );</span><br><span class="line"></span><br><span class="line">          nextKeys.push(location.key);</span><br><span class="line">          allKeys = nextKeys;</span><br><span class="line"></span><br><span class="line">          setState(&#123; action, location &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        warning(</span><br><span class="line">          state === <span class="literal">undefined</span>,</span><br><span class="line">          <span class="string">'Browser history cannot push state in browsers that do not support HTML5 history'</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="built_in">window</span>.location.href = href;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replace</span>(<span class="params">path, state</span>) </span>&#123;</span><br><span class="line">  warning(</span><br><span class="line">    !(</span><br><span class="line">      <span class="keyword">typeof</span> path === <span class="string">'object'</span> &amp;&amp;</span><br><span class="line">      path.state !== <span class="literal">undefined</span> &amp;&amp;</span><br><span class="line">      state !== <span class="literal">undefined</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="string">'You should avoid providing a 2nd state argument to replace when the 1st '</span> +</span><br><span class="line">      <span class="string">'argument is a location-like object that already has state; it is ignored'</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> action = <span class="string">'REPLACE'</span>;</span><br><span class="line">  <span class="keyword">const</span> location = createLocation(path, state, createKey(), history.location);</span><br><span class="line"></span><br><span class="line">  transitionManager.confirmTransitionTo(</span><br><span class="line">    location,</span><br><span class="line">    action,</span><br><span class="line">    getUserConfirmation,</span><br><span class="line">    ok =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (!ok) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> href = createHref(location);</span><br><span class="line">      <span class="keyword">const</span> &#123; key, state &#125; = location;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (canUseHistory) &#123;</span><br><span class="line">        globalHistory.replaceState(&#123; key, state &#125;, <span class="literal">null</span>, href);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (forceRefresh) &#123;</span><br><span class="line">          <span class="built_in">window</span>.location.replace(href);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> prevIndex = allKeys.indexOf(history.location.key);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (prevIndex !== <span class="number">-1</span>) allKeys[prevIndex] = location.key;</span><br><span class="line"></span><br><span class="line">          setState(&#123; action, location &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        warning(</span><br><span class="line">          state === <span class="literal">undefined</span>,</span><br><span class="line">          <span class="string">'Browser history cannot replace state in browsers that do not support HTML5 history'</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="built_in">window</span>.location.replace(href);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其次，基于原生的 history 对象实现 go, goBack, goForward 方法。此种变更地址栏的方式可以触发 popstate 或 hashchange 事件。</p>
<p>最后，实现 block 方法阻断地址栏变更；listen 方法监听地址栏变更。两者都会绑定 popstate 或 hashchange 事件的回调函数。通过这两个事件判断本次变更是否需要回滚、以及触发 listener 监听函数的执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 作为事件的绑定函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handlePopState</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Ignore extraneous popstate events in WebKit.</span></span><br><span class="line">  <span class="keyword">if</span> (isExtraneousPopstateEvent(event)) <span class="keyword">return</span>;</span><br><span class="line">  handlePop(getDOMLocation(event.state));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleHashChange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  handlePop(getDOMLocation(getHistoryState()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定或清理事件的处理函数</span></span><br><span class="line"><span class="keyword">let</span> listenerCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkDOMListeners</span>(<span class="params">delta</span>) </span>&#123;</span><br><span class="line">  listenerCount += delta;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (listenerCount === <span class="number">1</span> &amp;&amp; delta === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(PopStateEvent, handlePopState);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (needsHashChangeListener)</span><br><span class="line">      <span class="built_in">window</span>.addEventListener(HashChangeEvent, handleHashChange);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (listenerCount === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(PopStateEvent, handlePopState);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (needsHashChangeListener)</span><br><span class="line">      <span class="built_in">window</span>.removeEventListener(HashChangeEvent, handleHashChange);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阻断地址栏变更</span></span><br><span class="line"><span class="keyword">let</span> isBlocked = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">block</span>(<span class="params">prompt = false</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> unblock = transitionManager.setPrompt(prompt);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!isBlocked) &#123;</span><br><span class="line">    checkDOMListeners(<span class="number">1</span>);</span><br><span class="line">    isBlocked = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isBlocked) &#123;</span><br><span class="line">      isBlocked = <span class="literal">false</span>;</span><br><span class="line">      checkDOMListeners(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> unblock();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听地址栏变更</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listen</span>(<span class="params">listener</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> unlisten = transitionManager.appendListener(listener);</span><br><span class="line">  checkDOMListeners(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    checkDOMListeners(<span class="number">-1</span>);</span><br><span class="line">    unlisten();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="createHashHistory"><a href="#createHashHistory" class="headerlink" title="createHashHistory"></a>createHashHistory</h3><p>createHashHistory 的处理逻辑与 createBrowserHistory 相同，只不过 createHashHistory 着眼于 hash 路径的变更。</p>
<p>createHashHistory 的参数 props 仅接受 basename, getUserConfirmation, hashType 三个属性。createHashHistory 专有的 hashType 用于设置 hash 路径的编码解码策略，默认为 ‘slash’。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hash 路径的编码解码策略集合</span></span><br><span class="line"><span class="keyword">const</span> HashPathCoders = &#123;</span><br><span class="line">  hashbang: &#123;</span><br><span class="line">    encodePath: <span class="function"><span class="params">path</span> =&gt;</span></span><br><span class="line">      path.charAt(<span class="number">0</span>) === <span class="string">'!'</span> ? path : <span class="string">'!/'</span> + stripLeadingSlash(path),</span><br><span class="line">    decodePath: <span class="function"><span class="params">path</span> =&gt;</span> (path.charAt(<span class="number">0</span>) === <span class="string">'!'</span> ? path.substr(<span class="number">1</span>) : path)</span><br><span class="line">  &#125;,</span><br><span class="line">  noslash: &#123;</span><br><span class="line">    encodePath: stripLeadingSlash,</span><br><span class="line">    decodePath: addLeadingSlash</span><br><span class="line">  &#125;,</span><br><span class="line">  slash: &#123;</span><br><span class="line">    encodePath: addLeadingSlash,</span><br><span class="line">    decodePath: addLeadingSlash</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在 createHashHistory 模块中，变更 hash 路径基于 location.hash 赋值和 location.replace 方法。同时，createHashHistory 借助 hashchange 事件实现回滚，而上述两者变更 hash 路径的方式均会触发 hashchange 事件。因此，在 push, replace 方法的实现中，待变更的地址将会写入 ignorePath 缓存中，以在 handleHashChange 绑定函数对此变更不作回滚操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleHashChange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> path = getHashPath();</span><br><span class="line">  <span class="keyword">const</span> encodedPath = encodePath(path);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (path !== encodedPath) &#123;</span><br><span class="line">    <span class="comment">// Ensure we always have a properly-encoded hash.</span></span><br><span class="line">    replaceHashPath(encodedPath);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> location = getDOMLocation();</span><br><span class="line">    <span class="keyword">const</span> prevLocation = history.location;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!forceNextPop &amp;&amp; locationsAreEqual(prevLocation, location)) <span class="keyword">return</span>; <span class="comment">// A hashchange doesn't always == location change.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ignorePath === createPath(location)) <span class="keyword">return</span>; <span class="comment">// Ignore this change; we already setState in push/replace.</span></span><br><span class="line"></span><br><span class="line">    ignorePath = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    handlePop(location);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="createMemoryHistory"><a href="#createMemoryHistory" class="headerlink" title="createMemoryHistory"></a>createMemoryHistory</h3><p>createMemoryHistory 用于在内存中创建完全虚拟的历史堆栈，只缓存历史记录，但与真实的地址栏无关（不会引起地址栏变更，不会和原生的 history 对象保持同步），也与 popstate, hashchange 事件无关。</p>
<p>createMemoryHistory 的参数 props 接受 getUserConfirmation, initialEntries, initialIndex, keyLength 属性。其中，props.initialEntries 指定最初的历史堆栈内容 history.entries；props.initialIndex 指定最初的索引值 history.index。push, replace 方法均将改变 history.entries 历史堆栈内容；go, goBack, goForward 均基于  history.entries 历史堆栈内容，以改变 history.index 及 history.location。实现参见源码。</p>
<h3 id="工具函数"><a href="#工具函数" class="headerlink" title="工具函数"></a>工具函数</h3><h4 id="PathUtils"><a href="#PathUtils" class="headerlink" title="PathUtils"></a>PathUtils</h4><p>路径相关操作。</p>
<ul>
<li>addLeadingSlash(path)：酌情为 path 路径添加前缀 ‘/‘。</li>
<li>stripLeadingSlash(path)：酌情为 path 路径剔除前缀 ‘/‘。</li>
<li>hasBasename(path, prefix)：判断路径 path 是否包含前缀 prefix。</li>
<li>stripBasename(path, prefix)：酌情为 path 路径剔除前缀 prefix。</li>
<li>stripTrailingSlash(path)：酌情为 path 路径剔除后缀 ‘/‘。</li>
<li>parsePath(path)：将字符串路径 path 转换为 { pathname, search, hash } 对象。</li>
<li>createPath(location)：将 { pathname, search, hash } 对象转换为字符串路径 path。</li>
</ul>
<h4 id="LocationUtils"><a href="#LocationUtils" class="headerlink" title="LocationUtils"></a>LocationUtils</h4><p>location 对象相关操作，基于 resolve-pathname, value-equal。</p>
<ul>
<li>createLocation(path, state, key, currentLocation) 构建 location = { pathname, search, hash, key, state } 对象，pathname 将根据 currentLocation 参数进行调整。</li>
<li>locationsAreEqual(a, b) 判断两个 location 对象是否相等。</li>
</ul>
<h4 id="DOMUtils"><a href="#DOMUtils" class="headerlink" title="DOMUtils"></a>DOMUtils</h4><p>DOM 环境判断。</p>
<ul>
<li>canUseDOM 是否可以操作节点。</li>
<li>getConfirmation(message, callback) 使用 window.confirm 弹出确认框，callback 的参数可用于判断用户是否点击确认按键。</li>
<li>supportsHistory 判断浏览器平台是否支持 HTML5 history API。</li>
<li>supportsPopStateOnHashChange 判断浏览器平台是否会在 hash 路径变更时触发 popstate 事件。</li>
<li>supportsGoWithoutReloadUsingHash 使用 go(n) 变更 hash 路径时是否不会页面刷新。</li>
<li>isExtraneousPopstateEvent 判断 popstate 事件是否由无关的操作引起。iOS 平台 chrome 浏览器点击回退按钮会触发 state 为 undefined 的 popstate 事件。</li>
</ul>
]]></content>
      <categories>
        <category>frontend</category>
        <category>library</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>scheduler 源码分析</title>
    <url>/2019/01/15/frontend/react16/scheduler/</url>
    <content><![CDATA[<p>scheduler 模块用于管理重绘完成后回调的执行逻辑。在 scheduler 中，requestHostCallback 函数用于实现在重绘完成后、视线程的空闲程度以及任务预设的超时时间，以在特定的时机执行任务。在 requestHostCallback 的基础上，scheduler 使用双向链表构建含有优先级的原子任务节点，再输出添加并执行任务节点、打断任务节点执行的 api。</p>
<h2 id="requestHostCallback"><a href="#requestHostCallback" class="headerlink" title="requestHostCallback"></a>requestHostCallback</h2><p>scheduler 模块支持三种方式实现 requestHostCallback, cancelHostCallback, shouldYieldToHost, getCurrentTime 函数：一、通过 window._schedMock 或 global._schedMock 数组注入；二、通过 setTimeout 实现（实现上当 requestHostCallback 的首参 —— 任务函数尚在执行过程中，scheduler 将 requestHostCallback 作为 setTimeout 的回调函数，以使在新添加任务函数间接添加到 macrotasks 队列中，可参看源码）；三、基于 MessageChannel, requestAnimationFrame 实现（MessageChannel 用于探知线程是否空闲，requestAnimationFrame 用于与重绘机制契合）。本文着重介绍第三种方式，并用 rAF 指代 requestAnimationFrame。</p>
<p>基于 MessageChannel, requestAnimationFrame 实现的上述四种函数的功能点为：</p>
<table>
<thead>
<tr>
<th>函数名</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>requestHostCallback(callback, absoluteTimeout)</td>
<td>在重绘完成后执行任务，并与线程的空闲程度相契合，详情见下文</td>
</tr>
<tr>
<td>cancelHostCallback</td>
<td>用于取消任务</td>
</tr>
<tr>
<td>shouldYieldToHost</td>
<td>用于判断任务是否超时、需要被打断</td>
</tr>
<tr>
<td>getCurrentTime</td>
<td>使用 performance 或 Date 对象获取当前时间</td>
</tr>
</tbody>
</table>
<p>requestHostCallback 执行的流程图为：</p>
<img src="/2019/01/15/frontend/react16/scheduler/requestHostCallback流程图.png">
<p>上图中所用的缓存值有：</p>
<table>
<thead>
<tr>
<th>缓存</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>scheduledHostCallback</td>
<td>待执行的回调，即上图中的任务，会被刷新</td>
</tr>
<tr>
<td>timeoutTime</td>
<td>任务允许的超时时间点</td>
</tr>
<tr>
<td>isAnimationFrameScheduled</td>
<td>rAF 轮询启动状态</td>
</tr>
<tr>
<td>isMessageEventScheduled</td>
<td>消息发送中标识</td>
</tr>
<tr>
<td>isFlushingHostCallback</td>
<td>任务执行中标识</td>
</tr>
<tr>
<td>activeFrameTime</td>
<td>任务允许的超时时间点</td>
</tr>
<tr>
<td>timeoutTime</td>
<td>一帧的期望执行时长，预设为 33 ms，在视图刷新过快时会更新，值将变小</td>
</tr>
<tr>
<td>previousFrameTime</td>
<td>前一帧执行时长</td>
</tr>
<tr>
<td>frameDeadline</td>
<td>下一帧期望完成时间点，用于判断重绘后 js 线程是否空闲，还是长期占用</td>
</tr>
</tbody>
</table>
<p>实现机制上，scheduler 首先实现 requestAnimationFrameWithTimeout 函数。该函数封装 requestAnimationFrame 函数，以使任务在重绘完后才予执行；但如果一些视图操作在后台执行，requestAnimationFrame 的回调将得不到执行，因此 scheduler 使用 setTimeout 兜底。流程图中启动 rAF 轮询就是指调用 requestAnimationFrameWithTimeout； animateTick 作为 requestAnimationFrameWithTimeout 回调。在 animateTick 的实现中，若 scheduledHostCallback 非 null，scheduler 将持续调用 requestAnimationFrameWithTimeout。因此本文将这一过程称为 rAF 轮询。</p>
<p>scheduler 考虑了重绘完成后、线程可能处于紧张的场景，因此所添加的任务并没有直接作为 requestAnimationFrameWithTimeout 的回调。scheduler 使用 MessageChannel 添加 macrotasks 队列作桥接，等待线程空闲，然后再执行任务。在 animateTick 中，scheduler 将计算下一帧期望完成时间点 previousFrameTime，然后通过 port.postMessage 方法发送消息。等到 port1 接受到消息时，schdulear 将 previousFrameTime 与 currentTime 作比较：当 previousFrameTime 小于等于 currentTime 时，scheduler 认为线程不是空闲的，对于超时的任务将立即执行，对于未超时的任务将在下次重绘后予以处理；当 previousFrameTime 大于 currentTime 时，线程就是空闲的，scheduler 将立即执行。这一处理机制在 port1.onMessage 监听函数中实现（作为 macrotasks，port1 接受消息的时机将随着线程的空闲程度起变化）。</p>
<p>有了上述的处理逻辑，scheduler 在外围制作 requestHostCallback(callback, absoluteTimeout) 接口：当前如果有任务正在执行中（意为当前没有重绘任务，重绘线程是空闲的）或者所添加的任务需要立即执行，scheduler 直接调用 port.postMessage 发送消息，跳过 rAF 轮询，以使任务得到即时执行；否则，如果 rAF 轮询未启动，调用 requestAnimationFrameWithTimeout(animationTick) 启动轮询。</p>
<p>在 requestHostCallback 接口之外，cancelHostCallback 通过 scheduledHostCallback 置为 null，以中断任务的执行；shouldYieldToHost 用于比较 frameDeadline 是否小于等于 currentTime（在一帧时间外），以此推断线程是否空闲，好添加并处理新任务。以下是 requestHostCallback 函数实现的源码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> requestAnimationFrameWithTimeout = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// schedule rAF and also a setTimeout</span></span><br><span class="line">  rAFID = localRequestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params">timestamp</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// cancel the setTimeout</span></span><br><span class="line">    localClearTimeout(rAFTimeoutID);</span><br><span class="line">    callback(timestamp);</span><br><span class="line">  &#125;);</span><br><span class="line">  rAFTimeoutID = localSetTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// cancel the requestAnimationFrame</span></span><br><span class="line">    localCancelAnimationFrame(rAFID);</span><br><span class="line">    callback(getCurrentTime());</span><br><span class="line">  &#125;, ANIMATION_FRAME_TIMEOUT);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> channel = <span class="keyword">new</span> MessageChannel();</span><br><span class="line"><span class="keyword">var</span> port = channel.port2;</span><br><span class="line">channel.port1.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  isMessageEventScheduled = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> prevScheduledCallback = scheduledHostCallback;</span><br><span class="line">  <span class="keyword">var</span> prevTimeoutTime = timeoutTime;</span><br><span class="line">  scheduledHostCallback = <span class="literal">null</span>;</span><br><span class="line">  timeoutTime = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> currentTime = getCurrentTime();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> didTimeout = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 线程不空闲</span></span><br><span class="line">  <span class="keyword">if</span> (frameDeadline - currentTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// There's no time left in this idle period. Check if the callback has</span></span><br><span class="line">    <span class="comment">// a timeout and whether it's been exceeded.</span></span><br><span class="line">    <span class="keyword">if</span> (prevTimeoutTime !== <span class="number">-1</span> &amp;&amp; prevTimeoutTime &lt;= currentTime) &#123;</span><br><span class="line">      <span class="comment">// Exceeded the timeout. Invoke the callback even though there's no</span></span><br><span class="line">      <span class="comment">// time left.</span></span><br><span class="line">      didTimeout = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// No timeout.</span></span><br><span class="line">      <span class="keyword">if</span> (!isAnimationFrameScheduled) &#123;</span><br><span class="line">        <span class="comment">// Schedule another animation callback so we retry later.</span></span><br><span class="line">        isAnimationFrameScheduled = <span class="literal">true</span>;</span><br><span class="line">        requestAnimationFrameWithTimeout(animationTick);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Exit without invoking the callback.</span></span><br><span class="line">      scheduledHostCallback = prevScheduledCallback;</span><br><span class="line">      timeoutTime = prevTimeoutTime;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (prevScheduledCallback !== <span class="literal">null</span>) &#123;</span><br><span class="line">    isFlushingHostCallback = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      prevScheduledCallback(didTimeout);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      isFlushingHostCallback = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> animationTick = <span class="function"><span class="keyword">function</span>(<span class="params">rafTime</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (scheduledHostCallback !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Eagerly schedule the next animation callback at the beginning of the</span></span><br><span class="line">    <span class="comment">// frame. If the scheduler queue is not empty at the end of the frame, it</span></span><br><span class="line">    <span class="comment">// will continue flushing inside that callback. If the queue *is* empty,</span></span><br><span class="line">    <span class="comment">// then it will exit immediately. Posting the callback at the start of the</span></span><br><span class="line">    <span class="comment">// frame ensures it's fired within the earliest possible frame. If we</span></span><br><span class="line">    <span class="comment">// waited until the end of the frame to post the callback, we risk the</span></span><br><span class="line">    <span class="comment">// browser skipping a frame and not firing the callback until the frame</span></span><br><span class="line">    <span class="comment">// after that.</span></span><br><span class="line">    requestAnimationFrameWithTimeout(animationTick);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// No pending work. Exit.</span></span><br><span class="line">    isAnimationFrameScheduled = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> nextFrameTime = rafTime - frameDeadline + activeFrameTime;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    nextFrameTime &lt; activeFrameTime &amp;&amp;</span><br><span class="line">    previousFrameTime &lt; activeFrameTime</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nextFrameTime &lt; <span class="number">8</span>) &#123;</span><br><span class="line">      <span class="comment">// Defensive coding. We don't support higher frame rates than 120hz.</span></span><br><span class="line">      <span class="comment">// If the calculated frame time gets lower than 8, it is probably a bug.</span></span><br><span class="line">      nextFrameTime = <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// If one frame goes long, then the next one can be short to catch up.</span></span><br><span class="line">    <span class="comment">// If two frames are short in a row, then that's an indication that we</span></span><br><span class="line">    <span class="comment">// actually have a higher frame rate than what we're currently optimizing.</span></span><br><span class="line">    <span class="comment">// We adjust our heuristic dynamically accordingly. For example, if we're</span></span><br><span class="line">    <span class="comment">// running on 120hz display or 90hz VR display.</span></span><br><span class="line">    <span class="comment">// Take the max of the two in case one of them was an anomaly due to</span></span><br><span class="line">    <span class="comment">// missed frame deadlines.</span></span><br><span class="line">    activeFrameTime =</span><br><span class="line">      nextFrameTime &lt; previousFrameTime ? previousFrameTime : nextFrameTime;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    previousFrameTime = nextFrameTime;</span><br><span class="line">  &#125;</span><br><span class="line">  frameDeadline = rafTime + activeFrameTime;</span><br><span class="line">  <span class="keyword">if</span> (!isMessageEventScheduled) &#123;</span><br><span class="line">    isMessageEventScheduled = <span class="literal">true</span>;</span><br><span class="line">    port.postMessage(<span class="literal">undefined</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">requestHostCallback = <span class="function"><span class="keyword">function</span>(<span class="params">callback, absoluteTimeout</span>) </span>&#123;</span><br><span class="line">  scheduledHostCallback = callback;</span><br><span class="line">  timeoutTime = absoluteTimeout;</span><br><span class="line">  <span class="keyword">if</span> (isFlushingHostCallback || absoluteTimeout &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// Don't wait for the next frame. Continue working ASAP, in a new event.</span></span><br><span class="line">    port.postMessage(<span class="literal">undefined</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isAnimationFrameScheduled) &#123;</span><br><span class="line">    <span class="comment">// If rAF didn't already schedule one, we need to schedule a frame.</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> If this rAF doesn't materialize because the browser throttles, we</span></span><br><span class="line">    <span class="comment">// might want to still have setTimeout trigger rIC as a backup to ensure</span></span><br><span class="line">    <span class="comment">// that we keep performing work.</span></span><br><span class="line">    isAnimationFrameScheduled = <span class="literal">true</span>;</span><br><span class="line">    requestAnimationFrameWithTimeout(animationTick);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="scheduler"><a href="#scheduler" class="headerlink" title="scheduler"></a>scheduler</h2><h3 id="callbackNode-及其执行机制"><a href="#callbackNode-及其执行机制" class="headerlink" title="callbackNode 及其执行机制"></a>callbackNode 及其执行机制</h3><p>scheduler 以首尾相连的双向链表缓存 callbackNode，每个任务节点的 previous 属性指向上一个任务节点（firstCallbackNode 的 previous 属性指向 lastCallbackNode），next 属性指向下一个任务节点（lastCallbackNode 的 next 属性指向 firstCallbackNode）。链表中的 callbackNode 以优先级（以超时时间 expirationTime 属性表示）进行排序。以双向链表构建的数据，只需要缓存 firstCallbackNode 首任务节点。</p>
<p>scheduler 针对 callbackNode 设定五种优先级，分别是 ImmediatePriority, UserBlockingPriority, NormalPriority, LowPriority, IdlePriority。优先级会影响超时时间，以上五个优先级的超时时间分别为 -1, 250, 5000, 10000, 1073741823。因此对于 ImmediatePriority 优先级的任务节点，在使用 requestHostCallback 函数处理的过程中，该任务节点就不需要经过 rAF 回调机制，而是会经由 MessageChannel 直接被处理。</p>
<p>在 callbackNode 任务节点中，callback 属性为待执行的函数，priorityLevel 为执行优先级，expirationTime 为允许的超时时间点（以当前时间 + 超时时间的方式计算）。因为 requestHostCallback 每次调用时都会刷新 scheduledHostCallback 缓存，callbackNode.callback 并不能直接作为 requestHostCallback 的参数，那样会在两次调用过程中，造成前一个任务丢失。scheduler 实际使用 flushWork 函数作为 requestHostCallback 的参数（在 ensureHostCallbackIsScheduled 函数中处理），便于批量执行双向链表中的 callbackNode.callback 函数，也不至使任务丢失。</p>
<p>flushWork 函数基于 flushFirstCallback, flushImmediateWork，以下是这三个函数的实现机制：</p>
<p>flushFirstCallback 从双向链表中取出首个任务节点并执行。若首个任务节点的 callback 返回函数，使用该函数构建新的 callbackNode 任务节点，并将该任务节点插入双向链表中：若该任务节点的优先级最高、且不只包含一个任务节点，调用 ensureHostCallbackIsScheduled，在下一次重绘后酌情执行双向链表中的任务节点；否则只将新创建的任务节点添加到双向链表中。</p>
<p>基于 flushFirstCallback，flushImmediateWork 函数用于执行双向链表中所有优先级为 ImmediatePriority 的任务节点。如果双向链表不只包含优先级为 ImmediatePriority 的任务节点，flushImmediateWork 将调用 ensureHostCallbackIsScheduled 等待下次重绘后执行剩余的任务节点。</p>
<p>flushWork 作为 requestHostCallback 函数的参数，获得的首个实参 didTimeout 为是否超时的标识。如果超时，flushWork 通过调用 flushFirstCallback 批量执行所有未超时的任务节点；若果没有超时，flushWork 将在下一帧未完成前（通过 shouldYieldToHost 函数判断）尽可能地执行任务节点。等上述条件逻辑执行完成后，如果双向链表非空，调用 ensureHostCallbackIsScheduled 等待下次重绘后执行剩余的任务节点。特别的，当双向链表中还存在 ImmediatePriority 优先级的任务节点，flushWork 将调用 flushImmediateWork 批量执行这些任务节点。</p>
<p>因为 scheduler 使用首个任务节点的超时时间点作为 requestHostCallback 函数的次参（在 ensureHostCallbackIsScheduled 函数中处理）。因此，如果首个任务节点的优先级为 ImmediatePriority，flushWork 所获得参数 didTimeout 也将是否值，其执行逻辑将是执行所有优先级为 ImmediatePriority 的任务节点，再调用 ensureHostCallbackIsScheduled 等待下一次重绘时执行其余任务节点。如果首个任务节点的优先级为 UserBlockingPriority 等，flushWork 将执行同优先级的任务节点，再调用 ensureHostCallbackIsScheduled 等待下一次重绘时执行其余任务节点。所有对不同优先级的任务节点，scheduler 采用分段执行的策略。</p>
<table>
<thead>
<tr>
<th>缓存</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>currentPriorityLevel</td>
<td>执行中任务节点的优先级，默认为 NormalPriority</td>
</tr>
<tr>
<td>currentExpirationTime</td>
<td>执行中任务节点的超时时间点</td>
</tr>
<tr>
<td>enableSchedulerDebugging</td>
<td>debug 模式？</td>
</tr>
<tr>
<td>isExecutingCallback</td>
<td>任务节点正在批量执行中标识</td>
</tr>
<tr>
<td>isHostCallbackScheduled</td>
<td>requestHostCallback 已执行并开启 rAF 轮询标识</td>
</tr>
<tr>
<td>isSchedulerPaused</td>
<td>scheduler 是否被打断，将不会执行任务节点，由接口层更新该值</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ensureHostCallbackIsScheduled</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isExecutingCallback) &#123;</span><br><span class="line">    <span class="comment">// Don't schedule work yet; wait until the next time we yield.</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Schedule the host callback using the earliest expiration in the list.</span></span><br><span class="line">  <span class="keyword">var</span> expirationTime = firstCallbackNode.expirationTime;</span><br><span class="line">  <span class="keyword">if</span> (!isHostCallbackScheduled) &#123;</span><br><span class="line">    isHostCallbackScheduled = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Cancel the existing host callback.</span></span><br><span class="line">    cancelHostCallback();</span><br><span class="line">  &#125;</span><br><span class="line">  requestHostCallback(flushWork, expirationTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flushFirstCallback</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> flushedNode = firstCallbackNode;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Remove the node from the list before calling the callback. That way the</span></span><br><span class="line">  <span class="comment">// list is in a consistent state even if the callback throws.</span></span><br><span class="line">  <span class="keyword">var</span> next = firstCallbackNode.next;</span><br><span class="line">  <span class="keyword">if</span> (firstCallbackNode === next) &#123;</span><br><span class="line">    <span class="comment">// This is the last callback in the list.</span></span><br><span class="line">    firstCallbackNode = <span class="literal">null</span>;</span><br><span class="line">    next = <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> lastCallbackNode = firstCallbackNode.previous;</span><br><span class="line">    firstCallbackNode = lastCallbackNode.next = next;</span><br><span class="line">    next.previous = lastCallbackNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  flushedNode.next = flushedNode.previous = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Now it's safe to call the callback.</span></span><br><span class="line">  <span class="keyword">var</span> callback = flushedNode.callback;</span><br><span class="line">  <span class="keyword">var</span> expirationTime = flushedNode.expirationTime;</span><br><span class="line">  <span class="keyword">var</span> priorityLevel = flushedNode.priorityLevel;</span><br><span class="line">  <span class="keyword">var</span> previousPriorityLevel = currentPriorityLevel;</span><br><span class="line">  <span class="keyword">var</span> previousExpirationTime = currentExpirationTime;</span><br><span class="line">  currentPriorityLevel = priorityLevel;</span><br><span class="line">  currentExpirationTime = expirationTime;</span><br><span class="line">  <span class="keyword">var</span> continuationCallback;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    continuationCallback = callback();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    currentPriorityLevel = previousPriorityLevel;</span><br><span class="line">    currentExpirationTime = previousExpirationTime;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// A callback may return a continuation. The continuation should be scheduled</span></span><br><span class="line">  <span class="comment">// with the same priority and expiration as the just-finished callback.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> continuationCallback === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> continuationNode: CallbackNode = &#123;</span><br><span class="line">      callback: continuationCallback,</span><br><span class="line">      priorityLevel,</span><br><span class="line">      expirationTime,</span><br><span class="line">      next: <span class="literal">null</span>,</span><br><span class="line">      previous: <span class="literal">null</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Insert the new callback into the list, sorted by its expiration. This is</span></span><br><span class="line">    <span class="comment">// almost the same as the code in `scheduleCallback`, except the callback</span></span><br><span class="line">    <span class="comment">// is inserted into the list *before* callbacks of equal expiration instead</span></span><br><span class="line">    <span class="comment">// of after.</span></span><br><span class="line">    <span class="keyword">if</span> (firstCallbackNode === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// This is the first callback in the list.</span></span><br><span class="line">      firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> nextAfterContinuation = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">var</span> node = firstCallbackNode;</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.expirationTime &gt;= expirationTime) &#123;</span><br><span class="line">          <span class="comment">// This callback expires at or after the continuation. We will insert</span></span><br><span class="line">          <span class="comment">// the continuation *before* this callback.</span></span><br><span class="line">          nextAfterContinuation = node;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node = node.next;</span><br><span class="line">      &#125; <span class="keyword">while</span> (node !== firstCallbackNode);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (nextAfterContinuation === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No equal or lower priority callback was found, which means the new</span></span><br><span class="line">        <span class="comment">// callback is the lowest priority callback in the list.</span></span><br><span class="line">        nextAfterContinuation = firstCallbackNode;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nextAfterContinuation === firstCallbackNode) &#123;</span><br><span class="line">        <span class="comment">// The new callback is the highest priority callback in the list.</span></span><br><span class="line">        firstCallbackNode = continuationNode;</span><br><span class="line">        ensureHostCallbackIsScheduled();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> previous = nextAfterContinuation.previous;</span><br><span class="line">      previous.next = nextAfterContinuation.previous = continuationNode;</span><br><span class="line">      continuationNode.next = nextAfterContinuation;</span><br><span class="line">      continuationNode.previous = previous;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flushImmediateWork</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="comment">// Confirm we've exited the outer most event handler</span></span><br><span class="line">    currentEventStartTime === <span class="number">-1</span> &amp;&amp;</span><br><span class="line">    firstCallbackNode !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">    firstCallbackNode.priorityLevel === ImmediatePriority</span><br><span class="line">  ) &#123;</span><br><span class="line">    isExecutingCallback = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">        flushFirstCallback();</span><br><span class="line">      &#125; <span class="keyword">while</span> (</span><br><span class="line">        <span class="comment">// Keep flushing until there are no more immediate callbacks</span></span><br><span class="line">        firstCallbackNode !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">        firstCallbackNode.priorityLevel === ImmediatePriority</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      isExecutingCallback = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (firstCallbackNode !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// There's still work remaining. Request another callback.</span></span><br><span class="line">        ensureHostCallbackIsScheduled();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        isHostCallbackScheduled = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flushWork</span>(<span class="params">didTimeout</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Exit right away if we're currently paused</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (enableSchedulerDebugging &amp;&amp; isSchedulerPaused) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isExecutingCallback = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">const</span> previousDidTimeout = currentDidTimeout;</span><br><span class="line">  currentDidTimeout = didTimeout;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (didTimeout) &#123;</span><br><span class="line">      <span class="comment">// Flush all the expired callbacks without yielding.</span></span><br><span class="line">      <span class="keyword">while</span> (</span><br><span class="line">        firstCallbackNode !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">        !(enableSchedulerDebugging &amp;&amp; isSchedulerPaused)</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="comment">// TODO Wrap i nfeature flag</span></span><br><span class="line">        <span class="comment">// Read the current time. Flush all the callbacks that expire at or</span></span><br><span class="line">        <span class="comment">// earlier than that time. Then read the current time again and repeat.</span></span><br><span class="line">        <span class="comment">// This optimizes for as few performance.now calls as possible.</span></span><br><span class="line">        <span class="keyword">var</span> currentTime = getCurrentTime();</span><br><span class="line">        <span class="keyword">if</span> (firstCallbackNode.expirationTime &lt;= currentTime) &#123;</span><br><span class="line">          <span class="keyword">do</span> &#123;</span><br><span class="line">            flushFirstCallback();</span><br><span class="line">          &#125; <span class="keyword">while</span> (</span><br><span class="line">            firstCallbackNode !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">            firstCallbackNode.expirationTime &lt;= currentTime &amp;&amp;</span><br><span class="line">            !(enableSchedulerDebugging &amp;&amp; isSchedulerPaused)</span><br><span class="line">          );</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Keep flushing callbacks until we run out of time in the frame.</span></span><br><span class="line">      <span class="keyword">if</span> (firstCallbackNode !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (enableSchedulerDebugging &amp;&amp; isSchedulerPaused) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          flushFirstCallback();</span><br><span class="line">        &#125; <span class="keyword">while</span> (firstCallbackNode !== <span class="literal">null</span> &amp;&amp; !shouldYieldToHost());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    isExecutingCallback = <span class="literal">false</span>;</span><br><span class="line">    currentDidTimeout = previousDidTimeout;</span><br><span class="line">    <span class="keyword">if</span> (firstCallbackNode !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// There's still work remaining. Request another callback.</span></span><br><span class="line">      ensureHostCallbackIsScheduled();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      isHostCallbackScheduled = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Before exiting, flush all the immediate work that was scheduled.</span></span><br><span class="line">    flushImmediateWork();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="apis"><a href="#apis" class="headerlink" title="apis"></a>apis</h3><h4 id="unstable-scheduleCallback"><a href="#unstable-scheduleCallback" class="headerlink" title="unstable_scheduleCallback"></a>unstable_scheduleCallback</h4><p>unstable_scheduleCallback(callback, deprecated_options) 基于 currentPriorityLevel 优先级计算超时时间点，将 callback 构建为一个 callbackNode 任务节点，并将该节点插入双向链表，启用 ensureHostCallbackIsScheduled 等待重绘后执行任务节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unstable_scheduleCallback</span>(<span class="params">callback, deprecated_options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> startTime =</span><br><span class="line">    currentEventStartTime !== <span class="number">-1</span> ? currentEventStartTime : getCurrentTime();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> expirationTime;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> deprecated_options === <span class="string">'object'</span> &amp;&amp;</span><br><span class="line">    deprecated_options !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">    <span class="keyword">typeof</span> deprecated_options.timeout === <span class="string">'number'</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">FIXME:</span> Remove this branch once we lift expiration times out of React.</span></span><br><span class="line">    expirationTime = startTime + deprecated_options.timeout;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (currentPriorityLevel) &#123;</span><br><span class="line">      <span class="keyword">case</span> ImmediatePriority:</span><br><span class="line">        expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> UserBlockingPriority:</span><br><span class="line">        expirationTime = startTime + USER_BLOCKING_PRIORITY;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> IdlePriority:</span><br><span class="line">        expirationTime = startTime + IDLE_PRIORITY;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> LowPriority:</span><br><span class="line">        expirationTime = startTime + LOW_PRIORITY_TIMEOUT;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> NormalPriority:</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> newNode = &#123;</span><br><span class="line">    callback,</span><br><span class="line">    priorityLevel: currentPriorityLevel,</span><br><span class="line">    expirationTime,</span><br><span class="line">    next: <span class="literal">null</span>,</span><br><span class="line">    previous: <span class="literal">null</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Insert the new callback into the list, ordered first by expiration, then</span></span><br><span class="line">  <span class="comment">// by insertion. So the new callback is inserted any other callback with</span></span><br><span class="line">  <span class="comment">// equal expiration.</span></span><br><span class="line">  <span class="keyword">if</span> (firstCallbackNode === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// This is the first callback in the list.</span></span><br><span class="line">    firstCallbackNode = newNode.next = newNode.previous = newNode;</span><br><span class="line">    ensureHostCallbackIsScheduled();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> node = firstCallbackNode;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.expirationTime &gt; expirationTime) &#123;</span><br><span class="line">        <span class="comment">// The new callback expires before this one.</span></span><br><span class="line">        next = node;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      node = node.next;</span><br><span class="line">    &#125; <span class="keyword">while</span> (node !== firstCallbackNode);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (next === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// No callback with a later expiration was found, which means the new</span></span><br><span class="line">      <span class="comment">// callback has the latest expiration in the list.</span></span><br><span class="line">      next = firstCallbackNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (next === firstCallbackNode) &#123;</span><br><span class="line">      <span class="comment">// The new callback has the earliest expiration in the entire list.</span></span><br><span class="line">      firstCallbackNode = newNode;</span><br><span class="line">      ensureHostCallbackIsScheduled();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> previous = next.previous;</span><br><span class="line">    previous.next = next.previous = newNode;</span><br><span class="line">    newNode.next = next;</span><br><span class="line">    newNode.previous = previous;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="unstable-runWithPriority"><a href="#unstable-runWithPriority" class="headerlink" title="unstable_runWithPriority"></a>unstable_runWithPriority</h4><p>unstable_runWithPriority(priorityLevel, eventHandler) 将 currentPriorityLevel 缓存设置为 priorityLevel，随后再执行 eventHandler，最后调用 flushImmediateWork 函数执行所有优先级为 ImmediatePriority 的任务节点，其余任务节点等待下次重绘后再执行。可以设想，当 eventHandler 为 unstable_scheduleCallback 函数时，将影响所添加任务节点的优先级，并立即执行 ImmediatePriority 优先级的任务。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unstable_runWithPriority</span>(<span class="params">priorityLevel, eventHandler</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (priorityLevel) &#123;</span><br><span class="line">    <span class="keyword">case</span> ImmediatePriority:</span><br><span class="line">    <span class="keyword">case</span> UserBlockingPriority:</span><br><span class="line">    <span class="keyword">case</span> NormalPriority:</span><br><span class="line">    <span class="keyword">case</span> LowPriority:</span><br><span class="line">    <span class="keyword">case</span> IdlePriority:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      priorityLevel = NormalPriority;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> previousPriorityLevel = currentPriorityLevel;</span><br><span class="line">  <span class="keyword">var</span> previousEventStartTime = currentEventStartTime;</span><br><span class="line">  currentPriorityLevel = priorityLevel;</span><br><span class="line">  currentEventStartTime = getCurrentTime();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> eventHandler();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    currentPriorityLevel = previousPriorityLevel;</span><br><span class="line">    currentEventStartTime = previousEventStartTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Before exiting, flush all the immediate work that was scheduled.</span></span><br><span class="line">    flushImmediateWork();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="unstable-wrapCallback"><a href="#unstable-wrapCallback" class="headerlink" title="unstable_wrapCallback"></a>unstable_wrapCallback</h4><p>unstable_wrapCallback(callback) 记录当前的优先级 currentPriorityLevel，返回函数处理效果如 unstable_runWithPriority，对于 callback 中新添加的任务节点将使用所记录的 currentPriorityLevel 作为优先级。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unstable_wrapCallback</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> parentPriorityLevel = currentPriorityLevel;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// This is a fork of runWithPriority, inlined for performance.</span></span><br><span class="line">    <span class="keyword">var</span> previousPriorityLevel = currentPriorityLevel;</span><br><span class="line">    <span class="keyword">var</span> previousEventStartTime = currentEventStartTime;</span><br><span class="line">    currentPriorityLevel = parentPriorityLevel;</span><br><span class="line">    currentEventStartTime = getCurrentTime();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> callback.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      currentPriorityLevel = previousPriorityLevel;</span><br><span class="line">      currentEventStartTime = previousEventStartTime;</span><br><span class="line">      flushImmediateWork();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul>
<li>unstable_pauseExecution 通过将 isSchedulerPaused 置为 true，打断 scheduler 处理任务节点。</li>
<li>unstable_continueExecution 取消打断状态，使 scheduler 恢复处理任务节点。</li>
<li>unstable_getFirstCallbackNode 获取双向链表中的首个任务节点。</li>
<li>unstable_cancelCallback(callbackNode) 从双向链表中移除指定任务节点。</li>
<li>unstable_getCurrentPriorityLevel 获取当前优先级 currentPriorityLevel 缓存。</li>
<li>unstable_shouldYield 是否需要被打断。</li>
<li>unstable_now 获取当前时间。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unstable_shouldYield</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    !currentDidTimeout &amp;&amp;</span><br><span class="line">    ((firstCallbackNode !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">      firstCallbackNode.expirationTime &lt; currentExpirationTime) ||</span><br><span class="line">      shouldYieldToHost())</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>scheduler 模块代码简短，逻辑复杂，在这篇文章中，难免有理解不当的地方。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>react</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>react api 整理</title>
    <url>/2019/01/14/frontend/react16/React/</url>
    <content><![CDATA[<p>本文档意在整理 react 顶层 api 的内容和实现，可参阅<a href="https://reactjs.org/docs/react-api.html" target="_blank" rel="noopener">react 官方文档</a>。React 包主要提供 api 接口，功能上的核心逻辑点通常由 react-dom 等包实现。</p>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>React 组件可将视图内容拆分为独立的、可复用的单元，以便在组件的模块制作过程中独立实现视图逻辑和业务逻辑。在 es6 语法背景下，React 组件可基于 React.Component, React.PureComponent 类加以制作。如果没有使用 es6 语法，可以使用 <a href="https://reactjs.org/docs/react-without-es6.html" target="_blank" rel="noopener">create-react-class</a> 库。除此以外，也可以编写函数式组件。该函数式组件能用 React.memo 加以包裹。</p>
<p>在源码中，React.Component, React.PureComponent 类由 ReactBaseClasses 模块提供。</p>
<h3 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h3><p>Component(props, context, updater) 基类在构造函数中初始化 props, context, refs, updater 实例属性，并包含 isReactComponent, setState, forceUpdate 原型方法。其中，updater 属性在实例化阶段将赋值为默认的 ReactNoopUpdateQueue，渲染阶段在注入实际的 updater。setState, forceUpdate 原型方法基于 updater.enqueueSetState, updater.enqueueForceUpdate 构建。</p>
<h3 id="PureComponent"><a href="#PureComponent" class="headerlink" title="PureComponent"></a>PureComponent</h3><p>PureComponent(props, context, updater) 与 Component 基类拥有相同的实例属性，其原型对象也通过桥接函数赋值的形式重新构造、且混入了 Component 基类的原型方法，除此之外，PureComponent 还具有 isPureReactComponent 原型方法。</p>
<h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>可参考 <a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noopener">React 组件生命周期</a></p>
<ol>
<li>挂载阶段：<ul>
<li>constructor(props): 实例化。</li>
<li>static getDeriverdStateFromProps 从 props 中获取 state。</li>
<li>render 渲染。</li>
<li>componentDidMount: 完成挂载。</li>
</ul>
</li>
<li>更新阶段：<ul>
<li>static getDeriverdStateFromProps 从 props 中获取 state。</li>
<li>shouldComponentUpdate 判断是否需要重绘。</li>
<li>rendere 渲染。</li>
<li>getShapshotBeforeUpdate 获取快照。</li>
<li>componentDidUpdate 渲染完成后回调。</li>
</ul>
</li>
<li>卸载阶段：<ul>
<li>componentWillUnmount 即将卸载。</li>
</ul>
</li>
<li>错误处理：<ul>
<li>static getDerivedStateFromError 从错误中获取 state。</li>
<li>componentDidCatch 捕获错误并进行处理。</li>
</ul>
</li>
</ol>
<h3 id="React-memo"><a href="#React-memo" class="headerlink" title="React.memo"></a>React.memo</h3><p>React.memo(funcComponent, compare) 用于创建高阶组件，使函数式组件具有如 PureComponent 的效果。在默认情况下，它会浅比较接受到的 props，当然，在提供 compare(prevProps, nextProps) 参数的场景中，你也可以定制重绘时机。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyComponent</span>(<span class="params">props</span>)</span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">areEqual</span>(<span class="params">prevProps, nextProps</span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.memo(MyComponent, areEqual);</span><br></pre></td></tr></table></figure>
<p>实现上，memo 函数会构建类 React 元素数据如 { $$typeof, type, compare }。其中，$$typeof 为来自 shared/ReactSymbols 包下的常量 REACT_MEMO_TYPE；type 为首参函数式组件；compare 即次参对比函数。</p>
<h2 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h2><p>React 元素可使用 JSX 语法书写，也可以使用 createElement, createFactory 方法构建。<a href="https://github.com/mlmorg/react-hyperscript" target="_blank" rel="noopener">react-hyperscript</a>, <a href="https://github.com/ohanhi/hyperscript-helpers" target="_blank" rel="noopener">hyperscript-helpers</a> 这两个类库也提供了创建 React 元素的便捷语法糖。</p>
<p>除了 createElement, createFactory 方法以外，React 还提供 cloneElementAndReplaceKey, cloneElement, isValidElement 用于克隆元素或者校验元素。这些方法均由 ReactElement 模块输出。而 React.children 用于处理对子元素的操作。</p>
<h3 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h3><p>ReactElement(type, key, ref, self, source, owner, props) 作为创建元素的工厂函数，将构建 element 常量并返回。其中，element 包含可枚举可赋值的 $$typeof, type, key, ref, props, _owner 属性，$$typeof 属性为特定常量 REACT_ELEMENT_TYPE。在开发环境中，element 又包含 _store 存储校验标识（_store.validated），不可枚举不可赋值的 _self, _source 属性；且 element, element.props 均使用 Object.freeze 冻结。</p>
<p>createElement(type, config, children) 使用特定的自定义或内置组件 type 创建元素。参数 config 通过 key, ref, <strong>self, </strong>source 配置元素的 key, ref, self, source 属性，其余属性将作为元素的 props。children 用于配置元素下割的子元素。在创建元素时，ReactCurrentOwner.current 将作为元素的 _owner 属性。ReactCurrentOwner.current 值为渲染过程中的 Fiber 实例。</p>
<p>createFactory(type) 为特定的组件创建工厂函数。</p>
<p>cloneAndReplaceKey(oldElement, newKey) 使用 oldElement 组件构造器 oldElement.type 以及 ref, props, _owner, _self, _source 属性构建新的元素，该元素的 key 属性指定为 newKey。</p>
<p>cloneElement(element, config, children) 与 cloneAndReplaceKey 不同的是，该方法在克隆元素时可以重新配置 key, ref, props, children 属性。如果重置 ref 属性时，克隆元素的 _owner 属性也将同步更新为渲染过程中的 ReactCurrentOwner.current。</p>
<p>isValidElement(object) 通过校验参数 object 是否为对象且其 $$typeof 属性为 REACT_ELEMENT_TYPE，以判断是否 React 元素。</p>
<h3 id="Children"><a href="#Children" class="headerlink" title="Children"></a>Children</h3><p>forEach(children, forEachFunc, forEachContext) 遍历子元素，执行 forEachFunc 函数。</p>
<p>map(children, func, context) 遍历子元素，执行 func 函数。功能点同 forEach 方法，但是返回数组。</p>
<p>toArray(children) 将子元素转化为数组。</p>
<p>count(children) 计算子元素的数目。</p>
<p>only((children)) 校验参数 children 是否单一的 React 元素，并返回。</p>
<p>实现上，React 以 traverseAllChildren(children, callback, traverseContext) 函数作为遍历子元素的 api。traverseAllChildren 函数通过递归调用 traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) 遍历子元素，并校验子元素集合不能由 Map, Object 对象构建。对于回调的执行机制，React 会先使用 getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) 将 forEach 方法的参数 forEachFunc, forEachContext 或者 map 方法的参数 func, context 组装成 traverseContext 对象（该对象还包含用于收集子元素的数组 mapResult 和元素 key 键的公共前缀 keyPrefix 属性）。在 traverseContext 对象的基础上，React 对 forEach, map 构建了单独的回调包装函数 forEachSingleChild, mapSingleChildIntoContext，以处理特定的逻辑。具体实现可参阅源码。</p>
<p>多个元素在渲染时可使用 React.Fragment 组件包裹，那样就不必创建额外的 dom 节点。React 输出的 Fragment 组件直接来自于 shared/ReactSymbols 包下的常量 REACT_FRAGMENT_TYPE。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;React.Fragment&gt;</span><br><span class="line">  Some text.</span><br><span class="line">  &lt;h2&gt;A heading&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>React.Fragment&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h2><h3 id="createRef"><a href="#createRef" class="headerlink" title="createRef"></a>createRef</h3><p>React.createRef 创建 refObject 对象，该对象可以作为 React 元素的 ref 属性，以此引用指定的 React 元素。React 包下只创建 refObject 对象并使用 Object.seal 加以密封，核心逻辑由其他包提供。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.input = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">    <span class="keyword">this</span>.input.current.focus();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'text'</span> <span class="attr">ref</span>=<span class="string">&#123;this.input&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="forwardRef"><a href="#forwardRef" class="headerlink" title="forwardRef"></a>forwardRef</h3><p>React.forwardRef 通过创建组件的方式将其所接受的 ref 引用配置长传给其子孙组件。forwardRef 有两个应用场景：为函数式组件指定引用；为高阶组件指定引用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cosnt FancyButton = React.forwardRef(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> (</span><br><span class="line">  &lt;button ref=&#123;ref&#125; className=<span class="string">'FancyButton'</span>&gt;</span><br><span class="line">    &#123;props.children&#125;</span><br><span class="line">  &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">));</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const ref = React.createRef();</span></span><br><span class="line"><span class="regexp">&lt;FancyButton ref=&#123;ref&#125;&gt;Click me!&lt;/</span>FancyButton&gt;;</span><br></pre></td></tr></table></figure>
<p>上述代码可将创建的 refObject 对象通过 forwardRef 的次参传入函数式组件，以便引用原生 dom 组件。虽然这样创建 ref 引用会增加 FancyButton 与其父元素的层级关联，造成一定的复杂度，但是当 FancyButton 组件被多个应用级组件所使用时，且这些应用级组件都要细微地操作 button 节点，通过 forwardRef 长传 ref 引用就必不可少了。</p>
<p>在制作高阶组件时，同样可以使用 React.forwardRef 将 ref 引用转变为特定的 props 属性并传入高阶组件中，那样被包裹的组件就可以使用该 props 属性设置 ref 引用了。代码实现如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logProps</span>(<span class="params">Component</span>)</span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">LogProps</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    componentDidUpdate(prevProps)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'old props:'</span>, prevProps);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'new props:'</span>, <span class="keyword">this</span>.props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;forwardedRef, ...rest&#125; = <span class="keyword">this</span>.props;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Component</span> <span class="attr">ref</span>=<span class="string">&#123;forwardedRef&#125;</span> &#123;<span class="attr">...rest</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  return React.forwardRef((props, ref) =&gt; &#123;</span></span><br><span class="line">    return &lt;LogProps &#123;...props&#125; forwaredRef=&#123;ref&#125; /&gt;;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在实现中，forwardRef 将校验参数是否为函数且包含两个参数（通过 length 属性校验）等，最终返回类 React 元素结构如 { $$typeof, render }。其中，$$typeof 为常量 REACT_FORWARD_REF_TYPE，render 即 forwardRef 的参数。</p>
<h2 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h2><p>React.Suspense 支持在某事件执行完成后渲染组件。目前只支持一种应用场景：通过 React.lazy 动态加载组件，在组件加载完成后，再行渲染。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> LazyComponent  = React.lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./OtherComponent.js'</span>));</span><br><span class="line"></span><br><span class="line">&lt;Suspense fallback=&#123;&lt;div&gt;loading...&lt;<span class="regexp">/div&gt;&#125;&gt;</span></span><br><span class="line"><span class="regexp">  &lt;LazyComponent&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Suspense&gt;</span><br></pre></td></tr></table></figure>
<p>在 OtherComponent 组件加载过程中，React 将使用 fallback 渲染元素；当 OtherComponent 加载完成后，视图将显示 OtherComponent 组件。Suspense 组件内允许渲染多个懒加载组件。在组件加载失败的场景中，可以构建实现了 getDerivedStateFromError(error) 静态方法以及 componentDidCatch(error, info) 生命周期方法的 ErrorBoundary 组件捕获错误并加以处理。</p>
<p>使用 React.lazy 动态加载的组件，不止可以作为 Suspense 组件的子元素，还可以作为 Route 组件的 component，以在路由层面实现动态加载。</p>
<p>在实现上，React.lazy 方法将构建类 React 元素的数据结构如 { $$typeof, _ctor, _status, _result }。其中，$$typeof 为常量 REACT_LAZY_TYPE，_ctor 为 React.lazy 接受的参数。React 输出的 Suspense 组件直接来自于 shared/ReactSymbols 包下的常量 REACT_SUSPENSE_TYPE。 </p>
<h2 id="createContext"><a href="#createContext" class="headerlink" title="createContext"></a>createContext</h2><p>Context 可视为 React 组件树的全局数据（比如验权后的用户信息、网页的主题风格、显示的语言），用于向子孙组件透传数据，而不必通过 props 属性逐层传递、或者将在顶层组件中将实际消费数据的子组件作为 children 传入中介组件。</p>
<p>Context 使用的方式为：</p>
<ol>
<li>使用 React.createContext(defaultValue) 创建 Context 对象。当 React 组件订阅了该 Context 对象时，该组件将从就近且匹配的 Provider 中读取 Context 对象。如果没有匹配的 Provider，那就会使用 defaultValue。</li>
<li>Context.Provider 以父组件的形式作为 Context 对象的提供者，当其重绘时，将迫使订阅数据的组件相应重绘。</li>
<li>在自定义组件中添加 contextType 静态属性，当其值为 Context 对象时，就可以通过组件实例的 context.value 访问实际透传的数据。</li>
<li>第 3 步也可以替代为第 4 步，使用 Context.Consumer 作为数据的消费者，其下可以用 value =&gt; ReactNode 的形式编写函数式组件。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ThemeContext = React.createContext(<span class="string">'light'</span>);</span><br><span class="line"><span class="keyword">const</span> UserContext = React.createContext(&#123; <span class="attr">name</span>: <span class="string">'Guest'</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; signedInUser, theme &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ThemeContext.Provider value=&#123;theme&#125;&gt;</span><br><span class="line">        &lt;UserContext.Provider value=&#123;signedInUser&#125;&gt;</span><br><span class="line">          &lt;Layout /&gt;</span><br><span class="line">        &lt;<span class="regexp">/UserContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>ThemeContext.Provider&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Layout</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Sidebar /&gt;</span><br><span class="line">      &lt;Context /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function Context()&#123;</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;ThemeContext.Consumer&gt;</span></span><br><span class="line"><span class="regexp">      &#123;theme =&gt; (</span></span><br><span class="line"><span class="regexp">        &lt;UserContext.Consumer&gt;</span></span><br><span class="line"><span class="regexp">          &#123;user =&gt; (</span></span><br><span class="line"><span class="regexp">            &lt;ProfilePage user=&#123;user&#125; theme=&#123;theme&#125; /</span>&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">        &lt;<span class="regexp">/UserContext.Consumer&gt;</span></span><br><span class="line"><span class="regexp">      )&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>ThemeContext.Consumer&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现上，createContext(defaultValue, calculateChangeBits) 方法会创建类 React 元素数据如 { $$typeof, _calculateChangedBits, _currentValue, _currentValue2, _threadCount, Provider, Consumer }。其中，$$typeof 为常量 REACT_CONTEXT_TYPE。Context.Provider 创建类 React 元素数据如 { $$typeof, _context }。其中，$$typeof 为常量 REACT_PROVIDER_TYPE；_context 即引用 Context 对象。Context.Consumer 在生产环境中就是Context 引用对象，开发环境将校验不能使用嵌套形式编码如 Context.Consumer.Provider, Context.Consumer.Consumer。</p>
<h2 id="ReactHooks"><a href="#ReactHooks" class="headerlink" title="ReactHooks"></a>ReactHooks</h2><p>借助于 <a href="https://reactjs.org/docs/high-order-components.html" target="_blank" rel="noopener">HOC</a> 或者 <a href="https://reactjs.org/docs/render-props.html" target="_blank" rel="noopener">render props</a>，你可以整合组件内的可重用逻辑。比如当弹窗 Modal 组件内包含多个可切换的表单组件时，可以使用 render props 将表单的渲染函数传入 Modal 中。但是这样处理却会破坏组件的结构，容易造成 wrapper 装饰器层叠套用较深，在层叠组件中维护组件的状态。使用 ReactHooks 后，我们可以提取状态处理逻辑，这样可以对状态处理逻辑进行独立测试和复用，且不会改变组件的层级。在多个组件中，共用钩子也是较为方便的。</p>
<p>在编写组件时，随着项目的逐步发展，组件的逻辑将变得极为复杂，比如 componentDidMount 方法内既会包含数据获取的操作，又会包含事件绑定，同时，相同功能点的处理逻辑（事件绑定和解绑）会散落在多个生命周期中。这样就会包含多个执行逻辑，也使代码不易测试、容易出错。借助状态管理器，我们可以将部分执行逻辑写入 store 中，然而这样会引入过多的抽象，执行逻辑也分散在多个模块中，也使组件不便于重用。使用 ReactHooks 后，我们可以基于功能点将彼此相关的处理逻辑拆分为多个小函数，而不是割裂性地分布在组件的多个生命周期中。</p>
<p>如同 Svelte, Angular, Glimer 所展示的，提前预编译组件在未来拥有极高的潜力。React 最近在尝试使用 <a href="https://prepack.io" target="_blank" rel="noopener">Prepack</a> 在编译时预处理组件，并且已经看见了一些眉目。然而类组件会使这些优化进展缓慢，同时，类也不能很好的压缩，并使热加载变得不可靠。使用 ReactHooks 后，我们可以使用更多的 React 特性，且不必借助类组件的形式。</p>
<p>从效果上看，ReactHooks 为函数式组件提供状态管理以及相关生命周期特性。</p>
<p>在 React 包中，除却必要的校验外，ReactHooks 提供的 api 都将间接调用 ReactCurrentOwner.currentDispatcher 的同名方法。</p>
<h3 id="State-Hook"><a href="#State-Hook" class="headerlink" title="State Hook"></a>State Hook</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<p>useState 将声明一个状态变量，作为返回数组的首项，该状态变量受到 React 机制的保护，只能通过第二个数组项 setCount 进行修改（其功能点一如类组件中使用的 setState 方法）。useState 的参数为状态的初始值，不限于对象形式。如果要使用两个状态，可调用 useState 两次达成。如前所述，useState 以数组形式返回一对值，前一个是当前的状态，后一个是用于变更状态的函数。</p>
<p>useState 的首参也可以是函数，初始状态由函数的返回值提供。</p>
<h3 id="Effect-Hook"><a href="#Effect-Hook" class="headerlink" title="Effect Hook"></a>Effect Hook</h3><p>Effect Hook 用于组织副作用逻辑，包含远程数据获取、事件绑定、节点操作、日志打印等。假设有针对组件状态的处理逻辑，在类组件的编程形式中，我们需要在 componentDidMount, componentDidUpdate 生命周期中两次组织同一个处理逻辑。当使用 Effect Hook 时，我们只需要组织一次这个处理逻辑。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FriendStatus</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [isOnline, setIsOnline] = useState(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleStatusChange</span>(<span class="params">status</span>)</span>&#123;</span><br><span class="line">    setIsOnline(status.isOnline);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      ChatAPI.unsubscribeToFriendStatus(props.friend.id, handleStatusChange);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isOnline === <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Loading...'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isOnline ? <span class="string">'Online'</span> : <span class="string">'Offline'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果上，useEffect(effect, inputs) 等同于告知 React 在组件渲染完成后需要执行 effect 副作用（React 会记录这个副作用函数，并在组件渲染完成后调用）；参数 inputs 以数组形式告知 React 当某些数据变更时，才执行副作用（可以是函数式组件内的任何变量或属性，并在 effect 中有所使用）。在函数式组件中使用 useEffect，其意义在于便捷地通过 useState 访问状态；同时，每次重绘将会构建新的 effect，其效果等同于每次渲染都会调度不同的副作用，属于一次性消费。与 componentDidMount, componentDidUpdate 不同的是，useEffect 副作用不会阻塞视图更新。useLayoutEffect 方法与 useEffect 类似，可用于测算布局。</p>
<p>当所需执行的副作用为事件订阅类时，在组件卸载时，我们需要解绑事件，以防内存溢出。当 effect 返回函数（比如用于解绑事件）时，React 会在组件即将更新时执行这个函数。以下是</p>
<p>基于 useEffect，我们可以将相同功能点的处理逻辑写在一个 effect 中，组件内使用多个 effect 涵盖不同的功能点，而不是像类组件那样使相同功能点的处理逻辑散落在不同生命周期中。同时，我们也不需要在 componentDidUpdate 编写一套 props 变更的处理逻辑，因为 useEffect 在组件重置后均会得到调用。</p>
<h3 id="Custom-Hook"><a href="#Custom-Hook" class="headerlink" title="Custom Hook"></a>Custom Hook</h3><p>自定义 hook 允许在不同组件重用状态处理逻辑</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useFriendStatus</span>(<span class="params">friendID</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [isOnline, setIsOnline] = useState(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleStatusChange</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">    setIsOnline(status.isOnline);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> isOnline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FriendStatus</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isOnline = useFriendStatus(props.friend.id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isOnline === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Loading...'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> isOnline ? <span class="string">'Online'</span> : <span class="string">'Offline'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FriendListItem</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isOnline = useFriendStatus(props.friend.id);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li style=&#123;&#123; <span class="attr">color</span>: isOnline ? <span class="string">'green'</span> : <span class="string">'black'</span> &#125;&#125;&gt;</span><br><span class="line">      &#123;props.friend.name&#125;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<p>自定义 hook 名需要使用 ‘use’ 起始，这样才能满足 <a href="https://www.npmjs.com/package/eslint-plugin-react-hooks" target="_blank" rel="noopener">eslint-plugin-react-hooks</a>，React 也能侦测出这是一个 hook。其次，在不同组件中使用的自定义 hook，会构建不同的 state。</p>
<h3 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h3><p>当组件的状态管理略显复杂时，React 提供 useReducer 钩子以 Redux 风格管理状态。</p>
<p>useReducer 方法的首参为 reducer，次参为 initialState，尾参为 initialAction 如 {type: ‘reset’, payload: initialCount}。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todosReducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'add'</span>:</span><br><span class="line">      <span class="keyword">return</span> [...state, &#123;</span><br><span class="line">        text: action.text,</span><br><span class="line">        completed: <span class="literal">false</span></span><br><span class="line">      &#125;];</span><br><span class="line">    <span class="comment">// ... other actions ...</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useReducer</span>(<span class="params">reducer, initialState</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, setState] = useState(initialState);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> nextState = reducer(state, action);</span><br><span class="line">    setState(nextState);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [state, dispatch];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Todos</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [todos, dispatch] = useReducer(todosReducer, []);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleAddClick</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: <span class="string">'add'</span>, text &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>useContext(context): 使用 React.createContext 创建的 context 对象作为参数，从就近的 Provider 中获取 context 对象。当 context 对象在 Provider 中更新时，组件将重绘。</li>
<li>useCallback(() =&gt; { doSomething(realInputs) }, inputs): 当 inputs 数组数据变更时，执行 doSomething 回调。useCallback(fn, inputs) 等价于 useMemo(() =&gt; fn, inputs)。</li>
<li>useMemo(() =&gt; { computeExpensiveValue(realInputs) }, inputs): 当 inputs 数组数据变更时，执行 computeExpensiveValue 函数，重新计算新值。</li>
<li>useRef(initialValue): 将使用接受的首参构建引用，通过 current 属性访问。该 ref 引用将在组件的生命周期中得到维持。</li>
<li>useImperativeMethods(ref, createInstance, [inputs]): 用于对外导出操纵子元素的 ref 引用方法，只能配合 forwardRef 方法使用。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// useRef</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextInputWithFocusButton</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> inputEl = useRef(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> onButtonClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// `current` points to the mounted text input element</span></span><br><span class="line">    inputEl.current.focus();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;input ref=&#123;inputEl&#125; type=<span class="string">"text"</span> /&gt;</span><br><span class="line">      &lt;button onClick=&#123;onButtonClick&#125;&gt;Focus the input&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// useImperativeMethods</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FancyInput</span>(<span class="params">props, ref</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> inputRef = useRef();</span><br><span class="line">  useImperativeMethods(ref, () =&gt; (&#123;</span><br><span class="line">    focus: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      inputRef.current.focus();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;));</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;inputRef&#125;</span> <span class="attr">...</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">FancyInput = forwardRef(FancyInput);</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>frontend</category>
        <category>react</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>Menu</title>
    <url>/2018/12/10/frontend/antd/Menu/</url>
    <content><![CDATA[<p>antd 中的 Menu 组件用于绘制菜单栏，其实现基于 <a href="https://github.com/react-component/menu" target="_blank" rel="noopener">rc-menu</a>。本文第一部分介绍菜单栏实现的整体结构；第二部分介绍 rc-menu；第三部分介绍 Menu 组件。</p>
<p>需要声明的是，本文使用 RcMenu 指代 rc-menu 输出的 Menu 组件或其实例，使用 Menu 指代 antd 输出的 Menu 组件或其实例、或抽象意义的菜单栏组件，余同。</p>
<h2 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h2><p>在视图上，菜单栏分为水平布局和垂直布局两种，又支持层叠嵌套（如主菜单 Menu 嵌套子菜单 SubMenu）；子菜单的展开形式分为内嵌和浮层两种。Menu 组件通过 props.mode 区分所采用的模式：vertical 为垂直模式；horizontal 为水平模式；inline 为内嵌模式。菜单栏的垂直布局和水平布局借助样式实现。在水平布局中，超出菜单栏宽度的菜单项需要合并展示，这部分处理逻辑由 rc-menu 中的 DomWrap 组件实现。</p>
<p>在内容上，主菜单和子菜单相仿，功能上有交集。在 rc-menu 中，主菜单 Menu 和子菜单 SubMenu 均通过 SubPopupMenu 组件绘制内容，SubPopupMenu 又使用 DomWrap 控制水平布局时的元素展示。SubPopupMenu 自有的处理逻辑为：控制菜单栏的激活状态（通过 componentDidUpdate, onKeyDown, onItemHover 方法达成，详见下文）。用过 antd 的同学应该了解，Menu 组件下可使用 SubMenu, MenuItem, MenuItemGroup 绘制子菜单或菜单项，父子元素之间就会有状态管理方面的通信需求。针对这个问题，SubPopupMenu 使用 React.clone 方法将父组件实现的状态管理函数或其 props 属性注入到子组件中，从而串联了主菜单与子菜单、主菜单与菜单项、以及子菜单与菜单项。</p>
<p>菜单栏的状态管理分为三种：菜单项的激活状态、菜单项的选中状态、子菜单的展开折叠状态。rc-menu 借助 <a href="https://github.com/yesmeck/mini-store" target="_blank" rel="noopener">mini-store</a> 管理这些状态：activeKey 激活的菜单项，selectedKeys 选中的菜单项，openKeys 展开的子菜单。如上文所说，activeKey 由 SubPopupMenu 处理其更新逻辑。selectedKeys, openKeys 均由 RcMenu 处理其更新逻辑。交互层面，当 props.selectedKeys, props.openKeys 变更时，RcMenu 提供的 updateMiniStore 方法将负责更新 store 中的存储数据；当用户行为发生时，RcMenu 提供的 onSelect, onDeSelect, onOpenChange 方法将负责更新 store 中的存储数据，这些方法又通过 SubPopupMenu 长传到 SubMenu, MenuItem, MenuItemGroup 中。简而言之，RcMenu 既通过 props 接受使用者传入的菜单栏整体配置数据，又集成了 selectedKeys, openKeys 的状态管理函数。</p>
<p>在 RcMenu 提供 onSelect, onDeSelect, onOpenChange 方法和 SubPopupMenu 提供的 onItemHover 方法的基础上，子菜单 RcSubMenu 既将 onSelect, onDeSelect 透传给菜单项，又使用 onOpenChange 控制展开折叠状态，onItemHover 更新激活状态。不同于主菜单，子菜单需要以内嵌或浮层形式表现内容，且需要在展开与折叠过程中显示动效。借助 <a href="https://github.com/react-component/trigger" target="_blank" rel="noopener">rc-trigger</a>、<a href="https://github.com/react-component/animate" target="_blank" rel="noopener">rc-animate</a> 库，RcSubMenu 集成了浮层显示功能和动效展示逻辑。即，通过 props.mode 判断菜单栏是否采用 inline 模式，RcSubMenu 将以浮层形式绘制子菜单内容；子菜单展开与折叠过程中所采用的动效，取决于顶层容器 Menu 主菜单接受 props 配置。</p>
<p>菜单项 RcMenuItem 通过 props 接受 RcMenu 提供的 onSelect, onDeSelect 方法和 SubPopupMenu 提供的 onItemHover 方法，以便在点击事件、鼠标移入移出时更新 store 中的状态。在 RcMenuItem 的基础上，RcMenuItemGroup 用于绘制成组的菜单项。</p>
<p>下图是 rc-menu 的整体结构:<br><img src="/2018/12/10/frontend/antd/Menu/rc-menu整体结构.png"></p>
<p>在 rc-menu 实现状态管理的基础上，antd 提供的 Menu 组件用于桥接侧边栏和菜单栏的关联性，维护内置的动效显示，以及样式处理。详见下文。</p>
<h2 id="rc-menu"><a href="#rc-menu" class="headerlink" title="rc-menu"></a>rc-menu</h2><p>rc-menu 的类图为：<br><img src="/2018/12/10/frontend/antd/Menu/rc-menu类图.png"></p>
<p>rc-menu 中的状态管理：</p>
<ol>
<li>selectedKeys 选中的菜单项：由 RcMenu 提供 onSelect, onDeselect 方法加以管理。onSelect, onDeselect 方法将长传到 RcMenuItem 组件，以便在 RcMenuItem 的 onKeyDown, onClick 行为中更新状态。同时，在 RcMenu 的 componentDidUpdate 生命周期中，也将 props.selectedKeys 更新状态值。</li>
<li>openKeys 展开的子菜单：由 RcMenu 提供 onOpenChange 方法加以管理。onOpenChange 方法将长传到 RcSubMenu 组件并封装为 RcSubMenu.triggerOpenChange 方法，以便在 RcSubMenu 的 onKeyDown, onTitleClick, onPopupVisibleChange 行为中更新状态。同时，在 RcMenu 的 componentDidUpdate 生命周期中，也将 props.openKeys 更新状态值。</li>
<li>activeKey 激活的菜单项：由辅助函数 updateActiveKey 加以管理。updateActiveKey 函数被 SubPopupMenu 的 componentDidUpdate, onItemHover 方法调用。其中，onItemHover 方法将长传到 RcSubMenu 或 RcMenuItem 组件，以便在 RcSubMenu 的 onTitleMouseEnter, onTitleMouseLeave 行为或 RcMenuItem 的 onMouseEnter, onMouseLeave 行为中更新状态。</li>
<li>defaultActiveFirst 是否激活首个菜单项，辅助计算激活的菜单项：由辅助函数 updateDefaultActiveFirst 加以管理。updateDefaultActiveFirst 函数被 RcSubMenu 的 constructor, onKeyDown, onMouseEnter, onTitleClick 方法调用。其中，constructor 将视 RcSubMenu 接受的 props.defaultActiveFirst 设置状态；onKeyDown 将状态更新为 true；onMouseEnter, onTitleClick 均更新为 false。</li>
</ol>
<p>rc-menu 中的 key 键用于辅助状态管理。key 键仅对于子菜单或菜单项才有效。在默认情况下，SubPopupMenu 会以 ‘0-menu-‘ 作为前缀，递归创建子菜单或菜单项的 key 键，并设置为该子菜单或菜单项的 props.eventKey。当菜单项作为子菜单的元素时，那么菜单项的 key 键就以子菜单的 props.eventKey 作为前缀。当使用者为子菜单或菜单项设置了 key 键时，rc-menu 将以它作为该子菜单或菜单项的 props.eventKey 键。因此，相同的 key 键是不被允许的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当 SubPopupMenu 作为 RcMenu 的直系子元素时，返回 '0-menu-'</span></span><br><span class="line"><span class="comment">// 其余情况获取子菜单或菜单项的 props.eventKey</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getEventKey</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> props.eventKey || <span class="string">'0-menu-'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自动创建 key 键并返回，或者返回使用者设置的 key 键</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getKeyFromChildrenIndex</span>(<span class="params">child, menuEventKey, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> prefix = menuEventKey || <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">return</span> child.key || <span class="string">`<span class="subst">$&#123;prefix&#125;</span>item_<span class="subst">$&#123;index&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 store 中，selectedKeys, openKeys 以 key 键作为数组项；activeKey, defaultActiveFirst 以 key 键作为属性名。当用户行为发生时，key 键将被封装到对象中，通过逐级调用 props 方法，冒泡给 RcMenu 实例的 onOpenChange, onSelect, onDeselect 或者 SubPopupMenu 实例的 onItemHover 方法，最终改变 store 的状态。需要说明的是，菜单项的 onClick 也会逐级调用 props 方法，以数组形式拼接子菜单的 key 键，最终冒泡给 RcMenu 接受的 props.onClick 方法。而 RcMenu 接受的 props.onDestory 方法，则是逐级向下传递，最终在每个菜单项的 componentWillUnmount 生命周期中，均执行 onDestory 方法，参数即菜单项的 key 键。特别的，RcMenu 实现的 onKeyDown 实例方法将逐级往下调用 SubPopupMenu, RcSubMenu, RcMenuItem 中的 onKeyDown 方法。在这个过程中，SubPopupMenu 构建的 onKeyDown 实例方法也将在 DomWrap 组件被绑定为视图元素 onKeyDown 事件发生时的执行函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Menu</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 以引用形式调用，可依次改变选中的菜单项</span></span><br><span class="line">  <span class="comment">// 当遇到子菜单时，先展开子菜单，再选中子菜单项</span></span><br><span class="line">  onKeyDown = <span class="function">(<span class="params">e, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// this.innerMenu.getWrappedInstance 用于获得 Menu 下直系子元素 —— SubPopupMenu 实例</span></span><br><span class="line">    <span class="keyword">this</span>.innerMenu.getWrappedInstance().onKeyDown(e, callback);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubPopupMenu</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  onKeyDown = <span class="function">(<span class="params">e, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> keyCode = e.keyCode;</span><br><span class="line">    <span class="keyword">let</span> handled;</span><br><span class="line">    <span class="comment">// 依次选中菜单项或展开子菜单</span></span><br><span class="line">    <span class="keyword">this</span>.getFlatInstanceArray().forEach(<span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj &amp;&amp; obj.props.active &amp;&amp; obj.onKeyDown) &#123;</span><br><span class="line">        handled = obj.onKeyDown(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (handled) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> activeItem = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (keyCode === KeyCode.UP || keyCode === KeyCode.DOWN) &#123;</span><br><span class="line">      activeItem = <span class="keyword">this</span>.step(keyCode === KeyCode.UP ? <span class="number">-1</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (activeItem) &#123;</span><br><span class="line">      e.preventDefault();</span><br><span class="line">      updateActiveKey(<span class="keyword">this</span>.props.store, getEventKey(<span class="keyword">this</span>.props), activeItem.props.eventKey);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">'function'</span>) &#123;</span><br><span class="line">        callback(activeItem);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubMenu</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  onKeyDown = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> keyCode = e.keyCode;</span><br><span class="line">    <span class="keyword">const</span> menu = <span class="keyword">this</span>.menuInstance;</span><br><span class="line">    <span class="keyword">const</span> &#123; isOpen, store &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 展开子菜单，更新 defaultActiveFirst 状态</span></span><br><span class="line">    <span class="keyword">if</span> (keyCode === KeyCode.ENTER) &#123;</span><br><span class="line">      <span class="keyword">this</span>.onTitleClick(e);</span><br><span class="line">      updateDefaultActiveFirst(store, <span class="keyword">this</span>.props.eventKey, <span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (keyCode === KeyCode.RIGHT) &#123;</span><br><span class="line">      <span class="comment">// 展开状态，选中子菜单项；menu 为 SubMenu 下直系子元素 —— SubPopupMenu 实例</span></span><br><span class="line">      <span class="keyword">if</span> (isOpen) &#123;</span><br><span class="line">        menu.onKeyDown(e);</span><br><span class="line">      <span class="comment">// 未展开状态，展开子菜单并更新 defaultActiveFirst 状态</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.triggerOpenChange(<span class="literal">true</span>);</span><br><span class="line">        updateDefaultActiveFirst(store, <span class="keyword">this</span>.props.eventKey, <span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (keyCode === KeyCode.LEFT) &#123;</span><br><span class="line">      <span class="keyword">let</span> handled;</span><br><span class="line">      <span class="keyword">if</span> (isOpen) &#123;</span><br><span class="line">        handled = menu.onKeyDown(e);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!handled) &#123;</span><br><span class="line">        <span class="keyword">this</span>.triggerOpenChange(<span class="literal">false</span>);</span><br><span class="line">        handled = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> handled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isOpen &amp;&amp; (keyCode === KeyCode.UP || keyCode === KeyCode.DOWN)) &#123;</span><br><span class="line">      <span class="keyword">return</span> menu.onKeyDown(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MenuItem</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  onKeyDown = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> keyCode = e.keyCode;</span><br><span class="line">    <span class="keyword">if</span> (keyCode === KeyCode.ENTER) &#123;</span><br><span class="line">      <span class="keyword">this</span>.onClick(e);<span class="comment">// 更新菜单的选中状态</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上介绍了 rc-menu 中的状态管理和事件处理逻辑，下面将扼要地介绍 rc-menu 中的各组件。</p>
<h3 id="SubPopupMenu"><a href="#SubPopupMenu" class="headerlink" title="SubPopupMenu"></a>SubPopupMenu</h3><p>SubPopupMenu 对激活状态的管理可参见上文，可参见上文及源码。这里只介绍 SubPopupMenu 的层级关系。</p>
<p>SubPopupMenu 可以作为 RcMenu 或 RcSubMenu 的直系子元素，其下可渲染 RcSubMenu 或 RcMenuItem 元素。在其实现中，既将 RcMenu 接受的 props 菜单栏整体配置项注入到子元素；又将 RcMenu 或 SubPopupMenu 提供的状态管理函数（均封装为 SubPopupMenu 的实例方法）注入 RcSubMenu 或 RcMenuItem。上述过程，见于 renderCommonMenuItem 方法，该方法由 renderMenuItem 直接调用。</p>
<p>renderMenuItem 方法的实现与 ref 引用处理一样，两者均让人心生纳闷：前者没有实现的必要；后者在 componentDidMount 生命周期管理实例引用，当菜单内容变化时仍会以缓存持有引用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubPopupMenu</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  renderCommonMenuItem = <span class="function">(<span class="params">child, i, extraProps</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="keyword">this</span>.props.store.getState();</span><br><span class="line">    <span class="keyword">const</span> props = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">const</span> key = getKeyFromChildrenIndex(child, props.eventKey, i);<span class="comment">// 创建或获取 key 键</span></span><br><span class="line">    <span class="keyword">const</span> childProps = child.props;</span><br><span class="line">    <span class="keyword">const</span> isActive = key === state.activeKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 混入菜单栏整体配置或状态管理函数、事件绑定函数</span></span><br><span class="line">    <span class="keyword">const</span> newChildProps = &#123;</span><br><span class="line">      mode: childProps.mode || props.mode,</span><br><span class="line">      level: props.level,</span><br><span class="line">      inlineIndent: props.inlineIndent,</span><br><span class="line">      renderMenuItem: <span class="keyword">this</span>.renderMenuItem,</span><br><span class="line">      rootPrefixCls: props.prefixCls,</span><br><span class="line">      index: i,</span><br><span class="line">      parentMenu: props.parentMenu,</span><br><span class="line">      <span class="comment">// customized ref function, need to be invoked manually in child's componentDidMount</span></span><br><span class="line">      manualRef: childProps.disabled ? <span class="literal">undefined</span> :</span><br><span class="line">        createChainedFunction(child.ref, saveRef.bind(<span class="keyword">this</span>)),</span><br><span class="line">      eventKey: key,</span><br><span class="line">      active: !childProps.disabled &amp;&amp; isActive,</span><br><span class="line">      multiple: props.multiple,</span><br><span class="line">      onClick: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        (childProps.onClick || noop)(e);</span><br><span class="line">        <span class="keyword">this</span>.onClick(e);</span><br><span class="line">      &#125;,</span><br><span class="line">      onItemHover: <span class="keyword">this</span>.onItemHover,</span><br><span class="line">      openTransitionName: <span class="keyword">this</span>.getOpenTransitionName(),</span><br><span class="line">      openAnimation: props.openAnimation,</span><br><span class="line">      subMenuOpenDelay: props.subMenuOpenDelay,</span><br><span class="line">      subMenuCloseDelay: props.subMenuCloseDelay,</span><br><span class="line">      forceSubMenuRender: props.forceSubMenuRender,</span><br><span class="line">      onOpenChange: <span class="keyword">this</span>.onOpenChange,</span><br><span class="line">      onDeselect: <span class="keyword">this</span>.onDeselect,</span><br><span class="line">      onSelect: <span class="keyword">this</span>.onSelect,</span><br><span class="line">      builtinPlacements: props.builtinPlacements,</span><br><span class="line">      itemIcon: childProps.itemIcon || <span class="keyword">this</span>.props.itemIcon,</span><br><span class="line">      expandIcon: childProps.expandIcon || <span class="keyword">this</span>.props.expandIcon,</span><br><span class="line">      ...extraProps,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (props.mode === <span class="string">'inline'</span>) &#123;</span><br><span class="line">      newChildProps.triggerSubMenuAction = <span class="string">'click'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> React.cloneElement(child, newChildProps);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// props 处理及解构</span></span><br><span class="line">    <span class="comment">// renderMenuItem 将调用 renderCommonMenuItem 渲染子元素</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;DOMWrap &#123;...props&#125; prefixCls=&#123;prefixCls&#125; mode=&#123;mode&#125; tag=<span class="string">"ul"</span> level=&#123;level&#125; </span><br><span class="line">        theme=&#123;theme&#125; hiddenClassName=&#123;<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-hidden`</span>&#125; visible=&#123;visible&#125;</span><br><span class="line">        overflowedIndicator=&#123;overflowedIndicator&#125; &#123;...domProps&#125;&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          React.Children.map(props.children, (c, i) =&gt; </span><br><span class="line">            <span class="keyword">this</span>.renderMenuItem(c, i, eventKey || <span class="string">'0-menu-'</span>)</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;<span class="regexp">/DOMWrap&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="DomWrap"><a href="#DomWrap" class="headerlink" title="DomWrap"></a>DomWrap</h3><p>对于水平布局的菜单栏，DOMWrap 借助 <a href="https://github.com/que-etc/resize-observer-polyfill" target="_blank" rel="noopener">resize-observer-polyfill</a>，<a href="http://javascript.ruanyifeng.com/dom/mutationobserver.html" target="_blank" rel="noopener">MutationObserver</a> ，当 DOMWrap 实例或其子元素的 dom 内容或尺寸调整时，重新加以渲染。这样，在 DOMWrap 中就可以计算最后一个待显示的菜单项，并将这个菜单项和其余菜单项以 SubMenu 形式合并展示。其处理逻辑有：</p>
<ol>
<li>在 componentDidMount 生命周期为 DOMWrap 实例及其子元素绑定 dom 变更的监听函数。</li>
<li>当 dom 变更时，由监听函数调用 setChildrenWidthAndResize 实例方法。setChildrenWidthAndResize 先计算菜单项全显示时的总宽度，再将该宽度和菜单栏实际宽度对比，由此更新 state.lastVisibleIndex（最后一个待显示的菜单项的索引）。</li>
<li>在重绘阶段，DomWrap 将在每个已显示的菜单项后插入一个不予显示的 SubMenu 组件（其样式类带有 ‘overflowed-submenu’ 后缀，eventKey 为 ‘overflowed-indicator’ 后缀）；而待合并的菜单项将会用一个显示的 SubMenu 组件包裹，这样在点击时就可以显示浮层。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DOMWrap</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setChildrenWidthAndResize();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.level === <span class="number">1</span> &amp;&amp; <span class="keyword">this</span>.props.mode === <span class="string">'horizontal'</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> menuUl = ReactDOM.findDOMNode(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">if</span> (!menuUl) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.resizeObserver = <span class="keyword">new</span> ResizeObserver(<span class="function"><span class="params">entries</span> =&gt;</span> &#123;</span><br><span class="line">        entries.forEach(<span class="keyword">this</span>.setChildrenWidthAndResize);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 为 DOMWrap 及其子元素绑定监听函数</span></span><br><span class="line">      [].slice.call(menuUl.children).concat(menuUl).forEach(<span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.resizeObserver.observe(el);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 当子元素列表改变时，重新为子元素绑定监听函数，避免触发不必要的回调</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> MutationObserver !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.mutationObserver = <span class="keyword">new</span> MutationObserver(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.resizeObserver.disconnect();</span><br><span class="line">          [].slice.call(menuUl.children).concat(menuUl).forEach(<span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.resizeObserver.observe(el);</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">this</span>.setChildrenWidthAndResize();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.mutationObserver.observe(</span><br><span class="line">          menuUl,</span><br><span class="line">          &#123; <span class="attr">attributes</span>: <span class="literal">false</span>, <span class="attr">childList</span>: <span class="literal">true</span>, <span class="attr">subTree</span>: <span class="literal">false</span> &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getOverflowedSubMenuItem = <span class="function">(<span class="params">keyPrefix, overflowedItems, renderPlaceholder</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// this.props.overflowedIndicator 通常是 '...'</span></span><br><span class="line">    <span class="keyword">const</span> &#123; overflowedIndicator, level, mode, prefixCls, theme, <span class="attr">style</span>: propStyle &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">if</span> (level !== <span class="number">1</span> || mode !== <span class="string">'horizontal'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> copy = <span class="keyword">this</span>.props.children[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">children</span>: throwAway, title, eventKey, ...rest &#125; = copy.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> style = &#123; ...propStyle &#125;;</span><br><span class="line">    <span class="keyword">let</span> key = <span class="string">`<span class="subst">$&#123;keyPrefix&#125;</span>-overflowed-indicator`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (overflowedItems.length === <span class="number">0</span> &amp;&amp; renderPlaceholder !== <span class="literal">true</span>) &#123;</span><br><span class="line">      style = &#123;</span><br><span class="line">        ...style,</span><br><span class="line">        display: <span class="string">'none'</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (renderPlaceholder) &#123;</span><br><span class="line">      style = &#123;</span><br><span class="line">        ...style,</span><br><span class="line">        visibility: <span class="string">'hidden'</span>,</span><br><span class="line">        position: <span class="string">'absolute'</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">      key = <span class="string">`<span class="subst">$&#123;key&#125;</span>-placeholder`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> popupClassName = theme ? <span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-<span class="subst">$&#123;theme&#125;</span>`</span> : <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">const</span> props = &#123;&#125;;</span><br><span class="line">    menuAllProps.forEach(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (rest[k] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        props[k] = rest[k];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;SubMenu title=&#123;overflowedIndicator&#125; className=&#123;<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-overflowed-submenu`</span>&#125;</span><br><span class="line">        popupClassName=&#123;popupClassName&#125; &#123;...props&#125; key=&#123;key&#125;</span><br><span class="line">        eventKey=&#123;<span class="string">`<span class="subst">$&#123;keyPrefix&#125;</span>-overflowed-indicator`</span>&#125; disabled=&#123;<span class="literal">false</span>&#125; style=&#123;style&#125;&gt;</span><br><span class="line">        &#123;overflowedItems&#125;</span><br><span class="line">      &lt;<span class="regexp">/SubMenu&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  renderChildren(children) &#123;</span></span><br><span class="line"><span class="regexp">    const &#123; lastVisibleIndex &#125; = this.state;</span></span><br><span class="line"><span class="regexp">    return (children || []).reduce((acc, childNode, index) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      let item = childNode;</span></span><br><span class="line"><span class="regexp">      if (this.props.mode === 'horizontal') &#123;</span></span><br><span class="line"><span class="regexp">        let overflowed = this.getOverflowedSubMenuItem(childNode.props.eventKey, []);</span></span><br><span class="line"><span class="regexp">        if (lastVisibleIndex !== undefined &amp;&amp;</span></span><br><span class="line"><span class="regexp">          this.props.className.indexOf(`$&#123;this.props.prefixCls&#125;-root`) !== -1</span></span><br><span class="line"><span class="regexp">        ) &#123;</span></span><br><span class="line"><span class="regexp">          if (index &gt; lastVisibleIndex) &#123;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 修改 eventKey 是为了防止隐藏状态下还会触发 openkeys 事件</span></span><br><span class="line"><span class="regexp">            item = React.cloneElement(childNode, &#123;</span></span><br><span class="line"><span class="regexp">              style: &#123; display: 'none' &#125;,</span></span><br><span class="line"><span class="regexp">              eventKey: `$&#123;childNode.props.eventKey&#125;-hidden`,</span></span><br><span class="line"><span class="regexp">              className: `$&#123;childNode.className&#125; $&#123;MENUITEM_OVERFLOWED_CLASSNAME&#125;`</span></span><br><span class="line"><span class="regexp">            &#125;);</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">          if (index === lastVisibleIndex + 1) &#123;</span></span><br><span class="line"><span class="regexp">            this.overflowedItems = children.slice(lastVisibleIndex + 1).map(c =&gt; &#123;</span></span><br><span class="line"><span class="regexp">              return React.cloneElement(c, &#123; </span></span><br><span class="line"><span class="regexp">                key: c.props.eventKey, </span></span><br><span class="line"><span class="regexp">                mode: 'vertical-left' </span></span><br><span class="line"><span class="regexp">              &#125;);</span></span><br><span class="line"><span class="regexp">            &#125;);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            overflowed = this.getOverflowedSubMenuItem(</span></span><br><span class="line"><span class="regexp">              childNode.props.eventKey,</span></span><br><span class="line"><span class="regexp">              this.overflowedItems,</span></span><br><span class="line"><span class="regexp">            );</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        const ret = [...acc, overflowed, item];</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        if (index === children.length - 1) &#123;</span></span><br><span class="line"><span class="regexp">          /</span><span class="regexp">/ 设置占位符，以计算 overflowed indicator 的宽度</span></span><br><span class="line"><span class="regexp">          ret.push(this.getOverflowedSubMenuItem(childNode.props.eventKey, [], true));</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        return ret;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">      return [...acc, item];</span></span><br><span class="line"><span class="regexp">    &#125;, []);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ Tag 即 this.props.tag，默认为 ul</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;Tag &#123;...rest&#125;&gt;</span></span><br><span class="line"><span class="regexp">        &#123;this.renderChildren(this.props.children)&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Tag&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SubMenu"><a href="#SubMenu" class="headerlink" title="SubMenu"></a>SubMenu</h3><p>除了上文提到的，SubMenu 的处理逻辑还包含：</p>
<ol>
<li>通过 store 获取 props.isOpen 子菜单是否展开, props.active 子菜单是否激活, props.selectedKeys 辅助计算子菜单或子菜单项是否被选中。三者均影响样式。</li>
<li>组件层级上，SubMenu 根据菜单栏是否采用 inline 模式，以决定使用 Trigger 组件（rc-trigger 提供）包裹子元素，或者单纯绘制子元素；继而使用 Animate 组件（rc-animate 提供）绘制子元素，子元素均统一由 SubPopupMenu 组件渲染。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Menu</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 获取传入子组件的 props.openTransitionName 属性</span></span><br><span class="line">  getOpenTransitionName = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> props = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">let</span> transitionName = props.openTransitionName;</span><br><span class="line">    <span class="keyword">const</span> animationName = props.openAnimation;</span><br><span class="line">    <span class="keyword">if</span> (!transitionName &amp;&amp; <span class="keyword">typeof</span> animationName === <span class="string">'string'</span>) &#123;</span><br><span class="line">      transitionName = <span class="string">`<span class="subst">$&#123;props.prefixCls&#125;</span>-open-<span class="subst">$&#123;animationName&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> transitionName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubMenu</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  renderChildren(children) &#123;</span><br><span class="line">    <span class="comment">// 构建 baseProps，按条件只绘制空内容...</span></span><br><span class="line">    <span class="keyword">const</span> animProps = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> transitionAppear = haveRendered || !baseProps.visible || !baseProps.mode === <span class="string">'inline'</span>;</span><br><span class="line">    <span class="keyword">if</span> (baseProps.openTransitionName) &#123;</span><br><span class="line">      animProps.transitionName = baseProps.openTransitionName;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> baseProps.openAnimation === <span class="string">'object'</span>) &#123;</span><br><span class="line">      animProps.animation = &#123; ...baseProps.openAnimation &#125;;</span><br><span class="line">      <span class="keyword">if</span> (!transitionAppear) &#123;</span><br><span class="line">        <span class="keyword">delete</span> animProps.animation.appear;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Animate &#123;...animProps&#125; showProp=<span class="string">"visible"</span> component=<span class="string">""</span> transitionAppear=&#123;transitionAppear&#125;&gt;</span><br><span class="line">        &lt;SubPopupMenu &#123;...baseProps&#125; id=&#123;<span class="keyword">this</span>._menuId&#125;&gt;&#123;children&#125;&lt;<span class="regexp">/SubPopupMenu&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Animate&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// props 处理及结构...</span></span><br><span class="line">    <span class="keyword">const</span> isOpen = props.isOpen;</span><br><span class="line">    <span class="keyword">const</span> isInlineMode = props.mode === <span class="string">'inline'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 展开按钮</span></span><br><span class="line">    <span class="keyword">let</span> icon = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (props.mode !== <span class="string">'horizontal'</span>) &#123;</span><br><span class="line">      icon = <span class="keyword">this</span>.props.expandIcon; <span class="comment">// ReactNode</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.props.expandIcon === <span class="string">'function'</span>)</span><br><span class="line">        icon = React.createElement(<span class="keyword">this</span>.props.expandIcon, &#123; ...this.props &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> title = (</span><br><span class="line">      &lt;div ref=&#123;<span class="keyword">this</span>.saveSubMenuTitle&#125; style=&#123;style&#125; className=&#123;<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-title`</span>&#125;</span><br><span class="line">        &#123;...titleMouseEvents&#125; &#123;...titleClickEvents&#125; aria-expanded=&#123;isOpen&#125;</span><br><span class="line">        &#123;...ariaOwns&#125; aria-haspopup=<span class="string">"true"</span></span><br><span class="line">        title=&#123;<span class="keyword">typeof</span> props.title === <span class="string">'string'</span> ? props.title : <span class="literal">undefined</span>&#125;&gt;</span><br><span class="line">        &#123;props.title&#125;</span><br><span class="line">        &#123;icon || <span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">prefixCls</span>&#125;<span class="attr">-arrow</span>`&#125; /&gt;</span>&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">const</span> children = <span class="keyword">this</span>.renderChildren(props.children);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;li &#123;...props&#125; &#123;...mouseEvents&#125; className=&#123;className&#125; role=<span class="string">"menuitem"</span>&gt;</span><br><span class="line">        &#123;isInlineMode &amp;&amp; title&#125;</span><br><span class="line">        &#123;isInlineMode &amp;&amp; children&#125;</span><br><span class="line">        &#123;!isInlineMode &amp;&amp; (</span><br><span class="line">          &lt;Trigger prefixCls=&#123;prefixCls&#125;</span><br><span class="line">            popupClassName=&#123;<span class="string">`<span class="subst">$&#123;prefixCls&#125;</span>-popup <span class="subst">$&#123;popupClassName&#125;</span>`</span>&#125;</span><br><span class="line">            getPopupContainer=&#123;getPopupContainer&#125;</span><br><span class="line">            builtinPlacements=&#123;<span class="built_in">Object</span>.assign(&#123;&#125;, placements, builtinPlacements)&#125;</span><br><span class="line">            popupPlacement=&#123;popupPlacement&#125; popupVisible=&#123;isOpen&#125;</span><br><span class="line">            popupAlign=&#123;popupAlign&#125; popup=&#123;children&#125;</span><br><span class="line">            action=&#123;disabled ? [] : [triggerSubMenuAction]&#125;</span><br><span class="line">            mouseEnterDelay=&#123;subMenuOpenDelay&#125;</span><br><span class="line">            mouseLeaveDelay=&#123;subMenuCloseDelay&#125;</span><br><span class="line">            onPopupVisibleChange=&#123;<span class="keyword">this</span>.onPopupVisibleChange&#125;</span><br><span class="line">            forceRender=&#123;forceSubMenuRender&#125;&gt;</span><br><span class="line">            &#123;title&#125;</span><br><span class="line">          &lt;<span class="regexp">/Trigger&gt;</span></span><br><span class="line"><span class="regexp">        )&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>li&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>Menu 用于绘制主菜单，参见上文或源码。</p>
<p>MenuItem 用于绘制菜单项，将根据 store 中的 activeKey, selectedKeys 渲染样式。除了常规的事件处理函数之外，当菜单项被激活时，MenuItem 将借助 <a href="http://yiminghe.me/dom-scroll-into-view/" target="_blank" rel="noopener">dom-scroll-into-view</a> 使屏幕滚动到指定区域。MenuItem 与 SubMenu 一样，也将使用 props.level 菜单项的层级计算左边距。</p>
<p>MenuItemGroup 用于绘制成组的菜单项，并且带有标题。在 MenuItemGroup 中，实际绘制菜单项所需的 props.renderMenuItem 方法由 SubPopupMenu 提供。</p>
<p>Divider 用于绘制分割线。</p>
<h2 id="Menu"><a href="#Menu" class="headerlink" title="Menu"></a>Menu</h2><h3 id="Menu-1"><a href="#Menu-1" class="headerlink" title="Menu"></a>Menu</h3><p>Menu 作为菜单的容器，其上桥接 Sider 布局组件传入的 context.siderCollapsed, context.collapsedWidth；其下为子菜单或菜单项注入 context.inlineCollapsed, context.antdMenuTheme。其中，context.siderCollapsed 表示侧边栏是否折叠；context.collapsedWidth 表示侧边栏宽度；context.inlineCollapsed 表示内嵌模式的菜单是否折叠，或者侧边栏是否折叠；context.antdMenuTheme 表示菜单所采用的样式风格。</p>
<p>组件层级上，Menu 使用 RcMenu 绘制内容。当传入 props.openKeys 时，Menu 将表现为受控组件，其内置的 state.openKeys 将根据 props.openKeys 作调整，使用者也可以通过 props.onOpenChange 实时获取到实时展开的菜单项；当没有传入 props.openKeys 时，Menu 将表现为非受控组件，state.openKeys 将根据用户行为更新。</p>
<p>在非内嵌模式下，Menu 为 RcMenu 绑定 onClick = this.handleClick 实例方法，以在当用户点击菜单栏的空白区域或子菜单项时，可隐藏弹出的浮层。</p>
<p>在动效处理上，当菜单栏由 inline 模式切换到其他模式或者在 inline 模式下收起菜单（实际菜单需要垂直布局显示）时，先需显示 inline 模式下子菜单的折叠动效，在动效执行完成后，再转换成其他模式（介于 rc-menu 没有针对动效时延的处理）。Menu 使用 switchingModeFromInline 实例属性记录模式转换及折叠状态切换。在此基础上，getRealMenuMode 用于计算菜单实际采用的显示模式，再由 getMenuOpenAnimation 获得待显示的功效。当动效执行完成时，handleTransitionEnd 实例方法将重置 switchingModeFromInline 缓存。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cssAnimation <span class="keyword">from</span> <span class="string">'css-animation'</span>;</span><br><span class="line"><span class="keyword">import</span> raf <span class="keyword">from</span> <span class="string">'raf'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">node: HTMLElement, show: boolean, done: (</span>) =&gt; <span class="title">void</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> height: number;</span><br><span class="line">  <span class="keyword">let</span> requestAnimationFrameId: number;</span><br><span class="line">  <span class="keyword">return</span> cssAnimation(node, <span class="string">'ant-motion-collapse'</span>, &#123;</span><br><span class="line">    start() &#123;</span><br><span class="line">      <span class="keyword">if</span> (!show) &#123;</span><br><span class="line">        node.style.height = <span class="string">`<span class="subst">$&#123;node.offsetHeight&#125;</span>px`</span>;</span><br><span class="line">        node.style.opacity = <span class="string">'1'</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        height = node.offsetHeight;</span><br><span class="line">        node.style.height = <span class="string">'0px'</span>;</span><br><span class="line">        node.style.opacity = <span class="string">'0'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    active() &#123;</span><br><span class="line">      <span class="keyword">if</span> (requestAnimationFrameId) &#123;</span><br><span class="line">        raf.cancel(requestAnimationFrameId);</span><br><span class="line">      &#125;</span><br><span class="line">      requestAnimationFrameId = raf(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        node.style.height = <span class="string">`<span class="subst">$&#123;show ? height : <span class="number">0</span>&#125;</span>px`</span>;</span><br><span class="line">        node.style.opacity = show ? <span class="string">'1'</span> : <span class="string">'0'</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    end() &#123;</span><br><span class="line">      <span class="keyword">if</span> (requestAnimationFrameId) &#123;</span><br><span class="line">        raf.cancel(requestAnimationFrameId);</span><br><span class="line">      &#125;</span><br><span class="line">      node.style.height = <span class="string">''</span>;</span><br><span class="line">      node.style.opacity = <span class="string">''</span>;</span><br><span class="line">      done();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> animation = &#123;</span><br><span class="line">  enter(node: HTMLElement, <span class="attr">done</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> animate(node, <span class="literal">true</span>, done);</span><br><span class="line">  &#125;,</span><br><span class="line">  leave(node: HTMLElement, <span class="attr">done</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> animate(node, <span class="literal">false</span>, done);</span><br><span class="line">  &#125;,</span><br><span class="line">  appear(node: HTMLElement, <span class="attr">done</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> animate(node, <span class="literal">true</span>, done);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Menu</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">MenuProps</span>, <span class="title">MenuState</span>&gt; </span>&#123;</span><br><span class="line">  componentWillReceiveProps(nextProps: MenuProps, <span class="attr">nextContext</span>: SiderContext) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.mode === <span class="string">'inline'</span> &amp;&amp;</span><br><span class="line">        nextProps.mode !== <span class="string">'inline'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.switchingModeFromInline = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'openKeys'</span> <span class="keyword">in</span> nextProps) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">openKeys</span>: nextProps.openKeys! &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((nextProps.inlineCollapsed &amp;&amp; !<span class="keyword">this</span>.props.inlineCollapsed) ||</span><br><span class="line">        (nextContext.siderCollapsed &amp;&amp; !<span class="keyword">this</span>.context.siderCollapsed)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.switchingModeFromInline = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">this</span>.inlineOpenKeys = <span class="keyword">this</span>.state.openKeys;<span class="comment">// 缓存 inline 模式展开的菜单项</span></span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">openKeys</span>: [] &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((!nextProps.inlineCollapsed &amp;&amp; <span class="keyword">this</span>.props.inlineCollapsed) ||</span><br><span class="line">        (!nextContext.siderCollapsed &amp;&amp; <span class="keyword">this</span>.context.siderCollapsed)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">openKeys</span>: <span class="keyword">this</span>.inlineOpenKeys &#125;);</span><br><span class="line">      <span class="keyword">this</span>.inlineOpenKeys = [];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Restore vertical mode when menu is collapsed responsively when mounted</span></span><br><span class="line">  <span class="comment">// https://github.com/ant-design/ant-design/issues/13104</span></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> not a perfect solution, looking a new way to avoid setting switchingModeFromInline in this situation</span></span><br><span class="line">  <span class="comment">// 折叠状态刷新页面，因为未执行动效，switchingModeFromInline 仍为真，显示为 inline 模式</span></span><br><span class="line">  handleMouseEnter = <span class="function">(<span class="params">e: MouseEvent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.restoreModeVerticalFromInline();</span><br><span class="line">    <span class="keyword">const</span> &#123; onMouseEnter &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">if</span> (onMouseEnter) &#123;</span><br><span class="line">      onMouseEnter(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleTransitionEnd = <span class="function">(<span class="params">e: TransitionEvent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// when inlineCollapsed menu width animation finished</span></span><br><span class="line">    <span class="comment">// https://github.com/ant-design/ant-design/issues/12864</span></span><br><span class="line">    <span class="keyword">const</span> widthCollapsed = e.propertyName === <span class="string">'width'</span> &amp;&amp; e.target === e.currentTarget;</span><br><span class="line">    <span class="comment">// Fix for &lt;Menu style=&#123;&#123; width: '100%' &#125;&#125; /&gt;, the width transition won't trigger when menu is collapsed</span></span><br><span class="line">    <span class="comment">// https://github.com/ant-design/ant-design-pro/issues/2783</span></span><br><span class="line">    <span class="keyword">const</span> iconScaled = e.propertyName === <span class="string">'font-size'</span> &amp;&amp; (e.target <span class="keyword">as</span> HTMLElement).className.indexOf(<span class="string">'anticon'</span>) &gt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (widthCollapsed || iconScaled) &#123;</span><br><span class="line">      <span class="keyword">this</span>.restoreModeVerticalFromInline();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重置 switchingModeFromInline，并重绘菜单</span></span><br><span class="line">  restoreModeVerticalFromInline() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.switchingModeFromInline) &#123;</span><br><span class="line">      <span class="keyword">this</span>.switchingModeFromInline = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是否折叠，取决于侧边栏的折叠情况、内嵌模式的折叠情况</span></span><br><span class="line">  getInlineCollapsed() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; inlineCollapsed &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.context.siderCollapsed !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.context.siderCollapsed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inlineCollapsed;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 由 inline 模式转换成其他模式时，首先保持 inline 模式，目的是执行子菜单折叠动效</span></span><br><span class="line">  <span class="comment">// 在 inline 模式下，收起菜单也将先保持 inline 模式</span></span><br><span class="line">  getRealMenuMode() &#123;</span><br><span class="line">    <span class="keyword">const</span> inlineCollapsed = <span class="keyword">this</span>.getInlineCollapsed();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.switchingModeFromInline &amp;&amp; inlineCollapsed) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'inline'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123; mode &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> inlineCollapsed ? <span class="string">'vertical'</span> : mode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getMenuOpenAnimation(menuMode: MenuMode) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; openAnimation, openTransitionName &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">let</span> menuOpenAnimation = openAnimation || openTransitionName;</span><br><span class="line">    <span class="keyword">if</span> (openAnimation === <span class="literal">undefined</span> &amp;&amp; openTransitionName === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (menuMode) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'horizontal'</span>:</span><br><span class="line">          menuOpenAnimation = <span class="string">'slide-up'</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'vertical'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'vertical-left'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'vertical-right'</span>:</span><br><span class="line">          <span class="comment">// When mode switch from inline submenu should hide without animation</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.switchingModeFromInline) &#123;</span><br><span class="line">            menuOpenAnimation = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">this</span>.switchingModeFromInline = <span class="literal">false</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            menuOpenAnimation = <span class="string">'zoom-big'</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'inline'</span>:</span><br><span class="line">          menuOpenAnimation = animation;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> menuOpenAnimation;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SubMenu-1"><a href="#SubMenu-1" class="headerlink" title="SubMenu"></a>SubMenu</h3><p>SubMenu 使用 RcSubMenu 绘制子菜单。逻辑上，SubMenu 通过 context.antdMenuTheme 设置子菜单的主题样式；又实现 onKeyDown 方法，以桥接 SubPopupMenu 和 RcSubMenu 中的同名方法（参见上文）。</p>
<h3 id="MenuItem"><a href="#MenuItem" class="headerlink" title="MenuItem"></a>MenuItem</h3><p>MenuItem 使用 RcMenuItem 绘制菜单项。逻辑上，MenuItem 既像 SubMenu 那样实现了 onKeyDown 方法；又使用 Tooltip 绘制气泡框。当 context.inlineCollapsed 为 true 且 props.level 为 1（菜单项层级为1）时，将使用<a href="https://ant.design/components/tooltip-cn/" target="_blank" rel="noopener">气泡框组件</a>绘制子元素。</p>
<h3 id="样式处理"><a href="#样式处理" class="headerlink" title="样式处理"></a>样式处理</h3><ol>
<li>菜单折叠前后展示样式：</li>
</ol>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.@&#123;menu-prefix-cls&#125;</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-tag">-item</span>,</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-tag">-submenu-title</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">transition</span>: color .<span class="number">3s</span> <span class="variable">@ease-in-out</span>, border-color .<span class="number">3s</span> <span class="variable">@ease-in-out</span>, background .<span class="number">3s</span> <span class="variable">@ease-in-out</span>, padding .<span class="number">15s</span> <span class="variable">@ease-in-out</span>;</span><br><span class="line">    <span class="selector-class">.@&#123;iconfont-css-prefix&#125;</span> &#123;</span><br><span class="line">      <span class="attribute">min-width</span>: <span class="number">14px</span>;</span><br><span class="line">      <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="variable">@font-size-base</span>;</span><br><span class="line">      <span class="attribute">transition</span>: font-size .<span class="number">15s</span> <span class="variable">@ease-out</span>, margin .<span class="number">3s</span> <span class="variable">@ease-in-out</span>;</span><br><span class="line">      + <span class="selector-tag">span</span> &#123;</span><br><span class="line">        <span class="attribute">transition</span>: opacity .<span class="number">3s</span> <span class="variable">@ease-in-out</span>, width .<span class="number">3s</span> <span class="variable">@ease-in-out</span>;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-tag">-inline-collapsed</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@menu-collapsed-width</span>;</span><br><span class="line">    &gt; <span class="selector-class">.@&#123;menu-prefix-cls&#125;</span><span class="selector-tag">-item</span>,</span><br><span class="line">    &gt; <span class="selector-class">.@&#123;menu-prefix-cls&#125;</span><span class="selector-tag">-item-group</span> &gt; <span class="selector-class">.@&#123;menu-prefix-cls&#125;</span><span class="selector-tag">-item-group-list</span> &gt; <span class="selector-class">.@&#123;menu-prefix-cls&#125;</span><span class="selector-tag">-item</span>,</span><br><span class="line">    &gt; <span class="selector-class">.@&#123;menu-prefix-cls&#125;</span><span class="selector-tag">-item-group</span> &gt; <span class="selector-class">.@&#123;menu-prefix-cls&#125;</span><span class="selector-tag">-item-group-list</span> &gt; <span class="selector-class">.@&#123;menu-prefix-cls&#125;</span><span class="selector-tag">-submenu</span> &gt; <span class="selector-class">.@&#123;menu-prefix-cls&#125;</span><span class="selector-tag">-submenu-title</span>,</span><br><span class="line">    &gt; <span class="selector-class">.@&#123;menu-prefix-cls&#125;</span><span class="selector-tag">-submenu</span> &gt; <span class="selector-class">.@&#123;menu-prefix-cls&#125;</span><span class="selector-tag">-submenu-title</span> &#123;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">text-overflow</span>: clip;<span class="comment">// 裁剪超出文本</span></span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">0</span> (<span class="variable">@menu-collapsed-width</span> - <span class="number">16px</span>) / <span class="number">2</span> <span class="meta">!important</span>;</span><br><span class="line">      <span class="selector-class">.@&#123;menu-prefix-cls&#125;</span><span class="selector-tag">-submenu-arrow</span> &#123;<span class="comment">// 隐藏展开折叠图标</span></span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.@&#123;iconfont-css-prefix&#125;</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="variable">@menu-item-height</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        + <span class="selector-tag">span</span> &#123;<span class="comment">// 隐藏文本</span></span><br><span class="line">          <span class="attribute">max-width</span>: <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">display</span>: inline-block;</span><br><span class="line">          <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>子菜单浮层：</li>
</ol>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.@&#123;menu-prefix-cls&#125;</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-tag">-submenu</span> &#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-tag">-popup</span> &#123;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="variable">@border-radius-base</span>;</span><br><span class="line">      <span class="attribute">z-index</span>: <span class="variable">@zindex-dropdown</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="variable">@menu-popup-bg</span>;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.submenu-title-wrapper</span> &#123;</span><br><span class="line">        <span class="attribute">padding-right</span>: <span class="number">20px</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="selector-tag">&amp;</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: -<span class="number">7px</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">' '</span>;</span><br><span class="line">        <span class="attribute">opacity</span>: .<span class="number">0001</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>折叠按钮旋转动效：</li>
</ol>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.@&#123;menu-prefix-cls&#125;</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-tag">-submenu</span> &#123;<span class="selector-tag">&amp;</span><span class="selector-tag">-vertical</span>,</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-tag">-vertical-left</span>,</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-tag">-vertical-right</span>,</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-tag">-inline</span> &#123;</span><br><span class="line">      &gt; <span class="selector-class">.@&#123;menu-prefix-cls&#125;</span><span class="selector-tag">-submenu-title</span> <span class="selector-class">.@&#123;menu-prefix-cls&#125;</span><span class="selector-tag">-submenu-arrow</span> &#123;</span><br><span class="line">        <span class="attribute">transition</span>: transform .<span class="number">3s</span> <span class="variable">@ease-in-out</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">16px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:before</span>,</span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">          <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">          <span class="attribute">position</span>: absolute;</span><br><span class="line">          <span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">          <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">          <span class="attribute">background-image</span>: linear-gradient(to right, <span class="variable">@menu-item-color</span>, <span class="variable">@menu-item-color</span>);<span class="comment">// 渐变</span></span><br><span class="line">          <span class="attribute">width</span>: <span class="number">6px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">1.5px</span>;</span><br><span class="line">          <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">          <span class="attribute">transition</span>: background .<span class="number">3s</span> <span class="variable">@ease-in-out</span>, transform .<span class="number">3s</span> <span class="variable">@ease-in-out</span>, top .<span class="number">3s</span> <span class="variable">@ease-in-out</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">          <span class="attribute">transform</span>: rotate(<span class="number">45deg</span>) translateY(-<span class="number">2px</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">          <span class="attribute">transform</span>: rotate(-<span class="number">45deg</span>) translateY(<span class="number">2px</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      &gt; <span class="selector-class">.@&#123;menu-prefix-cls&#125;</span><span class="selector-tag">-submenu-title</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.@&#123;menu-prefix-cls&#125;</span><span class="selector-tag">-submenu-arrow</span> &#123;</span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span>,</span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">          <span class="attribute">background</span>: linear-gradient(to right, <span class="variable">@menu-highlight-color</span>, <span class="variable">@menu-highlight-color</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-tag">-inline</span> &gt; <span class="selector-class">.@&#123;menu-prefix-cls&#125;</span><span class="selector-tag">-submenu-title</span> <span class="selector-class">.@&#123;menu-prefix-cls&#125;</span><span class="selector-tag">-submenu-arrow</span> &#123;</span><br><span class="line">      <span class="selector-tag">&amp;</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: rotate(-<span class="number">45deg</span>) translateX(<span class="number">2px</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: rotate(<span class="number">45deg</span>) translateX(-<span class="number">2px</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-tag">-open</span> &#123;</span><br><span class="line">      <span class="selector-tag">&amp;</span><span class="selector-class">.@&#123;menu-prefix-cls&#125;</span><span class="selector-tag">-submenu-inline</span> &gt; <span class="selector-class">.@&#123;menu-prefix-cls&#125;</span><span class="selector-tag">-submenu-title</span> <span class="selector-class">.@&#123;menu-prefix-cls&#125;</span><span class="selector-tag">-submenu-arrow</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: translateY(-<span class="number">2px</span>);</span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">          <span class="attribute">transform</span>: rotate(-<span class="number">45deg</span>) translateX(-<span class="number">2px</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">          <span class="attribute">transform</span>: rotate(<span class="number">45deg</span>) translateX(<span class="number">2px</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>清除浮动：</li>
</ol>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>() &#123;</span><br><span class="line">  <span class="attribute">zoom</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:before</span>,</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.@&#123;menu-prefix-cls&#125;</span> &#123;</span><br><span class="line">  <span class="selector-class">.clearfix</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-tag">-horizontal</span> &#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">"\20"</span>;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">clear</span>: both;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文对子菜单的浮层显示和菜单栏的动效处理仍有不足。关于 rc-animate, rc-trigger，笔者将在后续的文章中加以分析。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>antd</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>react</tag>
        <tag>antd</tag>
      </tags>
  </entry>
  <entry>
    <title>Radio, Checkbox</title>
    <url>/2018/11/27/frontend/antd/Radio,%20Checkbox/</url>
    <content><![CDATA[<p>antd 中的 Radio, Checkbox 组件均基于 rc-checkbox 实现。本文第一部分将介绍 <a href="https://github.com/react-component/checkbox" target="_blank" rel="noopener">rc-checkbox</a>，余下两部分再介绍 Radio, Checkbox 组件。</p>
<h2 id="rc-checkbox"><a href="#rc-checkbox" class="headerlink" title="rc-checkbox"></a>rc-checkbox</h2><p>rc-checkbox 输出 Checkbox 组件。其处理逻辑较为简单，包含样式类转换、多余 props 剔除等。元素层级上，rc-checkbox 使用 span 包裹 input 节点和内层 span 节点（该 span 节点将绘制可见的单选框样式）。样式类转换指 span 元素的样式类包含或可能包含 props.prefixCls, props.className, <code>${props.prefixCls}-checked</code>, <code>${props.prefixCls}-disabled</code>；input 节点的样式类为 <code>${props.prefixCls}-input</code>；内层 span 节点的样式类为 <code>${props.prefixCls}-inner</code>。多余 props 剔除指 input 元素只接受 name, id, type, readOnly, disabled, tabIndex, checked, onClick, onFocus, onBlur, onChange, autoFocus, value, ‘aria-<em>‘, ‘data-</em>‘, role 属性。其中，checked 由 Checkbox 组件的 state.checked 设定；onChange 设置为 Checkbox 组件的 handleChange 方法。当 input 节点数据变更时，props.onChange 接受到的数据先经由 Checkbox 组件转换。以下是其实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; props &#125; = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">if</span> (props.disabled) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="string">'checked'</span> <span class="keyword">in</span> props)) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      checked: e.target.checked,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  props.onChange(&#123;</span><br><span class="line">    target: &#123;</span><br><span class="line">      ...props,</span><br><span class="line">      checked: e.target.checked,</span><br><span class="line">    &#125;,</span><br><span class="line">    stopPropagation() &#123;</span><br><span class="line">      e.stopPropagation();</span><br><span class="line">    &#125;,</span><br><span class="line">    preventDefault() &#123;</span><br><span class="line">      e.preventDefault();</span><br><span class="line">    &#125;,</span><br><span class="line">    nativeEvent: e.nativeEvent,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Radio-组件"><a href="#Radio-组件" class="headerlink" title="Radio 组件"></a>Radio 组件</h2><p>antd 提供三种单选框组件：单选框 Radio, 单选框组合 RadioGroup, 单选框按钮 RadioButton。</p>
<p>Radio 组件的特殊处理逻辑为：通过 context.radioGroup = { name, onChange, value, disabled } 获得 RadioGroup 组件注入的数据，以与单选框组合完成交互。</p>
<p>Radio 组件的元素层级关系为 label 元素和 RcCheckbox 组件。以下 less 样式中，.@{radio-prefix-cls} 即 RcCheckbox 组件绘制的外层 span 元素；.@{radio-inner-prefix-cls} 即 RcCheckbox 组件绘制的内层 span 元素。Radio 组件呈现在视图上的样式以内层 span 元素及其 span:after 伪类内容绘制，选中时 span:after 设置 opacity: 1 样式。以下是 less 代码。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.@&#123;radio-prefix-cls&#125;</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-tag">-inner</span> &#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">      <span class="variable">@radio-dot-size:</span> <span class="variable">@radio-size</span> - <span class="number">8px</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">width</span>: <span class="variable">@radio-dot-size</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="variable">@radio-dot-size</span>;</span><br><span class="line">      <span class="attribute">left</span>: (<span class="variable">@radio-size</span> - <span class="variable">@radio-dot-size</span>) / <span class="number">2</span> - <span class="number">1px</span>;</span><br><span class="line">      <span class="attribute">top</span>: (<span class="variable">@radio-size</span> - <span class="variable">@radio-dot-size</span>) / <span class="number">2</span> - <span class="number">1px</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="variable">@radio-dot-size</span>;</span><br><span class="line">      <span class="attribute">display</span>: table;</span><br><span class="line">      <span class="attribute">border-top</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">border-left</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">' '</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="variable">@radio-dot-color</span>;</span><br><span class="line">      <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">transform</span>: scale(<span class="number">0</span>);</span><br><span class="line">      <span class="attribute">transition</span>: all <span class="variable">@radio-duration</span> <span class="variable">@ease-in-out-circ</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@radio-size</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@radio-size</span>;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="variable">@border-color-base</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">@radio-button-bg</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="variable">@radio-duration</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.@&#123;radio-prefix-cls&#125;</span><span class="selector-tag">-checked</span> &#123;</span><br><span class="line">  <span class="selector-class">.@&#123;radio-inner-prefix-cls&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="variable">@radio-dot-color</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">      <span class="attribute">transform</span>: scale(.<span class="number">875</span>);</span><br><span class="line">      <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">      <span class="attribute">transition</span>: all <span class="variable">@radio-duration</span> <span class="variable">@ease-in-out-circ</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>RadioButton 组件的渲染过程无甚特别之处，主要是默认将 props.prefixCls 设定为 ‘ant-radio-button’。</p>
<p>RadioGroup 组件接受 props.options 作为选项配置内容（props.options 数组项内容可以是字符串或对象）；并将 radioGroup 作为 context 内容传入子孙组件中。</p>
<h2 id="Checkbox"><a href="#Checkbox" class="headerlink" title="Checkbox"></a>Checkbox</h2><p>antd 提供两种复选框组件：复选框 Checkbox, 复选框组合 CheckboxGroup。</p>
<p>Checkbox 组件与 Radio 组件的实现无异，只是其接受的 context 数据内容为 checkboxGroup = { toggleOption, value, disabled } 属性。其中，toggleOption 用于影响 Checkbox 组件的 onChange 绑定函数，即改变 CheckboxGroup 组件的 state.value 状态；value 用于判断当前 Checkbox 组件是否处于选中状态。</p>
<p>CheckboxGroup 组件也与 RadioGroup 组件无异，只是其实现 toggleOption 方法，用于在复选框勾选或取消勾选时，实时更新 state.value 值，并调用 props.onChange 方法；并通过 context 注入到子孙组件中。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>antd</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>react</tag>
        <tag>antd</tag>
      </tags>
  </entry>
  <entry>
    <title>Grid 栅格</title>
    <url>/2018/11/25/frontend/antd/Grid/</url>
    <content><![CDATA[<p>antd 提供的 24 栅格系统由 Row, Col 组件实现。</p>
<h2 id="Row"><a href="#Row" class="headerlink" title="Row"></a>Row</h2><p>栅格布局组件 Row 用于设定整行 row 内各组 col 的布局风格。当 props.type 为 ‘flex’ 时，意味着整行采用 flex 布局。在 flex 布局的基础上，props.justify 通过 justify-content 样式影响各 col 元素的水平排列方式；props.align 通过 align-items 样式影响各 col 元素的垂直对齐方式。props.gutter 用于设定各 col 元素的间隔，间隔单位可以是 ‘px’ 或 ‘rem’。Row 支持以对象形式配置 props.gutter，如 { xs, sm, md, lg, xl, xxl }。其中，xs 为 576 px 以下屏幕；sm 为 576 - 768 px 尺寸屏幕；md 为 768 - 992 px 尺寸屏幕；lg 为 992 - 1200 px 尺寸屏幕；xl 为 1200 - 1600 px 尺寸屏幕；xxl 为 1600 px 以上屏幕；</p>
<p>在响应式处理上，Row 组件借助 <a href="https://github.com/WickyNilliams/enquire.js" target="_blank" rel="noopener">enquire.js</a> 库实现。其场景如以 { md: 8, lg: 16 } 对象配置 props.gutter，那么，当屏幕尺寸小于 768px 时，就需要将各 col 元素的间隔从 16 px 调整为 8px。Row 组件对这一场景的实现机制为，在 componentDidMount 生命周期使用 enquire.js 库绑定监听函数，以使得当屏幕尺寸变更时，state.screen 当前屏幕状态也会相应得到更新；随后在 render 阶段，由 getGutter 方法获得当前屏幕尺寸下的 col 元素间隔 gutter，并借助 <a href="https://github.com/jamiebuilds/create-react-context" target="_blank" rel="noopener">create-react-context</a> 库将 gutter 注入到 Col 组件中。以下是该机制实现的源码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(responsiveMap)</span><br><span class="line">    .map(<span class="function">(<span class="params">screen: Breakpoint</span>) =&gt;</span> enquire.register(responsiveMap[screen], &#123;</span><br><span class="line">        match: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.props.gutter !== <span class="string">'object'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState</span>) =&gt;</span> (&#123;</span><br><span class="line">            screens: &#123;</span><br><span class="line">              ...prevState.screens,</span><br><span class="line">              [screen]: <span class="literal">true</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;));</span><br><span class="line">        &#125;,</span><br><span class="line">        unmatch: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.props.gutter !== <span class="string">'object'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState</span>) =&gt;</span> (&#123;</span><br><span class="line">            screens: &#123;</span><br><span class="line">              ...prevState.screens,</span><br><span class="line">              [screen]: <span class="literal">false</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;));</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// Keep a empty destory to avoid triggering unmatch when unregister</span></span><br><span class="line">        destroy() &#123;&#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getGutter(): number | <span class="literal">undefined</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; gutter &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> gutter === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= responsiveArray.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> breakpoint: Breakpoint = responsiveArray[i];</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.state.screens[breakpoint] &amp;&amp; gutter[breakpoint] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> gutter[breakpoint];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> gutter <span class="keyword">as</span> number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在样式处理方面，整行 row 采用 border-box 盒模型，相对定位，并嵌套使用 .clearfix 样式规则以清除浮动以及 :before, :after 伪类的内容。其余均较为简单，可参见<a href="https://github.com/ant-design/ant-design/blob/master/components/form/style/index.less" target="_blank" rel="noopener">源码</a>。</p>
<h2 id="Col"><a href="#Col" class="headerlink" title="Col"></a>Col</h2><p>Col 组件主要通过样式类以设定 col 元素的大小和偏移情况。如当配置了 props.offset 属性为 4 时，将相应添加 ant-col-xs-offset-4, ant-col-sm-offset-4, ant-col-md-offset-4, ant-col-lg-offset-4, ant-col-xl-offset-4, ant-col-xll-offset-4 样式类。因此，Col 组件的逻辑主要是将 props 转化成样式类，其实现的重点仍在于 less 样式文件。</p>
<p>当然，各 col 元素的间隔 gutter 由 Row 组件传入。以下是其源码实现，RowContext 通过 create-react-context 库创建，即通过 context 属性传递数据，但只有 Col 组件能加以访问。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Row</span></span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;RowContext.Provider value=&#123;&#123; gutter &#125;&#125;&gt;</span><br><span class="line">      &lt;div &#123;...otherProps&#125; className=&#123;classes&#125; style=&#123;rowStyle&#125;&gt;</span><br><span class="line">        &#123;children&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>RowContext.Provider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Col</span></span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;RowContext.Consumer&gt;</span><br><span class="line">      &#123;(&#123; gutter &#125;) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> style = others.style;</span><br><span class="line">        <span class="keyword">if</span> (gutter <span class="keyword">as</span> number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          style = &#123;</span><br><span class="line">            paddingLeft: (gutter <span class="keyword">as</span> number) / <span class="number">2</span>,</span><br><span class="line">            paddingRight: (gutter <span class="keyword">as</span> number) / <span class="number">2</span>,</span><br><span class="line">            ...style,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> &#123;<span class="attr">...others</span>&#125; <span class="attr">style</span>=<span class="string">&#123;style&#125;</span> <span class="attr">className</span>=<span class="string">&#123;classes&#125;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">      &#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/RowContext.Consumer&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<p>在 less 文件中，antd 使用自调用的混合函数创建从 .ant-col-1 到 .ant-col-24 的样式规则。以下是相关源码。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// style/theme/default.less</span></span><br><span class="line"><span class="variable">@grid-columns:</span> <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mixin.less</span></span><br><span class="line"><span class="comment">// index 由 1 到 24，构建样式规则</span></span><br><span class="line"><span class="selector-class">.make-grid-columns</span>() &#123;</span><br><span class="line">  <span class="selector-class">.col</span>(<span class="variable">@index</span>) &#123;</span><br><span class="line">    <span class="variable">@item:</span> <span class="string">~".@&#123;ant-prefix&#125;-col-@&#123;index&#125;, .@&#123;ant-prefix&#125;-col-xs-@&#123;index&#125;, .@&#123;ant-prefix&#125;-col-sm-@&#123;index&#125;, .@&#123;ant-prefix&#125;-col-md-@&#123;index&#125;, .@&#123;ant-prefix&#125;-col-lg-@&#123;index&#125;"</span>;</span><br><span class="line">    <span class="selector-class">.col</span>((<span class="variable">@index</span> + <span class="number">1</span>), <span class="variable">@item</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.col</span>(<span class="variable">@index</span>, <span class="variable">@list</span>) <span class="keyword">when</span> (<span class="variable">@index</span> =&lt; <span class="variable">@grid-columns</span>) &#123;</span><br><span class="line">    <span class="variable">@item:</span> <span class="string">~".@&#123;ant-prefix&#125;-col-@&#123;index&#125;, .@&#123;ant-prefix&#125;-col-xs-@&#123;index&#125;, .@&#123;ant-prefix&#125;-col-sm-@&#123;index&#125;, .@&#123;ant-prefix&#125;-col-md-@&#123;index&#125;, .@&#123;ant-prefix&#125;-col-lg-@&#123;index&#125;"</span>;</span><br><span class="line">    <span class="selector-class">.col</span>((<span class="variable">@index</span> + <span class="number">1</span>), <span class="string">~"@&#123;list&#125;, @&#123;item&#125;"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.col</span>(<span class="variable">@index</span>, <span class="variable">@list</span>) <span class="keyword">when</span> (<span class="variable">@index</span> &gt; <span class="variable">@grid-columns</span>) &#123;</span><br><span class="line">    <span class="variable">@&#123;list&#125;</span> &#123;</span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">      <span class="comment">// Prevent columns from collapsing when empty</span></span><br><span class="line">      <span class="attribute">min-height</span>: <span class="number">1px</span>;</span><br><span class="line">      <span class="attribute">padding-left</span>: (<span class="variable">@grid-gutter-width</span> / <span class="number">2</span>);</span><br><span class="line">      <span class="attribute">padding-right</span>: (<span class="variable">@grid-gutter-width</span> / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.col</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.float-grid-columns</span>(<span class="variable">@class</span>) &#123;</span><br><span class="line">  <span class="selector-class">.col</span>(<span class="variable">@index</span>) &#123; <span class="comment">// initial</span></span><br><span class="line">    <span class="variable">@item:</span> <span class="string">~".@&#123;ant-prefix&#125;-col@&#123;class&#125;-@&#123;index&#125;"</span>;</span><br><span class="line">    <span class="selector-class">.col</span>((<span class="variable">@index</span> + <span class="number">1</span>), <span class="variable">@item</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.col</span>(<span class="variable">@index</span>, <span class="variable">@list</span>) <span class="keyword">when</span> (<span class="variable">@index</span> =&lt; <span class="variable">@grid-columns</span>) &#123; <span class="comment">// general</span></span><br><span class="line">    <span class="variable">@item:</span> <span class="string">~".@&#123;ant-prefix&#125;-col@&#123;class&#125;-@&#123;index&#125;"</span>;</span><br><span class="line">    <span class="selector-class">.col</span>((<span class="variable">@index</span> + <span class="number">1</span>), <span class="string">~"@&#123;list&#125;, @&#123;item&#125;"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.col</span>(<span class="variable">@index</span>, <span class="variable">@list</span>) <span class="keyword">when</span> (<span class="variable">@index</span> &gt; <span class="variable">@grid-columns</span>) &#123; <span class="comment">// terminal</span></span><br><span class="line">    <span class="variable">@&#123;list&#125;</span> &#123;</span><br><span class="line">      <span class="attribute">float</span>: left;</span><br><span class="line">      <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> auto;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.col</span>(<span class="number">1</span>); <span class="comment">// kickstart it</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index 由 24 到 1，构建样式规则</span></span><br><span class="line"><span class="selector-class">.loop-grid-columns</span>(<span class="variable">@index</span>, <span class="variable">@class</span>) <span class="keyword">when</span> (<span class="variable">@index</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="selector-class">.@&#123;ant-prefix&#125;</span><span class="selector-tag">-col</span><span class="variable">@&#123;class&#125;</span><span class="selector-tag">-</span><span class="variable">@&#123;index&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">width</span>: percentage((<span class="variable">@index</span> / <span class="variable">@grid-columns</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.@&#123;ant-prefix&#125;</span><span class="selector-tag">-col</span><span class="variable">@&#123;class&#125;</span><span class="selector-tag">-push-</span><span class="variable">@&#123;index&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: percentage((<span class="variable">@index</span> / <span class="variable">@grid-columns</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.@&#123;ant-prefix&#125;</span><span class="selector-tag">-col</span><span class="variable">@&#123;class&#125;</span><span class="selector-tag">-pull-</span><span class="variable">@&#123;index&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">right</span>: percentage((<span class="variable">@index</span> / <span class="variable">@grid-columns</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.@&#123;ant-prefix&#125;</span><span class="selector-tag">-col</span><span class="variable">@&#123;class&#125;</span><span class="selector-tag">-offset-</span><span class="variable">@&#123;index&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: percentage((<span class="variable">@index</span> / <span class="variable">@grid-columns</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.@&#123;ant-prefix&#125;</span><span class="selector-tag">-col</span><span class="variable">@&#123;class&#125;</span><span class="selector-tag">-order-</span><span class="variable">@&#123;index&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="variable">@index</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.loop-grid-columns</span>((<span class="variable">@index</span> - <span class="number">1</span>), <span class="variable">@class</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.loop-grid-columns</span>(<span class="variable">@index</span>, <span class="variable">@class</span>) <span class="keyword">when</span> (<span class="variable">@index</span> = <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="selector-class">.@&#123;ant-prefix&#125;</span><span class="selector-tag">-col</span><span class="variable">@&#123;class&#125;</span><span class="selector-tag">-</span><span class="variable">@&#123;index&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.@&#123;ant-prefix&#125;</span><span class="selector-tag">-col-push-</span><span class="variable">@&#123;index&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: auto;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.@&#123;ant-prefix&#125;</span><span class="selector-tag">-col-pull-</span><span class="variable">@&#123;index&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">right</span>: auto;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.@&#123;ant-prefix&#125;</span><span class="selector-tag">-col</span><span class="variable">@&#123;class&#125;</span><span class="selector-tag">-push-</span><span class="variable">@&#123;index&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: auto;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.@&#123;ant-prefix&#125;</span><span class="selector-tag">-col</span><span class="variable">@&#123;class&#125;</span><span class="selector-tag">-pull-</span><span class="variable">@&#123;index&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">right</span>: auto;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.@&#123;ant-prefix&#125;</span><span class="selector-tag">-col</span><span class="variable">@&#123;class&#125;</span><span class="selector-tag">-offset-</span><span class="variable">@&#123;index&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.@&#123;ant-prefix&#125;</span><span class="selector-tag">-col</span><span class="variable">@&#123;class&#125;</span><span class="selector-tag">-order-</span><span class="variable">@&#123;index&#125;</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.make-grid</span>(<span class="variable">@class</span>: <span class="string">~''</span>) &#123;</span><br><span class="line">  <span class="selector-class">.float-grid-columns</span>(<span class="variable">@class</span>);</span><br><span class="line">  <span class="selector-class">.loop-grid-columns</span>(<span class="variable">@grid-columns</span>, <span class="variable">@class</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.less</span></span><br><span class="line"><span class="selector-class">.make-grid-columns</span>();</span><br><span class="line"><span class="selector-class">.make-grid</span>();</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.make-grid</span>(-xs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@screen-sm-min</span>) &#123;</span><br><span class="line">  <span class="selector-class">.make-grid</span>(-sm);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@screen-md-min</span>) &#123;</span><br><span class="line">  <span class="selector-class">.make-grid</span>(-md);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@screen-lg-min</span>) &#123;</span><br><span class="line">  <span class="selector-class">.make-grid</span>(-lg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@screen-xl-min</span>) &#123;</span><br><span class="line">  <span class="selector-class">.make-grid</span>(-xl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="variable">@screen-xxl-min</span>) &#123;</span><br><span class="line">  <span class="selector-class">.make-grid</span>(-xxl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>frontend</category>
        <category>antd</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>react</tag>
        <tag>antd</tag>
      </tags>
  </entry>
  <entry>
    <title>Layout 布局</title>
    <url>/2018/11/25/frontend/antd/Layout/</url>
    <content><![CDATA[<p>antd 提供 Layout, Header, Sider, Content, Footer 组件用于划定页面布局。实现上，侧边栏 Sider 组件比较特殊，将在第一部分加以介绍；其余组件均将在第一部分加以介绍。</p>
<h2 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h2><p>布局容器 Layout, 顶部布局 Header, 内容部分 Content, 底部布局 Footer 在实现上大体相当：都是通过 generator(props) = BasicComponent =&gt; Adapter 创建高阶组件 Adapter，再由该高阶组件将 props.prefixCls 注入到 BasicComponent 中。</p>
<p>作为 Layout 组件的 BasicComponent，BasicLayout 组件以 state.siders 记录侧边栏的 id，并允许在子组件中使用 context.siderHook 添加或移除侧边栏，其意义是触发 BasicLayout 组件重绘并判断是否需要添加 .ant-layout-has-sider 样式类。作为 Header, Content, Footer 组件的 BasicComponent，Basic 组件只用于拼接 props.prefixCls, props.className，以构成新的样式类。</p>
<p>Header, Sider, Content, Footer 组件只能作为 Layout 的子组件这一特征，由 less 文件约定，即如果当上述组件不作为 Layout 的子组件时，其样式将得不到正常展示。</p>
<h2 id="Sider"><a href="#Sider" class="headerlink" title="Sider"></a>Sider</h2><p>侧边栏 Sider 组件用于设定布局，其内容可由 <a href="https://ant.design/components/menu-cn/" target="_blank" rel="noopener">Menu 组件</a> 绘制。在 componentDidMount, componentWillUnmount 生命周期中，侧边栏组件也将通过 context.siderHook.addSider, context.siderHook.removeSider 方法，以添加或移除 Layout 容器中记录的侧边栏 id。侧边栏组件既可以根据折叠状态切换按钮展开或折叠（通过 props.collapsible 或 props.collapsedWidth = 0 开启）；也可以根据屏幕尺寸响应式展开或折叠（通过 props.breakpoint 属性开启），其实现借助 window.matchMedia 方法。子组件可通过 context.siderCollapsed 获得侧边栏的展开和折叠状态。以下是响应式展开或折叠功能的实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// matchMedia polyfill for</span></span><br><span class="line"><span class="comment">// https://github.com/WickyNilliams/enquire.js/issues/82</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> matchMediaPolyfill = <span class="function">(<span class="params">mediaQuery: string</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      media: mediaQuery,</span><br><span class="line">      matches: <span class="literal">false</span>,</span><br><span class="line">      addListener() &#123;</span><br><span class="line">      &#125;,</span><br><span class="line">      removeListener() &#123;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">window</span>.matchMedia = <span class="built_in">window</span>.matchMedia || matchMediaPolyfill;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sider</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">SiderProps</span>, <span class="title">SiderState</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props: SiderProps) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> matchMedia;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      matchMedia = <span class="built_in">window</span>.matchMedia;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (matchMedia &amp;&amp; props.breakpoint &amp;&amp; props.breakpoint <span class="keyword">in</span> dimensionMap) &#123;</span><br><span class="line">      <span class="keyword">this</span>.mql = matchMedia(<span class="string">`(max-width: <span class="subst">$&#123;dimensionMap[props.breakpoint]&#125;</span>)`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mql) &#123;</span><br><span class="line">      <span class="keyword">this</span>.mql.addListener(<span class="keyword">this</span>.responsiveHandler);</span><br><span class="line">      <span class="keyword">this</span>.responsiveHandler(<span class="keyword">this</span>.mql);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  responsiveHandler = <span class="function">(<span class="params">mql: MediaQueryListEvent | MediaQueryList</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">below</span>: mql.matches &#125;);</span><br><span class="line">    <span class="keyword">const</span> &#123; onBreakpoint &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">if</span> (onBreakpoint) &#123;</span><br><span class="line">      onBreakpoint(mql.matches);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.collapsed !== mql.matches) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setCollapsed(mql.matches, <span class="string">'responsive'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setCollapsed = <span class="function">(<span class="params">collapsed: boolean, type: CollapseType</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="string">'collapsed'</span> <span class="keyword">in</span> <span class="keyword">this</span>.props)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        collapsed,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123; onCollapse &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">if</span> (onCollapse) &#123;</span><br><span class="line">      onCollapse(collapsed, type);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>侧边栏组件的断点 props.breakpoint 包含五种可能：xs 为 480px；sm 为 576px；md 为 768px；lg 为 992px；xl 为 1200px；xxl 为 1600px。当设置了 props.breakpoint 时，就能实现响应式展开与折叠功能。</p>
<p>当 props.collapsedWidth 设置为 0，折叠状态切换按钮为 bars 类型。默认的折叠状态切换按钮为 left 或 right 类型。此外，可以使用 props.trigger 设置自定义折叠状态切换按钮。</p>
<p>侧边栏的主题样式通过设置样式类实现，如 ant-layout-sider-light。</p>
<p>侧边栏组件使用 <a href="https://github.com/reactjs/react-lifecycles-compat" target="_blank" rel="noopener">react-lifecycles-compat</a> 封装，以在低版本的 react 中书写 static getDerivedStateFromProps, getSnapshotBeforeUpdate 生命周期方法。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>antd</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>react</tag>
        <tag>antd</tag>
      </tags>
  </entry>
  <entry>
    <title>less 使用指南</title>
    <url>/2018/11/17/frontend/css/less%20%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章本不打算发布在知乎平台。但是在汇总笔者所不常用的 less 语法时，笔者又小小费了点脑筋，推想了一下 less 的实现（这样有助于从更高的维度去看待很多功能实现）。因此，笔者就希望能在一个更开阔的平台上得到一些回馈和纠错性意见。之所以要汇总 less 语法，那是因为要推究网页、组件库改变样式主题的实现。</p>
<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"library"</span>; <span class="comment">// library.less</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">"typo.css"</span>;</span><br></pre></td></tr></table></figure>
<h3 id="导入关键字"><a href="#导入关键字" class="headerlink" title="导入关键字"></a>导入关键字</h3><p>导入关键字使用形式如 @import (optional, reference) “foo.less”。</p>
<p>所包含的关键字有：</p>
<ol>
<li>reference: 导入的样式文件将作为参考，其所包含的选择器将不会呈现在输出文件，却可以使用 mixin 混入或 extend 扩展将原选择器的样式添加到新的选择器中。reference 的应用场景如，@import (reference) bootstrap.less 样式，使用混入或扩展关键字只将 .navbar all 相关选择器的样式输出。推想其实现如，以内存形式缓存编译后的样式文件，被引用时才注入到输出文件中。</li>
<li>inline: 全量复制 css 文件，不作处理（less 在某些地方不支持注释；且在不修改 css 的情形下，less 也不支持全部的 css hacks）。</li>
<li>less: 以 less 文件形式处理导入的样式文件，不管文件扩展名。</li>
<li>css: 以 css 文件形式处理导入的样式文件，不管文件扩展名。</li>
<li>once: 样式文件只导入一次，默认。</li>
<li>multiple：样式文件导入多次。</li>
<li>optional: 样式文件不存在时不会报错。</li>
</ol>
<h2 id="嵌套规则"><a href="#嵌套规则" class="headerlink" title="嵌套规则"></a>嵌套规则</h2><p>使用嵌套形式书写样式文件时，&amp; 表示父选择器。</p>
<p>less 将使用父选择器名替换 &amp;。特殊的，使用 &amp; 能改变选择器的顺序；当有多个父选择器时，&amp; 依次解析为这几个父选择器。</p>
<p>推想其实现如，以块 {} 为编译单元，以 selectors 缓存 {} 前选择器，以 content 缓存 {} 内容并作解析，将样式写入 output；然后递归调用前述过程，传入父 selectors, content，解析子块时再将父 selector 添加到子 selector 前，将样式写入 output。嵌套规则以树形结构组织，但样式写入 output 时为扁平化结构。单个 &amp; 可以使用父 selector；多个 &amp;，可先构建两维数组，每个数组项为父 selector 的有序列表，然后遍历两维数组进行替换。若 &amp; 在选择器的尾部，编译时无需在子选择器前添加父选择器，而只将 &amp; 替换为父选择器。</p>
<ol>
<li><p>多个父选择器</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input</span></span><br><span class="line"><span class="selector-tag">p</span>, <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span> + <span class="selector-tag">&amp;</span> &#123;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="selector-tag">p</span> + <span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-tag">p</span> + <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">a</span> + <span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-tag">a</span> + <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>改变选择器的顺序</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input</span></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="selector-class">.menu</span> &#123;</span><br><span class="line">    <span class="selector-class">.no-borderradius</span> <span class="selector-tag">&amp;</span> &#123;</span><br><span class="line">      <span class="attribute">background-image</span>: url(<span class="string">'images/button-background.png'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="selector-class">.no-borderradius</span> <span class="selector-class">.header</span> <span class="selector-class">.menu</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">'images/button-background.png'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>less 中变量使用 @variableName: variableValue 形式声明；@variableName 或 @{variableName} 形式使用。变量可用于选择器的名称，样式属性的名称，样式属性的值，url，import 语句等。</p>
<p>less 允许使用变量去定义另一个变量的名称，即 @@variablename2 形式声明变量 variablename1。</p>
<p>less 允许先使用变量，再声明变量。推想其实现如，同 js 一样会将声明提前，并保留在内存中，以精确的值替换掉使用的变量，文件解析完成后，再释放内存。</p>
<p>变量有作用域，就近定义的优先。推想其编译过程，块将解析为函数，当在块中再度遇到相同的变量名，注入函数的实参就会被改变，最终输出也因而改变。其实现可能譬如模板引擎。</p>
<p>变量的一大用途包含，通过变量设置网页样式的主题。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@var:</span> red;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page</span> &#123;</span><br><span class="line">  <span class="variable">@var:</span> white;</span><br><span class="line">  <span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@var</span>; <span class="comment">// white</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="变量与混合"><a href="#变量与混合" class="headerlink" title="变量与混合"></a>变量与混合</h3><p>变量可以存储分离的规则集，其下可包含属性、嵌套规则集、变量声明、混合等。分离的规则集在块 {} 中以函数形式使用，该块内就可以使用分离的规则集内所声明的变量、样式属性和混合。</p>
<p>推想其实现如，将分离规则集解析为函数，在快内使用时再行植入。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input</span></span><br><span class="line"><span class="variable">@detached-ruleset:</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>() &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Comic Sans MS"</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#AA86EE</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cont</span> &#123;</span><br><span class="line">  <span class="variable">@detached-ruleset</span>();</span><br><span class="line">  <span class="selector-class">.mixin</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="selector-class">.cont</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Comic Sans MS"</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#AA86EE</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>算数运算符 +, -, *, / 可作用于变量、颜色、数值，less 将尝试获得单位。推想其实现，首先将变量替换为实际的值，然后匹配到操作符，解析操作符前后数值的单位并获得最终单位，使用最终单位修正数值，数值计算并输出。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@conversion-1:</span> <span class="number">5cm</span> + <span class="number">10mm</span>; <span class="comment">// 输出 6cm</span></span><br><span class="line"><span class="variable">@conversion-2:</span> <span class="number">2</span> - <span class="number">3cm</span> - <span class="number">5mm</span>; <span class="comment">// 输出 1.5cm</span></span><br><span class="line"><span class="variable">@incompatible-units:</span> <span class="number">2</span> + <span class="number">5px</span> - <span class="number">3cm</span>; <span class="comment">// 输出 4px</span></span><br><span class="line"><span class="variable">@base:</span> <span class="number">5%</span>;</span><br><span class="line"><span class="variable">@filler:</span> <span class="variable">@base</span> * <span class="number">2</span>; <span class="comment">// 输出 10%</span></span><br><span class="line"><span class="variable">@other:</span> <span class="variable">@base</span> + <span class="variable">@filler</span>; <span class="comment">// 输出 15%</span></span><br></pre></td></tr></table></figure>
<h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>任何 ~”anything” 或 ~’anything’ 语句内，单双引号内容都将被保留，可用于规避 ‘//‘, ‘/<em> </em>/‘被误认为注释。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.weird-element</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">~"^//* some horrible but needed css hack"</span>;<span class="comment">// 输出 content: ^//* some horrible but needed css hack;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h2><p>混合能将某个类或 id 选择器中的样式添加到另一个选择器中，其书写形式如 css 中为类或 id 选择器添加样式，其下可包含选择器（当子选择器为类或 id 选择器时，该子选择器构成另一个混合，可以直接使用；这样，父选择器也称为命名空间）。</p>
<p>当 guard 应用于命名空间时，当且仅当 guard 条件返回真值，才能使用由命名空间定义的混合。参见 guard。</p>
<p>使用混合时添加 !important 关键字，混合下所有样式都将添加 !important。</p>
<p>特别，当类或 id 选择器以 () 结尾时，选择器将不会在输出文件中有所表现，而只是在使用时会将样式混入到其他选择器中。() 中可以添加参数（以 ‘,’ 或 ‘;’ 分割参数），使函数具有函数特征，且支持多态。混合函数使用时可以借助参数名指定参数的值，这样就无关参数的位置；且使用时，@arguments 将包含所有参数；参数支持解构语法如 … 或 @rest…。混合函数的参数可以是复杂的样式规则。</p>
<p>在混合函数中声明的变量，可以在使用混合的块中访问。但是块中若有同名变量，以块中声明的变量优先。</p>
<p>推想其实现如，编译结束后类或 id 选择器构成的混合将保留在内存中，对于 () 结尾的选择器将以函数形式保存，使用时调用函数，这样就不会有样式输出。且保留在内存中的函数是在解析到 () 时构建的，这样就使得 less 语法上呈现多态，编译出来的函数可以使用控制语句处理函数体内参数的多态特征。</p>
<ol>
<li><p>命名空间，不输出混合。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input</span></span><br><span class="line"><span class="selector-id">#bundle</span>() &#123;</span><br><span class="line">  <span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">background-color</span>: grey;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: white</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.tab</span> &#123; ... &#125;</span><br><span class="line">  <span class="selector-class">.citation</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#header</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">  <span class="selector-id">#bundle</span> &gt; <span class="selector-class">.button</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="selector-id">#header</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">background-color</span>: grey;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: white</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 !important</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input</span></span><br><span class="line"><span class="selector-class">.foo</span> (<span class="variable">@bg</span>: <span class="number">#f5f5f5</span>, <span class="variable">@color</span>: <span class="number">#900</span>) &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">@bg</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.important</span> &#123;</span><br><span class="line">  <span class="selector-class">.foo</span>() !important;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="selector-class">.important</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f5f5f5</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#900</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>混合函数支持多态</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input</span></span><br><span class="line"><span class="selector-class">.mixin</span>(dark; <span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: darken(<span class="variable">@color</span>, <span class="number">10%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mixin</span>(light; <span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: lighten(<span class="variable">@color</span>, <span class="number">10%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mixin</span>(<span class="variable">@_</span>; <span class="variable">@color</span>) &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">@switch:</span> light;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>(<span class="variable">@switch</span>; <span class="number">#888</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#a2a2a2</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>混合函数中定义的变量，可以在使用时引用</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input</span></span><br><span class="line"><span class="selector-class">.mixin</span>() &#123;</span><br><span class="line">  <span class="variable">@width:</span>  <span class="number">100%</span>;</span><br><span class="line">  <span class="variable">@height:</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.caller</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>();</span><br><span class="line">  <span class="attribute">width</span>:  <span class="variable">@width</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">@height</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="selector-class">.caller</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>:  <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>扩展 :extend 是 less 提供的伪类，使用形式如 .big-bag:extend(.bag) 将使 .big-bag 拥有 .bag 的样式。</p>
<p>使用 all 关键字如 .replacement:extend(.test all)，将把 .test 替换为 .replacement，再行输出另一份样式规则。</p>
<p>推想其实现如，selector1:extend(selector2) 伪类前后内容解析为映射形式，在将 selector2 的样式规则赋值给 selector1。</p>
<ol>
<li>all 关键字<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input</span></span><br><span class="line"><span class="selector-class">.a</span><span class="selector-class">.b</span><span class="selector-class">.test</span>,</span><br><span class="line"><span class="selector-class">.test</span><span class="selector-class">.c</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.replacement</span><span class="selector-pseudo">:extend(.test</span> <span class="keyword">all</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="selector-class">.a</span><span class="selector-class">.b</span><span class="selector-class">.test</span>,</span><br><span class="line"><span class="selector-class">.test</span><span class="selector-class">.c</span>,</span><br><span class="line"><span class="selector-class">.a</span><span class="selector-class">.b</span><span class="selector-class">.replacement</span>,</span><br><span class="line"><span class="selector-class">.replacement</span><span class="selector-class">.c</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.replacement</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="扩展和指令"><a href="#扩展和指令" class="headerlink" title="扩展和指令"></a>扩展和指令</h3><p>若 extend 伪类在 @media 指令中定义，那么 less 将在 @media 指令内查找匹配的选择器。若 extend 伪类在顶层定义，less 将能匹配到所有 @media 指令中的选择器。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input</span></span><br><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">  <span class="selector-class">.screenClass</span><span class="selector-pseudo">:extend(.selector)</span> &#123;&#125; <span class="comment">// extend inside media</span></span><br><span class="line">  <span class="selector-class">.selector</span> &#123; <span class="comment">// this will be matched - it is in the same media</span></span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">  <span class="selector-class">.selector</span>,</span><br><span class="line">  <span class="selector-class">.screenClass</span> &#123; <span class="comment">/*  ruleset inside the same media was extended */</span></span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="嵌套指令"><a href="#嵌套指令" class="headerlink" title="嵌套指令"></a>嵌套指令</h2><p>嵌套指令会冒泡到顶层。对于条件指令如 @Media, @supports, @document 等，条件指令上的父选择器会被植入条件指令内；对于非条件指令如 @font-face, @keyframes 等，条件指令上的父选择器会被忽略。</p>
<ol>
<li><p>条件指令</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input</span></span><br><span class="line"><span class="selector-class">.screen-color</span> &#123;</span><br><span class="line">  <span class="keyword">@media</span> screen &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">    <span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">      <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="keyword">@media</span> screen &#123;</span><br><span class="line">  <span class="selector-class">.screen-color</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen and (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.screen-color</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>非条件指令</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input</span></span><br><span class="line"><span class="selector-id">#a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">src</span>: made-up-url;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="selector-id">#a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">src</span>: made-up-url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="guard"><a href="#guard" class="headerlink" title="guard"></a>guard</h2><p>guard 用于指定条件，在满足该条件时，才会有样式输出。使用形式如 when (@var = value)，即当 @var 变量或参数等于 value 时，才满足条件。when 条件内可包含比较运算符如 =, &lt;, &gt;, &lt;=, &gt;=，以及逻辑运算符 and, and not，内置的类型检查函数如 iscolor, isnumber, isstring, iskeyword, isurl, ispixel, ispercentage, isem, isunit。</p>
<p>当使用 guard 递归构建 mixin 时，可以形成循环。</p>
<ol>
<li><p>逻辑运算符</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input</span></span><br><span class="line"><span class="selector-class">.mixin</span> (<span class="variable">@a</span>) <span class="keyword">when</span> (<span class="variable">@a</span> &gt; <span class="number">50%</span>) <span class="keyword">and</span> (<span class="variable">@a</span> &gt; <span class="number">5px</span>)&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mixin</span> (<span class="variable">@a</span>) <span class="keyword">when</span> <span class="keyword">not</span> (<span class="variable">@a</span> &lt; <span class="number">50%</span>) <span class="keyword">and</span> <span class="keyword">not</span> (<span class="variable">@a</span> &lt; <span class="number">5px</span>)&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mixin</span> (<span class="variable">@a</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@a</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class1</span> &#123; <span class="selector-class">.mixin</span>(<span class="number">#FF0000</span>) &#125;</span><br><span class="line"><span class="selector-class">.class2</span> &#123; <span class="selector-class">.mixin</span>(<span class="number">#555</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="selector-class">.class1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FF0000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>循环</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input</span></span><br><span class="line"><span class="selector-class">.cont</span>(<span class="variable">@count</span>) <span class="keyword">when</span> (<span class="variable">@count</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="selector-class">.cont</span>((<span class="variable">@count</span> - <span class="number">1</span>));</span><br><span class="line">  <span class="attribute">width</span>: (<span class="number">25px</span> * <span class="variable">@count</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="selector-class">.cont</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">75px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><ol>
<li><p>使用 ‘,’ 串联多个样式属性</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input</span></span><br><span class="line"><span class="selector-class">.myfunc</span>() &#123;</span><br><span class="line">  <span class="selector-tag">box-shadow</span>+: <span class="selector-tag">5px</span> <span class="selector-tag">5px</span> <span class="selector-tag">5px</span> <span class="selector-tag">grey</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="selector-class">.myfunc</span>();</span><br><span class="line">  <span class="selector-tag">box-shadow</span>+: <span class="selector-tag">0</span> <span class="selector-tag">0</span> <span class="selector-tag">5px</span> <span class="selector-id">#f78181</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> grey, <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#f78181</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用空格串联多个样式属性</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// input</span></span><br><span class="line"><span class="selector-class">.mixin</span>() &#123;</span><br><span class="line">  <span class="selector-tag">transform</span>+<span class="selector-tag">_</span>: <span class="selector-tag">scale</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="selector-class">.mixin</span>();</span><br><span class="line">  <span class="selector-tag">transform</span>+<span class="selector-tag">_</span>: <span class="selector-tag">rotate</span>(<span class="number">2deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: scale(<span class="number">1</span>) rotate(<span class="number">2deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>推想其实现如，由 less 提供上下文环境，并通过该上下文环境输出内置函数。颜色函数的实现是笔者鞭长莫及的。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@base:</span> <span class="number">#f04615</span>;</span><br><span class="line"><span class="variable">@width:</span> <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: percentage(<span class="variable">@width</span>);</span><br><span class="line">  <span class="attribute">color</span>: saturate(<span class="variable">@base</span>, <span class="number">5%</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: spin(lighten(<span class="variable">@base</span>, <span class="number">25%</span>), <span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><ol>
<li>color: 颜色转换函数。</li>
<li>image-size: 从文件中获取图像的宽度及高度，可作为 image-size 样式的值。</li>
<li>image-width : 从文件中获取图像的宽度。</li>
<li>image-height: 从文件中获取图像的高度。</li>
<li>convert: 单位转换，如 convert(10cm, mm)。</li>
<li>data-uri: 用于嵌入资源，data-uri(url, mimeType)。</li>
<li>unit: 可用于指定单位，unit(dimension, unit)。</li>
<li>get-unit: 可用于获取单位，如 get-unit(30px)。</li>
<li>svg-gradient: 可用于转换颜色，</li>
<li>if: 按条件返回指定的值，if(condition, value1, value2)，当 condition 成立时，返回 value1，否则返回 value2。</li>
</ol>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.style</span> &#123;</span><br><span class="line">  <span class="variable">@style:</span> orange, green <span class="number">30%</span>, <span class="number">#DAA520</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: svg-gradient(ellipse, <span class="variable">@style</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><ol>
<li>escape: 对特殊字符使用URL编码来对字符串或信息进行编码。</li>
<li>e: 去除字符串的引号。</li>
<li>%: format 函数，用于转化字符串，如 %(string，arguments …)。</li>
<li>replace: 用于替换字符串，如 replace(string, pattern, replacement, flags)。</li>
</ol>
<h3 id="列表函数"><a href="#列表函数" class="headerlink" title="列表函数"></a>列表函数</h3><ol>
<li>length: 用于获取列表的长度，如 @list: “audi”, “benz”, “toyota”, “honda”; length(@list)。</li>
<li>extract: 用于获取列表中指定位置的值，如 @list: “audi”, “benz”, “toyota”, “honda”; length(@list, 2)。</li>
</ol>
<h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><ol>
<li>ceil: 向上取整。</li>
<li>floor: 向下取整。</li>
<li>percentage: 将浮点数转换为百分比字符串。</li>
<li>round: 四舍五入。</li>
<li>sqrt: 获取平方根。</li>
<li>abs: 取绝对值，如 abs(30ft) 将获得 30ft。</li>
<li>sin, asin, cos, acos, tan, atan: 计算正弦、反正弦等。</li>
<li>pi: 返回 pi 的值。</li>
<li>pow: 计算幂。</li>
<li>mod: 计算首参相对次参的模。</li>
<li>min: 计算最小值，如 min(70,30,45,20)。</li>
<li>max: 计算最大值。</li>
</ol>
<h3 id="类型函数"><a href="#类型函数" class="headerlink" title="类型函数"></a>类型函数</h3><p>类型函数包含 iscolor, isnumber, isstring, iskeyword, isurl, ispixel, ispercentage, isem, isunit, isruleset，返回布尔值。</p>
<h3 id="颜色定义函数"><a href="#颜色定义函数" class="headerlink" title="颜色定义函数"></a>颜色定义函数</h3><p>颜色定义函数包含 rgb(red, green, blue), rgba(red, green, blue, alpha), argb, hsl, hsla, hsv, hsva，具体可以参看 <a href="https://www.w3cschool.cn/less/less_color_defination_functions.html" target="_blank" rel="noopener">Less 颜色定义函数</a>。</p>
<h3 id="颜色通道函数"><a href="#颜色通道函数" class="headerlink" title="颜色通道函数"></a>颜色通道函数</h3><ol>
<li>hue: 在 HSL 颜色空间中，提取颜色对象的色调通道。</li>
<li>saturation: 在 HSL 颜色空间中，提取彩色对象的饱和通道。</li>
<li>lightness: 在 HSL 颜色空间中，从颜色对象提取亮度通道。</li>
<li>hsvhue: 在 HSV 色彩空间中，提取色彩对象的色调通道。</li>
<li>hsvsaturation: 在 HSL 颜色空间中，提取彩色对象的饱和通道。</li>
<li>hsvvalue: 在 HSL 颜色空间中，提取颜色对象的值通道。</li>
<li>red: 提取彩色对象的红色通道。</li>
<li>green: 提取彩色对象的绿色通道。</li>
<li>blue: 提取彩色对象的蓝色通道。</li>
<li>alpha: 提取颜色对象的 alpha 通道。</li>
<li>luma: 计算颜色对象的亮度值。</li>
<li>luminance: 在没有伽马校正的情况下计算亮度值。</li>
</ol>
<h3 id="颜色操作函数"><a href="#颜色操作函数" class="headerlink" title="颜色操作函数"></a>颜色操作函数</h3><ol>
<li>saturate: 改变颜色的强度或饱和度，如 saturate(color, amount)。</li>
<li>desaturate: 降低颜色的强度或饱和度。</li>
<li>lighten: 增加颜色的亮度，如 lighten(color, amount)。</li>
<li>darken: 降低颜色的亮度。</li>
<li>fadein: 增加颜色的不透明度，如 fadein(color, amount)。</li>
<li>fadeout: 降低颜色的不透明度。</li>
<li>fade: 设置颜色的不透明度，如 fade(color, amount)。</li>
<li>spin: 旋转颜色的角度，如 spin(color, angle)。</li>
<li>mix: 混合两种颜色以及不透明度，如 mix(color1, color2, weight)，参数 weight 为权重。</li>
<li>tint: 混合颜色和白色，如 tint(color, weight)。</li>
<li>shade: 混合颜色和黑色。</li>
<li>greyscale: 丢弃颜色的饱和度，如 greyscale(color)。</li>
<li>contrast: 设置颜色的对比度，如 contrast(color, dark, light, amount)。</li>
</ol>
<h3 id="颜色混合函数"><a href="#颜色混合函数" class="headerlink" title="颜色混合函数"></a>颜色混合函数</h3><ol>
<li>multiply: 两种RGB通道颜色相乘，然后除以 255 以得到较暗的颜色作为结果。</li>
<li>screen: 获取两种颜色中更明亮的颜色。</li>
<li>overlay: 结合 multiply, screen 的效果生成结果，使光通道更轻，暗通道更暗。</li>
<li>softlight: 工作方式类似于 overlay 函数，但它仅使用颜色的一部分，其中柔和地突出显示其他颜色。</li>
<li>hardlight: 与 overlay 函数类似，但颜色的作用相反。 它使用第二个参数执行 overlay()函数，以确定是否应该执行乘法或屏幕操作。</li>
<li>difference: 从首参颜色中减去次参颜色，负值将反转。</li>
<li>exclusion: 类似于 difference 函数，但具有较低的对比度。</li>
<li>average: 计算两种颜色的均值。</li>
<li>negation: 与 difference 函数相反，从次参颜色减去首参颜色。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://lesscss.cn/features/" target="_blank" rel="noopener">less 语言特性</a><br><a href="https://www.w3cschool.cn/less/" target="_blank" rel="noopener">less 教程</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>css</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>antd-Input 组件</title>
    <url>/2018/11/11/frontend/antd/Input/</url>
    <content><![CDATA[<h2 id="Input-组件"><a href="#Input-组件" class="headerlink" title="Input 组件"></a>Input 组件</h2><p>Input 组件只关乎布局，其余均为常规处理。props.addonBefore 为前置标签，props.addonAfter 为后置标签，props.prefix 前缀图标，props.suffix 后缀图标。参看官方图例：</p>
<img src="/2018/11/11/frontend/antd/Input/Input组件布局.png">
<p>Input 组件在 render 方法执行阶段将绘制出 input 原生组件。鉴于 react 的实现机制，对于 input 原生组件的处理，有受控组件和非手空组件的区别。受控组件即根据组件的 state 变化渲染 input 节点的值，非受控组件只允许组件渲染出 input 节点的默认值，而其实时值将根据用户的操作行为加以改变。ant design 中的 Input 组件对于受控组件和非受控组件的处理，即是当开发者同时传入 props.value 和 props.defaultValue，props.value 的优先级高于 props.defaultValue，且当 props.value 为 undefined 或 null，均会以空字符串渲染 input 节点的值。</p>
<p>在事件的绑定函数方面，常规的绑定函数均会透传到 input 原生组件上，而 props.onPressEnter, props.onKeyDown 两个绑定函数均会以 inputInstance.handleKeyDown 方法的形式挂载为 input 原生组件的 onKeyDown 绑定函数（inputInstance 为 Input 组件的实例）。</p>
<p>此外，inputInstance 实例内置 focus, blur, select 方法，其功用如 inputInstance.focus 可以在校验表单时使校验失败的输入框组件获得焦点。inputInstance.input 属性用于访问 input 原生节点。</p>
<p>在样式处理方面，笔者将作专文加以阐述。</p>
<h2 id="TextArea-组件"><a href="#TextArea-组件" class="headerlink" title="TextArea 组件"></a>TextArea 组件</h2><p>TextArea 组件用于绘制 textarea 原生节点。不同于使用前后标签、前后图标影响渲染输入框组件的布局，TextArea 组件只包含 textarea 节点，没有其他布局元素。</p>
<p>TextArea 组件的特殊处理逻辑是，textarea 节点的高度随用户输入内容而改变，受控于 props.autosize = { minRows?, maxRows? } 属性。其实现原理为：</p>
<ol>
<li>使用插入文档的隐藏文本框节点计算单行文本的高度，再由 minRows, maxRows 计算文本框的最大最小高度，并计算文本框的高度。计算获得的文本框即 textareaStyles 变量。</li>
<li>调用组件实例的 setState 方法，更新 state.textareaStyles，最终构成组件实例的 resizeTextarea 方法。对于受控组件，将在componentWillReceiveProps 生命周期中判断组件获得的 props.value 是否更新，再使用 window.requestAnimationFrame 方式调用 resizeTextarea 方法，以调整文本框的高度。对于非受控组件，在 onChange 事件发生时调用 resizeTextarea 方法。</li>
</ol>
<p>calculateNodeHeight 函数计算文本框高度源码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HIDDEN_TEXTAREA_STYLE = <span class="string">`</span></span><br><span class="line"><span class="string">  min-height:0 !important;</span></span><br><span class="line"><span class="string">  max-height:none !important;</span></span><br><span class="line"><span class="string">  height:0 !important;</span></span><br><span class="line"><span class="string">  visibility:hidden !important;</span></span><br><span class="line"><span class="string">  overflow:hidden !important;</span></span><br><span class="line"><span class="string">  position:absolute !important;</span></span><br><span class="line"><span class="string">  z-index:-1000 !important;</span></span><br><span class="line"><span class="string">  top:0 !important;</span></span><br><span class="line"><span class="string">  right:0 !important</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SIZING_STYLE = [</span><br><span class="line">  <span class="string">'letter-spacing'</span>,</span><br><span class="line">  <span class="string">'line-height'</span>,</span><br><span class="line">  <span class="string">'padding-top'</span>,</span><br><span class="line">  <span class="string">'padding-bottom'</span>,</span><br><span class="line">  <span class="string">'font-family'</span>,</span><br><span class="line">  <span class="string">'font-weight'</span>,</span><br><span class="line">  <span class="string">'font-size'</span>,</span><br><span class="line">  <span class="string">'text-rendering'</span>,</span><br><span class="line">  <span class="string">'text-transform'</span>,</span><br><span class="line">  <span class="string">'width'</span>,</span><br><span class="line">  <span class="string">'text-indent'</span>,</span><br><span class="line">  <span class="string">'padding-left'</span>,</span><br><span class="line">  <span class="string">'padding-right'</span>,</span><br><span class="line">  <span class="string">'border-width'</span>,</span><br><span class="line">  <span class="string">'box-sizing'</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> computedStyleCache: &#123;[key: string]: NodeType&#125; = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> hiddenTextarea: HTMLTextAreaElement;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateNodeStyling</span>(<span class="params">node: HTMLElement, useCache = false</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> nodeRef = (</span><br><span class="line">    node.getAttribute(<span class="string">'id'</span>) ||</span><br><span class="line">    node.getAttribute(<span class="string">'data-reactid'</span>) ||</span><br><span class="line">    node.getAttribute(<span class="string">'name'</span>)</span><br><span class="line">  ) <span class="keyword">as</span> string;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (useCache &amp;&amp; computedStyleCache[nodeRef]) &#123;</span><br><span class="line">    <span class="keyword">return</span> computedStyleCache[nodeRef];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> style = <span class="built_in">window</span>.getComputedStyle(node);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> boxSizing = (</span><br><span class="line">    style.getPropertyValue(<span class="string">'box-sizing'</span>) ||</span><br><span class="line">    style.getPropertyValue(<span class="string">'-moz-box-sizing'</span>) ||</span><br><span class="line">    style.getPropertyValue(<span class="string">'-webkit-box-sizing'</span>)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> paddingSize = (</span><br><span class="line">    <span class="built_in">parseFloat</span>(style.getPropertyValue(<span class="string">'padding-bottom'</span>)) +</span><br><span class="line">    <span class="built_in">parseFloat</span>(style.getPropertyValue(<span class="string">'padding-top'</span>))</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> borderSize = (</span><br><span class="line">    <span class="built_in">parseFloat</span>(style.getPropertyValue(<span class="string">'border-bottom-width'</span>)) +</span><br><span class="line">    <span class="built_in">parseFloat</span>(style.getPropertyValue(<span class="string">'border-top-width'</span>))</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> sizingStyle = SIZING_STYLE</span><br><span class="line">    .map(<span class="function"><span class="params">name</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>:<span class="subst">$&#123;style.getPropertyValue(name)&#125;</span>`</span>)</span><br><span class="line">    .join(<span class="string">';'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> nodeInfo: NodeType = &#123;</span><br><span class="line">    sizingStyle,</span><br><span class="line">    paddingSize,</span><br><span class="line">    borderSize,</span><br><span class="line">    boxSizing,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (useCache &amp;&amp; nodeRef) &#123;</span><br><span class="line">    computedStyleCache[nodeRef] = nodeInfo;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> nodeInfo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">calculateNodeHeight</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  uiTextNode: HTMLTextAreaElement,</span></span></span><br><span class="line"><span class="function"><span class="params">  useCache = false,</span></span></span><br><span class="line"><span class="function"><span class="params">  minRows: number | null = null,</span></span></span><br><span class="line"><span class="function"><span class="params">  maxRows: number | null = null,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!hiddenTextarea) &#123;</span><br><span class="line">    hiddenTextarea = <span class="built_in">document</span>.createElement(<span class="string">'textarea'</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(hiddenTextarea);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fix wrap="off" issue</span></span><br><span class="line">  <span class="comment">// https://github.com/ant-design/ant-design/issues/6577</span></span><br><span class="line">  <span class="keyword">if</span> (uiTextNode.getAttribute(<span class="string">'wrap'</span>)) &#123;</span><br><span class="line">    hiddenTextarea.setAttribute(<span class="string">'wrap'</span>, uiTextNode.getAttribute(<span class="string">'wrap'</span>) <span class="keyword">as</span> string);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    hiddenTextarea.removeAttribute(<span class="string">'wrap'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将影响文本框节点高度的样式属性拷贝给隐藏节点</span></span><br><span class="line">  <span class="comment">// overflow 样式属性置为 hidden，以此将滚动条排除在外</span></span><br><span class="line">  <span class="keyword">let</span> &#123;</span><br><span class="line">    paddingSize, borderSize,</span><br><span class="line">    boxSizing, sizingStyle,</span><br><span class="line">  &#125; = calculateNodeStyling(uiTextNode, useCache);</span><br><span class="line">  hiddenTextarea.setAttribute(<span class="string">'style'</span>, <span class="string">`<span class="subst">$&#123;sizingStyle&#125;</span>;<span class="subst">$&#123;HIDDEN_TEXTAREA_STYLE&#125;</span>`</span>);</span><br><span class="line">  hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> minHeight = <span class="built_in">Number</span>.MIN_SAFE_INTEGER;</span><br><span class="line">  <span class="keyword">let</span> maxHeight = <span class="built_in">Number</span>.MAX_SAFE_INTEGER;</span><br><span class="line">  <span class="keyword">let</span> height = hiddenTextarea.scrollHeight;<span class="comment">// 以隐藏节点计算文本框高度</span></span><br><span class="line">  <span class="keyword">let</span> overflowY: any;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据盒模式调整高度</span></span><br><span class="line">  <span class="keyword">if</span> (boxSizing === <span class="string">'border-box'</span>) &#123;</span><br><span class="line">    height = height + borderSize;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (boxSizing === <span class="string">'content-box'</span>) &#123;</span><br><span class="line">    height = height - paddingSize;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (minRows !== <span class="literal">null</span> || maxRows !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 计算文本框单行高度</span></span><br><span class="line">    hiddenTextarea.value = <span class="string">' '</span>;</span><br><span class="line">    <span class="keyword">let</span> singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (minRows !== <span class="literal">null</span>) &#123;</span><br><span class="line">      minHeight = singleRowHeight * minRows;</span><br><span class="line">      <span class="keyword">if</span> (boxSizing === <span class="string">'border-box'</span>) &#123;</span><br><span class="line">        minHeight = minHeight + paddingSize + borderSize;</span><br><span class="line">      &#125;</span><br><span class="line">      height = <span class="built_in">Math</span>.max(minHeight, height);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (maxRows !== <span class="literal">null</span>) &#123;</span><br><span class="line">      maxHeight = singleRowHeight * maxRows;</span><br><span class="line">      <span class="keyword">if</span> (boxSizing === <span class="string">'border-box'</span>) &#123;</span><br><span class="line">        maxHeight = maxHeight + paddingSize + borderSize;</span><br><span class="line">      &#125;</span><br><span class="line">      overflowY = height &gt; maxHeight ? <span class="string">''</span> : <span class="string">'hidden'</span>;</span><br><span class="line">      height = <span class="built_in">Math</span>.min(maxHeight, height);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!maxRows) &#123;</span><br><span class="line">    overflowY = <span class="string">'hidden'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; height, minHeight, maxHeight, overflowY &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>setState 更新文本框高度源码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不打断本次渲染，在下一次渲染调整文本框的样式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onNextFrame</span>(<span class="params">cb: (</span>) =&gt; <span class="title">void</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.requestAnimationFrame) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.requestAnimationFrame(cb);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">window</span>.setTimeout(cb, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clearNextFrameAction</span>(<span class="params">nextFrameId: number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.cancelAnimationFrame) &#123;</span><br><span class="line">    <span class="built_in">window</span>.cancelAnimationFrame(nextFrameId);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.clearTimeout(nextFrameId);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextArea</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span>&lt;<span class="title">TextAreaProps</span>, <span class="title">TextAreaState</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    prefixCls: <span class="string">'ant-input'</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  nextFrameActionId: number;</span><br><span class="line"></span><br><span class="line">  state = &#123;</span><br><span class="line">    textareaStyles: &#123;&#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.resizeTextarea();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillReceiveProps(nextProps: TextAreaProps) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.value !== nextProps.value) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.nextFrameActionId) &#123;</span><br><span class="line">        clearNextFrameAction(<span class="keyword">this</span>.nextFrameActionId);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.nextFrameActionId = onNextFrame(<span class="keyword">this</span>.resizeTextarea);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  resizeTextarea = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; autosize &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">if</span> (!autosize || !<span class="keyword">this</span>.textAreaRef) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> minRows = autosize ? (autosize <span class="keyword">as</span> AutoSizeType).minRows : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">const</span> maxRows = autosize ? (autosize <span class="keyword">as</span> AutoSizeType).maxRows : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">const</span> textareaStyles = calculateNodeHeight(<span class="keyword">this</span>.textAreaRef, <span class="literal">false</span>, minRows, maxRows);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; textareaStyles &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleTextareaChange = <span class="function">(<span class="params">e: React.ChangeEvent&lt;HTMLTextAreaElement&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="string">'value'</span> <span class="keyword">in</span> <span class="keyword">this</span>.props)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.resizeTextarea();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123; onChange &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">if</span> (onChange) &#123;</span><br><span class="line">      onChange(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 余略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h2><p>Search 组件基于 Input 组件制作，其特殊处理是在 inputInstance.onPressEnter 方法执行过程中调用 props.onSearch 方法，适用于远程搜索之类的场景；Search 组件还提供 props.enterButton 属性用于配置输入框的后缀图标，默认使用 search 图标，可渲染文本或按钮。实现请参考 ant design 源码。</p>
<h2 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h2><p>Group 组件主要以样式控制多个表单项组件 props.children 的成组渲染。实现请参考 ant design 源码。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>antd</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>react</tag>
        <tag>antd</tag>
      </tags>
  </entry>
  <entry>
    <title>http-proxy-middleware 源码解读</title>
    <url>/2018/11/11/frontend/%E5%B7%A5%E7%A8%8B%E5%8C%96/http-proxy-middleware%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>http-proxy-middleware 库借助于 <a href="http://xzfyu.com/2018/11/09/%E5%B7%A5%E7%A8%8B%E5%8C%96/node-http-proxy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/">node-http-proxy</a>，用于将 node 服务器接收到的请求转发到目标服务器，实现代理服务器的功能。</p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>可以推想，使用 node-http-proxy 创建代理服务器 proxyServer 后，通过全局注册的转发规则获取到客户端请求 req 需要发送到的目标地址，再通过调用 proxyServer.web, proxyServer.ws 方法转发请求。</p>
<h3 id="转发规则"><a href="#转发规则" class="headerlink" title="转发规则"></a>转发规则</h3><p>从原理层面简单的归纳转发规则，就是客户端请求路径到目标服务器地址的映射关系。node-http-proxy 库将转发规则分为两部分加以配置，context 用于匹配需要转发的客户端请求，options.target 用于设定目标服务器的 host；option.router 根据客户端请求重新设定目标服务器的 host（这样，根据不同的请求，可以设定多个目标服务器）；option.pathRewrite 用于辅助将客户端请求路径转化为目标服务器地址。</p>
<h4 id="context"><a href="#context" class="headerlink" title="context"></a>context</h4><p>context 表示待转发请求的目录名。当客户端请求以 context 起始时，则该请求将被转发。如 context 设置为 ‘/api’，客户端所有以 ‘/api’ 起始的请求都会被转发；默认值为 ‘/‘，意为客户端发送的所有请求都会被转发。node-http-proxy 库使用 createConfig 解析获得 context；matchContext 函数校验客户端请求是否需要转发。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析获取 context，需要代理的请求 url 前缀</span></span><br><span class="line"><span class="comment"> * @param &#123;string|object|function&#125; context 作为 HttpProxyMiddleware 接口传入 createConfig 函数的参数</span></span><br><span class="line"><span class="comment"> * @param &#123;undefined|object&#125; opts 作为 HttpProxyMiddleware 接口传入 createConfig 函数的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createConfig</span> (<span class="params">context, opts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = &#123;</span><br><span class="line">    context: <span class="literal">undefined</span>,</span><br><span class="line">    options: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// context 作为 opts 传入，config.context 使用默认值</span></span><br><span class="line">  <span class="keyword">if</span> (isContextless(context, opts)) &#123;</span><br><span class="line">    config.context = <span class="string">'/'</span></span><br><span class="line">    config.options = _.assign(config.options, context)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// context 以 url 形式配置，可同时配置 context, options.target</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isStringShortHand(context)) &#123;</span><br><span class="line">    <span class="keyword">var</span> oUrl = url.parse(context)</span><br><span class="line">    <span class="keyword">var</span> target = [oUrl.protocol, <span class="string">'//'</span>, oUrl.host].join(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">    config.context = oUrl.pathname || <span class="string">'/'</span></span><br><span class="line">    config.options = _.assign(config.options, &#123; <span class="attr">target</span>: target &#125;, opts)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oUrl.protocol === <span class="string">'ws:'</span> || oUrl.protocol === <span class="string">'wss:'</span>) &#123;</span><br><span class="line">      config.options.ws = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    config.context = context</span><br><span class="line">    config.options = _.assign(config.options, opts)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置 Logger 实例</span></span><br><span class="line">  configureLogger(config.options)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!config.options.target) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(ERRORS.ERR_CONFIG_FACTORY_TARGET_MISSING)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析获取 context，需要代理的请求 url 前缀</span></span><br><span class="line"><span class="comment"> * @param &#123;string|function&#125; context 需要代理的请求 url 前缀</span></span><br><span class="line"><span class="comment"> * @param &#123;object&#125; uri 客户端请求的 uri，即 req.originalUrl 或 req.url</span></span><br><span class="line"><span class="comment"> * @param &#123;object&#125; req 客户端请求 req</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matchContext</span> (<span class="params">context, uri, req</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// context 为字符串路径，校验 url 是否以 context 起始</span></span><br><span class="line">  <span class="keyword">if</span> (isStringPath(context)) &#123;</span><br><span class="line">    <span class="keyword">return</span> matchSingleStringPath(context, uri)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// context 为 glob 模式的字符串路径（通过 is-glob 模块判断），校验  url 是否匹配 context（通过 micromatch 判断）</span></span><br><span class="line">  <span class="comment">// [glob 介绍](https://blog.csdn.net/Free_Wind22/article/details/78344166)</span></span><br><span class="line">  <span class="keyword">if</span> (isGlobPath(context)) &#123;</span><br><span class="line">    <span class="keyword">return</span> matchSingleGlobPath(context, uri)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历 context，调用 matchSingleStringPath, matchSingleGlobPath 作校验</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(context)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (context.every(isStringPath)) &#123;</span><br><span class="line">      <span class="keyword">return</span> matchMultiPath(context, uri)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (context.every(isGlobPath)) &#123;</span><br><span class="line">      <span class="keyword">return</span> matchMultiGlobPath(context, uri)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(ERRORS.ERR_CONTEXT_MATCHER_INVALID_ARRAY)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// context 自定义函数，用于校验客户端请求是否需要转发</span></span><br><span class="line">  <span class="keyword">if</span> (_.isFunction(context)) &#123;</span><br><span class="line">    <span class="keyword">var</span> pathname = getUrlPathName(uri)</span><br><span class="line">    <span class="keyword">return</span> context(pathname, req)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(ERRORS.ERR_CONTEXT_MATCHER_GENERIC)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="target"><a href="#target" class="headerlink" title="target"></a>target</h4><p>target 表示目标服务器的 host。在 createConfig 函数的源码中，可以看到，target 即能通过 url 形式的 context 设定，又能通过 options.target 选项设定。当然，这样是作为全局配置设定的；同 node-http-proxy 库，http-proxy-middleware 也可以在具体的请求发生时作特殊处理。这后半分的内容，是通过全局配置 options.router 达成的。在 http-proxy-middleware 处理客户端请求的过程中，getTarget 函数将通过 options.router 获取目标服务器的 host。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取目标服务器的 host</span></span><br><span class="line"><span class="comment"> * @param &#123;object&#125; req 客户端请求 req</span></span><br><span class="line"><span class="comment"> * @param &#123;object&#125; config 即 HttpProxyMiddleware 接口的 options 参数，获取 options.router</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTarget</span> (<span class="params">req, config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newTarget</span><br><span class="line">  <span class="keyword">var</span> router = config.router</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (_.isPlainObject(router)) &#123;</span><br><span class="line">    newTarget = getTargetFromProxyTable(req, router)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_.isFunction(router)) &#123;</span><br><span class="line">    newTarget = router(req)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newTarget</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTargetFromProxyTable</span> (<span class="params">req, table</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result</span><br><span class="line">  <span class="keyword">var</span> host = req.headers.host</span><br><span class="line">  <span class="keyword">var</span> path = req.url</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> hostAndPath = host + path<span class="comment">// 客户端请求路径</span></span><br><span class="line"></span><br><span class="line">  _.forIn(table, <span class="function"><span class="keyword">function</span> (<span class="params">value, key</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// containsPath(str) 函数，判断 str 是否包含 '/'</span></span><br><span class="line">    <span class="keyword">if</span> (containsPath(key)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (hostAndPath.indexOf(key) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        result = table[key]</span><br><span class="line">        logger.debug(<span class="string">'[HPM] Router table match: "%s"'</span>, key)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (key === host) &#123;</span><br><span class="line">        result = table[key]</span><br><span class="line">        logger.debug(<span class="string">'[HPM] Router table match: "%s"'</span>, host)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="pathRewrite"><a href="#pathRewrite" class="headerlink" title="pathRewrite"></a>pathRewrite</h4><p>在 http-proxy-middleware 库中，options.pathRewrite 用于将客户端请求路径转化为目标服务器的路径（pathname 部分），既可以是 map 映射，也可以函数。createPathRewriter 函数将根据 options.pathRewrite 生成路径转化器 pathRewriter 函数；而 pathRewriter 用于将实际的客户端请求地址转化为目标服务器的路径。当 options.pathRewrite 为对象 key-value 时，pathRewriter 将把匹配 key 的客户端请求转化为 value 路径；当 options.pathRewrite 为函数时，将由客户端请求 req.url 获取目标服务器路径。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成 pathRewriter 函数</span></span><br><span class="line"><span class="comment"> * @param &#123;object|function&#125; rewriteConfig 即 HttpProxyMiddleware 接口的 options.pathRewrite 配置项</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPathRewriter</span> (<span class="params">rewriteConfig</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> rulesCache</span><br><span class="line"></span><br><span class="line">  <span class="comment">// isValidRewriteConfig 函数用于校验 options.pathRewrite</span></span><br><span class="line">  <span class="keyword">if</span> (!isValidRewriteConfig(rewriteConfig)) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (_.isFunction(rewriteConfig)) &#123;</span><br><span class="line">    <span class="keyword">var</span> customRewriteFn = rewriteConfig</span><br><span class="line">    <span class="keyword">return</span> customRewriteFn</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    rulesCache = parsePathRewriteRules(rewriteConfig)</span><br><span class="line">    <span class="keyword">return</span> rewritePath</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 参数 path 为 req.url</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">rewritePath</span> (<span class="params">path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = path</span><br><span class="line"></span><br><span class="line">    _.forEach(rulesCache, <span class="function"><span class="keyword">function</span> (<span class="params">rule</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (rule.regex.test(path)) &#123;</span><br><span class="line">        result = result.replace(rule.regex, rule.value)</span><br><span class="line">        logger.debug(<span class="string">'[HPM] Rewriting path from "%s" to "%s"'</span>, path, result)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parsePathRewriteRules</span> (<span class="params">rewriteConfig</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> rules = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (_.isPlainObject(rewriteConfig)) &#123;</span><br><span class="line">    _.forIn(rewriteConfig, <span class="function"><span class="keyword">function</span> (<span class="params">value, key</span>) </span>&#123;</span><br><span class="line">      rules.push(&#123;</span><br><span class="line">        regex: <span class="keyword">new</span> <span class="built_in">RegExp</span>(key),</span><br><span class="line">        value: rewriteConfig[key]</span><br><span class="line">      &#125;)</span><br><span class="line">      logger.info(<span class="string">'[HPM] Proxy rewrite rule created: "%s" ~&gt; "%s"'</span>, key, rewriteConfig[key])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> rules</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h3><p>这部分将串联转发规则的解析和应用，是为 http-proxy-middleware 库的整体工作流程。</p>
<ol>
<li>解析 context，options 配置，获得全局注册的 context, options.target；并配置 Logger 实例。</li>
<li>使用 node-http-proxy 库常见代理服务器 proxy。</li>
<li>根据 options.pathRewrite 生成路径转化器 pathRewriter。</li>
<li>为代理服务器绑定事件。</li>
<li>创建转发 http, https, websocket 请求的代理中间件。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HttpProxyMiddleware</span> (<span class="params">context, opts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// https://github.com/chimurai/http-proxy-middleware/issues/57</span></span><br><span class="line">  <span class="keyword">var</span> wsUpgradeDebounced = _.debounce(handleUpgrade)</span><br><span class="line">  <span class="keyword">var</span> wsInitialized = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">var</span> config = configFactory.createConfig(context, opts)</span><br><span class="line">  <span class="keyword">var</span> proxyOptions = config.options</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> proxy = httpProxy.createProxyServer(&#123;&#125;)</span><br><span class="line">  logger.info(<span class="string">'[HPM] Proxy created:'</span>, config.context, <span class="string">' -&gt; '</span>, proxyOptions.target)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> pathRewriter = PathRewriter.create(proxyOptions.pathRewrite)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 为代理服务器绑定事件</span></span><br><span class="line">  handlers.init(proxy, proxyOptions)</span><br><span class="line"></span><br><span class="line">  proxy.on(<span class="string">'error'</span>, logError)</span><br><span class="line"></span><br><span class="line">  middleware.upgrade = wsUpgradeDebounced</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> middleware</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实际的代理中间件</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">middleware</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (shouldProxy(config.context, req)) &#123;</span><br><span class="line">      <span class="keyword">var</span> activeProxyOptions = prepareProxyRequest(req)</span><br><span class="line">      proxy.web(req, res, activeProxyOptions)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (proxyOptions.ws === <span class="literal">true</span>) &#123;</span><br><span class="line">      catchUpgradeRequest(req.connection.server)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">catchUpgradeRequest</span> (<span class="params">server</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!wsInitialized) &#123;</span><br><span class="line">      server.on(<span class="string">'upgrade'</span>, wsUpgradeDebounced)</span><br><span class="line">      wsInitialized = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转发 websocket 请求</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleUpgrade</span> (<span class="params">req, socket, head</span>) </span>&#123;</span><br><span class="line">    wsInitialized = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (shouldProxy(config.context, req)) &#123;</span><br><span class="line">      <span class="keyword">var</span> activeProxyOptions = prepareProxyRequest(req)</span><br><span class="line">      proxy.ws(req, socket, head, activeProxyOptions)</span><br><span class="line">      logger.info(<span class="string">'[HPM] Upgrading to WebSocket'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断请求是否需要转发</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">shouldProxy</span> (<span class="params">context, req</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> path = (req.originalUrl || req.url)</span><br><span class="line">    <span class="keyword">return</span> contextMatcher.match(context, path, req)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转发请求</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">prepareProxyRequest</span> (<span class="params">req</span>) </span>&#123;</span><br><span class="line">    req.url = (req.originalUrl || req.url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> originalPath = req.url</span><br><span class="line">    <span class="keyword">var</span> newProxyOptions = _.assign(&#123;&#125;, proxyOptions)</span><br><span class="line"></span><br><span class="line">    __applyRouter(req, newProxyOptions)</span><br><span class="line">    __applyPathRewrite(req, pathRewriter)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (proxyOptions.logLevel === <span class="string">'debug'</span>) &#123;</span><br><span class="line">      <span class="comment">// getArrow 返回的标识，用于区分 options.router, options.pathRewrite 的作用与否</span></span><br><span class="line">      <span class="comment">// '-&gt;' options.router, options.pathRewrite 均未作用</span></span><br><span class="line">      <span class="comment">// '=&gt;' options.router 作用, options.pathRewrite 未作用</span></span><br><span class="line">      <span class="comment">// '~&gt;' options.router 未作用, options.pathRewrite 作用</span></span><br><span class="line">      <span class="comment">// '≈&gt;' options.router, options.pathRewrite 均作用</span></span><br><span class="line">      <span class="keyword">var</span> arrow = getArrow(originalPath, req.url, proxyOptions.target, newProxyOptions.target)</span><br><span class="line">      logger.debug(<span class="string">'[HPM] %s %s %s %s'</span>, req.method, originalPath, arrow, newProxyOptions.target)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newProxyOptions</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据请求获取目标服务器的 host</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__applyRouter</span> (<span class="params">req, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newTarget</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (options.router) &#123;</span><br><span class="line">      newTarget = Router.getTarget(req, options)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (newTarget) &#123;</span><br><span class="line">        logger.debug(<span class="string">'[HPM] Router new target: %s -&gt; "%s"'</span>, options.target, newTarget)</span><br><span class="line">        options.target = newTarget</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将目标服务器路径写入 req.url</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__applyPathRewrite</span> (<span class="params">req, pathRewriter</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pathRewriter) &#123;</span><br><span class="line">      <span class="keyword">var</span> path = pathRewriter(req.url, req)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> path === <span class="string">'string'</span>) &#123;</span><br><span class="line">        req.url = path</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.info(<span class="string">'[HPM] pathRewrite: No rewritten path found. (%s)'</span>, req.url)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">logError</span> (<span class="params">err, req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hostname = (req.headers &amp;&amp; req.headers.host) || (req.hostname || req.host)</span><br><span class="line">    <span class="keyword">var</span> target = proxyOptions.target.host || proxyOptions.target</span><br><span class="line">    <span class="keyword">var</span> errorMessage = <span class="string">'[HPM] Error occurred while trying to proxy request %s from %s to %s (%s) (%s)'</span></span><br><span class="line">    <span class="keyword">var</span> errReference = <span class="string">'https://nodejs.org/api/errors.html#errors_common_system_errors'</span></span><br><span class="line"></span><br><span class="line">    logger.error(errorMessage, req.url, hostname, target, err.code, errReference)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="logger"><a href="#logger" class="headerlink" title="logger"></a>logger</h4><p>http-proxy-middleware 库使用单例模式创建 Logger 实例，并提供 setProvider 函数切换打印日志的 console 函数；setLevel 方法用于设定日志级别；继而由 Logger 实例提供 log, error, info, warn, debug 方法，这些方法在调用过程都会校验当前执行的方法是否符合当前日志级别，同时会允许首参以 %s 设定占位符，以注入次参等。</p>
<p>因日志模块在 node 服务器中广为应用，这里贴出 http-proxy-middleware 库中的代码实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> loggerInstance</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> defaultProvider = &#123;</span><br><span class="line">  log: <span class="built_in">console</span>.log,</span><br><span class="line">  debug: <span class="built_in">console</span>.log, </span><br><span class="line">  info: <span class="built_in">console</span>.info,</span><br><span class="line">  warn: <span class="built_in">console</span>.warn,</span><br><span class="line">  error: <span class="built_in">console</span>.error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> LEVELS = &#123;</span><br><span class="line">  debug: <span class="number">10</span>,</span><br><span class="line">  info: <span class="number">20</span>,</span><br><span class="line">  warn: <span class="number">30</span>,</span><br><span class="line">  error: <span class="number">50</span>,</span><br><span class="line">  silent: <span class="number">80</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Logger</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> logLevel</span><br><span class="line">  <span class="keyword">var</span> provider</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> api = &#123;</span><br><span class="line">    log: log,</span><br><span class="line">    debug: debug,</span><br><span class="line">    info: info,</span><br><span class="line">    warn: warn,</span><br><span class="line">    error: error,</span><br><span class="line">    setLevel: <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (isValidLevel(v)) &#123;<span class="comment">// isValidLevel 校验 v 是否 debug, info, warn, error, slient 中的一个</span></span><br><span class="line">        logLevel = v</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    setProvider: <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (fn &amp;&amp; isValidProvider(fn)) &#123;<span class="comment">// isValidProvider 校验 fn 是否函数</span></span><br><span class="line">        provider = fn(defaultProvider)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> api</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">init</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    api.setLevel(<span class="string">'info'</span>)</span><br><span class="line">    api.setProvider(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> defaultProvider</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">log</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    provider.log(_interpolate.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">debug</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_showLevel(<span class="string">'debug'</span>)) &#123;</span><br><span class="line">      provider.debug(_interpolate.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">info</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_showLevel(<span class="string">'info'</span>)) &#123;</span><br><span class="line">      provider.info(_interpolate.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">warn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_showLevel(<span class="string">'warn'</span>)) &#123;</span><br><span class="line">      provider.warn(_interpolate.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">error</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_showLevel(<span class="string">'error'</span>)) &#123;</span><br><span class="line">      provider.error(_interpolate.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 校验调用的方法是否在当前允许的日志级别下</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_showLevel</span> (<span class="params">showLevel</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> currentLogLevel = LEVELS[logLevel]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentLogLevel &amp;&amp; (currentLogLevel &lt;= LEVELS[showLevel])) &#123;</span><br><span class="line">      result = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 参数转化，允许首参以 %s 形式设置占位符</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_interpolate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fn = _.spread(util.format)</span><br><span class="line">    <span class="keyword">var</span> result = fn(_.slice(<span class="built_in">arguments</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  getInstance: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!loggerInstance) &#123;</span><br><span class="line">      loggerInstance = <span class="keyword">new</span> Logger()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> loggerInstance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><p>解析 options.onError, options.onProxyReq, options.onProxyReqWs, options.onProxyRes, options.onOpen, options.onClose，并绑定为代理服务器的事件。</p>
<p>默认的绑定函数为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// onError 绑定函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defaultErrorHandler</span> (<span class="params">err, req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> host = (req.headers &amp;&amp; req.headers.host)</span><br><span class="line">  <span class="keyword">var</span> code = err.code</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (res.writeHead &amp;&amp; !res.headersSent) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/HPE_INVALID/</span>.test(code)) &#123;</span><br><span class="line">      res.writeHead(<span class="number">502</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'ECONNRESET'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'ENOTFOUND'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'ECONNREFUSED'</span>:</span><br><span class="line">          res.writeHead(<span class="number">504</span>)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">default</span>: res.writeHead(<span class="number">500</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  res.end(<span class="string">'Error occured while trying to proxy to: '</span> + host + req.url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// onClose 绑定函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClose</span> (<span class="params">req, socket, head</span>) </span>&#123;</span><br><span class="line">  logger.info(<span class="string">'[HPM] Client disconnected'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h3><p>webpack-dev-server 库会创建 express 服务器，其服务器代理的实现就是解析配置项，并挂载 http-proxy-middleware 中间件。主要逻辑在 features.proxy 方法中实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> features = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  proxy: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (options.proxy) &#123;</span><br><span class="line">      <span class="comment">// 解析配置</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(options.proxy)) &#123;</span><br><span class="line">        options.proxy = <span class="built_in">Object</span>.keys(options.proxy).map(<span class="function">(<span class="params">context</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> proxyOptions;</span><br><span class="line">          <span class="keyword">const</span> correctedContext = context</span><br><span class="line">            .replace(<span class="regexp">/^\*$/</span>, <span class="string">'**'</span>)</span><br><span class="line">            .replace(<span class="regexp">/\/\*$/</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> options.proxy[context] === <span class="string">'string'</span>) &#123;</span><br><span class="line">            proxyOptions = &#123;</span><br><span class="line">              context: correctedContext,</span><br><span class="line">              target: options.proxy[context]</span><br><span class="line">            &#125;;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            proxyOptions = <span class="built_in">Object</span>.assign(&#123;&#125;, options.proxy[context]);</span><br><span class="line">            proxyOptions.context = correctedContext;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 日志级别</span></span><br><span class="line">          proxyOptions.logLevel = proxyOptions.logLevel || <span class="string">'warn'</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> proxyOptions;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获得 proxy 中间件</span></span><br><span class="line">      <span class="keyword">const</span> getProxyMiddleware = <span class="function">(<span class="params">proxyConfig</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> context = proxyConfig.context || proxyConfig.path;</span><br><span class="line">        <span class="keyword">if</span> (proxyConfig.target) &#123;</span><br><span class="line">          <span class="keyword">return</span> httpProxyMiddleware(context, proxyConfig);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 以配置项挂载多个中间件</span></span><br><span class="line">      options.proxy.forEach(<span class="function">(<span class="params">proxyConfigOrCallback</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> proxyConfig;</span><br><span class="line">        <span class="keyword">let</span> proxyMiddleware;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> proxyConfigOrCallback === <span class="string">'function'</span>) &#123;</span><br><span class="line">          proxyConfig = proxyConfigOrCallback();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          proxyConfig = proxyConfigOrCallback;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        proxyMiddleware = getProxyMiddleware(proxyConfig);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (proxyConfig.ws) &#123;</span><br><span class="line">          websocketProxies.push(proxyMiddleware);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> proxyConfigOrCallback === <span class="string">'function'</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> newProxyConfig = proxyConfigOrCallback();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (newProxyConfig !== proxyConfig) &#123;</span><br><span class="line">              proxyConfig = newProxyConfig;</span><br><span class="line">              proxyMiddleware = getProxyMiddleware(proxyConfig);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">const</span> bypass = <span class="keyword">typeof</span> proxyConfig.bypass === <span class="string">'function'</span>;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">const</span> bypassUrl = (bypass &amp;&amp; proxyConfig.bypass(req, res, proxyConfig)) || <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 转发到本地服务器</span></span><br><span class="line">          <span class="keyword">if</span> (bypassUrl) &#123;</span><br><span class="line">            req.url = bypassUrl;</span><br><span class="line"></span><br><span class="line">            next();</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (proxyMiddleware) &#123;</span><br><span class="line">            <span class="keyword">return</span> proxyMiddleware(req, res, next);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>frontend</category>
        <category>前端工程化</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>适配器模式</title>
    <url>/2018/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>计算机科学</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>analyst</tag>
      </tags>
  </entry>
  <entry>
    <title>node-http-proxy 源码解读</title>
    <url>/2018/11/09/frontend/%E5%B7%A5%E7%A8%8B%E5%8C%96/node-http-proxy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>node-http-proxy 模块用于转发 http 请求，其实现的大致原理为使用 http 或 https 模块搭建 node 代理服务器，将客户端发送的请求数据转发到目标服务器，再将响应输送到客户端。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h3><p>同 koa 的中间件机制相仿，node-http-proxy 模块内部组装任务队列，在请求转发的过程中，将任务队列中的处理函数逐个执行。处理函数的意义通常是封装消息头，当然，最后一个处理函数用于转发请求、输出响应。</p>
<p>同常见的 ajax 模块，node-http-proxy 模块接受全局配置的 options，同时，在某个具体的请求中，又接受特定的配置项 opts。而客户端发送的请求可能是 http, https 请求，也可能是 websocket 请求，node-http-proxy 模块必须实现对这两类请求的不同处理。</p>
<p>上述三点，实际的代码体现在 createRightProxy 高阶函数中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数 type 用于区分请求类型，'web' 为普通 http, https 请求，'ws' 为 websocket 请求</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRightProxy</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 参数 options 为全局配置项</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">req, res <span class="regexp">/*, [head], [opts] */</span></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// passes 任务队列</span></span><br><span class="line">      <span class="keyword">var</span> passes = (type === <span class="string">'ws'</span>) ? <span class="keyword">this</span>.wsPasses : <span class="keyword">this</span>.webPasses,</span><br><span class="line">          args = [].slice.call(<span class="built_in">arguments</span>),</span><br><span class="line">          cntr = args.length - <span class="number">1</span>,</span><br><span class="line">          head, cbl;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 解析回调函数</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">typeof</span> args[cntr] === <span class="string">'function'</span>) &#123;</span><br><span class="line">        cbl = args[cntr];</span><br><span class="line">        cntr--;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 混入该请求中特定的配置项 opts</span></span><br><span class="line">      <span class="keyword">var</span> requestOptions = options;</span><br><span class="line">      <span class="keyword">if</span>(</span><br><span class="line">        !(args[cntr] <span class="keyword">instanceof</span> Buffer) &amp;&amp;</span><br><span class="line">        args[cntr] !== res</span><br><span class="line">      ) &#123;</span><br><span class="line">        requestOptions = extend(&#123;&#125;, options);</span><br><span class="line">        extend(requestOptions, args[cntr]);</span><br><span class="line">        cntr--;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// head</span></span><br><span class="line">      <span class="keyword">if</span>(args[cntr] <span class="keyword">instanceof</span> Buffer) &#123;</span><br><span class="line">        head = args[cntr];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 请求的目标地址</span></span><br><span class="line">      [<span class="string">'target'</span>, <span class="string">'forward'</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> requestOptions[e] === <span class="string">'string'</span>)</span><br><span class="line">          requestOptions[e] = parse_url(requestOptions[e]);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!requestOptions.target &amp;&amp; !requestOptions.forward) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.emit(<span class="string">'error'</span>, <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Must provide a proper URL as target'</span>));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 挨个执行任务队列，处理消息头，转发请求</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; passes.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(passes[i](req, res, requestOptions, head, <span class="keyword">this</span>, cbl)) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因此，createRightProxy(‘web’)(options), createRightProxy(‘ws’)(options) 就能用于创建实际的请求转发函数。在 node-http-proxy 模块中，这两个函数分别表现为 ProxyServer 实例的 web, ws 方法。其中，proxyServer.web 方法作为 http 或 https 服务器 listen 方法的回调函数，proxyServer.ws 方法作为 ‘upgrade’ 事件的绑定函数，从而能对接上客户端 ajax 请求、websocket 请求的执行时机。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ProxyServer</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建转发 http, https; websocket 请求的处理函数</span></span><br><span class="line">  <span class="keyword">this</span>.web = <span class="keyword">this</span>.proxyRequest           = createRightProxy(<span class="string">'web'</span>)(options);</span><br><span class="line">  <span class="keyword">this</span>.ws  = <span class="keyword">this</span>.proxyWebsocketRequest  = createRightProxy(<span class="string">'ws'</span>)(options);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 任务队列，用于处理消息头、转发请求</span></span><br><span class="line">  <span class="keyword">this</span>.webPasses = <span class="built_in">Object</span>.keys(web).map(<span class="function"><span class="keyword">function</span>(<span class="params">pass</span>) </span>&#123;<span class="comment">// this.web 方法执行过程中调用的任务队列</span></span><br><span class="line">    <span class="keyword">return</span> web[pass];</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.wsPasses = <span class="built_in">Object</span>.keys(ws).map(<span class="function"><span class="keyword">function</span>(<span class="params">pass</span>) </span>&#123;<span class="comment">// this.ws 方法执行过程中调用的任务队列</span></span><br><span class="line">    <span class="keyword">return</span> ws[pass];</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ProxyServer.prototype.listen = <span class="function"><span class="keyword">function</span>(<span class="params">port, hostname</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self    = <span class="keyword">this</span>,</span><br><span class="line">      closure = <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123; self.web(req, res); &#125;;<span class="comment">// 转发 http, https 请求</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>._server  = <span class="keyword">this</span>.options.ssl ?</span><br><span class="line">    https.createServer(<span class="keyword">this</span>.options.ssl, closure) :</span><br><span class="line">    http.createServer(closure);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转发 websocket 请求</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.options.ws) &#123;</span><br><span class="line">    <span class="keyword">this</span>._server.on(<span class="string">'upgrade'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, socket, head</span>) </span>&#123; self.ws(req, socket, head); &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>._server.listen(port, hostname);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>以上不涉及任务队列的具体实现，却构成了 node-http-proxy 模块整体处理流程。除外而外，ProxyServer 还提供 before(type, passName, callback), after(type, passName, callback) 原型方法，用于在任务队列的某个具体处理函数之前或之后插入一个处理函数 callback。</p>
<h3 id="http-https-请求"><a href="#http-https-请求" class="headerlink" title="http, https 请求"></a>http, https 请求</h3><p>this.webPasses 任务队列包含如下四种处理函数：deleteLength, timeout, XHeaders, stream。</p>
<ol>
<li>deleteLength 函数：针对 DELETE 或 OPTIONS，且 headers[‘content-length’] 未设置的情形，将 headers[‘content-length’] 置为 0，并删除 headers[‘transfer-encoding’] 消息头。</li>
<li>timeout 函数：若设置了 options.timeout，调用 req.socket.setTimeout(options.timeout) 设置超时时间。</li>
<li>XHeaders 函数：设置 ‘x-forwarded-for’, ‘x-forwarded-port’, ‘x-forwarded-proto’, ‘x-forwarded-host’ 消息头，包含客户端和代理服务器的地址、端口、协议等内容（以 ‘,’ 拼接 req.headers 同名属性即客户端内容、和代理服务器内容）。其中，’x-forwarded-host’ 消息头只包含 req.headers.host，即代理服务器的主机名。由配置项 options.xfwd 启用 ‘x-forwarded-*’ 消息头的设置。</li>
<li>stream 函数：实际转发请求的处理函数。下文将作详解。</li>
</ol>
<p>stream 函数的处理流程为：</p>
<ol>
<li>调用 common.setupOutgoing 方法生成代理请求的配置项。</li>
<li>通过 options.forward, options.target 区分 ‘forward’ 和 ‘target’ 两种模式。在 ‘forward’ 模式下，只通过代理请求转发到目标服务器，输送给客户端的仍是代理服务器的响应。’target’ 模式下，不只可以处理目标服务器的响应，且可监听许多事件对代理请求等作出处理。’forward’ 和 ‘target’ 模式可以并行存在，即同时指定 options.forward, options.target。</li>
</ol>
<p>首先，common.setupOutgoing 的实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成代理请求的配置项，将作为 http.request 的参数</span></span><br><span class="line"><span class="comment"> * @param &#123;object&#125; outgoing 即 options.ssl 或 &#123;&#125;</span></span><br><span class="line"><span class="comment"> * @param &#123;object&#125; options 即 options</span></span><br><span class="line"><span class="comment"> * @param &#123;object&#125; req 即实际的请求</span></span><br><span class="line"><span class="comment"> * @param &#123;string|undefined&#125; forward 用于区分 'forward' 和 'target' 模式。值为 'forward' 或 undefined</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">common.setupOutgoing = <span class="function"><span class="keyword">function</span>(<span class="params">outgoing, options, req, forward</span>) </span>&#123;</span><br><span class="line">  outgoing.port = options[forward || <span class="string">'target'</span>].port ||</span><br><span class="line">                  (isSSL.test(options[forward || <span class="string">'target'</span>].protocol) ? <span class="number">443</span> : <span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// http://nodejs.cn/api/http.html#http_http_request_options_callback</span></span><br><span class="line">  <span class="comment">// host, host: 目标服务器的域名或 IP 地址</span></span><br><span class="line">  <span class="comment">// socketPath: Unix 域 Socket（使用 host:port 或 socketPath）</span></span><br><span class="line">  <span class="comment">// ca: ca 证书</span></span><br><span class="line">  [<span class="string">'host'</span>, <span class="string">'hostname'</span>, <span class="string">'socketPath'</span>, <span class="string">'pfx'</span>, <span class="string">'key'</span>,</span><br><span class="line">    <span class="string">'passphrase'</span>, <span class="string">'cert'</span>, <span class="string">'ca'</span>, <span class="string">'ciphers'</span>, <span class="string">'secureProtocol'</span>].forEach(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; outgoing[e] = options[forward || <span class="string">'target'</span>][e]; &#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 请求方法</span></span><br><span class="line">  outgoing.method = options.method || req.method;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 请求头</span></span><br><span class="line">  outgoing.headers = extend(&#123;&#125;, req.headers);</span><br><span class="line">  <span class="keyword">if</span> (options.headers)&#123;</span><br><span class="line">    extend(outgoing.headers, options.headers);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 基本身份验证，如 'user:password' 用来计算 Authorization 请求头</span></span><br><span class="line">  <span class="keyword">if</span> (options.auth) &#123;</span><br><span class="line">    outgoing.auth = options.auth;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (options.ca) &#123;</span><br><span class="line">    outgoing.ca = options.ca;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isSSL.test(options[forward || <span class="string">'target'</span>].protocol)) &#123;</span><br><span class="line">    outgoing.rejectUnauthorized = (<span class="keyword">typeof</span> options.secure === <span class="string">"undefined"</span>) ? <span class="literal">true</span> : options.secure;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// http://nodejs.cn/api/http.html#http_new_agent_options</span></span><br><span class="line">  <span class="comment">// 长连接时设置 options.agent = &#123; keepAlive, keepAliveMsecs &#125;</span></span><br><span class="line">  outgoing.agent = options.agent || <span class="literal">false</span>;</span><br><span class="line">  outgoing.localAddress = options.localAddress;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不是长连接，设置 outgoing.headers.connection 请求头</span></span><br><span class="line">  <span class="keyword">if</span> (!outgoing.agent) &#123;</span><br><span class="line">    outgoing.headers = outgoing.headers || &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> outgoing.headers.connection !== <span class="string">'string'</span></span><br><span class="line">        || !upgradeHeader.test(outgoing.headers.connection)</span><br><span class="line">       ) &#123; outgoing.headers.connection = <span class="string">'close'</span>; &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最终的请求路径由 options['forward'|'target'], req.url 拼接产生，可根据 options 配置设定某项是否启用</span></span><br><span class="line">  <span class="keyword">var</span> target = options[forward || <span class="string">'target'</span>];</span><br><span class="line">  <span class="keyword">var</span> targetPath = target &amp;&amp; options.prependPath !== <span class="literal">false</span></span><br><span class="line">    ? (target.path || <span class="string">''</span>) : <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">var</span> outgoingPath = !options.toProxy</span><br><span class="line">    ? (url.parse(req.url).path || <span class="string">''</span>) : req.url;</span><br><span class="line">  outgoingPath = !options.ignorePath ? outgoingPath : <span class="string">''</span>;</span><br><span class="line">  outgoing.path = common.urlJoin(targetPath, outgoingPath);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (options.changeOrigin) &#123;</span><br><span class="line">    outgoing.headers.host =</span><br><span class="line">      <span class="comment">// 通过 requires-port 模块校验在使用某种协议的情况下，是否需要在 url 上拼接端口号</span></span><br><span class="line">      required(outgoing.port, options[forward || <span class="string">'target'</span>].protocol) &amp;&amp; !hasPort(outgoing.host)</span><br><span class="line">        ? outgoing.host + <span class="string">':'</span> + outgoing.port</span><br><span class="line">        : outgoing.host;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> outgoing;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>其次，stream 的实现如下：</p>
<ol>
<li>调用 [http|https].request(outgoing) 创建代理请求。outgoing 由 common.setupOutgoing 函数获得。</li>
<li>调用 (options.buffer || req).pipe(forwardReq) 方法转发代理请求。</li>
<li>target 模式下，调用 web-outgoing 模块中的函数处理代理响应。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stream</span>(<span class="params">req, res, options, _, server, clb</span>) </span>&#123;</span><br><span class="line">  server.emit(<span class="string">'start'</span>, req, res, options.target || options.forward);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// options.followRedirects 是否使用 follow-redirects 重定向</span></span><br><span class="line">  <span class="keyword">var</span> agents = options.followRedirects ? followRedirects : nativeAgents;</span><br><span class="line">  <span class="keyword">var</span> http = agents.http;</span><br><span class="line">  <span class="keyword">var</span> https = agents.https;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(options.forward) &#123;</span><br><span class="line">    <span class="comment">// 生成代理请求</span></span><br><span class="line">    <span class="keyword">var</span> forwardReq = (options.forward.protocol === <span class="string">'https:'</span> ? https : http).request(</span><br><span class="line">      common.setupOutgoing(options.ssl || &#123;&#125;, options, req, <span class="string">'forward'</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> forwardError = createErrorHandler(forwardReq, options.forward);</span><br><span class="line">    req.on(<span class="string">'error'</span>, forwardError);</span><br><span class="line">    forwardReq.on(<span class="string">'error'</span>, forwardError);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转发代理请求</span></span><br><span class="line">    (options.buffer || req).pipe(forwardReq);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非 target 模式，返回响应</span></span><br><span class="line">    <span class="keyword">if</span>(!options.target) &#123; <span class="keyword">return</span> res.end(); &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生成代理请求</span></span><br><span class="line">  <span class="keyword">var</span> proxyReq = (options.target.protocol === <span class="string">'https:'</span> ? https : http).request(</span><br><span class="line">    common.setupOutgoing(options.ssl || &#123;&#125;, options, req)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  proxyReq.on(<span class="string">'socket'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(server) &#123; server.emit(<span class="string">'proxyReq'</span>, proxyReq, req, res, options); &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(options.proxyTimeout) &#123;</span><br><span class="line">    proxyReq.setTimeout(options.proxyTimeout, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        proxyReq.abort();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  req.on(<span class="string">'aborted'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    proxyReq.abort();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> proxyError = createErrorHandler(proxyReq, options.target);</span><br><span class="line">  req.on(<span class="string">'error'</span>, proxyError);</span><br><span class="line">  proxyReq.on(<span class="string">'error'</span>, proxyError);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createErrorHandler</span>(<span class="params">proxyReq, url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">proxyError</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (req.socket.destroyed &amp;&amp; err.code === <span class="string">'ECONNRESET'</span>) &#123;</span><br><span class="line">        server.emit(<span class="string">'econnreset'</span>, err, req, res, url);</span><br><span class="line">        <span class="keyword">return</span> proxyReq.abort();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (clb) &#123;</span><br><span class="line">        clb(err, req, res, url);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        server.emit(<span class="string">'error'</span>, err, req, res, url);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转发代理请求</span></span><br><span class="line">  (options.buffer || req).pipe(proxyReq);</span><br><span class="line"></span><br><span class="line">  proxyReq.on(<span class="string">'response'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">proxyRes</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(server) &#123; server.emit(<span class="string">'proxyRes'</span>, proxyRes, req, res); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 web-outgoing 模块中的函数处理代理响应</span></span><br><span class="line">    <span class="keyword">if</span>(!res.headersSent &amp;&amp; !options.selfHandleResponse) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; web_o.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(web_o[i](req, res, proxyRes, options)) &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// http://nodejs.cn/api/http.html#http_response_finished</span></span><br><span class="line">    <span class="keyword">if</span> (!res.finished) &#123;</span><br><span class="line">      <span class="comment">// 通过事件处理代理响应</span></span><br><span class="line">      proxyRes.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (server) server.emit(<span class="string">'end'</span>, req, res, proxyRes);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 由 node-http-proxy 模块处理代理响应的情境下，返回响应</span></span><br><span class="line">      <span class="keyword">if</span> (!options.selfHandleResponse) proxyRes.pipe(res);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (server) server.emit(<span class="string">'end'</span>, req, res, proxyRes);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后，再来看一下 web-outgoing 模块对代理响应的处理（实现查看源码）：</p>
<ol>
<li>removeChunked 函数：当使用 http/1.0 时（通过 req.httpVersion === ‘1.0’ 判断，客户端决定），移除代理响应的 headers[‘transfer-encoding’]。</li>
<li>setConnection 函数：当使用 http/1.0 时，代理响应的 headers.connection 设为 req.headers.connection || ‘close’；当使用非 http/2.0 时，且 proxyRes.headers.connection 为否，将 代理响应的 headers.connection 设为 req.headers.connection || ‘keep-alive’。</li>
<li>setRedirectHostRewrite 函数：根据 options.hostRewrite 或 options.autoRewrite 或 options.protocolRewrite 重写重定向地址 proxyRes.headers.location。代理相应的状态码须匹配 /^201|30(1|2|7|8)$/ 正则，且 proxyRes.headers.location 须与目标服务器同域名。</li>
<li>writeHeaders 函数：将代理响应的消息头写入实际响应 res 的消息头中。下文将作详解。</li>
<li>writeStatusCode 函数：将代理响应的 statusCode, statusMessage 写入返回给客户端的响应 res 中。</li>
</ol>
<p>setRedirectHostRewrite 函数的代码实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeHeaders</span>(<span class="params">req, res, proxyRes, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> rewriteCookieDomainConfig = options.cookieDomainRewrite,</span><br><span class="line">      rewriteCookiePathConfig = options.cookiePathRewrite,</span><br><span class="line">      preserveHeaderKeyCase = options.preserveHeaderKeyCase,</span><br><span class="line">      rawHeaderKeyMap,</span><br><span class="line">      setHeader = <span class="function"><span class="keyword">function</span>(<span class="params">key, header</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (header == <span class="literal">undefined</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (rewriteCookieDomainConfig &amp;&amp; key.toLowerCase() === <span class="string">'set-cookie'</span>) &#123;</span><br><span class="line">          header = common.rewriteCookieProperty(header, rewriteCookieDomainConfig, <span class="string">'domain'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rewriteCookiePathConfig &amp;&amp; key.toLowerCase() === <span class="string">'set-cookie'</span>) &#123;</span><br><span class="line">          header = common.rewriteCookieProperty(header, rewriteCookiePathConfig, <span class="string">'path'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.setHeader(<span class="built_in">String</span>(key).trim(), header);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> rewriteCookieDomainConfig === <span class="string">'string'</span>) &#123; <span class="comment">//also test for ''</span></span><br><span class="line">    rewriteCookieDomainConfig = &#123; <span class="string">'*'</span>: rewriteCookieDomainConfig &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> rewriteCookiePathConfig === <span class="string">'string'</span>) &#123; <span class="comment">//also test for ''</span></span><br><span class="line">    rewriteCookiePathConfig = &#123; <span class="string">'*'</span>: rewriteCookiePathConfig &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// http://nodejs.cn/api/http.html#http_message_rawheaders</span></span><br><span class="line">  <span class="keyword">if</span> (preserveHeaderKeyCase &amp;&amp; proxyRes.rawHeaders != <span class="literal">undefined</span>) &#123;</span><br><span class="line">    rawHeaderKeyMap = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; proxyRes.rawHeaders.length; i += <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> key = proxyRes.rawHeaders[i];</span><br><span class="line">      rawHeaderKeyMap[key.toLowerCase()] = key;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.keys(proxyRes.headers).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> header = proxyRes.headers[key];</span><br><span class="line">    <span class="keyword">if</span> (preserveHeaderKeyCase &amp;&amp; rawHeaderKeyMap) &#123;</span><br><span class="line">      key = rawHeaderKeyMap[key] || key;</span><br><span class="line">    &#125;</span><br><span class="line">    setHeader(key, header);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 options.cookieDomainRewrite, options.cookiePathRewrite 重写 res.headers.cookie 中的 domain, path 属性</span></span><br><span class="line"><span class="comment">// cookie.domain 表示 cookie 所在的域</span></span><br><span class="line"><span class="comment">// cookie.path 表示 cookie 所在的目录</span></span><br><span class="line"><span class="comment">// 参考 [理解cookie的path和domain属性](https://www.cnblogs.com/chris-oil/p/3869803.html)</span></span><br><span class="line">common.rewriteCookieProperty = <span class="function"><span class="keyword">function</span> <span class="title">rewriteCookieProperty</span>(<span class="params">header, config, property</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(header)) &#123;</span><br><span class="line">    <span class="keyword">return</span> header.map(<span class="function"><span class="keyword">function</span> (<span class="params">headerElement</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> rewriteCookieProperty(headerElement, config, property);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> header.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(;\\s*"</span> + property + <span class="string">"=)([^;]+)"</span>, <span class="string">'i'</span>), <span class="function"><span class="keyword">function</span>(<span class="params">match, prefix, previousValue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newValue;</span><br><span class="line">    <span class="keyword">if</span> (previousValue <span class="keyword">in</span> config) &#123;</span><br><span class="line">      newValue = config[previousValue];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'*'</span> <span class="keyword">in</span> config) &#123;</span><br><span class="line">      newValue = config[<span class="string">'*'</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> match;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newValue) &#123;</span><br><span class="line">      <span class="keyword">return</span> prefix + newValue;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="websocket-请求"><a href="#websocket-请求" class="headerlink" title="websocket 请求"></a>websocket 请求</h3><p>this.wsPasses 任务队列包含如下四种处理函数：checkMethodAndHeader, XHeaders, stream。</p>
<ol>
<li>checkMethodAndHeader 函数：websocket 请求的请求方式必须是 get，且 headers.upgrade 请求头必须是 ‘websocket’，checkMethodAndHeader 函数用于校验请求方式和 headers.upgrade 请求头。</li>
<li>XHeaders 函数：设置 ‘x-forwarded-for’, ‘x-forwarded-port’, ‘x-forwarded-proto’ 消息头，包含客户端和代理服务器的地址、端口、协议等内容（以 ‘,’ 拼接 req.headers 同名属性即客户端内容、和代理服务器内容）。由配置项 options.xfwd 启用 ‘x-forwarded-*’ 消息头的设置。</li>
<li>stream 函数：实际转发请求的处理函数。下文将作详解。</li>
</ol>
<p>stream 函数的处理流程为：</p>
<ol>
<li>调用 common.setupOutgoing 方法生成代理请求的配置项。</li>
<li>调用 [http|https].request(outgoing) 创建代理请求 proxyReq。</li>
<li>调用 proxyReq.end 发送代理请求。 </li>
<li>监听 response 事件，修改消息头后将响应发送给客户端。</li>
<li>监听 upgrade 事件，更换协议后，调用 proxySocket.pipe(socket).pipe(proxySocket) 再次发送代理请求。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">common.setupSocket = <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</span><br><span class="line">  socket.setTimeout(<span class="number">0</span>);</span><br><span class="line">  socket.setNoDelay(<span class="literal">true</span>);</span><br><span class="line">  socket.setKeepAlive(<span class="literal">true</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> socket;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stream</span>(<span class="params">req, socket, options, head, server, clb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 添加请求头内容</span></span><br><span class="line">  <span class="keyword">var</span> createHttpHeader = <span class="function"><span class="keyword">function</span>(<span class="params">line, headers</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(headers).reduce(<span class="function"><span class="keyword">function</span> (<span class="params">head, key</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> value = headers[key];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">        head.push(key + <span class="string">': '</span> + value);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; value.length; i++) &#123;</span><br><span class="line">        head.push(key + <span class="string">': '</span> + value[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> head;</span><br><span class="line">    &#125;, [line])</span><br><span class="line">    .join(<span class="string">'\r\n'</span>) + <span class="string">'\r\n\r\n'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  common.setupSocket(socket);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (head &amp;&amp; head.length) socket.unshift(head);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建代理请求</span></span><br><span class="line">  <span class="keyword">var</span> proxyReq = (common.isSSL.test(options.target.protocol) ? https : http).request(</span><br><span class="line">    common.setupOutgoing(options.ssl || &#123;&#125;, options, req)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (server) &#123; server.emit(<span class="string">'proxyReqWs'</span>, proxyReq, req, socket, options, head); &#125;</span><br><span class="line"></span><br><span class="line">  proxyReq.on(<span class="string">'error'</span>, onOutgoingError);</span><br><span class="line">  proxyReq.on(<span class="string">'response'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 属性响应到客户端</span></span><br><span class="line">    <span class="keyword">if</span> (!res.upgrade) &#123;</span><br><span class="line">      socket.write(createHttpHeader(<span class="string">'HTTP/'</span> + res.httpVersion + <span class="string">' '</span> + res.statusCode + <span class="string">' '</span> + res.statusMessage, res.headers));</span><br><span class="line">      res.pipe(socket);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  proxyReq.on(<span class="string">'upgrade'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">proxyRes, proxySocket, proxyHead</span>) </span>&#123;</span><br><span class="line">    proxySocket.on(<span class="string">'error'</span>, onOutgoingError);</span><br><span class="line"></span><br><span class="line">    proxySocket.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      server.emit(<span class="string">'close'</span>, proxyRes, proxySocket, proxyHead);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    socket.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      proxySocket.end();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    common.setupSocket(proxySocket);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (proxyHead &amp;&amp; proxyHead.length) proxySocket.unshift(proxyHead);</span><br><span class="line"></span><br><span class="line">    socket.write(createHttpHeader(<span class="string">'HTTP/1.1 101 Switching Protocols'</span>, proxyRes.headers));</span><br><span class="line"></span><br><span class="line">    proxySocket.pipe(socket).pipe(proxySocket);<span class="comment">// 再次发送代理请求？</span></span><br><span class="line"></span><br><span class="line">    server.emit(<span class="string">'open'</span>, proxySocket);</span><br><span class="line">    server.emit(<span class="string">'proxySocket'</span>, proxySocket);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> proxyReq.end(); <span class="comment">// 发送代理请求</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onOutgoingError</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (clb) &#123;</span><br><span class="line">      clb(err, req, socket);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      server.emit(<span class="string">'error'</span>, err, req, socket);</span><br><span class="line">    &#125;</span><br><span class="line">    socket.end();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="http-proxy-middleware"><a href="#http-proxy-middleware" class="headerlink" title="http-proxy-middleware"></a>http-proxy-middleware</h3><p>参见 <a href="http://xzfyu.com/2018/11/11/%E5%B7%A5%E7%A8%8B%E5%8C%96/http-proxy-middleware%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/">http-proxy-middleware 源码解读</a>。</p>
<h3 id="nokit-filter-proxy"><a href="#nokit-filter-proxy" class="headerlink" title="nokit-filter-proxy"></a>nokit-filter-proxy</h3><p>nokit-filter-proxy 库用于为 <a href="https://github.com/nokitjs/nokit" target="_blank" rel="noopener">nokit</a> 服务器添加代理功能。鉴于前端构建工具 dawn 使用 nokit 搭建本地调试服务器，nokit-filter-proxy 库也用于为 dn-middleware-server 中间件实现代理功能。</p>
<p>同 http-proxy-middleware 库，nokit-filter-proxy 借助 node-http-proxy 实现服务器代理的都是先校验请求路径是否匹配转发策略，拦截并转发请求。nokit-filter-proxy 通过绑定 onRequest 事件函数，实现请求的拦截和转发。详见源码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> httpProxy = <span class="built_in">require</span>(<span class="string">"http-proxy"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ProxyFilter</span>(<span class="params">server</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> utils = self.utils = server.require(<span class="string">"$./core/utils"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// proxy 配置，作为请求路径转发规则</span></span><br><span class="line">  self.configs = server.configs.proxy || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 作为代理服务器的配置项</span></span><br><span class="line">  self.configs.options = self.configs.options || &#123;&#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 代理请求设置 'x-forwarded-for', 'x-forwarded-port', 'x-forwarded-proto', 'x-forwarded-host' 消息头</span></span><br><span class="line">  <span class="keyword">if</span> (utils.isNull(self.configs.options.xfwd)) &#123;</span><br><span class="line">    self.configs.options.xfwd = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 代理请求设置 headers.host 消息头</span></span><br><span class="line">  <span class="keyword">if</span> (utils.isNull(self.configs.options.changeOrigin)) &#123;</span><br><span class="line">    self.configs.options.changeOrigin = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 请求路径转发规则，key - value 形式，key 为客户端请求路径正则，value 为目标服务器路径</span></span><br><span class="line">  self.configs.rules = self.configs.rules || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建代理服务器  </span></span><br><span class="line">  self.proxy = httpProxy.createProxyServer(self.configs.options);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转发代理请求前，使用 headers 配置修改代理请求的消息头</span></span><br><span class="line">  self.onProxyReqHandler = self.onProxyReqHandler.bind(self);</span><br><span class="line">  self.proxy.on(<span class="string">"proxyReq"</span>, self.onProxyReqHandler);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ProxyFilter.prototype.onProxyReqHandler = <span class="function"><span class="keyword">function</span>(<span class="params">proxyReq, req, res, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">if</span> (!self.configs.headers) <span class="keyword">return</span>;</span><br><span class="line">  self.utils.each(self.configs.headers, <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>) </span>&#123;</span><br><span class="line">    proxyReq.setHeader(name, value);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// self.matchRule 根据 rules 配置，解析出请求路径转发规则</span></span><br><span class="line">ProxyFilter.prototype.matchRule = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> rule = <span class="literal">null</span>;</span><br><span class="line">  self.utils.each(self.configs.rules, <span class="function"><span class="keyword">function</span>(<span class="params">exprText, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> expr = <span class="keyword">new</span> <span class="built_in">RegExp</span>(exprText);</span><br><span class="line">    <span class="keyword">if</span> (expr.test(url)) &#123;</span><br><span class="line">      <span class="keyword">var</span> urlParts = expr.exec(url);</span><br><span class="line">      rule = &#123;</span><br><span class="line">        url: urlParts.length &gt; <span class="number">1</span> ? urlParts[<span class="number">1</span>] : url,</span><br><span class="line">        target: target</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> rule;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ProxyFilter.prototype.onRequest = <span class="function"><span class="keyword">function</span>(<span class="params">context, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> res = context.res,</span><br><span class="line">    req = context.req;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> rule = self.matchRule(req.url);</span><br><span class="line">  <span class="keyword">if</span> (!rule) <span class="keyword">return</span> next();</span><br><span class="line">  req.url = rule.url || <span class="string">"/"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 转发代理请求</span></span><br><span class="line">  self.proxy.web(req, res, &#123;</span><br><span class="line">    <span class="string">"target"</span>: rule.target</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这两篇文章都是在笔者整理完 proxy 设计模式后整理的。鉴于本人水平有限，文章难免错谬，仍望读者不吝赐教。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>前端工程化</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/2018/11/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>代理模式(proxy pattern) 的主要处理逻辑为，构建代理对象以桥接对实际对象的访问。因此，可以在访问过程中构建附加的间接性操作如请求处理、权限校验、内务处理(housekeeping task)等，也可以为多种实际对象提供统一的接口。</p>
<p>《设计模式:可复用面向对象软件的基础》中的说法是：</p>
<p>Provide a surrogate or placeholder for another object to control access to it.</p>
<p>维基百科的说法是：</p>
<p>A proxy, in its most general form, is a class functioning as an interface to something else. A proxy is a wrapper or agent object that is being called by the client to access the real serving object behind the scenes. Use of the proxy can simply be forwarding to the real object, or can provide additional logic. In the proxy extra functionality can be provided, for example caching when operations on the real object are resource intensive, or checking preconditions before operations on the real object are invoked.</p>
<p>使用代理模式的场景：</p>
<ol>
<li>远程代理(remote proxy): 为一个远程服务对象提供本地表现，通过本地方法调用远程服务。</li>
<li>虚代理(virtual proxy): 在代理中延迟创建一个开销很大的对象。如在图片代理对象的实现过程中，draw 方法执行前才创建实际所需的图片对象。</li>
<li>保护代理(protection proxy): 访问对象前执行权限校验。</li>
<li>智能指引(smart reference): 访问实际的对象时执行附加操作，如对引用计数，当没被引用时，释放内存；首次引用时，将持久对象装入内存等。</li>
</ol>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><img src="/2018/11/06/计算机科学/设计模式/代理模式/proxy.png">
<ul>
<li>Proxy: 以引用形式持有实体，接口与 Subject 相同，以便于使用代理对象替代实体，并控制对实体的访问。必要时，可以在代理对象中创建或删除实体。<ul>
<li>remote proxy 负责对请求及其参数进行编码，并向远程服务器发送请求。</li>
<li>virtual proxy 负责缓存实体的附加信息，以便延迟创建实体。</li>
<li>protection proxy 负责校验请求是否有特定的访问权限。</li>
</ul>
</li>
<li>Subject 定义 RealSubject, Proxy 的公共接口，因此在需要使用 RealSubject 的场景中都可以使用 Proxy 代替。</li>
<li>RealSubject 定义 Proxy 所代表的实体。</li>
</ul>
<h2 id="经典实现"><a href="#经典实现" class="headerlink" title="经典实现"></a>经典实现</h2><p>使用代理模式为多种类型的字段提供统一的接口，在 FieldProxy 实例 setValue 方法执行过程中，我们也能添加诸如数据校验等处理函数。这里只展示代理模式实现的一种方式，而不推敲代理模式在字段处理上的意义。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Field</span> </span>&#123;</span><br><span class="line">  type;<span class="comment">// 字段类型</span></span><br><span class="line">  name;<span class="comment">// 字段 code</span></span><br><span class="line">  title;<span class="comment">// 字段名</span></span><br><span class="line">  required;<span class="comment">// 字段是否必填</span></span><br><span class="line">  value;<span class="comment">// 字段的值</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, title, required &#125; = props;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.title = title;</span><br><span class="line">    <span class="keyword">this</span>.required = required;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setValue(value)&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// input</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Input</span> <span class="keyword">extends</span> <span class="title">Field</span> </span>&#123;</span><br><span class="line">  type = <span class="string">'input'</span>;</span><br><span class="line">  placeholder;</span><br><span class="line">  maxLength;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">const</span> &#123; placeholder, maxLength &#125; = props;</span><br><span class="line">    <span class="keyword">this</span>.placeholder = placeholder;</span><br><span class="line">    <span class="keyword">this</span>.maxLength = maxLength;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// textarea</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Textarea</span> <span class="keyword">extends</span> <span class="title">Field</span> </span>&#123;</span><br><span class="line">  type = <span class="string">'textarea'</span>;</span><br><span class="line">  placeholder;</span><br><span class="line">  maxLength;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">const</span> &#123; placeholder, maxLength &#125; = props;</span><br><span class="line">    <span class="keyword">this</span>.placeholder = placeholder;</span><br><span class="line">    <span class="keyword">this</span>.maxLength = maxLength;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// radio</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Radio</span> <span class="keyword">extends</span> <span class="title">Field</span> </span>&#123;</span><br><span class="line">  type = <span class="string">'radio'</span>;</span><br><span class="line">  options;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">const</span> &#123; options &#125; = props;</span><br><span class="line">    <span class="keyword">this</span>.options = options;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkbox</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Checkbox</span> <span class="keyword">extends</span> <span class="title">Field</span> </span>&#123;</span><br><span class="line">  type = <span class="string">'checkbox'</span>;</span><br><span class="line">  options;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">const</span> &#123; options &#125; = props;</span><br><span class="line">    <span class="keyword">this</span>.options = options;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// select</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Select</span> <span class="keyword">extends</span> <span class="title">Field</span> </span>&#123;</span><br><span class="line">  type = <span class="string">'select'</span>;</span><br><span class="line">  placeholder;</span><br><span class="line">  options;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">const</span> &#123; options &#125; = props;</span><br><span class="line">    <span class="keyword">this</span>.placeholder = placeholder;</span><br><span class="line">    <span class="keyword">this</span>.options = options;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Fields = &#123;</span><br><span class="line">  <span class="string">'input'</span>: Input,</span><br><span class="line">  <span class="string">'textarea'</span>: Textarea,</span><br><span class="line">  <span class="string">'radio'</span>: Radio,</span><br><span class="line">  <span class="string">'checkbox'</span>: Checkbox,</span><br><span class="line">  <span class="string">'select'</span>: Select,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FieldProxy</span> </span>&#123;</span><br><span class="line">  field;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; type, ...others &#125; = props;</span><br><span class="line">    <span class="keyword">this</span>.field = <span class="keyword">new</span> Fields[type](others);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setValue(value)&#123;</span><br><span class="line">    <span class="keyword">this</span>.field.setValue(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="js中的代理模式"><a href="#js中的代理模式" class="headerlink" title="js中的代理模式"></a>js中的代理模式</h2><h3 id="图片缓存"><a href="#图片缓存" class="headerlink" title="图片缓存"></a>图片缓存</h3><p>图片缓存的目的是在远程图片加载的时延过程中，预先以本地图片或占位符代替；在远程图片加载完成之后，再使用 img 节点展示实际的图片。</p>
<p>备注：RealSubject 和 Proxy 使用相同的接口这种情况，在 js 中，可以在自调用匿名函数实现，实例属性可使用闭包缓存。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实际加载图片</span></span><br><span class="line"><span class="keyword">const</span> loadImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(imgNode);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line">    imgNode.src = src;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  apply: <span class="function"><span class="keyword">function</span>(<span class="params">target, thisBinding, args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> src = args[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> img = <span class="keyword">new</span> Image;</span><br><span class="line">    img.src = src;</span><br><span class="line">    img.onLoad = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      target(src);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    target(<span class="string">'local_image.gif'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理加载图片</span></span><br><span class="line"><span class="keyword">const</span> loadImageProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(loadImage, handler);</span><br><span class="line"></span><br><span class="line">loadImageProxy(<span class="string">'remote_image.png'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="惰性加载"><a href="#惰性加载" class="headerlink" title="惰性加载"></a>惰性加载</h3><p>跟代理图片类似，加载 js 脚本也会有一定的时延，这就会造成使用某个类库前，js 脚本还未加载完成，所使用的方法也是 undefined。这时，可使用虚拟代理模拟类库，缓存执行方法，等到 js 脚本加载完成之后，再使用缓存执行实际的方法。</p>
<p>曾探在《Javascript 设计模式与开发实践》一书中，以 minConsole 类库为例，按下 F2 键加载所需的 js 脚本，在此之前，使用代理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> miniConsole = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache = [];</span><br><span class="line">  <span class="keyword">let</span> handler = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( e.keyCode === <span class="number">113</span> )&#123;</span><br><span class="line">      <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">      script.onLoad = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">// 加载完成后，执行缓存的待执行函数</span></span><br><span class="line">        cache.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn());</span><br><span class="line">      &#125;</span><br><span class="line">      script.src = <span class="string">'miniConsole.js'</span>;</span><br><span class="line">      <span class="built_in">document</span>.getElementByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(imgNode);</span><br><span class="line">      <span class="built_in">document</span>.body.removeEventListener(<span class="string">'keydown'</span>, handler);<span class="comment">// 单次加载</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">document</span>.body.addEventListener(<span class="string">'keydown'</span>, handler, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 代理对象，缓存待执行函数</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    log(...args)&#123;</span><br><span class="line">      cache.push(miniConsole.bind(miniConsole, ...args));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
<h3 id="合并http请求"><a href="#合并http请求" class="headerlink" title="合并http请求"></a>合并http请求</h3><p>搜索组件每次改变值时都会调用远程接口，使用代理模式可延迟调用远程接口，以使交互请求不至频繁。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSearch</span>(<span class="params">content</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">get</span>(content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let cache;</span><br><span class="line">let timer = null;</span><br><span class="line"></span><br><span class="line">const handler = &#123;</span><br><span class="line">  apply: <span class="function"><span class="keyword">function</span>(<span class="params">target, thisBinding, args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> content = args[<span class="number">0</span>];</span><br><span class="line">    cache = content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( timer ) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      doSearch(cache);</span><br><span class="line">      cache = <span class="literal">null</span>;</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doSearchProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(doSearch, handler);</span><br></pre></td></tr></table></figure>
<h3 id="缓存代理"><a href="#缓存代理" class="headerlink" title="缓存代理"></a>缓存代理</h3><p>前端缓存代理包含：对于计算复杂的过程，在入参相同的情况下，可使用缓存的计算结果代替实际的执行计算；对于频繁的 ajax 调用，也可以使用缓存，避免远程调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cache;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complexCompute</span>(<span class="params">...args</span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  apply: <span class="function"><span class="keyword">function</span>(<span class="params">target, thisBinding, args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> cacheKey = args.join(<span class="string">','</span>);</span><br><span class="line">    <span class="keyword">if</span> ( cache[cacheKey] ) <span class="keyword">return</span> cache[cacheKey];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> result = complexCompute(...args);</span><br><span class="line">    cache[cacheKey] = result;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> complexComputeProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(complexCompute, handler);</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[设计模式:可复用面向对象软件的基础]<br>[Javascript 设计模式和开发实践 - 曾探]<br><a href="https://java-design-patterns.com/patterns/proxy/" target="_blank" rel="noopener">java-design-patterns: proxy</a></p>
]]></content>
      <categories>
        <category>计算机科学</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>js设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>antd-Form 组件</title>
    <url>/2018/11/04/frontend/antd/Form/</url>
    <content><![CDATA[<p>ant design 中的 Form 组件基于 rc-form 实现。本文第一部分将介绍 rc-form 库；第二部分再介绍 ant design 中的 Form 组件。</p>
<h2 id="rc-form"><a href="#rc-form" class="headerlink" title="rc-form"></a>rc-form</h2><p>常规收集表单数据并作校验，只需以 store 实时记录表单数据，校验后重绘表单。这样的思路以业务代码为例，就是，以数据模型 model 集成数据处理操作，再通过 setState 将 model 中的实时数据注入组件中，并驱动组件重绘（除了 setState 方法以外，也可以使用 forceUpdate 方法重绘组件，并在 render 阶段重新访问 model  中的实时数据）。从业务角度对数据及其操作进行建模，必然着眼于实际的业务场景，其类结构也会和数据表有千丝万缕的联系；而表单中的数据更具一般性特征，即能对应多个数据表，对其进行抽象也须从视图层入手。可以推想的是，抽象的表单数据模型必然包含字段名和字段的值构成的映射 valuesMap，字段名和校验结果构成的映射 errorsMap，以及字段名和校验状态构成的映射 validatingMap，这样才能绘制出表单中的字段项。</p>
<p>在 rc-form 中，上述数据模型的具体实现为 FieldsStore 类。如前所述，FieldsStore 实例与视图层的交互逻辑为，在用户行为驱动字段项的数据改变时，即时存储表单数据及校验文案，继而调用表单组件实例的 forceUpdate 方法强制重绘；在绘制过程中，再从 FieldsStore 实例读取实时的表单数据、校验文案及校验状态。建模方面，FieldsStore 实例以 fields 属性存储表单的实时数据，其结构为键值对形式 { [name]: { value, errors, validating, dirty, touched } } 。其中，name 为字段名；value 为字段的值；errors 为校验结果；validating 为校验状态；dirty 为脏值标识（当字段的值已作变更、但未作校验时，那么脏值标识就为 true；已作校验则置为 false）；touched 为更新标识，即用户行为触发时，字段值已作收集标识，收集的值通常是更新后的值 （若 FieldsStore 实例在 onChange 发生时收集数据，touched 标识也意味着数据已作变更。当然，如果此时用户再将数据更新为初始值，touched 标识将依旧为 true，并不能反映表单数据的更新状态。但是在一般情况下，可以根据 touched 标识判断表单数据是否有过更改）。</p>
<p>除了实时更新的数据外，驱动校验需要校验规则 validateRules、触发事件 validateTrigger；字段的初始值 initialValue（当字段的值还没存入 fields 中时，以初始值替代）；从 event 对象获取字段的值，也跟 dom 节点的类型相关，如 input, radio, checkbox 类型，可以借助 getValueFromEvent 函数从 event 对象获取的字段的值；注入字段组件的值需要作特殊的数据转换，其一 radio 原生组件通过 props.checked 接受字段的实时值，其二对于自定义组件，不只接受实时值的 props 属性是特殊的，收集的数据和注入组件中的数据也会存在结果差异，这可以借助 getValueProps 函数作转换操作；在某些场合下，收集的表单数据需要经过特殊转换（使用案例：<a href="https://codepen.io/afc163/pen/JJVXzG?editors=001" target="_blank" rel="noopener">全选按钮</a>），这可以借助 normalize 函数实现。FieldsStore 实例使用 fieldsMeta 属性存储这些元数据，其结构为 { [name]: { validate, initialValue, getValueFromEvent, valuePropName, getValueProps, normalize } }。其中，validate 包含 validateRules, validateTrigger。</p>
<p>与业务实体不同的是，FieldsStore 实例仅止于存储字段的表单数据和元数据，提供一些便捷的访问器操作，却没有包含数据校验等操作，也没有关联上表单及字段组件。对于用户自定义表单组件，需要提供获取、更新及校验表单数据的方法，以便组织与远程接口密切相关的交互逻辑。对于字段组件，校验规则等与指定字段强关联的配置项适合在使用字段组件时通过 props 注入；同时，在字段组件的值发生变更时，需要收集该字段的值及启动对该字段的校验，因此需要将特定的绑定函数添加到 props 中。这些字段元数据写入 FieldsStore 就适合在绘制字段组件的过程中实现，因此就需要特定的方法用于装饰字段组件或其 props 属性。在 rc-form 中，BaseForm 用于实现这部分功能。</p>
<p>想要为用户自定义组件注入工具函数，可以使用 HOC 高阶组件将工具函数配置为自定义子组件的 props  形式实现。BaseForm 就是这样的高阶组件。在 BaseForm 的 render  阶段，将为用户自定义组件注入 props.form 操纵表单的工具函数集。工具函数集中包含 getFieldValue, getFieldsValue, getFieldError, getFieldsError, isFieldsValidating, isFieldValidating, isFieldTouched, isFieldsTouched 方法用于获取字段的值、校验文案、校验状态、是否更新标识等；setFieldsInitialValue 方法用于设置字段的初始值；setFieldsValue 方法用于设置字段的值；setFields 方法用于设置表单的实时数据，包含字段的值及校验文案等；resetFields 方法用于重置表单；validateFields 方法用于校验表单；getFieldProps 方法用于转换传入字段组件的 props 数据（包含特定的绑定函数），并收集字段组件的元数据；getFieldDecorator 方法基于 getFieldProps 方法，不同于 getFieldProps 方法用于装饰字段组件的 props，getFieldDecorator 用于直接装饰字段组件，这样就可以直接获取并封装传入字段组件实例的 props.onChange 等属性或方法；getFieldInstance 方法用于获取字段实例。</p>
<p>关于校验文案和校验状态的绘制，参见本文的第二部分。</p>
<p>以时序图的方式表达 rc-form 的工作流程为：<br><img src="/2018/11/04/frontend/antd/Form/rc-form时序图.png"></p>
<p>rc-form 的类图结构为：<br><img src="/2018/11/04/frontend/antd/Form/rc-form类图.png"></p>
<h3 id="FieldsStore"><a href="#FieldsStore" class="headerlink" title="FieldsStore"></a>FieldsStore</h3><p>如上文所述，FieldsStore 基本用作表单字段元数据和实时数据的存储器。此外，rc-form 支持以嵌套结构定义字段名，即使用 ‘.’, ‘[|]’ 作为分割符，如 ‘a.b’ 意味着 a 对象下的 b 属性；’c[0]’ 意味着 c 数组的首项。这一机制借助于 <a href="https://github.com/lodash/lodash" target="_blank" rel="noopener">lodash</a> 类库的 <a href="https://github.com/lodash/lodash/blob/master/set.js" target="_blank" rel="noopener">set</a>, <a href="https://github.com/lodash/lodash/blob/master/get.js" target="_blank" rel="noopener">get</a> 方法和内置的 flattenFields 函数实现的。并且，FieldsStore 提供 isValidNestedFieldName 方法用于校验表单中的字段名不能作为其他字段名的成员。</p>
<p>flattenFields(maybeNestedFields, isLeafNode, errorMessage) 函数用于将嵌套数据扁平化，如将 { a: { b: 1 } } 转化成 { ‘a.b’: 1 }。参数 maybeNestedFields 即嵌套数据；参数 isLeafNode 用于校验扁平化后的数据成员的合理性；参数 errorMessage 校验不合理时的警告文案。其实现如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">treeTraverse</span>(<span class="params">path = <span class="string">''</span>, tree, isLeafNode, errorMessage, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isLeafNode(path, tree)) &#123;</span><br><span class="line">    callback(path, tree);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tree === <span class="literal">undefined</span> || tree === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Do nothing</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(tree)) &#123;</span><br><span class="line">    tree.forEach(<span class="function">(<span class="params">subTree, index</span>) =&gt;</span> treeTraverse(</span><br><span class="line">      <span class="string">`<span class="subst">$&#123;path&#125;</span>[<span class="subst">$&#123;index&#125;</span>]`</span>,</span><br><span class="line">      subTree,</span><br><span class="line">      isLeafNode,</span><br><span class="line">      errorMessage,</span><br><span class="line">      callback</span><br><span class="line">    ));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// It's object and not a leaf node</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> tree !== <span class="string">'object'</span>) &#123;</span><br><span class="line">      warning(<span class="literal">false</span>, errorMessage);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Object</span>.keys(tree).forEach(<span class="function"><span class="params">subTreeKey</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> subTree = tree[subTreeKey];</span><br><span class="line">      treeTraverse(</span><br><span class="line">        <span class="string">`<span class="subst">$&#123;path&#125;</span><span class="subst">$&#123;path ? <span class="string">'.'</span> : <span class="string">''</span>&#125;</span><span class="subst">$&#123;subTreeKey&#125;</span>`</span>,</span><br><span class="line">        subTree,</span><br><span class="line">        isLeafNode,</span><br><span class="line">        errorMessage,</span><br><span class="line">        callback</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flattenFields</span>(<span class="params">maybeNestedFields, isLeafNode, errorMessage</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fields = &#123;&#125;;</span><br><span class="line">  treeTraverse(<span class="literal">undefined</span>, maybeNestedFields, isLeafNode, errorMessage, (path, node) =&gt; &#123;</span><br><span class="line">    fields[path] = node;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> fields;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>元数据以 this.fieldsMeta = { [name]: { validate, hidden, getValueFromEvent, initialValue, valuePropName, getValueProps, normalize } } 形式存储（name 为字段名，下同）。以下是字段元数据中各属性的意义。</p>
<ul>
<li>validate 校验规则和触发事件，[{ rules, trigger }] 形式。</li>
<li>hidden 设置为 true 时，getFieldsValue, getFieldsError 等方法将无法获取该字段的数据及校验信息等实时数据。本文假设设置了 hidden 为 true 的字段为虚拟隐藏项。</li>
<li>getValueFromEvent(event) 用于从 event 对象中获取字段的值。</li>
<li>initialValue 字段的初始值。</li>
<li>valuePropName 约定字段的值以何种 props 属性注入字段组件中。</li>
<li>getValueProps(value) 用于转化字段的值，输出 props 以注入字段组件中。</li>
<li>normalize(newValue, oldValue, values) 用于转换存入 FieldsStore  实例的字段值。</li>
</ul>
<p>实时数据以 this.fields = { [name]: { value, errors, validating, dirty, touched } } 形式存储。以下是字段实时数据中各属性的意义。</p>
<ul>
<li>value 字段的值。</li>
<li>errors 校验文案，数组形式。</li>
<li>validating 校验状态。</li>
<li>dirty 脏值标识。真值时意味着字段数据已作变更，但未作校验。</li>
<li>touched 更新标识。真值时意味着用户行为已促使字段数据发生了变更。</li>
</ul>
<p>对于元数据，rc-form 实现的访问器机制极为简单，即通过 setFieldMeta(name, meta) 赋值或更新某个字段的元数据，通过 getFieldMeta(name) 获取某个字段的元数据。辅助方法 getAllFieldsName 用于获取 this.feildsMeta 中所有字段名列表。同时，元数据是在字段组件渲染阶段创建的，其存在与否也意味字段组件是否呈现在视图中。实例方法 flattenRegisteredFields(fields) 即基于此实现，既校验与参数 fields 数据的字段组件是否已渲染，又将 fields 数据扁平化。特别的，setFieldsInitialValue(initialValues) 实例方法首先将参数 initialValues 注入为 flattenRegisteredFields 方法的参数以校验相关的字段组件是否以渲染，再将初始值写入 feildsMeta 属性中。因此，针对元数据的操作包含 setFieldMeta, getFieldMeta, setFieldsInitialValue 以及下文的 clearField 四种。</p>
<p>对于实时数据，rc-form 实现的访问器机制较为复杂。其一，未经用户操作字段组件或开发者显示调用 setFields 赋值表单数据，字段的实时数据将不存在 fields 属性中（下文将这些字段称为未收集字段）；其二，既需要支持全量更新表单的实时数据，又需要支持部分更新表单的实时数据；其三，字段中的实时数据成员需要单独获取。以上第一条，使得 FieldsStore 并不存在 getFields 方法，而是先通过 getNotCollectedFields 方法获取未收集字段的初始值，再构建 getNestedAllFields 方法遍历 fields 中的字段以获取到收集到的实时数据；第二条，FieldsStore 提供 updateFields(fields) 方法用于全量更新实时数据，setFields(fields) 用于部分更新实时数据；第三条，使 FieldsStore 在 getField(name) 获取字段的实时数据以外，还提供 getFieldMember(name, member) 用于获取实时数据的成员，并以此构建了 isFieldValidating, isFieldTouched 方法，用于获取字段的校验状态和更新状态。</p>
<p>当然，表单除了更新数据和单字段实时数据获取以外，还有对实时数据如表单数据、校验信息和校验状态的全量获取。为此，FieldsStore 先行提供了辅助函数。其中，getAllFieldsName 基于 fieldsMeta 元数据，获取表单的全量字段名；getValidFieldsName 方法用于获取剔除虚拟隐藏项后的字段名列表；getValidFieldsFullName(maybePartialName) 方法基于 getValidFieldsName，所有以 maybePartialName 起始或等值的字段名列表，但不包含虚拟隐藏项。在此基础上，getNestedField(name, getter) 方法将获取所有以 name 起始或等值的字段名列表，并使用 reduce 方法加以遍历，通过 getter(name) 函数如 getFieldError 等实例方法，以获取字段数据或校验信息。不同于 getNestedField 先使用 getValidFieldsFullName 方法获取匹配的字段名列表，getNestedFields(names, getter) 则直接使用 reduce 遍历参数 names 或剔除虚拟隐藏项后的字段名列表，以获取字段数据或校验信息。</p>
<p>由于字段值的特殊性，即当实时数据尚未存入 fields 时，须以 fieldsMeta 中的初始值代替。因此，FieldsStore 提供了 getValueFromFields(name, fields) 用于从参数 fields 中的实时值或 fieldsMeta 元数据中的初始值。</p>
<p>有了这些辅助函数，FieldsStore 才得以实现：</p>
<ul>
<li>getFieldValue(name) 用于获取匹配字段的值（匹配字段指以 name 起始或与 name 等值的字段，下同）。</li>
<li>getFieldError(name) 用于获取匹配字段的校验信息。</li>
<li>isFieldValidating(name) 用于获取匹配字段的校验状态。</li>
<li>isFieldTouched(name) 用于获取匹配字段的更新标识。</li>
<li>getFieldsValue(names) 用于获取指定字段或表单的全量值数据，但不包含虚拟隐藏项；</li>
<li>getFieldsError(names) 用于获取指定字段或表单的全量校验信息，但不包含虚拟隐藏项。</li>
<li>isFieldsValidating(names) 用于获取指定字段或表单的全量校验状态，但不包含虚拟隐藏项。</li>
<li>isFieldsTouched(names) 用于获取指定字段或表单的全量更新标识，但不包含虚拟隐藏项。</li>
</ul>
<p>除此以外，FieldsStore 中与 BaseForm 交互相关的方法还包含：</p>
<ul>
<li>getFieldValuePropValue(fieldMeta) 基于参数 fieldMeta 获取注入字段组件的 props 属性。该 props 属性为字段的值内容，可经由 fieldMeta.valuePropName, fieldMeta.getValueProps(value) 处理，通过 BaseForm 实例的 getFieldProps 方法注入字段组件。</li>
<li>getAllValues 根据 fieldsMeta 属性获取表单的全量数据，包含虚拟隐藏项。</li>
<li>setFieldsInitialValue 见上文，设置字段的初始值。</li>
<li>updateFields(fields) 见上文，全量更新表单的实时数据。</li>
<li>setFields(fields) 见上文，部分更新表单的实时数据。</li>
<li>resetFields(ns) 方法只输出匹配字段或全部字段的空值（这些字段的实时数据均已收集），本身并不改变 fields 存储的数据。</li>
<li>clearField(name) 用于清除字段的元数据和实时数据。</li>
</ul>
<h3 id="BaseForm"><a href="#BaseForm" class="headerlink" title="BaseForm"></a>BaseForm</h3><p>如上文所说，BaseForm 作为自定义组件的外层容器，它用于为字段组件绑定数据收集和校验的方法，以更新 FieldsStore 实例存储的实时数据，同时将操作表单的工具函数集通过 props 注入到用户自定义表单中。其实现为：</p>
<p>首先，通过 createBaseForm(option, mixins) 创建装饰函数。装饰函数可以为用户自定义表单组件包裹上 HOC 容器，即 BaseForm 组件。参数 option 能为 HOC 组件提供 validateMessages, onFieldsChange, onValuesChange, mapProps, mapPropsToFields, fieldNameProp, fieldMetaProp, fieldDataProp, formPropName, name 配置项，参数 mixins 为混入 HOC 组件的实例方法。</p>
<ul>
<li>validateMessages 用于更改 <a href="https://github.com/yiminghe/async-validator" target="_blank" rel="noopener">async-validator</a> 库的配置文案。</li>
<li>onFieldsChange(props, changedFields, oldFields) 当 BaseForm 组件实例的 setFields 方法执行时被调用，包含用户行为促使数据收集或校验时，开发者显式调用 setFields, setFieldsValue, resetFields 时，BaseForm 机制 saveRef 方法执行阶段恢复实时数据时（见下文）。</li>
<li>onValuesChange(props, changedValues, oldValues) 当用户行为触发表单数据收集或校验时（在 onFieldsChange 方法前执行），或开发者显示调用 setFieldsValue 方法时（在 onFieldsChange 方法后执行），都将调用 onValuesChange 函数。</li>
<li>mapProps({ [formPropName] }, restProps) 用于修改注入自定义表单组件的 props。{ [formPropName] } 即 BaseForm 组件实例注入用户自定义组件的表单操作函数集；执行上下文为 BaseForm 组件实例。</li>
<li>mapPropsToFields(props) 将 BaseForm 组件实例获得的 props 转化为 FieldsStore 构造器的参数 fields，通常用于将状态管理器中的 store 数据转换为表单所需的 fields。</li>
<li>fieldNameProp 作为字段组件接受字段名的 props 属性名，其值默认为字段名或表单名加字段名的形式，因此可以通过访问字段组件实例的 props 获取到字段名。</li>
<li>fieldMetaProp 作为字段组件接受元数据的 props 属性名，因此可以通过访问字段组件实例的 props 获取到该字段的元数据。</li>
<li>fieldDataProp 作为字段组件接受实时数据的 props 属性名，因此可以通过访问字段组件实例的 props 获取到该字段的实时数据。</li>
<li>formPropName 作为自定义表单组件接受表单操作函数集的 props 属性名，默认为 ‘form’。</li>
<li>name 表单名。</li>
</ul>
<p>其次，在 BaseForm 组件实例的 getInitialState 阶段，将调用 option.mapPropsToFields 以获得初始 fields，并创建 FieldsStore 实例（备注：在 BaseForm 组件的 componentWillReceiveProps 生命周期中，也将调用 option.mapPropsToFields 获取 fields，以便使用 FieldsStore 实例的 updateFields 全量更新缓存数据）。除此而外，getInitialState 方法还将创建 instances, cachedBind, clearedFieldMetaCache, renderFields, domFields 缓存，并为 BaseForm 组件注入 getFieldsValue, getFieldValue, setFieldsInitialValue, getFieldsError, getFieldError, isFieldValidating, isFieldsValidating, isFieldsTouched, isFieldTouched 实例方法（意义见上文）。</p>
<ul>
<li>instances 缓存字段组件实例。</li>
<li>cachedBind 缓存绑定函数（包含收集和校验字段的实例方法 onCollect, onCollectValidate）及 saveRef 引用函数。</li>
<li>clearedFieldMetaCache 缓存待移除字段的实时数据和元数据。getFieldProps 方法执行时清除 clearedFieldMetaCache[name] 缓存数据。saveRef 方法执行时将根据字段组件的渲染状态，尝试使用 clearedFieldMetaCache[name] 恢复 FieldsStore 实例中的实时数据和元数据，在清除 clearedFieldMetaCache[name] 缓存；或者将 FieldsStore 实例中的实时数据和元数据存入 clearedFieldMetaCache[name] 缓存。见下文。</li>
<li>renderFields 缓存 getFieldProps 方法已执行标识。</li>
<li>domFields 缓存字段组件实例仍在视图中展示的标识。</li>
</ul>
<p>其次，执行 render 方法，将表单操作函数集通过 props 注入用户自定义组件。因此，在用户自定义组件中，开发者可以获取表单的实时数据，或者更新表单数据，或者校验表单，以完成特定渲染。以下是开发者可调用的方法。</p>
<ul>
<li>setFields(maybeNestedFields, callback) 以参数 maybeNestedFields 部分更新 FieldsStore 实例中的实时数据，并执行 option.onFieldsChange 方法，再调用 forceUpdate 重绘表单并执行回调。</li>
<li>setFieldsValue(changedValues, callback) 基于 setFields 方法，更新表单数据，并执行 option.onValuesChange 方法。若 changedValues 中相关的字段组件未作渲染，予以警告提示。</li>
<li>resetFields(ns) 基于 setFields 方法，重置匹配字段的表单数据或全量表单数据，并清除相关字段的 clearedFieldMetaCache 缓存。</li>
<li>validateFields(ns, opt, cb) 基于 validateFieldsInternal，校验匹配字段的表单数据或全量表单数据。参数 opt 作为 validateFieldsInternal 的参数 options，cb 为校验完成后的回调。</li>
<li>getFieldInstance(name)，获取字段组件实例。</li>
</ul>
<p>其次，在渲染字段组件的过程中，BaseForm 提供 getFieldProps 实例方法用于装饰注入字段组件的 props，以及 getFieldDecorator 实例方法用于装饰字段组件。</p>
<ul>
<li>getFieldProps(name, usersFieldOption) 首先将清理 clearedFieldMetaCache 缓存，其次为 FieldsStore 实例收集字段的元数据，如转换校验规则；最终将输出转化后的 props 以用于字段组件的渲染。相关 props 属性包含：指定字段组件的 ref 引用函数为 BaseForm 内置的 saveRef 实例方法；为字段组件绑定 onCollect, onCollectValidate 实例方法，以在用户行为发生时收集或校验表单数据；将元数据 { [fieldMetaProp]: fieldMeta }，实时数据 { [fieldDataProp]: field }，字段名 { [fieldNameProp]: name } 注入字段组件实例。</li>
<li>getFieldDecorator(name, fieldOption) 基于 getFieldProps 方法，直接装饰字段组件，以获得开发者设定在字段组件实例上的 ref 引用函数及 props.onChange 等绑定函数等，并以 fieldMeta.ref, fieldMeta.originalProps 形式存入元数据中。这样就能在 BaseForm 实例的 saveRef 执行过程中，可以调用开发者设定在字段组件实例上的 ref 引用函数；在 BaseForm 实例的 onCollect, onCollectValidate 执行过程中，可以调用开发者设定在字段组件实例上的 onChange 绑定函数。getFieldDecorator 函数也将使用初始值绘制字段项。</li>
</ul>
<p>为字段组件绑定的 onCollect, onCollectValidate 方法均基于 onCollectCommon(name, action, args) 实例方法。其执行逻辑为：在 action 事件触发时，首先调用开发者配置的绑定函数 fieldMeta[action] 或 fieldMeta.originalProps[action]，其次通过 fieldMeta.getValueFromEvent 从 event 对象获取字段的值或者取值，其次执行挂载于表单上的 option.onValuesChange 绑定函数，最终返回 { name, field, fieldMeta }。下面是 onCollect, onCollectValidate 方法的简要实现逻辑。</p>
<ul>
<li>onCollect(name_, action, …args) 基于 setFields 方法，在事件触发时，实时更新 FieldsStore 实例存储的实时数据。</li>
<li>onCollectValidate(name_, action, …args) 基于 validateFieldsInternal, setFields 方法，在事件触发时，既实时更新 FieldsStore 实例存储的实时数据，又实时校验字段。</li>
</ul>
<p>对于字段组件，BaseForm 有一种缓存刷新机制。当字段组件实例从视图中移除时，须得调用 FieldsStore 实例的 clearField 方法以清除缓存的实时数据和元数据。这一过程通常在 ref 引用函数内执行，通过参数 —— 组件实例的真值情况判断字段组件是否已作销毁。而当字段组件更新时，react 16 的机制会在 getFieldProps 方法执行之后，调用两次 ref 引用函数，第一次 ref 引用函数的参数为否值，表示前一个实例需要被销毁；第二次 ref 引用函数的参数为真值，表示创建新的字段组件实例。当执行第一次 ref 引用函数时，FieldsStore 实例的实时数据和元数据都将被销毁。这样，即便字段组件仍旧在视图中有所表现，元数据如校验规则的丢失也将使促使字段组件在值变更时无法得到正常的校验。鉴于此，BaseForm 提供 clearedFieldMetaCache 属性缓存待移除字段的实时数据和元数据，且在第二次执行 ref 引用函数时尝试恢复 FieldsStore 实例中的相应数据。</p>
<ul>
<li>saveRef(name, _, component) 作为 BaseForm 为字段组件提供的引用函数，其在字段组件挂载、卸载、重绘阶段都会被调用。可根据参数 component 判断组件的渲染状态。当 component 为空值，使用 clearedFieldMetaCache[name] = { field, meta } 收集字段的元数据和表单数据，并清除 FieldsStore 实例中的相关数据，清理 instances[name], cachedBind[name] 等缓存；若 component 为字段组件实例，domFields[name] 缓存标记将置为真值，instances[name] 将缓存字段组件实例，并尝试使用 clearedFieldMetaCache 缓存以恢复 FieldsStore 实例中的相关数据，等恢复完成后，再行清理 clearedFieldMetaCache[name] 缓存。</li>
<li>recoverClearedField(name) 通过 clearedFieldMetaCache[name] 缓存恢复 FieldsStore 实例存储的字段实时数据和元数据，完成后清除 clearedFieldMetaCache[name] 缓存。</li>
</ul>
<p>字段数据缓存并恢复机制的相关源码为：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getFieldProps(name, usersFieldOption = &#123;&#125;) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!name) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Must call `getFieldProps` with valid name string!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    warning(</span><br><span class="line">      <span class="keyword">this</span>.fieldsStore.isValidNestedFieldName(name),</span><br><span class="line">      <span class="string">'One field name cannot be part of another, e.g. `a` and `a.b`.'</span></span><br><span class="line">    );</span><br><span class="line">    warning(</span><br><span class="line">      !(<span class="string">'exclusive'</span> <span class="keyword">in</span> usersFieldOption),</span><br><span class="line">      <span class="string">'`option.exclusive` of `getFieldProps`|`getFieldDecorator` had been remove.'</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> <span class="keyword">this</span>.clearedFieldMetaCache[name];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fieldOption = &#123;</span><br><span class="line">    name,</span><br><span class="line">    trigger: DEFAULT_TRIGGER,</span><br><span class="line">    valuePropName: <span class="string">'value'</span>,</span><br><span class="line">    validate: [],</span><br><span class="line">    ...usersFieldOption,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    rules,</span><br><span class="line">    trigger,</span><br><span class="line">    validateTrigger = trigger,</span><br><span class="line">    validate,</span><br><span class="line">  &#125; = fieldOption;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fieldMeta = <span class="keyword">this</span>.fieldsStore.getFieldMeta(name);</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">'initialValue'</span> <span class="keyword">in</span> fieldOption) &#123;</span><br><span class="line">    fieldMeta.initialValue = fieldOption.initialValue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> inputProps = &#123;</span><br><span class="line">    ...this.fieldsStore.getFieldValuePropValue(fieldOption),</span><br><span class="line">    ref: <span class="keyword">this</span>.getCacheBind(name, <span class="string">`<span class="subst">$&#123;name&#125;</span>__ref`</span>, <span class="keyword">this</span>.saveRef),</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (fieldNameProp) &#123;</span><br><span class="line">    inputProps[fieldNameProp] = formName ? <span class="string">`<span class="subst">$&#123;formName&#125;</span>_<span class="subst">$&#123;name&#125;</span>`</span> : name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> validateRules = normalizeValidateRules(validate, rules, validateTrigger);</span><br><span class="line">  <span class="keyword">const</span> validateTriggers = getValidateTriggers(validateRules);</span><br><span class="line">  validateTriggers.forEach(<span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (inputProps[action]) <span class="keyword">return</span>;</span><br><span class="line">    inputProps[action] = <span class="keyword">this</span>.getCacheBind(name, action, <span class="keyword">this</span>.onCollectValidate);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// make sure that the value will be collect</span></span><br><span class="line">  <span class="keyword">if</span> (trigger &amp;&amp; validateTriggers.indexOf(trigger) === <span class="number">-1</span>) &#123;</span><br><span class="line">    inputProps[trigger] = <span class="keyword">this</span>.getCacheBind(name, trigger, <span class="keyword">this</span>.onCollect);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> meta = &#123;</span><br><span class="line">    ...fieldMeta,</span><br><span class="line">    ...fieldOption,</span><br><span class="line">    validate: validateRules,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.fieldsStore.setFieldMeta(name, meta);</span><br><span class="line">  <span class="keyword">if</span> (fieldMetaProp) &#123;</span><br><span class="line">    inputProps[fieldMetaProp] = meta;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fieldDataProp) &#123;</span><br><span class="line">    inputProps[fieldDataProp] = <span class="keyword">this</span>.fieldsStore.getField(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This field is rende#f81d22, record it</span></span><br><span class="line">  <span class="keyword">this</span>.renderFields[name] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> inputProps;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">saveRef(name, _, component) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!component) &#123;</span><br><span class="line">    <span class="comment">// after destroy, delete data</span></span><br><span class="line">    <span class="keyword">this</span>.clearedFieldMetaCache[name] = &#123;</span><br><span class="line">      field: <span class="keyword">this</span>.fieldsStore.getField(name),</span><br><span class="line">      meta: <span class="keyword">this</span>.fieldsStore.getFieldMeta(name),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.clearField(name);</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.domFields[name];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.domFields[name] = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">this</span>.recoverClearedField(name);</span><br><span class="line">  <span class="keyword">const</span> fieldMeta = <span class="keyword">this</span>.fieldsStore.getFieldMeta(name);</span><br><span class="line">  <span class="keyword">if</span> (fieldMeta) &#123;</span><br><span class="line">    <span class="keyword">const</span> ref = fieldMeta.ref;</span><br><span class="line">    <span class="keyword">if</span> (ref) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> ref === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`can not set ref string for <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      ref(component);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.instances[name] = component;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">recoverClearedField(name) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.clearedFieldMetaCache[name]) &#123;</span><br><span class="line">    <span class="keyword">this</span>.fieldsStore.setFields(&#123;</span><br><span class="line">      [name]: <span class="keyword">this</span>.clearedFieldMetaCache[name].field,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.fieldsStore.setFieldMeta(name, <span class="keyword">this</span>.clearedFieldMetaCache[name].meta);</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.clearedFieldMetaCache[name];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其次，在 BaseForm 组件的 componentDidMount, componentDidUpdate 生命周期中，将调用 cleanUpUselessFields 实例方法，以根据 renderFields, domFields 缓存判断字段组件渲染状态，如字段组件未作渲染，调用 clearField 实例方法清理 FieldsStore 实例存储的字段实时数据和元数据、以及 instances[name], cachedBind[name] 缓存。</p>
<p>以上功能的实现基于 getCacheBind, getRules, validateFieldsInternal 实例方法。其中，getRules(fieldMeta, action) 用于从 fieldMeta 元数据中获取指定事件的校验规则。下面是 getCacheBind, validateFieldsInternal 方法的简要实现逻辑及相关源码。</p>
<ul>
<li>getCacheBind(name, action, fn) 以 cachedBind[name][action] = { fn, oriFn } 形式缓存 onCollect, onCollectValidate, saveRef 方法，便于使用 name 进行查找。</li>
<li>validateFieldsInternal(fields, { fieldNames, action, options }, callback) 校验指定字段。可复用之前的校验结果，收集待校验的字段并予以校验，转化校验文案并执行 callback 回调。若异步校验期间字段的值发生改变，将得到校验已过期文案。在校验起始阶段，调用 setFields 记录校验中状态；校验结束阶段，调用 setFields 记录校验结果。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getCacheBind(name, action, fn) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.cachedBind[name]) &#123;</span><br><span class="line">    <span class="keyword">this</span>.cachedBind[name] = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> cache = <span class="keyword">this</span>.cachedBind[name];</span><br><span class="line">  <span class="keyword">if</span> (!cache[action] || cache[action].oriFn !== fn) &#123;</span><br><span class="line">    cache[action] = &#123;</span><br><span class="line">      fn: fn.bind(<span class="keyword">this</span>, name, action),</span><br><span class="line">      oriFn: fn,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cache[action].fn;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">validateFieldsInternal(fields, &#123;</span><br><span class="line">  fieldNames,</span><br><span class="line">  action,</span><br><span class="line">  options = &#123;&#125;,</span><br><span class="line">&#125;, callback) &#123;</span><br><span class="line">  <span class="keyword">const</span> allRules = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> allValues = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> allFields = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> alreadyErrors = &#123;&#125;;</span><br><span class="line">  fields.forEach(<span class="function">(<span class="params">field</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> name = field.name;</span><br><span class="line">    <span class="keyword">if</span> (options.force !== <span class="literal">true</span> &amp;&amp; field.dirty === <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (field.errors) &#123;</span><br><span class="line">        <span class="keyword">set</span>(alreadyErrors, name, &#123; errors: field.errors &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> fieldMeta = <span class="keyword">this</span>.fieldsStore.getFieldMeta(name);</span><br><span class="line">    <span class="keyword">const</span> newField = &#123;</span><br><span class="line">      ...field,</span><br><span class="line">    &#125;;</span><br><span class="line">    newField.errors = <span class="literal">undefined</span>;</span><br><span class="line">    newField.validating = <span class="literal">true</span>;</span><br><span class="line">    newField.dirty = <span class="literal">true</span>;</span><br><span class="line">    allRules[name] = <span class="keyword">this</span>.getRules(fieldMeta, action);</span><br><span class="line">    allValues[name] = newField.value;</span><br><span class="line">    allFields[name] = newField;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.setFields(allFields);</span><br><span class="line">  <span class="comment">// in case normalize</span></span><br><span class="line">  <span class="built_in">Object</span>.keys(allValues).forEach(<span class="function">(<span class="params">f</span>) =&gt;</span> &#123;</span><br><span class="line">    allValues[f] = <span class="keyword">this</span>.fieldsStore.getFieldValue(f);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (callback &amp;&amp; isEmptyObject(allFields)) &#123;</span><br><span class="line">    callback(isEmptyObject(alreadyErrors) ? <span class="literal">null</span> : alreadyErrors,</span><br><span class="line">      <span class="keyword">this</span>.fieldsStore.getFieldsValue(fieldNames));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> validator = <span class="keyword">new</span> AsyncValidator(allRules);</span><br><span class="line">  <span class="keyword">if</span> (validateMessages) &#123;</span><br><span class="line">    validator.messages(validateMessages);</span><br><span class="line">  &#125;</span><br><span class="line">  validator.validate(allValues, options, (errors) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> errorsGroup = &#123;</span><br><span class="line">      ...alreadyErrors,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (errors &amp;&amp; errors.length) &#123;</span><br><span class="line">      errors.forEach(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> fieldName = e.field;</span><br><span class="line">        <span class="keyword">const</span> field = <span class="keyword">get</span>(errorsGroup, fieldName);</span><br><span class="line">        if (typeof field !== 'object' || Array.isArray(field)) &#123;</span><br><span class="line">          <span class="keyword">set</span>(errorsGroup, fieldName, &#123; errors: [] &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> fieldErrors = <span class="keyword">get</span>(errorsGroup, fieldName.concat('.errors'));</span><br><span class="line">        fieldErrors.push(e);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    const expired = [];</span><br><span class="line">    const nowAllFields = &#123;&#125;;</span><br><span class="line">    <span class="built_in">Object</span>.keys(allRules).forEach(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> fieldErrors = <span class="keyword">get</span>(errorsGroup, name);</span><br><span class="line">      const nowField = this.fieldsStore.getField(name);</span><br><span class="line">      // avoid concurrency problems</span><br><span class="line">      if (nowField.value !== allValues[name]) &#123;</span><br><span class="line">        expired.push(&#123;</span><br><span class="line">          name,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        nowField.errors = fieldErrors &amp;&amp; fieldErrors.errors;</span><br><span class="line">        nowField.value = allValues[name];</span><br><span class="line">        nowField.validating = <span class="literal">false</span>;</span><br><span class="line">        nowField.dirty = <span class="literal">false</span>;</span><br><span class="line">        nowAllFields[name] = nowField;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.setFields(nowAllFields);</span><br><span class="line">    <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">      <span class="keyword">if</span> (expired.length) &#123;</span><br><span class="line">        expired.forEach(<span class="function">(<span class="params">&#123; name &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> fieldErrors = [&#123;</span><br><span class="line">            message: <span class="string">`<span class="subst">$&#123;name&#125;</span> need to revalidate`</span>,</span><br><span class="line">            field: name,</span><br><span class="line">          &#125;];</span><br><span class="line">          <span class="keyword">set</span>(errorsGroup, name, &#123;</span><br><span class="line">            expired: <span class="literal">true</span>,</span><br><span class="line">            errors: fieldErrors,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      callback(isEmptyObject(errorsGroup) ? <span class="literal">null</span> : errorsGroup,</span><br><span class="line">        <span class="keyword">this</span>.fieldsStore.getFieldsValue(fieldNames));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li><p>createForm(options) 基于 createBaseForm，为 HOC 组件注入默认的 getForm 方法，将 form 表单操作函数工具集通过 props 注入到用户自定义表单组件中。form 中含有的方法，参见上文。</p>
</li>
<li><p>createDOMForm(option) 基于 createBaseForm，在传递给用户自定义表单组件的 props.form 混入 validateFieldsAndScroll 方法，校验失败时滚动到首个错误字段处。该方法引用了 react-dom，只适用于浏览器平台，不适用于手机端。</p>
<ul>
<li>validateFieldsAndScroll(ns, opt, cb) 基于 dom-scroll-into-view 库实现，首先通过 getBoundingClientRect 获得校验失败字段的 top 值，其次通过 getComputedStyle 或 style 属性获得字段节点首个滚动的父元素，最后调用 dom-scroll-into-view 库提供的 api 滚动页面。</li>
</ul>
</li>
<li><p>FormScope 以组件形式提供接口。option 配置项通过 props 传入，在 render 阶段调用 createDOMForm，并将 form 传入函数组件 children 中。</p>
</li>
<li><p>createFormField 生成 Field 实例。</p>
</li>
</ol>
<h2 id="antd-Form-组件"><a href="#antd-Form-组件" class="headerlink" title="antd-Form 组件"></a>antd-Form 组件</h2><h3 id="Form-组件"><a href="#Form-组件" class="headerlink" title="Form 组件"></a>Form 组件</h3><p>Form 组件本身并不承载逻辑，而是通过 props.className, props.prefixCls, props.layout, props.hideRequiredMark, props.onSubmit 设定注入 form 原生节点的样式类及绑定函数，以影响表单内部节点渲染时的样式。同时，Form 组件将为子组件传入 context.vertical 以区分是水平布局，还是垂直布局。</p>
<p>Form 组件拥有 Item 静态属性指向 FormItem 组件；createFormField 静态方法指向 rc-form 提供的同名方法；createForm 静态方法调用 rc-form 提供的 createBaseForm 方法，用于装饰用户自定义表单组件。</p>
<h3 id="FormItem-组件"><a href="#FormItem-组件" class="headerlink" title="FormItem 组件"></a>FormItem 组件</h3><p>FormItem 组件用于设定表单项的布局，其可配置的 props 属性包含必填标记 hideRequiredMark, 字段名 label, 校验文案 help, 额外内容 extra。</p>
<p>同受控组件和非受控组件，FormItem 组件提供两种使用方式：其一，当未设定校验信息相关的 props 属性时，FormItem 组件将自动根据内部字段组件实例的状况渲染校验文案及校验状态；其二，当设定校验信息相关的 props 属性时，FormItem 组件将根据开发者传入的 props 渲染校验文案及校验状态。在第一种使用方式下，FormItem 组件只可以包含一个字段组件；在第二种使用方式下，FormItem 组件中可以包含多个字段组件，布局也更为灵活。这里说的相关 props 属性包含：校验文案 help, 校验状态 validateStatus（用于绘制反馈图标）, 必填标识 required, 字段名 id（影响点击 label 时聚焦哪个字段元素）。</p>
<p>那么，FormItem 又是怎样自动收集字段组件的校验数据呢？因为在 BaseForm  组件提供的 getFieldProp 方法，字段的字段名、元数据和实时数据都将作为特殊的 props 属性传入到字段组件中，所以作为字段组件容器的 FormItem，就可以通过这些特殊的 props 属性判断子组件实例是不是一个字段组件实例，当其为字段组件实例时，进一步收集实时的校验信息，从校验规则中获取是否必填标识，以完成渲染。</p>
<p>此外，FormItem 可以使用 props.labelCol, props.wrapperCol 属性栅格化布局标签组件和字段组件，其实现借助于 antd 提供的 Row, Col 组件。当点击标签 label 时，FormItem 提供的绑定函数能为字段组件获得焦点。这里不再多加介绍。</p>
<p>获取字段组件实例的相关源码为：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getControls(children: React.ReactNode, <span class="attr">recursively</span>: boolean) &#123;</span><br><span class="line">  <span class="keyword">let</span> controls: React.ReactElement&lt;any&gt;[] = [];</span><br><span class="line">  <span class="keyword">const</span> childrenArray = React.Children.toArray(children);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; childrenArray.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!recursively &amp;&amp; controls.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> child = childrenArray[i] <span class="keyword">as</span> React.ReactElement&lt;any&gt;;</span><br><span class="line">    <span class="keyword">if</span> (child.type &amp;&amp;</span><br><span class="line">      (child.type <span class="keyword">as</span> any === FormItem || (child.type <span class="keyword">as</span> any).displayName === <span class="string">'FormItem'</span>)) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!child.props) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (FIELD_META_PROP <span class="keyword">in</span> child.props) &#123; <span class="comment">// And means FIELD_DATA_PROP in child.props, too.</span></span><br><span class="line">      controls.push(child);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child.props.children) &#123;</span><br><span class="line">      controls = controls.concat(<span class="keyword">this</span>.getControls(child.props.children, recursively));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> controls;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以上即简要分析了 ant-desing 中 Form 组件的实现，文中难免有谬误或思考上的不足处，仍望读者海涵。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>antd</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>react</tag>
        <tag>antd</tag>
      </tags>
  </entry>
  <entry>
    <title>react-jsonschema-form源码分析</title>
    <url>/2018/10/10/frontend/library/react-jsonschema-form%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>frontend</category>
        <category>library</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>Reflect, Proxy</title>
    <url>/2018/10/09/frontend/js/Reflect,%20Proxy/</url>
    <content><![CDATA[<h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><p>ES6 提供的 API，集成语言层面的对象操作（操作与 Proxy 一一对应，且为函数形式）。</p>
<ul>
<li>Reflect.get(target, name, receiver): 获取属性。</li>
<li>Reflect.set(target, name, value, receiver): 对属性赋值。</li>
<li>Reflect.defineProperty(target, name, desc): 修改属性的描述符。</li>
<li>Reflect.deleteProperty(target, name): 删除属性。</li>
<li>Reflect.has(target, name): propKey in proxy 判断。</li>
<li>Reflect.ownKeys(target): 返回对象的自有属性。</li>
<li>Reflect.enumerate(target): 以迭代器形式获取对象的可枚举属性。</li>
<li>Reflect.isExtensible(target): 判断对象是否可扩展。</li>
<li>Reflect.preventExtensions(target): 使对象不可扩展。</li>
<li>Reflect.getOwnPropertyDescriptor(target, name): 获取属性的描述符。</li>
<li>Reflect.getPrototypeOf(target): 获取对象的 <strong>proto</strong> 属性。</li>
<li>Reflect.setPrototypeOf(target, prototype): 设置对象的原型。</li>
<li>Reflect.apply(target, thisArg, args): 以 thisArg 为上下文执行 target 函数。</li>
<li>Reflect.construct(target, args): 创建 target 实例。</li>
</ul>
<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p>Proxy 在语言层面，拦截针对对象的操作。ES6 原生提供 Proxy 构造函数，用来生成 Proxy 实例。</p>
<p>使用 let proxy = new Proxy(target, handler); 创建 Proxy 实例。参数 target 可以是对象，也可以是函数。handler 为设定拦截操作的集合。操作 proxy，将同时影响 target。</p>
<p>Proxy.revocable 方法返回一个可取消的 Proxy 实例。返回值中，proxy 属性即为 Proxy 实例，revoke 方法用于取消 Proxy 实例。</p>
<p>在 Proxy 代理的情况下，目标对象内的 this 关键字将指向 Proxy 实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> proto = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="keyword">get</span>(target, propertyKey, receiver) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'GET '</span> + propertyKey);</span><br><span class="line">    <span class="keyword">return</span> target[propertyKey];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(proto);</span><br><span class="line">obj.foo <span class="comment">// "GET foo"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;proxy, revoke&#125; = <span class="built_in">Proxy</span>.revocable(target, handler);</span><br><span class="line"></span><br><span class="line">proxy.foo = <span class="number">123</span>;</span><br><span class="line">proxy.foo <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line">revoke();</span><br><span class="line">proxy.foo <span class="comment">// TypeError: Revoked</span></span><br></pre></td></tr></table></figure>
<p>可拦截的操作包含：</p>
<ul>
<li>get(target, propKey, receiver): 拦截对象属性的读取。参数 reveiver 为操作行为所针对的对象，通常是 proxy 实例。</li>
<li>set(target, propKey, value): 拦截对象属性的设置，返回布尔值。</li>
<li>has(target, propKey): 拦截 propKey in proxy 操作，返回布尔值。</li>
<li>delete(target, propKey): 拦截 delete proxy[propKey] 的操作，返回布尔值。</li>
<li>ownKeys(target): 拦截 Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for…in 循环，返回目标对象自身所有的属性，Object.keys() 返回仅包括目标对象自身的可遍历属性。</li>
<li>getOwnPropertyDescriptor(target, propKey): 拦截 Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。</li>
<li>defineProperty(target, propKey, propDesc): 拦截 Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回布尔值。</li>
<li>preventExtensions(target): 拦截 Object.preventExtensions(proxy)，返回布尔值。</li>
<li>getPrototypeOf(target): 拦截 Object.getPrototypeOf(proxy)，返回对象。</li>
<li>isExtensible(target): 拦截 Object.isExtensible(proxy)，返回布尔值。</li>
<li>setPrototypeOf(target, proto): 拦截 Object.setPrototypeOf(proxy, proto)，返回布尔值。</li>
<li>apply(target, object, args): 拦截 Proxy 实例作为函数调用的操作，比如 proxy(…args)、proxy.call(object, …args)、proxy.apply(…)。</li>
<li>construct(target, args): 拦截 Proxy 实例作为构造函数调用的操作，比如 new proxy(…args)。</li>
</ul>
<h2 id="harmony-reflect"><a href="#harmony-reflect" class="headerlink" title="harmony-reflect"></a>harmony-reflect</h2><p>作为垫片，提供 Reflect 全局对象，扩展 Object 及 Proxy。</p>
<h3 id="Reflect-1"><a href="#Reflect-1" class="headerlink" title="Reflect"></a>Reflect</h3><p>扩展或提供平台提供的 Reflect 对象。</p>
<ul>
<li>Reflect.get(target, name, receiver) 方法实现: 首先，若 target 为 Proxy 实例，获取并调用 handler.get 方法；其次，若 target 不是 Proxy 实例，通过 Object.getOwnPropertyDescriptor 获取属性描述符，若属性描述符为 undefined，尝试通过 Object.getPrototypeOf 方法获取原型的 name 属性；其次，若属性描述符不是 undefined，尝试获取属性描述符中的 value 属性或执行 get 方法。</li>
<li>Reflect.set(target, name, value, receiver) 方法: 首先，若 target 为 Proxy 实例，获取并调用 handler.set 方法；其次，若 target 不是 Proxy 实例，通过 Object.getOwnPropertyDescriptor 获取属性描述符，若属性描述符为 undefined，尝试通过 Object.getPrototypeOf 方法调用原型的 set 方法；其次，若属性描述符不是 undefined，且访问器属性 set 为真值，尝试以 receiver 为上下文调用属性描述符中的 set 方法；其次，通过 Object.getOwnPropertyDescriptor 获取 receiver 对象的属性描述符，若属性描述符为 undefined，调用 Object.defineProperty 重新设置属性描述符，更新 value 值；其次，若 receiver 对象的属性描述符不是 undefined，校验 receiver 是否可扩展，若可扩展，调用 Object.defineProperty 重新设置属性描述符。</li>
<li>Reflect.defineProperty(target, name, desc) 方法: 首先，若 target 为 Proxy 实例，获取并调用 handler.defineProperty 方法；其次，若 target 不是 Proxy 实例，通过 Object.getOwnPropertyDescriptor 获取当前的属性描述符，当属性描述符的 configurable 属性为 false 时，运行原有的 Object.defineProperty 将报错，实现上将引起报错的情形全部以 return false 形式剔除，随后再调用 Object.defineProperty，重新设定属性描述符。</li>
<li>Reflect.deleteProperty(target, name) 方法: 首先，若 target 为 Proxy 实例，获取并调用 handler.deleteProperty 方法；其次，通过 Object.getOwnPropertyDescriptor 获取当前的属性描述符并判断其 configurable 属性，若属性为真，调用 delete target[name] 语句，否则返回 false。</li>
<li>Reflect.has(target, name) 方法: 执行 name in target 语句。</li>
<li>Reflect.ownKeys(target) 方法: 首先，若 target 为 Proxy 实例，获取并调用 handler.ownKeys 方法；其次，调用 Object.getOwnPropertyNames 方法。</li>
<li>Reflect.enumerate(target) 方法: 首先，若 target 为 Proxy 实例，获取并调用 handler.enumerate 方法；其次，通过 for…in 语句获取目标的可枚举属性集合，以迭代器形式输出。</li>
<li>Reflect.isExtensible(target) 方法: 直接调用 Object.isExtensible 方法。</li>
<li>Reflect.preventExtensions(target) 方法: 首先，若 target 为 Proxy 实例，获取并调用 handler.preventExtensions 方法；其次，调用 Object.preventExtensions 方法。</li>
<li>Reflect.getOwnPropertyDescriptor(target, name) 方法: 直接调用 Object.getOwnPropertyDescriptor 方法。</li>
<li>Reflect.getPrototypeOf(target) 方法: 直接调用 Object.getPrototypeOf 方法。</li>
<li>Reflect.setPrototypeOf(target, prototype): 首先，若 target 为 Proxy 实例，获取并调用 handler.setPrototypeOf 方法；其次，判断目标的可扩展性，若其可扩展，以 try-catch 语句执行 Object.setPrototypeOf 方法，以捕获错误。</li>
<li>Reflect.apply(target, thisArg, args): 调用 Function.prototype.apply.call(target, thisArg, args)。</li>
<li>Reflect.construct(target, args, newTarget): 首先，若 target 为 Proxy 实例，获取并调用 handler.construct 方法；其次，在 newTarget 为 undefined 或与 target 等值的基础上，基于 target 并以 null 为上下文生成构造函数；否则，Object.create(newTarget.prototype) 为上文生成构造函数。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">Reflect</span> = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  enumerate: <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> handler = directProxies.get(target);</span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line">    <span class="keyword">if</span> (handler !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      result = handler.enumerate(handler.target);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> target) &#123; result.push(name); &#125;;      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> l = +result.length;</span><br><span class="line">    <span class="keyword">var</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      next: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (idx === l) <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: result[idx++] &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  construct: <span class="function"><span class="keyword">function</span>(<span class="params">target, args, newTarget</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> handler = directProxies.get(target);</span><br><span class="line">    <span class="keyword">if</span> (handler !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> handler.construct(handler.target, args, newTarget);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target !== <span class="string">"function"</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"target is not a function: "</span> + target);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newTarget === <span class="literal">undefined</span> || newTarget === target) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> (<span class="built_in">Function</span>.prototype.bind.apply(target, [<span class="literal">null</span>].concat(args)));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> newTarget !== <span class="string">"function"</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"newTarget is not a function: "</span> + target);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> proto = newTarget.prototype;</span><br><span class="line">      <span class="keyword">var</span> instance = (<span class="built_in">Object</span>(proto) === proto) ? <span class="built_in">Object</span>.create(proto) : &#123;&#125;;</span><br><span class="line">      <span class="keyword">var</span> result = <span class="built_in">Function</span>.prototype.apply.call(target, instance, args);</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>(result) === result ? result : instance;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h3><p>构建 const vHandler = function Validator(target, handler){} 构造函数，用于对象操作并作校验。当平台提供 Proxy api 时，vHandler 将作为 Proxy.create, Proxy.createFunction 的参数，以改写 global.Proxy(target, handler) 构造函数。生成的 proxy 实例将以 { [proxy]: vHandler } 的形式存入 WeakMap 实例 directProxies 中，用于使 Object 的部分原型方法先作代理处理，再作常规处理。</p>
<p>Validator 实例方法（proxy 为 new Proxy(target, handler) 实例）：</p>
<ul>
<li>proxy.get(receiver, propKey, receiver): 若没有设置 handler.get，调用 Reflect.get 方法；若设置，以 handler 为上下文调用 handler.get，并校验 target[propKey] 的 configurable, writable, get 属性或方法，特定条件下作报错处理。</li>
<li>proxy.set(receiver, propKey, value): 若没有设置 handler.set，调用 Reflect.set 方法；若设置，以 handler 为上下文调用 handler.set，并校验 target[propKey] 的 configurable, writable, get 属性或方法，特定条件下作报错处理。</li>
<li>proxy.has(propKey): 若没有设置 handler.has，调用 Reflect.has 方法；若设置，以 handler 为上下文调用 handler.has，当返回结果为 false 时，并校验 target[propKey] 的 configurable 属性, 及可扩展性，特定条件下作报错处理。</li>
<li>proxy.delete(propKey): 若没有设置 handler.deleteProperty，调用 Reflect.deleteProperty 方法；若设置，以 handler 为上下文调用 handler.deleteProperty，校验 target[propKey] 的可扩展性，特定条件下作报错处理。</li>
<li>proxy.ownKeys(): 若没有设置 handler.ownKeys，调用 Reflect.ownKeys 方法；若设置，以 handler 为上下文调用 handler.ownKeys，并校验 target 各属性的可扩展性，特定条件下作报错处理。</li>
<li>proxy.enumate(), proxy.iterate(): 若没有设置 handler.enumate，调用 Reflect.enumate 方法；若设置，以 handler 为上下文调用 handler.enumate，并校验 target 各属性的可扩展性，特定条件下作报错处理。返回迭代器。</li>
<li>proxy.getPropertyDescriptor(propKey): 若 proxy.has 返回否值，返回 undefined；否则以包装 proxy.set, proxy.get 形式返回属性描述符，且 enumerable, configurable 属性均为真值。</li>
<li>proxy.getOwnPropertyDescriptor(propKey): 若没有设置 handler.getOwnPropertyDescriptor，调用 Reflect.getOwnPropertyDescriptor 方法；若设置，以 handler 为上下文调用 handler.getOwnPropertyDescriptor，校验 target[propKey] 的可扩展性，特定条件下作报错处理。</li>
<li>proxy.defineProperty(propKey, propDesc): 若没有设置 handler.defineProperty，调用 Reflect.defineProperty 方法；若设置，以 handler 为上下文调用 handler.defineProperty，并校验 target[propKey] 的可扩展性，特定条件下作报错处理。</li>
<li>proxy.preventExtensions(): 若没有设置 handler.preventExtensions，调用 Reflect.preventExtensions 方法；若设置，以 handler 为上下文调用 handler.preventExtensions，并校验 target[propKey] 的可扩展性，特定条件下作报错处理。</li>
<li>proxy.getPrototypeOf(): 若没有设置 handler.getPrototypeOf，调用 Reflect.getPrototypeOf 方法；若设置，以 handler 为上下文调用 handler.getPrototypeOf，并校验 target[propKey] 的可扩展性，特定条件下作报错处理。</li>
<li>proxy.isExtensible(): 若没有设置 handler.isExtensible，调用 Reflect.isExtensible 方法；若设置，以 handler 为上下文调用 handler.isExtensible，并校验 target[propKey] 的可扩展性，特定条件下作报错处理。</li>
<li>proxy.setPrototypeOf(proto): 若没有设置 handler.setPrototypeOf，调用 Reflect.setPrototypeOf 方法；若设置，以 handler 为上下文调用 handler.setPrototypeOf，并校验 target[propKey] 的可扩展性，特定条件下作报错处理。</li>
<li>proxy.apply(target, thisBinding, args): 若没有设置 handler.apply，调用 Reflect.apply 方法；若设置，以 handler 为上下文调用 handler.apply。</li>
<li>proxy.construct(target, args, newTarget): 若没有设置 handler.construct，调用 Reflect.construct 方法；若设置，以 handler 为上下文调用 handler.construct。</li>
</ul>
<h3 id="Object-扩展"><a href="#Object-扩展" class="headerlink" title="Object 扩展"></a>Object 扩展</h3><ul>
<li>Object.preventExtensions(subject): 若 subject 为代理实例，从 directProxies 中获取代理对象的 vHandler，并调用代理对象的 preventExtensions 方法；其次尝试调用 Object.preventExtensions 原始方法。</li>
<li>Object.seal(subject): 密封对象，可改变现有属性，即将所有属性描述符的 configurable 置为否。</li>
<li>Object.freeze(subject): 冻结对象，即将所有属性描述符的 configurable, writable 置为否（访问器属性的状况下仅需处理 configurable 属性）。</li>
<li>Object.isExtensible(subject): 若 subject 为代理实例，从 directProxies 中获取代理对象的 vHandler，并调用代理对象的 isExtensible 方法；其次尝试调用 Object.isExtensible 原始方法。</li>
<li>Object.isSealed(subject): 判断是否密封。</li>
<li>Object.isFrozen(subject): 判断是否冻结。</li>
<li>Object.getOwnPropertyDescriptor(subject, name): 若 subject 为代理实例，从 directProxies 中获取代理对象的 vHandler，并调用代理对象的 getOwnPropertyDescriptor 方法；其次尝试调用 Object.getOwnPropertyDescriptor 原始方法。</li>
<li>Object.defineProperty(subject, name, desc): 若 subject 为代理实例，从 directProxies 中获取代理对象的 vHandler，并调用代理对象的 defineProperty 方法；其次尝试调用 Object.defineProperty 原始方法。</li>
<li>Object.defineProperties(subject, descs): 若 subject 为代理实例，从 directProxies 中获取代理对象的 vHandler，针对属性逐个调用代理对象的 defineProperty 方法；其次尝试调用 Object.defineProperties 原始方法。</li>
<li>Object.keys(subject): 若 subject 为代理实例，从 directProxies 中获取代理对象的 vHandler，并调用代理对象的 ownKeys 方法，剔除其中的不可枚举项；其次尝试调用 Object.keys 原始方法。</li>
<li>Object.getOwnPropertyNames(subject): 若 subject 为代理实例，从 directProxies 中获取代理对象的 vHandler，并调用代理对象的 ownKeys 方法；其次尝试调用 Object.getOwnPropertyNames 原始方法。</li>
<li>Object.getOwnPropertySymbols(subject): 平台提供 Object.getOwnPropertySymbols 原始方法的基础下封装。若 subject 为代理实例，从 directProxies 中获取代理对象的 vHandler，返回空数组；其次尝试调用 Object.getOwnPropertySymbols 原始方法。</li>
<li>Object.assign(target, …source): 平台提供 Object.assign 原始方法的基础下封装。若各参数均为代理对象，直接调用 Object.assign 原始方法；否则，遍历属性以拷贝。</li>
<li>Object.setPrototypeOf(target, proto): 若 target 为代理实例，从 directProxies 中获取代理对象的 vHandler，并调用代理对象的 setPrototypeOf 方法；其次尝试调用 Object.setPrototypeOf 原始方法；其次通过 Object.defineProperty 设置target 的 <strong>proto</strong> 属性。</li>
<li>Object.prototype.isPrototypeOf(arg): 若 arg 为代理实例，通过 vHandler.getPrototypeOf 方法向上逐层获取 arg 的原型，原型同 this 作等值比较；否则直接调用 Object.prototype.isPrototypeOf 作判断。</li>
<li>Object.prototype.valueOf(): 若 this 为代理实例，从 directProxies 中获取代理对象的 target，以 target 作为上下文执行 Object.prototype.valueOf；否则，直接执行 Object.prototype.valueOf。</li>
<li>Object.prototype.toString(): 若 this 为代理实例，从 directProxies 中获取代理对象的 target，以 target 作为上下文执行 Object.prototype.toString；否则，直接执行 Object.prototype.toString。</li>
<li>Function.prototype.toString(): 若 this 为代理实例，从 directProxies 中获取代理对象的 target，以 target 作为上下文执行 Function.prototype.toString；否则，直接执行 Function.prototype.toString。</li>
<li>Date.prototype.toString(): 若 this 为代理实例，从 directProxies 中获取代理对象的 target，以 target 作为上下文执行 Date.prototype.toString；否则，直接执行 Date.prototype.toString。</li>
<li>Object.prototype.hasOwnProperty(propKey): 若 this 为代理实例，从 directProxies 中获取代理对象的 vHandler，调动 vHandler.getOwnPropertyDescriptor，并判断返回值是否为 undefined；否则，直接执行 Object.prototype.hasOwnProperty。</li>
<li>Array.isArray(subject): 若 subject 为代理实例，从 directProxies 中获取代理对象的 target，并调用 Array.isArray 原始方法判断 target 是否为数组；其次尝试调用 Array.isArray 原始方法。</li>
<li>Array.prototype.concat(…args): 使用 Array.prototype.slice 方法将 args 数组项中的代理实例数组拆解为普通数组，随后使用 Array.prototype.concat 原始方法拼接数组。</li>
</ul>
]]></content>
      <categories>
        <category>frontend</category>
        <category>es</category>
      </categories>
      <tags>
        <tag>carrier</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>前端构建工具 dawn 不完全解密</title>
    <url>/2018/09/11/frontend/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7dawn/</url>
    <content><![CDATA[<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>dawn 是一个采用中间件技术实现的轻量的任务流协调器，它和 gulp, grunt 有异曲同工之妙。dawn 本身并不处理任务，转而交由中间件承担这一职能，如同 gulp, grunt 插件。在实现上，dawn 是 webpack 出台后的产物，就不需要像 gulp, grunt 那样关注任务流的始点 —— 文件位置，而更容易聚焦于任务的分解，将编译、压缩作业交给 dn-middleware-webpack 中间件。若说 gulp 中的任务流是鱼跃似的，一个跟着另一个，那么，dawn 通过 ctx 上下文使得两个任务之间可以借助事件或实例属性进行通信。dawn 的中间件实现机制如同 koa，其一使用 next 引用下一个中间件串联任务流，其二以继承事件模型的 ctx 实例作为上下文。其核心代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> _execQueue(middlewares, args, onFail) &#123;</span><br><span class="line">    <span class="keyword">const</span> middleware = middlewares.shift();</span><br><span class="line">    <span class="keyword">if</span> (!middleware) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// this.load 安装中间件，并执行中间件的外层函数，获得实际的任务逻辑 handler</span></span><br><span class="line">    <span class="keyword">const</span> handler = <span class="keyword">await</span> <span class="keyword">this</span>.load(middleware);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> next = <span class="function">(<span class="params">args</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 若返回真值，在 watch 状态下，也只执行一次</span></span><br><span class="line">      <span class="keyword">if</span> (next.__result) <span class="keyword">return</span> next.__result;</span><br><span class="line"></span><br><span class="line">      next.__result = <span class="keyword">this</span>._execQueue(middlewares, args, onFail)</span><br><span class="line">        .catch(<span class="function"><span class="params">err</span> =&gt;</span> onFail(err));</span><br><span class="line">      <span class="keyword">return</span> next.__result;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> handler.call(<span class="keyword">this</span>, next, <span class="keyword">this</span>, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为 dawn 是一个任务流协调器，使得它就像一架航母，其能力仰赖于战斗机群 —— 由丰富的中间件、模板构成的生态系统。第一，这样使得 dawn 更着眼于为开发团队提供服务（两者呈互为因果的关系）。dawn 内建了复合远程配置的功能。不少公司会有私有的 npm 仓库，开发的 dn 中间件、模板先期都会在这些私有仓库中发展成形。借助于 dn config registry <a href="http://your_server_url" target="_blank" rel="noopener">http://your_server_url</a> 命令，dawn 安装中间件时会从这些私有仓库中拉取中间件或模板。对于配置文件，借助于 dn config server <a href="http://your_server_url" target="_blank" rel="noopener">http://your_server_url</a> 命令，dawn 也会从私有服务器中拉取远程配置，并与本地配置合并。如此，既能保有模板的闭源特征，又能实现配置文件的复用。扯开一个话题，使用 .yml 文件配置选项、将配置文件存于远端，这和我稍有耳闻的 spring boot 项目有些相仿。</p>
<p>第二，为了开发中间件的方便，ctx 必然需要提供大而全的功能。以下简要地展示 ctx 提供的 api 列表：</p>
<ul>
<li>cli: 命令行 Command 实例。</li>
<li>command: 当前执行的命令，如 init, dev, build 等。</li>
<li>pipeline: 当前命令实际所用中间件列表。</li>
<li>cwd: 项目路径。</li>
<li>project: 项目 package.json 文件内容。</li>
<li>middlewareMgr: 中间件管理器，用于查询私有中心的中间件列表，或者安装中间件。</li>
<li>templateMgr: 模板管理器，用于查询私有中心的模板列表，或者文件重命名，或者下载模板。</li>
<li>conf: rc配置管理器，用于获取本地或远程 rc 配置，或者设置 rc 配置，默认获取 .dawnrc 文件。</li>
<li>console: 命令行编辑器 console。</li>
<li>inquirer, utils.inquirer : 命令行交互接口，即 inquirer 类库。</li>
<li>utils.exec(script, opts): 执行 script 命令，返回 promise；utils.exec.withResult(script, opts) 等待并返回执行结果。</li>
<li>utils.writeFile(filename, content): 写文件，返回 promise。</li>
<li>utils.readFile(filename): 读文件，返回 promise。</li>
<li>utils.del: 删除文件，返回 promise。</li>
<li>utils.mkdirp: 创建目录，返回 promise。</li>
<li>download: fetch 响应。</li>
<li>sleep: 延时执行。</li>
<li>prompt: 使用 inquirer.prompt 在命令行编辑器创建引导式交互界面。</li>
<li>utils.mod: 模块管理器，用于执行 npm 命令，或者安装依赖，或者下载模板（缓存在计算机的特定位置），或者获取 npm 包信息。</li>
<li>utils.open: 打开浏览器，即 react-dev-utils/openBrowser 模块。</li>
<li>utils.oneport: 获取一个空闲的端口，即 oneport 类库。</li>
<li>utils.fetch: fetch 响应。</li>
<li>utils.yaml: 通过 js-yaml 类库解析或编译 .yml 文件格式数据。</li>
<li>utils.globby: 通过匹配规则获取文件路径，即 <a href="https://github.com/sindresorhus/globby" target="_blank" rel="noopener">globby 类库</a>。</li>
<li>utils.confman: 配置文件加载器，即 <a href="https://github.com/Houfeng/confman" target="_blank" rel="noopener">confman 类库</a></li>
<li>utils.streamToBuffer, utils.stream2buffer: 将可读流转化成 字符串或 buffer，返回 promise。</li>
<li>utils.bufferToStream, utils.buffer2stream: 将字符串或 buffer 转化成可读流，返回 promise。</li>
<li>utils.copydir: 拷贝文件夹，返回 promise。</li>
<li>utils.findCommand(dirname, command): 获取执行脚本文件。</li>
<li>load(opts): 加载中间件，并执行外层函数。</li>
<li>exec(middlewares, initailArgs): 构建任务流，可用于在中间件中构建子任务流。</li>
</ul>
<h2 id="常用中间件"><a href="#常用中间件" class="headerlink" title="常用中间件"></a>常用中间件</h2><h3 id="dn-middleware-webpack"><a href="#dn-middleware-webpack" class="headerlink" title="dn-middleware-webpack"></a>dn-middleware-webpack</h3><p>概述：基于 webpack3 实现的中间件，打包模块。本地开发模式也将打包模块，而不是读取 webpack 缓存数据。</p>
<p>奥妙：</p>
<ol>
<li>dn-middleware-webpack 在回调中执行后续中间件的处理逻辑。</li>
<li>通过 vmodule-webpack-plugin 插件将 config.yml 类配置文件注入为可以 import 引入的虚拟模块。</li>
<li>ctx 中添加 webpack 属性，即 webpack 类库。</li>
</ol>
<p>选项：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>意义</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>config</td>
<td>不同环境通过加载配置文件的模块名和文件路径，使用 <a href="https://github.com/Houfeng/vmodule-webpack-plugin" target="_blank" rel="noopener">vmodule-webpack-plugin</a> 创建虚拟模块</td>
<td>{ name: ‘$config’, path: ‘./config’ }</td>
</tr>
<tr>
<td>configFile</td>
<td>webpack 配置文件路径，配置文件导出函数有效</td>
<td>‘./webpack.config.js’</td>
</tr>
<tr>
<td>mode</td>
<td>模式</td>
<td>undefined</td>
</tr>
<tr>
<td>entry</td>
<td>入口文件</td>
<td>[‘./src/*.{js,jsx,ts,tsx}’]</td>
</tr>
<tr>
<td>inject</td>
<td>注入模板中的公用入口文件</td>
<td>[‘./src/*.{js,jsx,ts,tsx}’]</td>
</tr>
<tr>
<td>template</td>
<td>模板文件，模板会加载同名的入口文件</td>
<td>[‘./src/assets/*.html’]</td>
</tr>
<tr>
<td>output</td>
<td>打包文件目录</td>
<td>‘./build/‘</td>
</tr>
<tr>
<td>publicPath</td>
<td>浏览器端访问打包文件的路径</td>
<td>undefined</td>
</tr>
<tr>
<td>folders</td>
<td>不同文件类型的打包目录</td>
<td>{ js: ‘js’, css: ‘css’, img: ‘img’, font: ‘font’, html: ‘’ }</td>
</tr>
<tr>
<td>chunkFilename</td>
<td>懒加载模块名</td>
<td>‘chunks/[name]-[chunkhash].js’</td>
</tr>
<tr>
<td>umd</td>
<td>值为对象时，混合到 webpackConfig.output 配置中</td>
<td>undefined</td>
</tr>
<tr>
<td>external</td>
<td>是否使用外部扩展</td>
<td>undefined</td>
</tr>
<tr>
<td>externals</td>
<td>外部扩展</td>
<td>{ ‘jquery’: ‘jQuery’, ‘zepto’: ‘Zepto’, ‘react’: ‘React’, ‘react-dom’: ‘ReactDOM’ }</td>
</tr>
<tr>
<td>sourceMap</td>
<td>是否生成 source map，开发环境默认生成，false 时不生成；打包时置为 true 才生成</td>
<td>undefined</td>
</tr>
<tr>
<td>watch</td>
<td>是否使用 webpack 监听文件变更，执行 compiler.watch 或 compiler.run 的差别</td>
<td>undefined</td>
</tr>
<tr>
<td>watchOpts</td>
<td>watch 配置</td>
<td>{ aggregateTimeout: 600, ignored: /node_modules/ }</td>
</tr>
<tr>
<td>babel</td>
<td>babel-loader 选项相关，参见下文</td>
<td></td>
</tr>
<tr>
<td>rules</td>
<td>配置额外的加载器，默认加载器包含 babel-loader, vue-loader, json-loader, raw-loader, ejs-loader, url-loade, css-loader, less-loader, fast-sass-loader，可加载的文件可想而知</td>
<td>undefined</td>
</tr>
<tr>
<td>cssModules</td>
<td>是否使用 css modules</td>
<td>undefined</td>
</tr>
</tbody>
</table>
<p>babel 选项：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>意义</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>presets</td>
<td>配置额外的 presets，默认包含 ‘babel-preset-env’, ‘babel-preset-react’, ‘babel-preset-stage-0’</td>
<td>undefined</td>
</tr>
<tr>
<td>plugins</td>
<td>配置额外的 plugins，默认包含 ‘babel-plugin-typecheck’, ‘babel-plugin-transform-decorators-legacy’, ‘babel-plugin-transform-runtime’</td>
<td>undefined</td>
</tr>
<tr>
<td>targets</td>
<td>作用于 ‘babel-preset-env’，设定编译后脚本的适配环境</td>
<td>undefined</td>
</tr>
<tr>
<td>browsers</td>
<td>适配的浏览器环境，默认适配 [ ‘last 2 versions’, ‘IE &gt;= 9’ ]</td>
<td>undefined</td>
</tr>
<tr>
<td>uglify</td>
<td>targets 中属性，使用 uglify.js 压缩脚本前是否已编译成 es5，默认是，false 为否</td>
<td>undefined</td>
</tr>
<tr>
<td>include</td>
<td>作用于 ‘babel-preset-env’，设定包含的插件</td>
<td>undefined</td>
</tr>
<tr>
<td>exclude</td>
<td>作用于 ‘babel-preset-env’，设定移除的插件</td>
<td>undefined</td>
</tr>
<tr>
<td>loose</td>
<td>作用于 ‘babel-preset-env’，是否允许插件启用 “loose” 转换，默认为否</td>
<td>undefined</td>
</tr>
<tr>
<td>modules</td>
<td>作用于 ‘babel-preset-env’，将es6模块语法转换为何种模块规范语法，默认为 ‘commonjs’</td>
<td>undefined</td>
</tr>
<tr>
<td>useBuiltIns</td>
<td>作用于 ‘babel-preset-env’，是否自动引入 ‘babel-ployfill’，默认使用时引入</td>
<td>undefined</td>
</tr>
<tr>
<td>spec</td>
<td>作用于 ‘babel-preset-env’，是否允许插件启用 “spec” 转换，更符合规范，编译较慢，默认为 false</td>
<td>undefined</td>
</tr>
<tr>
<td>debug</td>
<td>作用于 ‘babel-preset-env’</td>
<td>undefined</td>
</tr>
<tr>
<td>react</td>
<td>是否使用 ‘babel-preset-react’，默认使用，false 时不使用</td>
<td>undefined</td>
</tr>
<tr>
<td>transform</td>
<td>作用于 ‘babel-plugin-transform-runtime’</td>
<td>undefined</td>
</tr>
<tr>
<td>transform.helpers</td>
<td>是否内置 classCallCheck, extends 等，默认内置</td>
<td>undefined</td>
</tr>
<tr>
<td>transform.polyfill</td>
<td>是否内置 Promise, Set, Map, Symbol 等，默认内置</td>
<td>undefined</td>
</tr>
<tr>
<td>transform.regenerator</td>
<td>是否内置生成器函数，async 函数，默认内置</td>
<td>undefined</td>
</tr>
<tr>
<td>transform.moduleName</td>
<td>模块名，import 导入需要，默认为 ‘babel-runtime’</td>
<td>undefined</td>
</tr>
<tr>
<td>transform.useBuiltIns</td>
<td>默认自动引入</td>
<td>undefined</td>
</tr>
<tr>
<td>addExports</td>
<td>影响 ‘babel-plugin-add-module-exports’ 插件的使用（该插件可在模块转换成 common.js，无需从default 属性中取出模块导出内容），false 时不使用 ‘babel-plugin-add-module-exports’</td>
<td>undefined</td>
</tr>
<tr>
<td>strict</td>
<td>影响 ‘babel-plugin-transform-remove-strict-mode’ 插件的使用，true 时不使用</td>
<td>undefined</td>
</tr>
</tbody>
</table>
<p>事件：</p>
<ul>
<li>‘webpack.opts’，可用于修改 opts 配置项，参数 opts。</li>
<li>‘webpack.config’，可用于修改注入 webpack 的 config 配置，参数 config, webpack, opts。</li>
<li>‘webpack.compiler’，操纵 webpack 的编译器，参数 compiler。</li>
<li>‘webpack.stats’，可用于监控编译状态，参数 stats。</li>
</ul>
<h3 id="dn-middleware-server"><a href="#dn-middleware-server" class="headerlink" title="dn-middleware-server"></a>dn-middleware-server</h3><p>概述：基于 <a href="https://github.com/nokitjs/nokit" target="_blank" rel="noopener">nokit</a>，启动本地服务。首次执行时将在项目空间创建 server.yml 配置文件。</p>
<p>奥妙：</p>
<ol>
<li>在 nokit 服务器中设置拦截器，通过 <a href="https://github.com/nodejitsu/node-http-proxy" target="_blank" rel="noopener">httpProxy</a> 转发请求。</li>
<li>ctx 中添加 server 属性，即 nokit.Server 实例；以及 httpServer 属性，即 server.httpServer。</li>
</ol>
<p>选项：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>意义</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>host</td>
<td>主机，影响自动访问的页面地址</td>
<td>‘<a href="http://localhost&#39;" target="_blank" rel="noopener">http://localhost&#39;</a></td>
</tr>
<tr>
<td>config</td>
<td>配置文件路径，作为 nokit 服务器的配置文件路径，默认读取 server.yml</td>
<td>‘server’</td>
</tr>
<tr>
<td>public</td>
<td>浏览器端访问资源文件的路径</td>
<td>‘./build’</td>
</tr>
<tr>
<td>port</td>
<td>端口，默认使用 ctx.oneport 检测空闲的端口</td>
<td>undefined</td>
</tr>
<tr>
<td>autoOpen</td>
<td>是否自动访问网页，false 时为否</td>
<td>undefined</td>
</tr>
</tbody>
</table>
<p>server.yml 中 proxy 支持配置选项：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>意义</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>rules</td>
<td>转发路径匹配规则，如 ^/api(.*): ‘<a href="https://www.aliyun.com/&#39;" target="_blank" rel="noopener">https://www.aliyun.com/&#39;</a></td>
<td>{}</td>
</tr>
<tr>
<td>options</td>
<td>作为 Proxy Server 的选项</td>
<td>{ xfwd: true, changeOrigin: true }</td>
</tr>
<tr>
<td>headers</td>
<td>设置代理请求的 header 头，如 Referer: ‘<a href="https://www.aliyun.com/&#39;" target="_blank" rel="noopener">https://www.aliyun.com/&#39;</a> 可携带 cookie</td>
<td>undefined</td>
</tr>
</tbody>
</table>
<p>事件：</p>
<ul>
<li>‘server.init’，服务未启动时事件，参数 server 实例。</li>
<li>‘server.start’，服务启动成功时事件，参数 server 实例。</li>
</ul>
<h3 id="dn-middleware-dll"><a href="#dn-middleware-dll" class="headerlink" title="dn-middleware-dll"></a>dn-middleware-dll</h3><p>概述：独立构建项目依赖，节省打包时间。</p>
<p>奥妙：</p>
<ol>
<li>借助 ctx.exec 方法执行 webpack 中间件，打包项目的依赖，默认存放在工程目录 .cache 文件夹内。子文件夹名基于项目所使用的依赖通过 md5 生成散列，以便在依赖更新时重新打包。再借助 ctx.exec 方法执行 copy 中间件，将打包文件拷贝到 build/js 文件夹内。</li>
<li>通过 ‘webpack.config’ 事件，在 webpackConfig 插件中注入 webpack.DllReferencePlugin 插件。</li>
</ol>
<p>选项：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>意义</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>output</td>
<td>打包文件输出位置</td>
<td>‘build/js’</td>
</tr>
<tr>
<td>libName</td>
<td>打包文件名</td>
<td>‘lib’</td>
</tr>
<tr>
<td>compress</td>
<td>是否压缩打包文件，默认压缩，false 时不压缩</td>
<td>undefined</td>
</tr>
<tr>
<td>vendors</td>
<td>待打包模块列表，默认为 package.json 中依赖</td>
<td>undefined</td>
</tr>
</tbody>
</table>
<h3 id="dn-middleware-faked"><a href="#dn-middleware-faked" class="headerlink" title="dn-middleware-faked"></a>dn-middleware-faked</h3><p>概述：基于 <a href="https://github.com/Houfeng/faked" target="_blank" rel="noopener">faked</a> 提供数据模拟服务。</p>
<p>奥妙：</p>
<ol>
<li>基于 faked 创建 gui server 服务器，配置的模拟数据将输出到工程目录 mock 文件夹中 index.js, gui.data.json。</li>
<li>模拟数据文件最终将作为 webpack 入口文件，以此实现远程请求的拦截，并实现热更新。</li>
<li>执行逻辑被封装为 ctx.faked.apply 方法，在 dn-middleware-webpack 中执行，两个中间件耦合度较高。</li>
</ol>
<p>选项：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>意义</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>dir</td>
<td>打包文件输出位置</td>
<td>‘mock’</td>
</tr>
<tr>
<td>port</td>
<td>gui server 服务启动的端口号，默认使用 this.utils.oneport 检出</td>
<td>undefined</td>
</tr>
<tr>
<td>gui</td>
<td>禁用 gui server 服务</td>
<td>‘build/js’</td>
</tr>
</tbody>
</table>
<h3 id="dn-middleware-i18n"><a href="#dn-middleware-i18n" class="headerlink" title="dn-middleware-i18n"></a>dn-middleware-i18n</h3><p>概述：将工程目录中 locales 语言包加载为 $locales 模块，通过 $i18n 获取指定模块，实现国际化。</p>
<p>奥妙：</p>
<ol>
<li>使用 confman.webpackPlugin 方法将工程目录中的语言包输出为 $locales 虚拟模块。</li>
<li>使用 vmodule-webpack-plugin 类库输出 $i18n 虚拟模块，以获取指定文案。</li>
</ol>
<p>选项：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>意义</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>dir</td>
<td>语言包所在位置</td>
<td>‘./locales’</td>
</tr>
<tr>
<td>extract</td>
<td>指定将语言包输出为单独的 js 资源的文件夹路径，默认不输出单独的脚本</td>
<td>null</td>
</tr>
</tbody>
</table>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>dn-middleware-clean，清理文件或目录，可用 opts.target 加以配置，默认清理 ‘./build/*<em>/</em>.*’。</li>
<li>dn-middleware-copy，复制文件。选项 from 查询源文件的文件夹路径，默认 ‘./from’; to 目标文件夹路径; log 是否打印日志; dot 源文件匹配规则是否支持 ‘.’ 起始; direction 影响映射 key 键指代源文件还是目标文件; files 源文件和目标文件映射，目标文件路径支持占位符 {index} 替换（index 自右而左），或使用源文件路径（映射中，目标文件以 ‘/‘ 结尾）。</li>
<li>dn-middleware-browser-sync 基于 ‘browser-sync’ 监听打包文件变更，借助 ‘connect-browser-sync’ express中间件实现热更新。选项 files 配置监听的文件，默认 [‘./build/*<em>/</em>.*’]；port 为 ‘browser-sync’ 服务启动端口，默认 5001。</li>
<li>dn-middleware-git-sync，git 操作，包含 commit, push 动作（push 又区分日常和预发环境）。</li>
<li>dn-middleware-jcs，在 babel-loader 中添加 ‘jsx-control-statements’ 插件，以使 jsx 可使用结构控制语句，同时 lint 阶段也会作代码检查，参考 <a href="https://zhuanlan.zhihu.com/p/28519304" target="_blank" rel="noopener">通过 JSX Control Statements 编写 JSX</a>。</li>
<li>dn-middleware-lint，使用 eslint 命令作语法检查。</li>
<li>dn-middleware-tslint，对 typescript 进行语法检查。</li>
<li>dn-middleware-typedoc，使用 typedoc 为 typescript 项目生成文档。</li>
<li>dn-middleware-typescript，在 webpackConfig 中添加 awesome-typescript-loader，支持编译 tsx 模块。选项 declaration 是否分离 ts, js 文件，默认分离，false 时不分离。</li>
<li>dn-middleware-pkginfo，更新项目 package.json 中的 name, version, description 信息。</li>
<li>dn-middleware-prepush，在 .git/hooks/pre-push 添加 shell 命令，推送前执行 dn build 命令。</li>
<li>dn-middleware-sensitive-path，在 webpackConfig 中添加 ‘case-sensitive-paths-webpack-plugin’ 插件，使 mac, windows 引入模块时严格区分模块的大小写。</li>
<li>dn-middleware-shell，调用 ctx.utils.exec 执行 shell 命令。选项 script 命令内容；wscript 为 windows 系统下命令内容；async 是否异步执行，默认同步。</li>
<li>dn-middleware-watch，基于 ‘chokidar’ 监听执行文件变更。选项 match 匹配的文件，默认为 ‘./src/*<em>/</em>.*’；event 监听的事件类型；script 事件发生后执行的脚本；onChange 事件发生后执行的动作。</li>
<li>dn-middleware-unit，基于 ‘mocha’ 对 ./test/unit 文件夹中内容作单元测试。</li>
</ul>
]]></content>
      <categories>
        <category>frontend</category>
        <category>前端工程化</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>mobx使用探微</title>
    <url>/2018/08/22/frontend/library/mobx%E4%BD%BF%E7%94%A8%E6%8E%A2%E5%BE%AE/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写作这篇文章的起因是我有感于实际项目中所遇到的问题。因此，这篇文章只算是摸索的产物，远未臻于完美。在这里，我谨期望阅读这篇文章的同学能够见仁见智，各洒江海。</p>
<p>我所遇到的问题，总结如下：</p>
<ol>
<li>项目采用分层设计，pages 为视图层，stores 为模型层，services 为服务层。从某种意义上讲，代码是按功能单元进行划分的，而不是业务单元。需要分别从 pages, stores, services 层取出相应的模块，才能构成一个完整的业务单元。分层设计的优点在于代码组织的清晰性，但是降低了可移植性。当需要向第三方应用输出某个业务单元时，就不得不另起炉灶，需要重新为特定的视图组件串联 stores。</li>
<li>无论 stores 层，还是 services 层，代码设计大都以视图为出发点，比如 services 层多次对同一个后台接口实现了调用，比如 stores 混杂着特定页面的视图状态，不利于复用。通过这一点，所能感知的症结是，stores 层中的模块称不上是对数据模型的精要抽象。除此以外，这个病症所体现的另一个特征是，stores 层中的模块常常仅作为视图组件和 ajax 接口的桥接层，即简单地将接口数据灌入到视图中、或者将视图数据提交到远端。这样做的好处是 store 极为轻量，但是，其一，远没有挖掘 mobx 用于组织数据模型的价值（近于使用 redux 处理纯数据），其二，store 没法涵盖数据特征，数据在视图层消费时才能展现其意义。事实上，数据处理中的 value - text 转换也常常会落在视图层。这样，在另一张需要消费同一份数据的视图页面中，就仍需要重做一份数据转换处理。</li>
</ol>
<p>以上种种，促使我在业余时间着意摸索 mobx 的使用。很显然的，需求是技术提升的动力。离开项目环境，仅凭有限的知识和经验储备，我没办法复现实际项目的业务复杂度。相形之下，我所思忖的案例是较为简单的。因此，由这篇文章引出的种种观点无疑都是可商榷的。不过，有什么是一成不变的呢？譬如武侠小说中提到的，“剑招是死的，人是活的”。我再次期望阅读这篇文章的同学对本文所引出的命题有所意会、有所领悟，而对形式上的糟粕持宽容的态度；若是能以丰富的开发经验对我有所指教，那就再好不过了。</p>
<p>备注：示例代码通过自制的 <a href="https://github.com/Alfred-sg/plutarch" target="_blank" rel="noopener">plutarch 脚手架</a> 实现，托管仓库地址为 <a href="https://github.com/Alfred-sg/mobx-demo" target="_blank" rel="noopener">mobx-demo</a> 。</p>
<h2 id="案例前情"><a href="#案例前情" class="headerlink" title="案例前情"></a>案例前情</h2><p>案例将提取商城系统中的产品配置环节，绘制的页面仅包含产品列表页、产品编辑页和产品详情页。介于案例旨在于探讨 mobx 的使用，势必会使业务屈从于所要考量的功能点，一反业务引导开发的常态。我个人的一些看法，在开发已集大成的前提下，由开发引导业务也未尝不是一种选项；系统设计的舵手譬如指挥官，所需的是纵览全局的能力，不扭于认知、经验和职司。假使一位富于远见的开发对多个商城系统的设计和实现已经了然于胸，他又怎不能称为建站工作的主导者呢？只不过这一点对大多数人来说，都过于理想化，很能达成。毕竟职业、天赋和精力的限制，会让我们的成长道路都有所局限。当然，这是题外话。言归正传，本案例涵盖的考察要点包括：</p>
<ol>
<li>适用于多个页面的 Product 商品模型。</li>
<li>互为关联的 Product, Attribute 商品属性模型。</li>
</ol>
<p>以上两点，都是以数据模型为导向的，而不是着眼于页面绘制。从职责来看，前端的工作内容是绘制页面，页面逻辑在部分人眼里只是个子内容。但从整体来看，数据才是内容，视图只是表现。mobx 所提供的强大能力不止于像 redux 那样单纯处理数据流，而在于它通过代理提供了数据建模的可能。如果说 redux 是面向过程编程，那么 mobx 就是面向对象编程。附着的那层响应式操作不改变原有类的特征，使我们能更大程度地使用这个类。这是在响应式之外，使用 mobx 编程时尤其需要有所发现的点。下文将作深入探讨。</p>
<p>当前端的开发工作以数据模型为导向时，就更能契合后端的表结构设计、模型层实现，抽象程度也更高，自然能加深对业务的理解。另外，数据处理也不至于散落在视图层。</p>
<p>对于考察要点中的第二项，所需说明的是案例持有的业务特征。当我们访问淘宝，会发现手机从属于“家电 / 数码 / 手机”这一大类，“手机”这一小类；对于“手机”这一小类，还有诸如”机身内存ROM”，“手机类型”，“网络类型”，“附加功能”，“摄像头类型”，“分辨率”等特有属性。可以料想的是，这些特有属性和“手机”这个小类呈联动关系，即 Attribute 有单独的表设计（特征量和特征值双表）。特别说明这一点，既是为了剖析案例所有的业务特征，也是为了表明案例更大程度上植根于猜想，我并没有参与商城开发的十足经验，错谬也在所难免，期望阅读这篇文章的同学海涵。</p>
<p>简易的表结构设计如下（参考淘宝开放平台的商品接口设计）：</p>
<p><em>图 1，简要表结构</em><br><img src="/2018/08/22/frontend/library/mobx使用探微/database.png"></p>
<p>如上图所示，Product 产品表包含 cids 字段指向 Category 分类表，attrs 字段用于聚合 Attribute 属性特征量表和 Attr_Value 属性特征值表。贴图的表结构虽然难免会有差池，但不妨碍本文用于探讨 mobx 的使用。为了简化案列的复杂度，本文也约定 Category, Attribute, Attr_Value 表中的数据不需要另行制作配置页面注入数据。</p>
<p>基于以上，相应接口如下，相关代码参考托管仓库中的 plutarch.mock.js 文件：</p>
<ol>
<li>get api/category 接口用于获取产品类目，传参 level 用于区分检索大类还是小类，cid 用于锁定产品类目。</li>
<li>get api/attributes 接口用于获取与类目相关的属性，传参 cid 用于锁定产品类目。</li>
<li>post api/product 接口用于保存或更新产品。</li>
<li>get api/product 接口用于获取产品。</li>
<li>get api/products 接口用于获取产品列表。</li>
<li>delete api/product 用于删除产品。</li>
</ol>
<h2 id="案列实现"><a href="#案列实现" class="headerlink" title="案列实现"></a>案列实现</h2><p>案例仍采用分层架构（如何以业务单元形式组织代码暂留作后续的思考命题）：</p>
<p><em>图 2，整体架构</em><br><img src="/2018/08/22/frontend/library/mobx使用探微/architecture.png"></p>
<ol>
<li>requset 模块：基于 aioxs 类库处理 ajax 请求，使用拦截器诊断错误的响应，并使用 antd/message 组件在页面中显示错误内容（该组件能同时展现多个请求错误）。</li>
<li>services 层：使用 class 语法构造，便于继承，同时也继承了 Cache 类，用于缓存比较稳定的接口数据。同时，utils 工具包提供了 mixinStaticProperty 装饰器，用于将 services 层输出类的原型方法注入为 model 类的静态方法，参见 stores/models/Product 类的实现。services 层也可以用于拆分接口，如 services/category 将 getCategory 接口拆分为 getCategoryByCid, getCategoryByLevel 两个接口。这样便于更细微的控制，当然，拆分接口的稳定性另当别论。</li>
<li>stores/models 基本数据模型：数据模型分为两类，一类需要深入数据库或后台模型的数据特征，如 Product 类拥有诸多的可观察属性，便于以方法的形式操作这些属性值的变更，而列表也是由这些类自底而上构成的；另一类则采用数目不多的属性批量更新的机制实现，不需要微操数据的变更，所包含的方法通常也只跟远程请求相关，如 Category, Attribute 类。</li>
<li>stores 层其余衍生数据模型：基于 models 实现，与页面实际交互的模型，如由 Product 类衍生出 ProductInEdit, ProductInDetail, ProductList 三个类，即分别应用于编辑页、详情页和列表页。编辑页和详情页所使用的模型均可拓展 Product 类实现，案列出于职责分离的考虑，将其细分为多个子类。当然，也可以像案列中 Category 类的实现那样，在该类中聚合多种只能，比如全量拉取产品分类数据，以及只拉取针对某个产品的分类数据。同时，为了更好地实现数据处理，Category, Attribute 类均输出实例作为 Product 的实例属性，这样能聚合该产品的分类、属性数据处理操作。</li>
<li>pages 层：当 stores 层通过数据模型承担数据处理操作时，pages 理论上只承担了展示职能。介于 mobx 实现代理数组的特殊性，改变数组项的内部属性只能通过观察该数组项完成，列表操作又需要调用代理数组的方法，才能启动重绘。因此，使用 mobx 注入可观察数据时，首先，组件的颗粒度需要得到细化处理，其次，在删除某个数组项如某个产品时，不禁需要调用 product.delete 方法，也需要调用调用 products.splice 方法，使列表得到重绘。</li>
<li>locales 层：提供国际化文案，使用命名空间拆分成 action, model,text 三大类。action 包含操作类文案，model 包含数据模型相关文案，text 包含标题、消息和普通文本。国际化文案可直接注入视图层，或者经由 model 作转化处理后注入视图层，后者作为 model 的静态属性注入视图层。</li>
</ol>
<p>以下内容将通过代码展示部分实现。</p>
<h3 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> caches = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 设置数据缓存</span></span><br><span class="line">  setCache(actionName, key, value)&#123;</span><br><span class="line">    <span class="keyword">if</span> ( !caches[actionName] ) caches[actionName] = &#123;&#125;;</span><br><span class="line">    caches[actionName][key] = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取数据缓存</span></span><br><span class="line">  getCache(actionName, key)&#123;</span><br><span class="line">    <span class="keyword">const</span> cache = caches[actionName];</span><br><span class="line">    <span class="keyword">return</span> cache &amp;&amp; key !== <span class="literal">undefined</span> ? cache[key] : cache;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清除数据缓存</span></span><br><span class="line">  clearCache(actionName)&#123;</span><br><span class="line">    caches[actionName] = <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryService</span> <span class="keyword">extends</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> getCategory(params)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; cid, level &#125; = params;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( level !== <span class="literal">undefined</span> ) </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.getCategoryByLevel(level);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( cid !== <span class="literal">undefined</span> ) </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.getCategoryByCid(cid);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在 service 层将 getCategory 拆分成多个针对请求的微处理接口</span></span><br><span class="line">  <span class="comment">// 必要时使用缓存数据</span></span><br><span class="line">  <span class="keyword">async</span> getCategoryByLevel(level)&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">this</span>.getCache(<span class="string">'getCategoryByLevel'</span>, level);</span><br><span class="line">    <span class="keyword">if</span> ( res ) <span class="keyword">return</span> res;</span><br><span class="line">    </span><br><span class="line">    res = <span class="keyword">await</span> <span class="keyword">get</span>('/api/category', &#123; level &#125;);</span><br><span class="line">    <span class="keyword">this</span>.setCache(<span class="string">'getCategoryByLevel'</span>, level, res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> getCategoryByCid(cid)&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">this</span>.getCache(<span class="string">'getCategoryByCid'</span>, cid);</span><br><span class="line">    <span class="keyword">if</span> ( res ) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    res = <span class="keyword">await</span> <span class="keyword">get</span>('/api/category', &#123; cid &#125;);</span><br><span class="line">    <span class="keyword">this</span>.setCache(<span class="string">'getCategoryByCid'</span>, cid, res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码通过 Cache 类实现数据缓存功能，CategoryService 类继承后，将根据请求内容、原型方法名缓存 ‘/api/category’ 接口的响应数据。同时，getCategory 接口也视页面中的调用情况拆分为 getCategoryByLevel, getCategoryByCid 两个原型方法，也许这是画蛇添足的一个举动，既会使代码不够简易，在后台接口变动时，又会增加额外的修改量，不过却暗含着一种可能，利弊交由阅读这篇文章的同学自行判断。</p>
<p>以上代码存在的优化点：</p>
<ol>
<li>缓存 key 键的兼容度，Cache 类实现上仅能处理有请求参数的情形，而有些可以作缓存的接口没有请求参数。</li>
<li>缓存的时效问题，Cache 类的缓存机制在当前访问过程中均有效，在该时间段无法拉取数据库中已作更改的最新值。</li>
</ol>
<h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可采用继承的方式将远程请求方法混入到 Product 类中，此处使用 mixinStaticProperty 装饰器混入静态方法</span></span><br><span class="line">@mixinStaticProperty(ProductService)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">  @observable id;<span class="comment">// 商品id</span></span><br><span class="line">  @observable name;<span class="comment">// 商品名称</span></span><br><span class="line">  @observable cids;<span class="comment">// 商品分类</span></span><br><span class="line">  @observable attrValues = &#123;&#125;;<span class="comment">// 商品属性</span></span><br><span class="line">  @observable num;<span class="comment">// 库存</span></span><br><span class="line">  @observable price;<span class="comment">// 价格</span></span><br><span class="line">  @observable desc;<span class="comment">// 描述</span></span><br><span class="line">  @observable status;<span class="comment">// 状态</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">this</span>.setValues(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 后台交互数据全量更新；部分更新可直接使用赋值语句；重置可传空</span></span><br><span class="line">  @action</span><br><span class="line">  setValues(data = &#123;&#125;)&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = data.id;</span><br><span class="line">    <span class="keyword">this</span>.name = data.name;</span><br><span class="line">    <span class="keyword">this</span>.cids = data.cids;</span><br><span class="line">    <span class="keyword">this</span>.attrValues = data.attrValues || &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.num = data.num;</span><br><span class="line">    <span class="keyword">this</span>.price = data.price;</span><br><span class="line">    <span class="keyword">this</span>.desc = data.desc;</span><br><span class="line">    <span class="keyword">this</span>.status = data.status;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取后台交互数据</span></span><br><span class="line">  getValues()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      id: <span class="keyword">this</span>.id,</span><br><span class="line">      name: <span class="keyword">this</span>.name,</span><br><span class="line">      cids: <span class="keyword">this</span>.cids,</span><br><span class="line">      attrValues: <span class="keyword">this</span>.attrValues,</span><br><span class="line">      num: <span class="keyword">this</span>.num,</span><br><span class="line">      price: <span class="keyword">this</span>.price,</span><br><span class="line">      desc: <span class="keyword">this</span>.desc,</span><br><span class="line">      status: <span class="keyword">this</span>.status</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @action</span><br><span class="line">  <span class="keyword">async</span> getProduct(id)&#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> Product.get(&#123; id &#125;);</span><br><span class="line">    <span class="keyword">if</span> ( res ) <span class="keyword">this</span>.setValues(res);</span><br><span class="line">    <span class="keyword">return</span> res || <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @action</span><br><span class="line">  <span class="keyword">async</span> saveProduct()&#123;</span><br><span class="line">    <span class="keyword">const</span> params = <span class="keyword">this</span>.getValues();</span><br><span class="line">    <span class="keyword">const</span> res = params.id ? <span class="keyword">await</span> Product.update(params) : <span class="keyword">await</span> Product.save(params);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @action</span><br><span class="line">  <span class="keyword">async</span> deleteProduct()&#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> Product.del(&#123; <span class="attr">id</span>: <span class="keyword">this</span>.id &#125;);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码为 Product 基类，可以看出，实现上同后台提供的接口和数据模型均强关联，其一通过 observable 装饰器将后台提供的字段全部转化为可观察属性，并提供 setValues, getValues 批量赋值和取值（通常在提交数据前、获取数据后，需要调用这两个方法）；其二以原型方法实现 ajax 调用，这里既可以继承 services 层中的类，也可以使用 mixinStaticProperty 装饰器注入静态方法。</p>
<p>Product 基类化用了 backbone 模型特征，可以优化的点：</p>
<ol>
<li>代码自动生成。通过 Product 基类也能发现，该类数据模型拥有很高的类同点，基于后台数据模型及接口实现 mobx 数据模型基类，如果能根据 jar 包和配置文件，自动生成这些基类文件，那就再好不过了。当然，这对我来说，也是短期内没法办到的事。需要走的路还长着呢。</li>
<li>案列中没有考虑两份提交数据，多个接口调用，比如产品状态更新，就需要多一份产品状态提交数据，再调用状态更新的接口。因此，我的一些想法还没经过实践沉淀，合理性和稳定性势必存疑，比如前一条优化建议。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductInDetail</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">  attribute = <span class="keyword">new</span> Attribute();</span><br><span class="line">  category = <span class="keyword">new</span> Category();</span><br><span class="line"></span><br><span class="line">  @observable categories = [];<span class="comment">// 商品分类全量信息</span></span><br><span class="line">  @observable attributes = [];<span class="comment">// 商品属性全量信息</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 备注，改变单个数组项的属性不会引起视图重绘，必须在数组中改变整个数组项</span></span><br><span class="line">  <span class="comment">// 在 product 实例初始化过程中调用 getCategories 方法，不会引起 Table 视图的重绘</span></span><br><span class="line">  @action</span><br><span class="line">  <span class="keyword">async</span> getCategories(cids)&#123;</span><br><span class="line">    <span class="keyword">this</span>.categories = [];</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.category.getCategoryByCids(cids);</span><br><span class="line">    <span class="keyword">if</span> ( res ) <span class="keyword">this</span>.categories = res;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取商品分类文案</span></span><br><span class="line">  @computed</span><br><span class="line">  <span class="keyword">get</span> categoryTexts()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.categories.map(<span class="function"><span class="params">item</span> =&gt;</span> item.name).join(<span class="string">', '</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取属性</span></span><br><span class="line">  @action</span><br><span class="line">  <span class="keyword">async</span> getAttributes(cid)&#123;</span><br><span class="line">    <span class="keyword">this</span>.attributes = [];</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.attribute.getAttributes(&#123; cid  &#125;);</span><br><span class="line">    <span class="keyword">if</span> ( res ) <span class="keyword">this</span>.attributes = res;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @computed</span><br><span class="line">  <span class="keyword">get</span> attributeTexts()&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; attrValues, attributes &#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">Object</span>.keys(attrValues).length || !attributes.length ) <span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.keys(attrValues).map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> attr = attributes.find(<span class="function"><span class="params">attr</span> =&gt;</span> attr.id == key);</span><br><span class="line">      <span class="keyword">const</span> name = attr.name;</span><br><span class="line">      <span class="keyword">let</span> value = attrValues[key].map(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> attr.options.find(<span class="function"><span class="params">item</span> =&gt;</span> item.id == val).name;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      result.push(&#123;</span><br><span class="line">        name,</span><br><span class="line">        value</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取商品状态文案</span></span><br><span class="line">  @computed</span><br><span class="line">  <span class="keyword">get</span> statusText()&#123;</span><br><span class="line">    <span class="keyword">let</span> text = StatusList.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.value === <span class="keyword">this</span>.status)[<span class="number">0</span>].text;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductInEdit</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">  attribute = <span class="keyword">new</span> Attribute();</span><br><span class="line"></span><br><span class="line">  @observable attributes = [];<span class="comment">// 商品属性全量信息</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取属性</span></span><br><span class="line">  @action</span><br><span class="line">  <span class="keyword">async</span> getAttributes(cid)&#123;</span><br><span class="line">    <span class="keyword">this</span>.attributes = [];</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.attribute.getAttributes(&#123; cid  &#125;);</span><br><span class="line">    <span class="keyword">if</span> ( res ) <span class="keyword">this</span>.attributes = res;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 编辑页显示数据</span></span><br><span class="line">  @computed</span><br><span class="line">  <span class="keyword">get</span> pageValues()&#123;</span><br><span class="line">    <span class="keyword">let</span> attrValues = &#123;&#125;;</span><br><span class="line">    <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.attrValues).map(<span class="function"><span class="params">attrId</span> =&gt;</span> &#123;</span><br><span class="line">      attrValues[<span class="string">`attrId<span class="subst">$&#123;attrId&#125;</span>`</span>] = <span class="keyword">this</span>.attrValues[attrId];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name: <span class="keyword">this</span>.name,</span><br><span class="line">      cids: <span class="keyword">this</span>.cids,</span><br><span class="line">      attrs: attrValues,</span><br><span class="line">      num: <span class="keyword">this</span>.num,</span><br><span class="line">      price: <span class="keyword">this</span>.price,</span><br><span class="line">      desc: <span class="keyword">this</span>.desc</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码基于 Product 类实现详情页、编辑页专用的数据模型，无非获取远程数据，进行 value - name 值转换。在获取远程数据时，可以将另一个数据模型以实例属性的方式注入到当前数据模型中，以便于在当前模型中作数据转换处理，同时增加了模型之间的耦合度。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductList</span> </span>&#123;</span><br><span class="line">  @observable products = [];</span><br><span class="line">  </span><br><span class="line">  @action</span><br><span class="line">  <span class="keyword">async</span> getProducts()&#123;</span><br><span class="line">    <span class="keyword">this</span>.products = [];</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> Product.query();</span><br><span class="line">    (res || []).map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.products.push(<span class="keyword">new</span> Product(item));<span class="comment">// 此处 Product 为 ProductInDetail</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>ProductList 类基于 ProductInDetail 实例构建数组项，以便于在视图层绘制列表时直接绘制 ProductInDetail 实例的计算属性或者调用其远程请求接口。</p>
<h3 id="并行请求"><a href="#并行请求" class="headerlink" title="并行请求"></a>并行请求</h3><p>并行请求可以在视图层通过 Promise.all 加以组织，也可以在模型层组织同一类并行请求接口，如 Category 模型中通过 getCategoryByCids 方法获取产品的多个类目信息。当然，这部分内容通常由后端同学帮忙完成，这里仅展示前端代码实现上的一种可能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span> <span class="keyword">extends</span> <span class="title">CategoryService</span> </span>&#123;</span><br><span class="line">  @observable categories = [];</span><br><span class="line"></span><br><span class="line">  @action</span><br><span class="line">  insertToCategories = <span class="function">(<span class="params">category = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="keyword">this</span>.categories.some(<span class="function"><span class="params">item</span> =&gt;</span> item.id == category.id) )&#123;</span><br><span class="line">      <span class="keyword">this</span>.categories.push(category);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> getCategory(params)&#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">super</span>.getCategory(params);</span><br><span class="line">    <span class="keyword">if</span> ( res )&#123;</span><br><span class="line">      <span class="comment">// 将多次数据变更合成一个事务，减少重绘的次数</span></span><br><span class="line">      transaction(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        res.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.insertToCategories(item);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理并行请求</span></span><br><span class="line">  getCategoryByCids(cids)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.categories = [];</span><br><span class="line">  </span><br><span class="line">      cids.map(<span class="keyword">async</span> cid =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.getCategory(&#123; cid &#125;);</span><br><span class="line">        <span class="keyword">if</span> ( !res ) reject(res);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后一个请求，响应通过 insertToCategories 方法收集到 categories 属性中</span></span><br><span class="line">        <span class="keyword">if</span> ( cids.length == <span class="keyword">this</span>.categories.length ) </span><br><span class="line">          resolve(<span class="keyword">this</span>.categories);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 传入 cids，便于并行请求</span></span><br><span class="line">  getCategoryByLevels(cids)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      cids.map(<span class="keyword">async</span> (cid, index) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">this</span>.getCategory(&#123; <span class="attr">level</span>: index + <span class="number">1</span> &#125;);</span><br><span class="line">        <span class="keyword">if</span> ( !res ) reject(res);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( index + <span class="number">1</span> === cids.length ) resolve(<span class="keyword">this</span>.categories);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @computed</span><br><span class="line">  <span class="keyword">get</span> categoriesTree()&#123;</span><br><span class="line">    <span class="keyword">let</span> tree = [];</span><br><span class="line">    <span class="keyword">this</span>.categories.toJS().sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.level - b.level).filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> ( item.level == <span class="number">1</span> )&#123;</span><br><span class="line">        tree.push(&#123;</span><br><span class="line">          value: item.id,</span><br><span class="line">          label: item.name,</span><br><span class="line">          isLeaf: <span class="literal">false</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( item.level == <span class="number">2</span> )&#123;</span><br><span class="line">        <span class="keyword">let</span> parent = tree.filter(<span class="function"><span class="params">it</span> =&gt;</span> it.value == item.parentId)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> ( !parent.children ) parent.children = [];</span><br><span class="line">        parent.children.push(&#123;</span><br><span class="line">          value: item.id,</span><br><span class="line">          label: item.name</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="视图组件"><a href="#视图组件" class="headerlink" title="视图组件"></a>视图组件</h3><p>组件层即如上文所说的，所需注意的是 mobx 中数组的特殊性，单纯赋值数组项的属性不会引起观察数组的组件重绘，而需要将组件的颗粒度锁定为观察数组项，如下方代码的 CategoryText 组件。删除数组项时，也需要调用代理数组的 splice 方法，才能引起列表组件重绘，如 ProductList 组件内 deleteProduct 方法的实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CategoryText</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; product, loadCategory &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">if</span> ( loadCategory ) product.getCategories(product.cids);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render()&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; product &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> product.categoryTexts;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@inject(<span class="string">'productList'</span>)</span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  columns = [&#123;</span><br><span class="line">    title: $i18n(<span class="string">'model.product.id'</span>),</span><br><span class="line">    dataIndex: <span class="string">'id'</span>,</span><br><span class="line">    key: <span class="string">'id'</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    title: $i18n(<span class="string">'model.product.name'</span>),</span><br><span class="line">    dataIndex: <span class="string">'name'</span>,</span><br><span class="line">    key: <span class="string">'name'</span>,</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    title: $i18n(<span class="string">'model.product.categories'</span>),</span><br><span class="line">    dataIndex: <span class="string">'categories'</span>,</span><br><span class="line">    key: <span class="string">'categories'</span>,</span><br><span class="line">    render: <span class="function">(<span class="params">categories, product</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">CategoryText</span> <span class="attr">product</span>=<span class="string">&#123;product&#125;</span> <span class="attr">loadCategory</span>=<span class="string">&#123;true&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;, &#123;</span></span><br><span class="line"><span class="xml">    title: $i18n('model.product.price'),</span></span><br><span class="line"><span class="xml">    dataIndex: 'price',</span></span><br><span class="line"><span class="xml">    key: 'price'</span></span><br><span class="line"><span class="xml">  &#125;, &#123;</span></span><br><span class="line"><span class="xml">    title: $i18n('model.product.num'),</span></span><br><span class="line"><span class="xml">    dataIndex: 'num',</span></span><br><span class="line"><span class="xml">    key: 'num'</span></span><br><span class="line"><span class="xml">  &#125;, &#123;</span></span><br><span class="line"><span class="xml">    title: $i18n('model.product.status'),</span></span><br><span class="line"><span class="xml">    dataIndex: 'statusText',</span></span><br><span class="line"><span class="xml">    key: 'statusText'</span></span><br><span class="line"><span class="xml">  &#125;, &#123;</span></span><br><span class="line"><span class="xml">    title: $i18n('model.product.desc'),</span></span><br><span class="line"><span class="xml">    dataIndex: 'desc',</span></span><br><span class="line"><span class="xml">    key: 'desc'</span></span><br><span class="line"><span class="xml">  &#125;, &#123;</span></span><br><span class="line"><span class="xml">    title: $i18n('action.handle'),</span></span><br><span class="line"><span class="xml">    key: 'action',</span></span><br><span class="line"><span class="xml">    render: (text, product, index) =&gt; (</span></span><br><span class="line">      &lt;span&gt;</span><br><span class="line">        &lt;Link to=&#123;`/detail/$&#123;product.id&#125;`&#125; style=&#123;&#123;marginRight: '10px'&#125;&#125;&gt;&#123;$i18n('text.detail')&#125;&lt;/Link&gt;</span><br><span class="line">        &lt;Link to=&#123;`/edit/$&#123;product.id&#125;`&#125; style=&#123;&#123;marginRight: '10px'&#125;&#125;&gt;&#123;$i18n('action.edit')&#125;&lt;/Link&gt;</span><br><span class="line">        &lt;Popconfirm title=&#123;$i18n('text.product.delete_confirm')&#125; </span><br><span class="line">          onConfirm=&#123;() =&gt; &#123; this.deleteProduct(product, index) &#125;&#125; </span><br><span class="line">          okText=&#123;$i18n('action.ok')&#125; cancelText=&#123;$i18n('action.cancel')&#125;&gt;</span><br><span class="line">          &lt;a href="javascript:;"&gt;&#123;$i18n('action.delete')&#125;&lt;/a&gt;</span><br><span class="line">        &lt;/Popconfirm&gt;</span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    ),</span></span><br><span class="line"><span class="xml">  &#125;];</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  componentDidMount()&#123;</span></span><br><span class="line"><span class="xml">    this.props.productList.getProducts();</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  // 删除商品</span></span><br><span class="line"><span class="xml">  deleteProduct = async (product, index) =&gt; &#123;</span></span><br><span class="line"><span class="xml">    const &#123; products &#125; = this.props.productList;</span></span><br><span class="line"><span class="xml">    const res = await product.deleteProduct();</span></span><br><span class="line"><span class="xml">    if ( res )&#123;</span></span><br><span class="line"><span class="xml">      products.splice(index);</span></span><br><span class="line"><span class="xml">      message.success($i18n('text.product.delete_success'));</span></span><br><span class="line"><span class="xml">    &#125;;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  render()&#123;</span></span><br><span class="line"><span class="xml">    const &#123; products &#125; = this.props.productList;</span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    return (</span></span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Button style=&#123;&#123;marginBottom: '15px'&#125;&#125; type='primary'&gt;</span><br><span class="line">          &lt;Link to=&#123;'/create'&#125;&gt;&#123;`$&#123;$i18n('action.create')&#125;$&#123;$i18n('text.product')&#125;`&#125;&lt;/Link&gt;</span><br><span class="line">        &lt;/Button&gt;</span><br><span class="line">        &lt;Table size="small" rowKey='id' columns=&#123;this.columns&#125; dataSource=&#123;products.toJS()&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>更多代码，请参考 <a href="https://github.com/Alfred-sg/mobx-demo" target="_blank" rel="noopener">mobx-demo</a>，也许阅读这篇文章的同学能有额外的发现呢。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>《唐李问对》褒扬诸葛亮而贬低曹操，因为曹操的《孟德新书》适合于照章办事的生手，诸葛亮的《兵法二十篇》适合于独立思考的老手。其中的事理，和吴军博士在《数学之美》中论述道与术一样，浮于浅层的形式抵不过深入的理解。这是一篇富有探索气质的文章，更多地旨在于引发思考，而不是妄下定论。何况这篇文章对于 mobx 的使用及其实现内核的化用，也只是迈出了小小的一两步。要走的路还长着呢。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://open.taobao.com/doc.htm?docId=73&amp;docType=1" target="_blank" rel="noopener">淘宝开放平台 - 文档中心</a><br><a href="https://blog.csdn.net/crazzy0727/article/details/59576713" target="_blank" rel="noopener">淘宝商品数据库设计</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>library</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>mobx源码分析（二） 订阅响应式数据</title>
    <url>/2018/08/15/frontend/library/mobx%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>处理问题有两种方式，从一般到具体，或者从具体到一般。在写作这两篇文章时，我选择了后者，一是因为我在写作这篇文章的过程中才逐渐摸清 mobx 的设计和实现，二是因为我自身尚不具备足够的积淀，能站在更高的抽象维度对问题的一般面加以思索。上一篇文章对各种数据结构的处理无疑都是具体的，本文将介入如何抽象 observable，即对上一篇文章中的公有特征 reportObserved, reportChanged 方法加以萃取。</p>
<p>本文也将致力于解答上一篇文章遗留的问题，怎样使观察者订阅响应式数据的变更。</p>
<p>总而言之，本文将串联 mobx 的核心运作机制，从执行动作 action 促使响应式数据 observable 变更，到响应式数据变更引起衍生 derivation 执行的一整个过程。</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>首先，我们先来看一下 mobx 设计的几种抽象概念：</p>
<ol>
<li>observable: 响应式数据，最主要的特征是将数据变更信息上报给全局监听器。mobx 使用 IObservable 接口，Atom 类加以抽象。</li>
<li>derivation: 衍生，响应式数据变更后执行的副作用函数，包含计算属性、反应。mobx 使用 IDerivation 接口，ComputedValue 类、Reaction 类加以抽象。</li>
<li>action: 动作，由其促使响应式数据发生变更。上一节已指出，使用 observableValue 实例的 set 方法，就能促使响应式数据发生变更，action 的意义在于，使用 startBatch, endBatch 事务发生执行动作，能整合一组响应式数据变更，在这一组响应式数据变更完成后，再执行 derivation 衍生。在 mobx 中，action 是很轻的一层，因为将响应式数据变更上报到全局环境由 observable 完成，action 中的逻辑处理即是在动作执行期间使用事务加以包裹，并根据配置项判断响应式数据只能在 action 中完成。在这篇文章中将不作赘述。</li>
</ol>
<p><em>图 1，observable, derivation 类图</em><br><img src="/2018/08/15/frontend/library/mobx源码分析2/core.png"></p>
<h3 id="observable"><a href="#observable" class="headerlink" title="observable"></a>observable</h3><p>对于 observable，所需考虑的是，响应式数据变更会引起指定的观察者执行其处理逻辑；当响应式数据没有指定观察者时，数据变更就不会引起衍生的执行。为此，在 mobx 抽象的 IObservable 接口中，observers 属性为 observable 绑定的观察者队列；lowestObserverState 属性为状态标识，用于标记数据是否被更新，需要执行相应的衍生；diffValue 属性用于实时更新 observable, observer 的依赖关系。</p>
<p>此外，在 IObservable 接口中，mobx 还提供了 onBecameUnobservered, onBecameObservered 钩子，分别在 observable 不被监听或被监听时得到调用；lastAcessedBy（最后消费 observable 的观察者 id）, isBeingObserved 属性用于使 onBecameObservered 钩子不被反复调用；isPendingUnobservation 属性用于使 onBecameUnobservered 钩子不被反复执行。与配置项相当，属性需要通过翻阅源码中的逻辑实现，才能确切感知到该属性存在的价值。介于部分属性与核心流程无关，在这里将只作简要讨论或不作讨论。</p>
<p>Atom 类除了实现 IObservable 接口以外，额外新增了 reportObserved, reportChanged 方法。顾名思义，当 observable 被观察时，需要显示调用 reportObserved 方法；当 observable 数据变更时，需要显示调用 reportChanged 方法。更多内容，参见前文 - <a href="http://xzfyu.com/2018/08/03/react/react%E7%9B%B8%E5%85%B3/mobx%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901/">mobx 源码分析（一）构造响应式数据</a>。</p>
<h3 id="derivation"><a href="#derivation" class="headerlink" title="derivation"></a>derivation</h3><p>derivation 可以理解为实际消费 observable 的观察者，因此，本文中的 observer 指代的也就是 derivation。在 mobx 实现中，observable, derivation 相互持有彼此的引用。IDerivation 接口的 observing 属性本次衍生在哪些响应式数据变更时执行；dependenciesState 属性为状态标识，用于标记本次衍生观察的数据是否已经改变，是否运行期处理逻辑；onBecomeStale 方法就是当观察数据变更时，运行的处理逻辑；newObserving 属性用于变更 observable, derivation 的依赖关系（在于观察者可改变观察的数据）；unboundDepsCount 属性用于统计本次衍生所观察的数据量，同 observable.diffValue 一样，目的都在于实时更新 observable, derivation 的依赖关系。</p>
<p>除了上述属性和方法，IDerivation 接口还提供了 runId 属性，由它构成 observable.lastAcessedBy 的值；isTracing 属性标记日志级别，以便在 onBecomeStale 方法执行前打印日志。</p>
<p>IDerivation 接口有两种实现，其一是作为反应的 Reaction 类，其二是作为计算属性的 ComputedValue 类。这两个类都实现了具体的 onBecomeStale 方法。reaction.onBecomeStale 方法的表现是在所有响应式数据变更完成后，再对相关的衍生执行批处理操作，当然，在同一个批处理周期内，不会再对由 reaction 引起的衍生加以处理，这些衍生需要等待下一个批处理周期。ComputedValue 的特别之处是，它既是衍生，观察着数据变更；又是响应式数据，被其他衍生所观察。因此，computedValue.onBecomeStale 方法的处理逻辑是在其他衍生执行 onBecomeStale 过程中，重新获取计算属性的值。</p>
<h2 id="运作机制"><a href="#运作机制" class="headerlink" title="运作机制"></a>运作机制</h2><h3 id="reportObserved"><a href="#reportObserved" class="headerlink" title="reportObserved"></a>reportObserved</h3><p>当响应式数据被衍生订阅时，将会执行 obsrvable.reportObserved 方法。在该方法的执行过程中，无他，就是针对当前执行的衍生调用其观察的响应式数据的 onBecameObserved 方法；或者将该 obsrvable 实例添加到 globalState.pendingUnobservations 数组中，等待事务结束时，执行 observable.onBecomeUnobserved 与 computedValue.suspend 方法。这里不再作介绍。</p>
<h3 id="reportChanged"><a href="#reportChanged" class="headerlink" title="reportChanged"></a>reportChanged</h3><p><em>图 2，reportChanged 执行流程</em><br><img src="/2018/08/15/frontend/library/mobx源码分析2/reportChanged.png"></p>
<p>结合上图，当响应式数据发生变更时，mobx 的处理机制为：</p>
<ol>
<li>通过 observable.reportChanged 方法将响应式数据变更的信息上报到全局监听器。</li>
<li>observable.reportChanged 执行过程中，使用 startBatch, endBatch 函数将 propagateChange(observable) 包裹到事务处理流程中。mobx 中的事务通过 globalState.inBatch 计数器标识：在 startBatch 函数执行过程中，globalState.inBatch 加 1；在 endBatch 函数执行过程中，globalState.inBatch 减 1；当 globalState.inBatch 为 0 时，表示单个事务处理结束。因为事务的意义在于将并行的响应式数据变更视为一组，在一组变更完成之后，在执行相应的衍生。</li>
<li>在同一个事务处理流程中，首先通过 propagateChange(observable) 间接将 derivation 加入到 globalState.pendingReactions 队列中。该过程中通过调用 derivation.onBecameStale 方法实现。对于 reaction 反应，在事务执行期间，直接将 reaction 添加到 globalState.pendingReactions 队列；对于 computedValue 计算属性，间接将观察 computedValue 变更的 reaction 添加到 globalState.pendingReactions 队列。</li>
<li>在 endBatch 函数执行期间，通过调用 runReactions 方法遍历 globalState.pendingReactions 队列，执行 reaction.runReaction 方法。每个 reaction.runReaction 方法内部的执行逻辑中，包含 observer 依赖和状态更新，以及执行用户实际注册的监听函数。reaction.runReaction 方法的处理细节将在后文加以分析。</li>
<li>在事务处理的尾端，又将遍历 globalState.pendingUnobservations 数组，调用 observable.onBecomeUnobserved 方法。对于计算属性，额外调用 computedValue.suspend() 方法。这样的目的在于当前没有观察者监听这些 observable 或 computedValue 的变更，无需将数据变更上报到全局环境。</li>
</ol>
<p><em>代码段 1，reportChanged 处理流程</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Atom</span> <span class="title">implements</span> <span class="title">IAtom</span> </span>&#123;</span><br><span class="line">  public reportChanged() &#123;</span><br><span class="line">    startBatch()</span><br><span class="line">    propagateChanged(<span class="keyword">this</span>)</span><br><span class="line">    endBatch()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startBatch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  globalState.inBatch++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">endBatch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (--globalState.inBatch === <span class="number">0</span>) &#123;</span><br><span class="line">    runReactions()</span><br><span class="line">    <span class="keyword">const</span> list = globalState.pendingUnobservations</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> observable = list[i]</span><br><span class="line">      observable.isPendingUnobservation = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">if</span> (observable.observers.size === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (observable.isBeingObserved) &#123;</span><br><span class="line">          observable.isBeingObserved = <span class="literal">false</span></span><br><span class="line">          observable.onBecomeUnobserved()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (observable <span class="keyword">instanceof</span> ComputedValue) &#123;</span><br><span class="line">          observable.suspend()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    globalState.pendingUnobservations = []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">propagateChanged</span>(<span class="params">observable: IObservable</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (observable.lowestObserverState === IDerivationState.STALE) <span class="keyword">return</span></span><br><span class="line">  observable.lowestObserverState = IDerivationState.STALE</span><br><span class="line"></span><br><span class="line">  observable.observers.forEach(<span class="function"><span class="params">d</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (d.dependenciesState === IDerivationState.UP_TO_DATE) &#123;</span><br><span class="line">      d.onBecomeStale()</span><br><span class="line">    &#125;</span><br><span class="line">    d.dependenciesState = IDerivationState.STALE</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">propagateMaybeChanged</span>(<span class="params">observable: IObservable</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (observable.lowestObserverState !== IDerivationState.UP_TO_DATE) <span class="keyword">return</span></span><br><span class="line">  observable.lowestObserverState = IDerivationState.POSSIBLY_STALE</span><br><span class="line"></span><br><span class="line">  observable.observers.forEach(<span class="function"><span class="params">d</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (d.dependenciesState === IDerivationState.UP_TO_DATE) &#123;</span><br><span class="line">      d.dependenciesState = IDerivationState.POSSIBLY_STALE</span><br><span class="line">      d.onBecomeStale()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComputedValue</span>&lt;<span class="title">T</span>&gt; <span class="title">implements</span> <span class="title">IObservable</span>, <span class="title">IComputedValue</span>&lt;<span class="title">T</span>&gt;, <span class="title">IDerivation</span> </span>&#123;</span><br><span class="line">  onBecomeStale() &#123;</span><br><span class="line">    propagateMaybeChanged(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reaction</span> <span class="title">implements</span> <span class="title">IDerivation</span>, <span class="title">IReactionPublic</span> </span>&#123;</span><br><span class="line">  onBecomeStale() &#123;</span><br><span class="line">    <span class="keyword">this</span>.schedule()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  schedule() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>._isScheduled) &#123;</span><br><span class="line">      <span class="keyword">this</span>._isScheduled = <span class="literal">true</span></span><br><span class="line">      globalState.pendingReactions.push(<span class="keyword">this</span>)</span><br><span class="line">      runReactions()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reactionScheduler: <span class="function">(<span class="params">fn: (</span>) =&gt;</span> <span class="keyword">void</span>) =&gt; <span class="keyword">void</span> = <span class="function"><span class="params">f</span> =&gt;</span> f()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">runReactions</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (globalState.inBatch &gt; <span class="number">0</span> || globalState.isRunningReactions) <span class="keyword">return</span></span><br><span class="line">  reactionScheduler(runReactionsHelper)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runReactionsHelper</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  globalState.isRunningReactions = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">const</span> allReactions = globalState.pendingReactions</span><br><span class="line">  <span class="keyword">let</span> iterations = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (allReactions.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> remainingReactions = allReactions.splice(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = remainingReactions.length; i &lt; l; i++)</span><br><span class="line">      remainingReactions[i].runReaction()</span><br><span class="line">  &#125;</span><br><span class="line">  globalState.isRunningReactions = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以上代码不但没有看见计算属性重新取值的实现，而且高度依赖于 observable 和 observer 的依赖关系和各自的状态标识，因此，我们会持有以下两个问题：</p>
<ol>
<li>reaction.runReaction 方法到底是怎样实现的？reaction 和 computedValue 又怎样相互影响？</li>
<li>mobx 怎样更新及维护 observable 和 observer 的依赖关系和状态标识？</li>
</ol>
<h4 id="runReaction"><a href="#runReaction" class="headerlink" title="runReaction"></a>runReaction</h4><p><em>图 3，reaction.runReaction 执行流程</em><br><img src="/2018/08/15/frontend/library/mobx源码分析2/runReaction.png"></p>
<p>结合上图，reaction.runReaction 针对以下两种情况作出处理：</p>
<ol>
<li>当响应式数据引起的反应内部没有计算属性时，重新执行反应的处理逻辑。</li>
<li>当响应式数据引起的反应内部有计算属性时，且计算属性观察的数据改变时，通过 computedValue 方法重新获取计算属性的值，事务（在 reaction.runReaction 方法执行过程中，使用 startBatch 函数开启）的意义在于等待计算属性的重新计算。其他情况下使用原有的值。</li>
</ol>
<p>需要留神的是，在 reaction.runReaction 方法中使用 startBatch 开启事务时，globalState.isRunningReactions 标识仍旧为真值，也就不会造成 globalState.pendingReactions 中未作处理的 reaction 被反复执行。</p>
<p><em>代码段 2，runReaction 处理流程</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reaction</span> <span class="title">implements</span> <span class="title">IDerivation</span>, <span class="title">IReactionPublic</span> </span>&#123;</span><br><span class="line">  runReaction() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isDisposed) &#123;</span><br><span class="line">      startBatch()</span><br><span class="line">      <span class="keyword">this</span>._isScheduled = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">if</span> (shouldCompute(<span class="keyword">this</span>)) &#123;</span><br><span class="line">        <span class="comment">// 用户实际注册的监听函数经包装后将以 reaction.onInvalidate 形式呈现</span></span><br><span class="line">        <span class="keyword">this</span>.onInvalidate()</span><br><span class="line">      &#125;</span><br><span class="line">      endBatch()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shouldCompute</span>(<span class="params">derivation: IDerivation</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (derivation.dependenciesState) &#123;</span><br><span class="line">    <span class="keyword">case</span> IDerivationState.UP_TO_DATE:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">case</span> IDerivationState.NOT_TRACKING:</span><br><span class="line">    <span class="keyword">case</span> IDerivationState.STALE:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">case</span> IDerivationState.POSSIBLY_STALE: &#123;</span><br><span class="line">      <span class="keyword">const</span> prevUntracked = untrackedStart()</span><br><span class="line">      <span class="keyword">const</span> obs = derivation.observing,</span><br><span class="line">        l = obs.length</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> obj = obs[i]</span><br><span class="line">        <span class="keyword">if</span> (isComputedValue(obj)) &#123;</span><br><span class="line">          obj.get()</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> ((derivation.dependenciesState <span class="keyword">as</span> any) === IDerivationState.STALE) &#123;</span><br><span class="line">            untrackedEnd(prevUntracked)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      changeDependenciesStateTo0(derivation)</span><br><span class="line">      untrackedEnd(prevUntracked)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComputedValue</span>&lt;<span class="title">T</span>&gt; <span class="title">implements</span> <span class="title">IObservable</span>, <span class="title">IComputedValue</span>&lt;<span class="title">T</span>&gt;, <span class="title">IDerivation</span> </span>&#123;</span><br><span class="line">  public <span class="keyword">get</span>(): T &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.keepAlive &amp;&amp; <span class="keyword">this</span>.firstGet) &#123;</span><br><span class="line">      <span class="keyword">this</span>.firstGet = <span class="literal">false</span></span><br><span class="line">      autorun(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.get())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化获取绑定计算属性的依赖关系，或者在 action 中直接获取计算属性</span></span><br><span class="line">    <span class="keyword">if</span> (globalState.inBatch === <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.observers.size === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (shouldCompute(<span class="keyword">this</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.warnAboutUntrackedRead()</span><br><span class="line">        startBatch()</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="keyword">this</span>.computeValue(<span class="literal">false</span>)</span><br><span class="line">        endBatch()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reaction.runReaction 处理逻辑中，将进入第二个条件分支</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      reportObserved(<span class="keyword">this</span>)</span><br><span class="line">      <span class="keyword">if</span> (shouldCompute(<span class="keyword">this</span>)) <span class="keyword">if</span> (<span class="keyword">this</span>.trackAndCompute()) propagateChangeConfirmed(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">this</span>.value!</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  computeValue(track: boolean) &#123;</span><br><span class="line">    globalState.computationDepth++</span><br><span class="line">    <span class="keyword">let</span> res: T | CaughtException</span><br><span class="line">    <span class="keyword">if</span> (track) &#123;</span><br><span class="line">      res = trackDerivedFunction(<span class="keyword">this</span>, <span class="keyword">this</span>.derivation, <span class="keyword">this</span>.scope)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res = <span class="keyword">this</span>.derivation.call(<span class="keyword">this</span>.scope)</span><br><span class="line">    &#125;</span><br><span class="line">    globalState.computationDepth--</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private trackAndCompute(): boolean &#123;</span><br><span class="line">    <span class="keyword">const</span> oldValue = <span class="keyword">this</span>.value</span><br><span class="line">    <span class="keyword">const</span> wasSuspended = <span class="keyword">this</span>.dependenciesState === IDerivationState.NOT_TRACKING</span><br><span class="line">    <span class="keyword">const</span> newValue = <span class="keyword">this</span>.computeValue(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> changed = wasSuspended || !<span class="keyword">this</span>.equals(oldValue, newValue)</span><br><span class="line">    <span class="keyword">if</span> (changed) <span class="keyword">this</span>.value = newValue</span><br><span class="line">    <span class="keyword">return</span> changed</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">propagateChangeConfirmed</span>(<span class="params">observable: IObservable</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (observable.lowestObserverState === IDerivationState.STALE) <span class="keyword">return</span></span><br><span class="line">  observable.lowestObserverState = IDerivationState.STALE</span><br><span class="line"></span><br><span class="line">  observable.observers.forEach(<span class="function"><span class="params">d</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (d.dependenciesState === IDerivationState.POSSIBLY_STALE)</span><br><span class="line">      d.dependenciesState = IDerivationState.STALE</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">      d.dependenciesState === IDerivationState.UP_TO_DATE</span><br><span class="line">    )</span><br><span class="line">      observable.lowestObserverState = IDerivationState.UP_TO_DATE</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上述代码中，对于 trackDerivedFunction 函数的处理逻辑，我将在下一小节予以分析。</p>
<h4 id="依赖更新"><a href="#依赖更新" class="headerlink" title="依赖更新"></a>依赖更新</h4><p>我们先来看一下 mobx 为 observable, observer 提供的状态值：</p>
<ol>
<li>IDerivationState.NOT_TRACKING：值为 -1，作为 derivation 的初始状态。当衍生不再订阅响应式数据时，derivation.dependenciesState 值也将被置为 NOT_TRACKING。</li>
<li>IDerivationState.UP_TO_DATE：值为 0，当响应式数据变更且衍生有执行时，derivation.dependenciesState 状态将被置为 UP_TO_DATE。</li>
<li>IDerivationState.POSSIBLY_STALE：值为 1，计算属性变更时，订阅计算属性的衍生状态将置为 POSSIBLY_STALE。若在 shouldCompute 函数执行环节，当确认计算属性的值未作变更时，derivation.dependenciesState 状态将被重置为 UP_TO_DATE；若作变更，状态将置为 STALE。</li>
<li>IDerivationState.STALE：值为 2，当衍生订阅的响应式数据或计算属性变更时，derivation.dependenciesState 状态将被置为 STALE，意味着衍生的逻辑需要重新启动。</li>
</ol>
<p><em>图 4，状态标识更新流程</em><br><img src="/2018/08/15/frontend/library/mobx源码分析2/state.png"></p>
<p>状态标识更新流程为：</p>
<ol>
<li>当初次添加 derivation 时，状态标识置为 NOT_TRACKING。</li>
<li>当响应式数据更新，监听这个响应式数据的衍生包含 reaction，则将该 reaction 的状态置为 STALE；包含 computedValue，则将该 computedValue 状态置为 STALE，并通过 computedValue.onBecameStale 方法将订阅这个计算属性的反应 reaction 的状态置为 POSSIBLY_STALE。</li>
<li>在事务 endBatch 环节，通过 reaction.runReaction 方法的执行过程刷新该 reaction 和 observable 的绑定关系，并将 reaction 的状态标识置为 NOT_TRACKING（在 reaction 用户端逻辑执行过程中，添加了新的 observable） 或 UP_TO_DATE。若 reaction 还订阅了计算属性，则调用计算属性 computedValue.get 方法，通过这个方法的执行，刷新 computedValue 和 observable 的关系，并将其状态标识置为 NOT_TRACKING 或 UP_TO_DATE。</li>
</ol>
<p>第 2 步的执行逻辑参见上文给出的 propagateChanged, propagatedMaybeChanged 函数；第 1, 3 两步均通过 trackDerivedFunction 函数实现。</p>
<p><em>代码段 3，derivation 状态更新</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trackDerivedFunction</span>&lt;<span class="title">T</span>&gt;(<span class="params">derivation: IDerivation, f: (</span>) =&gt; <span class="title">T</span>, <span class="title">context</span>: <span class="title">any</span>) </span>&#123;</span><br><span class="line">  changeDependenciesStateTo0(derivation)</span><br><span class="line">  derivation.newObserving = <span class="keyword">new</span> <span class="built_in">Array</span>(derivation.observing.length + <span class="number">100</span>)</span><br><span class="line">  derivation.unboundDepsCount = <span class="number">0</span></span><br><span class="line">  derivation.runId = ++globalState.runId</span><br><span class="line">  <span class="keyword">const</span> prevTracking = globalState.trackingDerivation</span><br><span class="line">  globalState.trackingDerivation = derivation</span><br><span class="line">  <span class="keyword">let</span> result</span><br><span class="line">  <span class="keyword">if</span> (globalState.disableErrorBoundaries === <span class="literal">true</span>) &#123;</span><br><span class="line">    result = f.call(context)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      result = f.call(context)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      result = <span class="keyword">new</span> CaughtException(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  globalState.trackingDerivation = prevTracking</span><br><span class="line">  bindDependencies(derivation)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刷新 derivation 和 observable 的依赖关系，并将 derivation 的状态标识置为 UP_TO_DATE 或 NOT_TRACKING</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindDependencies</span>(<span class="params">derivation: IDerivation</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> prevObserving = derivation.observing</span><br><span class="line">  <span class="keyword">const</span> observing = (derivation.observing = derivation.newObserving!)</span><br><span class="line">  <span class="keyword">let</span> lowestNewObservingDerivationState = IDerivationState.UP_TO_DATE</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> i0 = <span class="number">0</span>,</span><br><span class="line">    l = derivation.unboundDepsCount</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> dep = observing[i]</span><br><span class="line">    <span class="keyword">if</span> (dep.diffValue === <span class="number">0</span>) &#123;</span><br><span class="line">      dep.diffValue = <span class="number">1</span></span><br><span class="line">      <span class="keyword">if</span> (i0 !== i) observing[i0] = dep</span><br><span class="line">      i0++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (((dep <span class="keyword">as</span> any) <span class="keyword">as</span> IDerivation).dependenciesState &gt; lowestNewObservingDerivationState) &#123;</span><br><span class="line">      lowestNewObservingDerivationState = ((dep <span class="keyword">as</span> any) <span class="keyword">as</span> IDerivation).dependenciesState</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  observing.length = i0</span><br><span class="line"></span><br><span class="line">  derivation.newObserving = <span class="literal">null</span></span><br><span class="line">  </span><br><span class="line">  l = prevObserving.length</span><br><span class="line">  <span class="keyword">while</span> (l--) &#123;</span><br><span class="line">    <span class="keyword">const</span> dep = prevObserving[l]</span><br><span class="line">    <span class="keyword">if</span> (dep.diffValue === <span class="number">0</span>) &#123;</span><br><span class="line">      removeObserver(dep, derivation)</span><br><span class="line">    &#125;</span><br><span class="line">    dep.diffValue = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i0--) &#123;</span><br><span class="line">    <span class="keyword">const</span> dep = observing[i0]</span><br><span class="line">    <span class="keyword">if</span> (dep.diffValue === <span class="number">1</span>) &#123;</span><br><span class="line">      dep.diffValue = <span class="number">0</span></span><br><span class="line">      addObserver(dep, derivation)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对于新添加的观察数据，将 derivation 添加 globalState.pendingReactions 中，在当前事务周期中处理</span></span><br><span class="line">  <span class="keyword">if</span> (lowestNewObservingDerivationState !== IDerivationState.UP_TO_DATE) &#123;</span><br><span class="line">    derivation.dependenciesState = lowestNewObservingDerivationState</span><br><span class="line">    derivation.onBecomeStale()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeDependenciesStateTo0</span>(<span class="params">derivation: IDerivation</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (derivation.dependenciesState === IDerivationState.UP_TO_DATE) <span class="keyword">return</span></span><br><span class="line">  derivation.dependenciesState = IDerivationState.UP_TO_DATE</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> obs = derivation.observing</span><br><span class="line">  <span class="keyword">let</span> i = obs.length</span><br><span class="line">  <span class="keyword">while</span> (i--) obs[i].lowestObserverState = IDerivationState.UP_TO_DATE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>trackDerivedFunction 函数在 mobx 中的实际调用过程：</p>
<ol>
<li>Reaction 构造函数提供了 track 实例方法。该实例方法执行过程中，将 trackDerivedFunction 函数更新 derivation 的状态和依赖关系，同时执行传参 fn 函数。实际在构造 Reaction 过程中，用户端执行逻辑将经由 autorun 函数使用 reaction.track 封装后构成 reaction.onInvalidate 方法，该方法将在 reaction.runReaction 执行过程中得到调用，而用户端执行逻辑也将作为 reaction.track 方法的参数 fn。这样就解释了响应式数据变更时，既会处理用户端执行逻辑，如使视图重绘，又会促使 reaction 的状态值得到更新。</li>
<li>ComputedValue 构造函数提供的 computeValue 实例方法，也会调用 trackDerivedFunction 函数。而 computedValue.get 实例方法将间接调用 computeValue 方法，从而使计算属性的状态得到更新。</li>
</ol>
<p><em>代码段 4，trackDerivedFunction 实际调用，只限于 reaction</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reaction</span> <span class="title">implements</span> <span class="title">IDerivation</span>, <span class="title">IReactionPublic</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(</span><br><span class="line">    public name: string = "Reaction@" + getNextId(),</span><br><span class="line">    private onInvalidate: () =&gt; void,</span><br><span class="line">    private errorHandler?: (error: any, derivation: IDerivation) =&gt; void</span><br><span class="line">  ) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  runReaction() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isDisposed) &#123;</span><br><span class="line">      startBatch()</span><br><span class="line">      <span class="keyword">this</span>._isScheduled = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">if</span> (shouldCompute(<span class="keyword">this</span>)) &#123;</span><br><span class="line">        <span class="comment">// 用户实际注册的监听函数经包装后将以 reaction.onInvalidate 形式呈现</span></span><br><span class="line">        <span class="keyword">this</span>.onInvalidate()</span><br><span class="line">      &#125;</span><br><span class="line">      endBatch()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  track(fn: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span>) &#123;</span><br><span class="line">    startBatch()</span><br><span class="line">    <span class="keyword">this</span>._isRunning = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">const</span> result = trackDerivedFunction(<span class="keyword">this</span>, fn, <span class="literal">undefined</span>)</span><br><span class="line">    <span class="keyword">this</span>._isRunning = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>._isTrackPending = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isDisposed) &#123;</span><br><span class="line">      clearObserving(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    endBatch()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autorun</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  view: (r: IReactionPublic</span>) =&gt; <span class="title">any</span>,</span></span><br><span class="line"><span class="function">  <span class="title">opts</span>: <span class="title">IAutorunOptions</span> = <span class="title">EMPTY_OBJECT</span></span></span><br><span class="line"><span class="function">): <span class="title">IReactionDisposer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name: string = (opts &amp;&amp; opts.name) || (view <span class="keyword">as</span> any).name || <span class="string">"Autorun@"</span> + getNextId()</span><br><span class="line">  <span class="keyword">let</span> reaction: Reaction</span><br><span class="line"></span><br><span class="line">  reaction = <span class="keyword">new</span> Reaction(</span><br><span class="line">    name,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">this: Reaction</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.track(reactionRunner)</span><br><span class="line">    &#125;,</span><br><span class="line">    opts.onError</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reactionRunner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    view(reaction)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化绑定 reaction 和 observable 的依赖关系，并调用用户端执行逻辑 view</span></span><br><span class="line">  reaction.schedule()</span><br><span class="line">  <span class="keyword">return</span> reaction.getDisposer()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="接口层"><a href="#接口层" class="headerlink" title="接口层"></a>接口层</h2><p>接口层的主要目的是将用户端执行逻辑在响应式数据变更后自动得到调用。</p>
<h3 id="autoRun"><a href="#autoRun" class="headerlink" title="autoRun"></a>autoRun</h3><p>autoRun 函数的处理流程为：构建 Reaction 实例；初始化调用 reaction.schedule 方法，初次调用用户端执行逻辑 ，绑定 observer 和 observable 的依赖关系；使用 reaction.track 包装用户端执行逻辑，在响应式数据变更后，既负责更新 observer 和 observable 的依赖关系，又负责调用用户端执行逻辑。用户端执行逻辑通常表现为视图变更，因此也被标识为 view 函数。</p>
<p>在调用 autoRun 时，可以通过选项 opts.delay 或 opts.scheduler 调度 view 的执行时机。</p>
<p>完整代码如下：</p>
<p><em>代码段 5，autoRun 函数</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autorun</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  view: (r: IReactionPublic</span>) =&gt; <span class="title">any</span>,</span></span><br><span class="line"><span class="function">  <span class="title">opts</span>: <span class="title">IAutorunOptions</span> = <span class="title">EMPTY_OBJECT</span></span></span><br><span class="line"><span class="function">): <span class="title">IReactionDisposer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name: string = (opts &amp;&amp; opts.name) || (view <span class="keyword">as</span> any).name || <span class="string">"Autorun@"</span> + getNextId()</span><br><span class="line">  <span class="keyword">const</span> runSync = !opts.scheduler &amp;&amp; !opts.delay</span><br><span class="line">  <span class="keyword">let</span> reaction: Reaction</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (runSync) &#123;</span><br><span class="line">    reaction = <span class="keyword">new</span> Reaction(</span><br><span class="line">      name,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">this: Reaction</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.track(reactionRunner)</span><br><span class="line">      &#125;,</span><br><span class="line">      opts.onError</span><br><span class="line">    )</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> scheduler = createSchedulerFromOptions(opts)</span><br><span class="line">    <span class="keyword">let</span> isScheduled = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    reaction = <span class="keyword">new</span> Reaction(</span><br><span class="line">      name,</span><br><span class="line">      () =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isScheduled) &#123;</span><br><span class="line">          isScheduled = <span class="literal">true</span></span><br><span class="line">          scheduler(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            isScheduled = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">if</span> (!reaction.isDisposed) reaction.track(reactionRunner)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      opts.onError</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reactionRunner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    view(reaction)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  reaction.schedule()</span><br><span class="line">  <span class="keyword">return</span> reaction.getDisposer()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSchedulerFromOptions</span>(<span class="params">opts: IReactionOptions</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> opts.scheduler</span><br><span class="line">    ? opts.scheduler</span><br><span class="line">    : opts.delay</span><br><span class="line">      ? <span class="function">(<span class="params">f: Lambda</span>) =&gt;</span> setTimeout(f, opts.delay!)</span><br><span class="line">      : run</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="reaction"><a href="#reaction" class="headerlink" title="reaction"></a>reaction</h3><p>reaction 函数的处理基本同 autoRun，其主要区别是，用户端执行逻辑表现为当首参计算函数返回的终值发生改变时，执行次参副作用逻辑。</p>
<p><em>代码段 6，reaction 函数</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reaction</span>&lt;<span class="title">T</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  expression: (r: IReactionPublic</span>) =&gt; <span class="title">T</span>,</span></span><br><span class="line"><span class="function">  <span class="title">effect</span>: (<span class="params">arg: T, r: IReactionPublic</span>) =&gt; <span class="title">void</span>,</span></span><br><span class="line"><span class="function">  <span class="title">opts</span>: <span class="title">IReactionOptions</span> = <span class="title">EMPTY_OBJECT</span></span></span><br><span class="line"><span class="function">): <span class="title">IReactionDisposer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = opts.name || <span class="string">"Reaction@"</span> + getNextId()</span><br><span class="line">  <span class="keyword">const</span> effectAction = action(</span><br><span class="line">    name,</span><br><span class="line">    opts.onError ? wrapErrorHandler(opts.onError, effect) : effect</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">const</span> runSync = !opts.scheduler &amp;&amp; !opts.delay</span><br><span class="line">  <span class="keyword">const</span> scheduler = createSchedulerFromOptions(opts)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> firstTime = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">let</span> isScheduled = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> value: T</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> equals = (opts <span class="keyword">as</span> any).compareStructural</span><br><span class="line">    ? comparer.structural</span><br><span class="line">    : opts.equals || comparer.default</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> r = <span class="keyword">new</span> Reaction(</span><br><span class="line">    name,</span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (firstTime || runSync) &#123;</span><br><span class="line">        reactionRunner()</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isScheduled) &#123;</span><br><span class="line">        isScheduled = <span class="literal">true</span></span><br><span class="line">        scheduler!(reactionRunner)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    opts.onError</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reactionRunner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    isScheduled = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (r.isDisposed) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">let</span> changed = <span class="literal">false</span></span><br><span class="line">    r.track(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> nextValue = expression(r)</span><br><span class="line">      changed = firstTime || !equals(value, nextValue)</span><br><span class="line">      value = nextValue</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (firstTime &amp;&amp; opts.fireImmediately!) effectAction(value, r)</span><br><span class="line">    <span class="keyword">if</span> (!firstTime &amp;&amp; (changed <span class="keyword">as</span> boolean) === <span class="literal">true</span>) effectAction(value, r)</span><br><span class="line">    <span class="keyword">if</span> (firstTime) firstTime = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  r.schedule()</span><br><span class="line">  <span class="keyword">return</span> r.getDisposer()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="when"><a href="#when" class="headerlink" title="when"></a>when</h3><p>when 函数的意义是在满足特定条件下，以动作 action 形式执行副作用函数，其实现内部调用了 autoRun 函数。when 函数分为同步版本和异步版本两个。并且，随着响应式数据的变更满足了特定的条件，在副作用函数执行之前，reactin 实例将被销毁，因此副作用函数将只执行一次。</p>
<p><em>代码段 7，reaction 函数</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">when</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  predicate: (</span>) =&gt; <span class="title">boolean</span>,</span></span><br><span class="line"><span class="function">  <span class="title">opts</span>?: <span class="title">IWhenOptions</span></span></span><br><span class="line"><span class="function">): <span class="title">Promise</span>&lt;<span class="title">void</span>&gt; &amp; </span>&#123; cancel(): <span class="keyword">void</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">when</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  predicate: (</span>) =&gt; <span class="title">boolean</span>,</span></span><br><span class="line"><span class="function">  <span class="title">effect</span>: <span class="title">Lambda</span>,</span></span><br><span class="line"><span class="function">  <span class="title">opts</span>?: <span class="title">IWhenOptions</span></span></span><br><span class="line"><span class="function">): <span class="title">IReactionDisposer</span></span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">when</span>(<span class="params">predicate: any, arg1?: any, arg2?: any</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">1</span> || (arg1 &amp;&amp; <span class="keyword">typeof</span> arg1 === <span class="string">"object"</span>))</span><br><span class="line">    <span class="keyword">return</span> whenPromise(predicate, arg1)</span><br><span class="line">  <span class="keyword">return</span> _when(predicate, arg1, arg2 || &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_when</span>(<span class="params">predicate: (</span>) =&gt; <span class="title">boolean</span>, <span class="title">effect</span>: <span class="title">Lambda</span>, <span class="title">opts</span>: <span class="title">IWhenOptions</span>): <span class="title">IReactionDisposer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeoutHandle: any</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> opts.timeout === <span class="string">"number"</span>) &#123;</span><br><span class="line">    timeoutHandle = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!disposer[$mobx].isDisposed) &#123;</span><br><span class="line">        disposer()</span><br><span class="line">        <span class="keyword">const</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"WHEN_TIMEOUT"</span>)</span><br><span class="line">        <span class="keyword">if</span> (opts.onError) opts.onError(error)</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">throw</span> error</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, opts.timeout)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  opts.name = opts.name || <span class="string">"When@"</span> + getNextId()</span><br><span class="line">  <span class="keyword">const</span> effectAction = createAction(opts.name + <span class="string">"-effect"</span>, effect <span class="keyword">as</span> <span class="built_in">Function</span>)</span><br><span class="line">  <span class="keyword">const</span> disposer = autorun(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (predicate()) &#123;</span><br><span class="line">      r.dispose()</span><br><span class="line">      <span class="keyword">if</span> (timeoutHandle) clearTimeout(timeoutHandle)</span><br><span class="line">      effectAction()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, opts)</span><br><span class="line">  <span class="keyword">return</span> disposer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">whenPromise</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  predicate: (</span>) =&gt; <span class="title">boolean</span>,</span></span><br><span class="line"><span class="function">  <span class="title">opts</span>?: <span class="title">IWhenOptions</span></span></span><br><span class="line"><span class="function">): <span class="title">Promise</span>&lt;<span class="title">void</span>&gt; &amp; </span>&#123; cancel(): <span class="keyword">void</span> &#125; &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">"production"</span> &amp;&amp; opts &amp;&amp; opts.onError)</span><br><span class="line">    <span class="keyword">return</span> fail(<span class="string">`the options 'onError' and 'promise' cannot be combined`</span>)</span><br><span class="line">  <span class="keyword">let</span> cancel</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> disposer = _when(predicate, resolve, &#123; ...opts, <span class="attr">onError</span>: reject &#125;)</span><br><span class="line">    cancel = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      disposer()</span><br><span class="line">      reject(<span class="string">"WHEN_CANCELLED"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">    ; (res <span class="keyword">as</span> any).cancel = cancel</span><br><span class="line">  <span class="keyword">return</span> res <span class="keyword">as</span> any</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>mobx 是一个十分严谨的类库，这两篇文章点到的内容最多也不过十之六七。感兴趣的读者可以自行翻阅源码，想必能发现额外的矿藏，比如错误处理、信息追踪等。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>library</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>mobx源码分析（一） 构造响应式数据</title>
    <url>/2018/08/03/frontend/library/mobx%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901/</url>
    <content><![CDATA[<h2 id="思想实验"><a href="#思想实验" class="headerlink" title="思想实验"></a>思想实验</h2><p>在开篇之初，我们先作一番思想实验。借助于形象化思维，通过类比的方式，那样会更容易理解 mobx 的实现。</p>
<p>视线折回到明代，水患侵扰了淳安县境，治理地方水务的官员把这情况上报给知县海瑞，海瑞又上报总督胡宗宪，而胡宗宪呢，他派出快马，向京师呈报奏章，吁请内阁早日筹备赈灾的粮食。与此同时，东厂番子早已把眼线布满全国，不等内阁向嘉靖奏报，嘉靖早已知晓了千里之外的动向。当我们把这环节牵涉到的各级官员设想为收发消息的节点，再把东厂番子设想为全局的监听器，我们就可以据此绘出一张图谱。</p>
<p><em>图 1，明代行政流程图抽象</em><br><img src="/2018/08/03/frontend/library/mobx源码分析1/monitor.png"></p>
<p>即如图谱中所见，node 负责接收消息 message，触发相应的动作 listener，再把消息传递给上层节点的同时，又会把消息传递给全局监听器 monitor，由 monitor 触发 reaction 行为。reaction 行为在现实表现中，往往是命令 node 节点再执行额外的动作，因此，在 node 节点向 monitor 呈报消息的时候，也会携带当前 node 节点的信息。</p>
<p>由此我们类比到 mobx 的实现，绘制出如下图谱：</p>
<p><em>图 2，mobx 工作流程</em><br><img src="/2018/08/03/frontend/library/mobx源码分析1/mobx-monitor.png"></p>
<p>上图中，观察对象 observable 身兼一种能力，即在数据变更前，会触发 interceptor 拦截函数的执行；在数据变更后，会触发 listener 监听函数的执行，同时将数据变更的信息上报给全局监听器。在全局监听器中，startBatch, endBatch 用于开启、结束事务。事务执行过程中，将统计哪些观察者 observer 所观察的数据发生了变更、需要重新执行；在事务的尾端（endBatch 过程中），通过 runAction 方法调用这些观察者的实际处理逻辑。</p>
<p>思考以上 mobx 的工作流程，我们需要探索的问题是：</p>
<ol>
<li>怎样将数据转变成 observable？当数据变更时，observable 又怎样驱动 interceptor, listener 的执行，并上报给全局监听器？</li>
<li>怎样使 observer 订阅 observable？在数据变更的时候，使得相应的观察者 observer 执行其处理逻辑？</li>
</ol>
<p>这篇文章致力于对问题 1 加以解答。对于问题 2，将在下一篇文章加以解答。</p>
<h2 id="响应式数据"><a href="#响应式数据" class="headerlink" title="响应式数据"></a>响应式数据</h2><p>如果数据赋值这一动作委托给某函数处理，我们可以借助 AOP 编程思想，在该函数的执行过程中，添加一些附加操作，如上报变更信息、启用回调函数、或者触发指定事件等。正因为如此，Vue 才得以通过 Object.defineProperty 方法实现双向数据绑定；React 才得以通过 setState 方法引起组件重绘。mobx 融合了两种处理手法。首先，mobx 基于原始数据构建出 observable 实例，在 observable 实例方法变更数据的过程中，将执行 interceptor, listener, reportChanged 等附加操作，这一机制如同 React 内建的 setState 方法在变更组件状态的同时，还能驱动组件重绘。其次，mobx 通过 Object.defineProperty 方法将原始数据（对象形式）的赋值、取值动作委托给 observable 实例方法加以处理，使得原始数据的赋值动作转变成响应式的、取值动作又能获得原始数据内容，这一过程同 Vue 那样使用了 Object.defineProperty 方法。</p>
<p>mobx 能将如下几种数据类型转变为 observable 实例：ObservableValue 实例作为代理，能将基本数据类型的赋值动作转变成响应式；ObservableObjectAdministration 实例能处理对象；ObservableArrayAdministration 实例能处理数组；ObservableMap 实例能处理 map 数据结构。</p>
<p><em>图 3，observable 实例基本</em><br><img src="/2018/08/03/frontend/library/mobx源码分析1/observable.png"></p>
<p>与此同时，mobx 使用 enhancer 递归地将层级较深的数据内容转变成上述四种 observable 实例，使得原始数据的子属性及元素（表现为数组、对象或 map）都具备响应式赋值能力。</p>
<p><em>图 4，enhancer 机制基本</em><br><img src="/2018/08/03/frontend/library/mobx源码分析1/enhancer.png"></p>
<h3 id="ObservableValue"><a href="#ObservableValue" class="headerlink" title="ObservableValue"></a>ObservableValue</h3><p><em>代码段 1，ObservableValue 的部分实例方法</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">set</span>(newValue: T) &#123;</span><br><span class="line">  <span class="keyword">const</span> oldValue = <span class="keyword">this</span>.value</span><br><span class="line">  newValue = <span class="keyword">this</span>.prepareNewValue(newValue) <span class="keyword">as</span> any</span><br><span class="line">  <span class="keyword">if</span> (newValue !== UNCHANGED) &#123;</span><br><span class="line">    <span class="keyword">const</span> notifySpy = isSpyEnabled()</span><br><span class="line">    <span class="keyword">if</span> (notifySpy &amp;&amp; process.env.NODE_ENV !== <span class="string">"production"</span>) &#123;</span><br><span class="line">        spyReportStart(&#123;</span><br><span class="line">            type: <span class="string">"update"</span>,</span><br><span class="line">            name: <span class="keyword">this</span>.name,</span><br><span class="line">            newValue,</span><br><span class="line">            oldValue</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.setNewValue(newValue)</span><br><span class="line">    <span class="keyword">if</span> (notifySpy &amp;&amp; process.env.NODE_ENV !== <span class="string">"production"</span>) spyReportEnd()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private prepareNewValue(newValue): T | IUNCHANGED &#123;</span><br><span class="line">  <span class="comment">// 计算属性获取过程不允许变更响应式数据，严格模式下只能通过 action 改变响应式数据（即状态）</span></span><br><span class="line">  checkIfStateModificationsAreAllowed(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">if</span> (hasInterceptors(<span class="keyword">this</span>)) &#123;</span><br><span class="line">      <span class="keyword">const</span> change = interceptChange&lt;IValueWillChange&lt;T&gt;&gt;(<span class="keyword">this</span>, &#123;</span><br><span class="line">          object: <span class="keyword">this</span>,</span><br><span class="line">          type: <span class="string">"update"</span>,</span><br><span class="line">          newValue</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">if</span> (!change) <span class="keyword">return</span> UNCHANGED</span><br><span class="line">      newValue = change.newValue</span><br><span class="line">  &#125;</span><br><span class="line">  newValue = <span class="keyword">this</span>.enhancer(newValue, <span class="keyword">this</span>.value, <span class="keyword">this</span>.name)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.value !== newValue ? newValue : UNCHANGED</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setNewValue(newValue: T) &#123;</span><br><span class="line">  <span class="keyword">const</span> oldValue = <span class="keyword">this</span>.value</span><br><span class="line">  <span class="keyword">this</span>.value = newValue</span><br><span class="line">  <span class="keyword">this</span>.reportChanged()</span><br><span class="line">  <span class="keyword">if</span> (hasListeners(<span class="keyword">this</span>)) &#123;</span><br><span class="line">    notifyListeners(<span class="keyword">this</span>, &#123;</span><br><span class="line">        type: <span class="string">"update"</span>,</span><br><span class="line">        object: <span class="keyword">this</span>,</span><br><span class="line">        newValue,</span><br><span class="line">        oldValue</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">get</span>(): T &#123;</span><br><span class="line">  <span class="keyword">this</span>.reportObserved()</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.dehanceValue(<span class="keyword">this</span>.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过以上代码，我们也能看出，ObservableValue 实例的 set 方法具有四种智能职能：开发环境下，在数据变更前后，触发 spyListener 间谍监听器的执行（可用于添加日志）；数据变更前，校验变更的合理性，如计算属性获得过程中不允许作数据变更、严格模式下不允许在 action 外作数据变更；同样在数据变更前，调用 interceptor 拦截器，拦截器可用于打断数据变更的动作；数据变更后，通过 reportChanged 方法将数据变更信息上报到全局监听器，并触发 listener 监听函数的执行。</p>
<p>其中，interceptor, listener 均挂载为 ObservableValue 实例的属性，因此，interceptChange, notifyListeners 以 ObservableValue 实例作为其入参，用于查找待执行的 interceptor, listener。</p>
<p>reportChanged 方法执行过程中，将把当前的 ObservableValue 标识为脏值，并驱动相应的 observer（同样挂载为 ObservableValue 实例的属性）执行其处理逻辑。在 mobx 的实现中，观察者 observer 并不需要感知自己观察的 observable 实例作了哪些变更，而只要知晓 observable 已经作了数据变更，observer 就需要执行其处理逻辑。因此，只要 observer 观察的 observable 实例颗粒度足够细，就能使 observer 基于确凿的数据变更，发起相应的响应式处理流程。这部分内容，散见于下文。</p>
<p>有了上述逻辑实现后，基本数据类型就可以把赋值动作委托给 observableValue.set 方法加以处理，以获得响应式变更数据内容的能力。</p>
<p>enhancer 用于将数据内容转变成 observable 实例，既能用于递归地处理复杂的数据结构，又能适应 js 弱类型语言的特征。比如，当把数据内容从基本数据类型切换成对象时，enhancer 就能使得对象属性的赋值动作也具有响应式效果。enhancer 分为两类，其一作为构造函数的参数，其二作为实例方法。</p>
<h3 id="ObservableObjectAdministration"><a href="#ObservableObjectAdministration" class="headerlink" title="ObservableObjectAdministration"></a>ObservableObjectAdministration</h3><p>不同于基本数据类型的全量更新，对象单次只更新一个属性。因此，ObservableValue 实例与原始数据的关系较为直接，原始数据的读写动作可直接委托给 observableValue.set, observableValue.get 方法加以处理，呈单一的线条形状；ObservableObjectAdministration 实例和原始数据就显得比较复杂，需要通过属性作桥接，按属性呈多线条形状。无论 ObservableObjectAdministration 实例提供的 read, write, addObservableProp, addComputedProp 都在属性级别。顾名思义，read, write 方法用于针对属性的读写操作，addObservableProp 用于添加可观察属性，addComputedProp 用于添加计算属性。</p>
<p>除此而外，ObservableValue 实例不会改变原始数据 value 的读写过程，而只能通过显式调用 observableValue.set 方法唤起响应式操作。ObservableObjectAdministration 实例可通过 Object.defineProperty 方法影响原始数据的读写。使用了 Object.defineProperty 方法后，读取 target 属性，都将委托给 observableObjectAdministration.read, observableObjectAdministration.write 方法去处理，从而使原始数据的读写过程变成响应式。</p>
<p>在 ObservableObjectAdministration 构造函数的实现内部，仰赖于 ObservableValue, ComputedValue 构造函数，因为其子属性既可能是 ObservableValue 可观察数据，ComputedValue 计算属性，又可能是没有响应式特征的普通数据。</p>
<p><em>代码段 2，ObservableObjectAdministration 的部分实例方法</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">read(key: string) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.values.get(key)!.get()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">write(key: string, newValue) &#123;</span><br><span class="line">  <span class="keyword">const</span> instance = <span class="keyword">this</span>.target</span><br><span class="line">  <span class="keyword">const</span> observable = <span class="keyword">this</span>.values.get(key)</span><br><span class="line">  <span class="comment">// 变更计算属性，予以报错处理，</span></span><br><span class="line">  <span class="keyword">if</span> (observable <span class="keyword">instanceof</span> ComputedValue) &#123;</span><br><span class="line">    observable.set(newValue)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasInterceptors(<span class="keyword">this</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> change = interceptChange&lt;IObjectWillChange&gt;(<span class="keyword">this</span>, &#123;</span><br><span class="line">      type: <span class="string">"update"</span>,</span><br><span class="line">      object: <span class="keyword">this</span>.proxy || instance,</span><br><span class="line">      name: key,</span><br><span class="line">      newValue</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (!change) <span class="keyword">return</span></span><br><span class="line">    newValue = (change <span class="keyword">as</span> any).newValue</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 触发 ObservableValue 实例的 interceptor 拦截器, 通过 observableValue.enhance 获取终值</span></span><br><span class="line">  newValue = (observable <span class="keyword">as</span> any).prepareNewValue(newValue)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (newValue !== UNCHANGED) &#123;</span><br><span class="line">    <span class="keyword">const</span> notify = hasListeners(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">const</span> notifySpy = isSpyEnabled()</span><br><span class="line">    <span class="keyword">const</span> change =</span><br><span class="line">      notify || notifySpy</span><br><span class="line">        ? &#123;</span><br><span class="line">          type: <span class="string">"update"</span>,</span><br><span class="line">          object: <span class="keyword">this</span>.proxy || instance,</span><br><span class="line">          oldValue: (observable <span class="keyword">as</span> any).value,</span><br><span class="line">          name: key,</span><br><span class="line">          newValue</span><br><span class="line">        &#125;</span><br><span class="line">        : <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (notifySpy &amp;&amp; process.env.NODE_ENV !== <span class="string">"production"</span>)</span><br><span class="line">      spyReportStart(&#123; ...change, <span class="attr">name</span>: <span class="keyword">this</span>.name, key &#125;)</span><br><span class="line">        <span class="comment">// 触发 ObservableValue 实例的 listener 订阅函数，并调用 observableValue.reportChanged 上报变更</span></span><br><span class="line">        ; (observable <span class="keyword">as</span> ObservableValue&lt;any&gt;).setNewValue(newValue)</span><br><span class="line">    <span class="keyword">if</span> (notify) notifyListeners(<span class="keyword">this</span>, change)</span><br><span class="line">    <span class="keyword">if</span> (notifySpy &amp;&amp; process.env.NODE_ENV !== <span class="string">"production"</span>) spyReportEnd()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addObservableProp(propName: string, newValue, <span class="attr">enhancer</span>: IEnhancer&lt;any&gt; = <span class="keyword">this</span>.defaultEnhancer) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; target &#125; = <span class="keyword">this</span></span><br><span class="line">  <span class="comment">// 校验 target 对象 propName 是否具有 configurable, writable 可能</span></span><br><span class="line">  assertPropertyConfigurable(target, propName)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasInterceptors(<span class="keyword">this</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> change = interceptChange&lt;IObjectWillChange&gt;(<span class="keyword">this</span>, &#123;</span><br><span class="line">      object: <span class="keyword">this</span>.proxy || target,</span><br><span class="line">      name: propName,</span><br><span class="line">      type: <span class="string">"add"</span>,</span><br><span class="line">      newValue</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (!change) <span class="keyword">return</span></span><br><span class="line">    newValue = (change <span class="keyword">as</span> any).newValue</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> observable = <span class="keyword">new</span> ObservableValue(</span><br><span class="line">    newValue,</span><br><span class="line">    enhancer,</span><br><span class="line">    <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>.<span class="subst">$&#123;propName&#125;</span>`</span>,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">this</span>.values.set(propName, observable)</span><br><span class="line">  newValue = (observable <span class="keyword">as</span> any).value <span class="comment">// observableValue might have changed it</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target, propName, generateObservablePropConfig(propName))</span><br><span class="line">  <span class="keyword">this</span>.notifyPropertyAddition(propName, newValue)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">notifyPropertyAddition(key: string, newValue) &#123;</span><br><span class="line">  <span class="keyword">const</span> notify = hasListeners(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">const</span> notifySpy = isSpyEnabled()</span><br><span class="line">  <span class="keyword">const</span> change =</span><br><span class="line">    notify || notifySpy</span><br><span class="line">      ? &#123;</span><br><span class="line">        type: <span class="string">"add"</span>,</span><br><span class="line">        object: <span class="keyword">this</span>.proxy || <span class="keyword">this</span>.target,</span><br><span class="line">        name: key,</span><br><span class="line">        newValue</span><br><span class="line">      &#125;</span><br><span class="line">      : <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (notifySpy &amp;&amp; process.env.NODE_ENV !== <span class="string">"production"</span>)</span><br><span class="line">    spyReportStart(&#123; ...change, <span class="attr">name</span>: <span class="keyword">this</span>.name, key &#125;)</span><br><span class="line">  <span class="keyword">if</span> (notify) notifyListeners(<span class="keyword">this</span>, change)</span><br><span class="line">  <span class="keyword">if</span> (notifySpy &amp;&amp; process.env.NODE_ENV !== <span class="string">"production"</span>) spyReportEnd()</span><br><span class="line">  <span class="keyword">this</span>.keysAtom.reportChanged()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过以上代码，可以看出，observableObjectAdministration.write 方法将依次调用挂载在 ObservableValue, ObservableObjectAdministration 实例上的 interceptor 拦截器和 listener 订阅函数，又通过 observableValue.reportChanged 上报给全局监听器，触发相应的观察者 observer 执行其处理逻辑。在这里，作为属性值的 observableValue 实例颗粒度更细，通过 observableValue.reportChanged 上报给全局监听器，将能使观察者 observer 对更细微的数据变动做出响应。为什么 observableObjectAdministration 没有实现 reportChanged 方法呢？因为，基于 enhancer，observableValue 所处理的数据有可能就是一个 observableObjectAdministration 实例，由 observableValue 处理上报动作是可行的。</p>
<p>observableObjectAdministration.addObservableProp 方法用于添加可观察属性。在该方法的内部实现中，既通过创建新的 ObservableValue 实例将属性变更上报给全局监听器，又通过 keysAtom 属性（Atom 实例）上报给全局监听器。前者使观察属性变更的 observer 作出响应，后者用于使观察属性集合的 observer 作出响应。同 Vue，mobx 在取值时设定观察者 observer 和可观察数据 observable 的依赖关系，通过 reportObserved 方法刷新依赖；在赋值时将可观察数据 observable 标识为脏值，观察者 observer 需要执行其处理逻辑。因此，单有 reportChanged 并不触发响应式动作，那时还没有一个观察者需要基于变更的数据作出响应（或者理解为没有观察者订阅变更的数据）；只有 reportObserved, reportChanged，观察者 observer 才会执行其处理逻辑。</p>
<p><em>图 5，ObservableObjectAdministration 工作流程</em><br><img src="/2018/08/03/frontend/library/mobx源码分析1/observable-object-admin.png"></p>
<h3 id="ObservableArrayAdministration"><a href="#ObservableArrayAdministration" class="headerlink" title="ObservableArrayAdministration"></a>ObservableArrayAdministration</h3><p>对于数组，与 Vue 相同，mobx 需要使数组的原型方法也具有响应式操作的能力。不同于 Vue 直接改写数组的实例方法，mobx 使用了 es6 中 Proxy 语法。通过 Proxy 代理器，mobx 将对数组项的读取操作、push 等方法移交给 arrayExtensions 集合处理。因此，ObservableArrayAdministration 构造函数不同于 ObservableObjectAdministration，部分可以在 ObservableArrayAdministration 构造函数中实现的实例方法最终会在 arrayExtensions 对象中实现。</p>
<p><em>代码段 3，ObservableArrayAdministration 的部分实例方法</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">spliceWithArray(index: number, deleteCount?: number, newItems?: any[]): any[] &#123;</span><br><span class="line">  checkIfStateModificationsAreAllowed(<span class="keyword">this</span>.atom)</span><br><span class="line">  <span class="keyword">const</span> length = <span class="keyword">this</span>.values.length</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (index === <span class="literal">undefined</span>) index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (index &gt; length) index = length</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; <span class="number">0</span>) index = <span class="built_in">Math</span>.max(<span class="number">0</span>, length + index)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">1</span>) deleteCount = length - index</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (deleteCount === <span class="literal">undefined</span> || deleteCount === <span class="literal">null</span>) deleteCount = <span class="number">0</span></span><br><span class="line">  <span class="keyword">else</span> deleteCount = <span class="built_in">Math</span>.max(<span class="number">0</span>, <span class="built_in">Math</span>.min(deleteCount, length - index))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (newItems === <span class="literal">undefined</span>) newItems = EMPTY_ARRAY</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasInterceptors(<span class="keyword">this</span>)) &#123;</span><br><span class="line">      <span class="keyword">const</span> change = interceptChange&lt;IArrayWillSplice&lt;any&gt;&gt;(<span class="keyword">this</span> <span class="keyword">as</span> any, &#123;</span><br><span class="line">          object: <span class="keyword">this</span>.proxy <span class="keyword">as</span> any,</span><br><span class="line">          type: <span class="string">"splice"</span>,</span><br><span class="line">          index,</span><br><span class="line">          removedCount: deleteCount,</span><br><span class="line">          added: newItems</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">if</span> (!change) <span class="keyword">return</span> EMPTY_ARRAY</span><br><span class="line">      deleteCount = change.removedCount</span><br><span class="line">      newItems = change.added</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  newItems = newItems.length === <span class="number">0</span> ? newItems : newItems.map(<span class="function"><span class="params">v</span> =&gt;</span> <span class="keyword">this</span>.enhancer(v, <span class="literal">undefined</span>))</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">"production"</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> lengthDelta = newItems.length - deleteCount</span><br><span class="line">      <span class="keyword">this</span>.updateArrayLength(length, lengthDelta) <span class="comment">// checks if internal array wasn't modified</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">this</span>.spliceItemsIntoValues(index, deleteCount, newItems)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (deleteCount !== <span class="number">0</span> || newItems.length !== <span class="number">0</span>) <span class="keyword">this</span>.notifyArraySplice(index, newItems, res)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.dehanceValues(res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">spliceItemsIntoValues(index, deleteCount, <span class="attr">newItems</span>: any[]): any[] &#123;</span><br><span class="line">  <span class="keyword">if</span> (newItems.length &lt; MAX_SPLICE_SIZE) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.values.splice(index, deleteCount, ...newItems)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">this</span>.values.slice(index, index + deleteCount)</span><br><span class="line">      <span class="keyword">this</span>.values = <span class="keyword">this</span>.values</span><br><span class="line">          .slice(<span class="number">0</span>, index)</span><br><span class="line">          .concat(newItems, <span class="keyword">this</span>.values.slice(index + deleteCount))</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">notifyArraySplice(index: number, <span class="attr">added</span>: any[], <span class="attr">removed</span>: any[]) &#123;</span><br><span class="line">  <span class="keyword">const</span> notifySpy = !<span class="keyword">this</span>.owned &amp;&amp; isSpyEnabled()</span><br><span class="line">  <span class="keyword">const</span> notify = hasListeners(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">const</span> change =</span><br><span class="line">      notify || notifySpy</span><br><span class="line">          ? &#123;</span><br><span class="line">                object: <span class="keyword">this</span>.proxy,</span><br><span class="line">                type: <span class="string">"splice"</span>,</span><br><span class="line">                index,</span><br><span class="line">                removed,</span><br><span class="line">                added,</span><br><span class="line">                removedCount: removed.length,</span><br><span class="line">                addedCount: added.length</span><br><span class="line">            &#125;</span><br><span class="line">          : <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (notifySpy &amp;&amp; process.env.NODE_ENV !== <span class="string">"production"</span>)</span><br><span class="line">      spyReportStart(&#123; ...change, <span class="attr">name</span>: <span class="keyword">this</span>.atom.name &#125;)</span><br><span class="line">  <span class="keyword">this</span>.atom.reportChanged()</span><br><span class="line">  <span class="keyword">if</span> (notify) notifyListeners(<span class="keyword">this</span>, change)</span><br><span class="line">  <span class="keyword">if</span> (notifySpy &amp;&amp; process.env.NODE_ENV !== <span class="string">"production"</span>) spyReportEnd()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">notifyArrayChildUpdate(index: number, <span class="attr">newValue</span>: any, <span class="attr">oldValue</span>: any) &#123;</span><br><span class="line">  <span class="keyword">const</span> notifySpy = !<span class="keyword">this</span>.owned &amp;&amp; isSpyEnabled()</span><br><span class="line">  <span class="keyword">const</span> notify = hasListeners(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">const</span> change =</span><br><span class="line">    notify || notifySpy</span><br><span class="line">      ? &#123;</span><br><span class="line">        object: <span class="keyword">this</span>.proxy,</span><br><span class="line">        type: <span class="string">"update"</span>,</span><br><span class="line">        index,</span><br><span class="line">        newValue,</span><br><span class="line">        oldValue</span><br><span class="line">      &#125;</span><br><span class="line">      : <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (notifySpy &amp;&amp; process.env.NODE_ENV !== <span class="string">"production"</span>)</span><br><span class="line">    spyReportStart(&#123; ...change, <span class="attr">name</span>: <span class="keyword">this</span>.atom.name &#125;)</span><br><span class="line">  <span class="keyword">this</span>.atom.reportChanged()</span><br><span class="line">  <span class="keyword">if</span> (notify) notifyListeners(<span class="keyword">this</span>, change)</span><br><span class="line">  <span class="keyword">if</span> (notifySpy &amp;&amp; process.env.NODE_ENV !== <span class="string">"production"</span>) spyReportEnd()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过以上代码，可以看出，ObservableArrayAdministration 构造函数只提供了 spliceWithArray 实例方法，用于一次性变更数组项及数组的长度。在这一过程中，同样会调用挂载在 observableArrayAdministration 实例中的 interceptor, listener，以及通过 reportChanged 方法将变更信息上报给全局监听器。</p>
<p>不同于 observableArrayAdministration 实例中变更数据的子属性由 observableValue 实例构成；observableArrayAdministration 实例中变更的数组项直接通过 enhancer 处理成 observable 实例。因为对于数组，观察者只订阅单个数组项变更的情况较少，不像对象需要监控每个属性的变更，两者监控的颗粒度不一样，前者就使用 enhancer 构造 observable 实例，后者通过 ObservableValue 构造 observable 实例。</p>
<p><em>代码段4，arrayExtensions 对象含有的方法</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayExtensions = &#123;</span><br><span class="line">  clear(): any[] &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.splice(<span class="number">0</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  replace(newItems: any[]) &#123;</span><br><span class="line">    <span class="keyword">const</span> adm: ObservableArrayAdministration = <span class="keyword">this</span>[$mobx]</span><br><span class="line">    <span class="keyword">return</span> adm.spliceWithArray(<span class="number">0</span>, adm.values.length, newItems)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  splice(index: number, deleteCount?: number, ...newItems: any[]): any[] &#123;</span><br><span class="line">    <span class="keyword">const</span> adm: ObservableArrayAdministration = <span class="keyword">this</span>[$mobx]</span><br><span class="line">    <span class="keyword">switch</span> (<span class="built_in">arguments</span>.length) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> adm.spliceWithArray(index)</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> adm.spliceWithArray(index, deleteCount)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> adm.spliceWithArray(index, deleteCount, newItems)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  spliceWithArray(index: number, deleteCount?: number, newItems?: any[]): any[] &#123;</span><br><span class="line">    <span class="keyword">const</span> adm: ObservableArrayAdministration = <span class="keyword">this</span>[$mobx]</span><br><span class="line">    <span class="keyword">return</span> adm.spliceWithArray(index, deleteCount, newItems)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  push(...items: any[]): number &#123;</span><br><span class="line">    <span class="keyword">const</span> adm: ObservableArrayAdministration = <span class="keyword">this</span>[$mobx]</span><br><span class="line">    adm.spliceWithArray(adm.values.length, <span class="number">0</span>, items)</span><br><span class="line">    <span class="keyword">return</span> adm.values.length</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.splice(<span class="built_in">Math</span>.max(<span class="keyword">this</span>[$mobx].values.length - <span class="number">1</span>, <span class="number">0</span>), <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  shift() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.splice(<span class="number">0</span>, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  unshift(...items: any[]): number &#123;</span><br><span class="line">    <span class="keyword">const</span> adm = <span class="keyword">this</span>[$mobx]</span><br><span class="line">    adm.spliceWithArray(<span class="number">0</span>, <span class="number">0</span>, items)</span><br><span class="line">    <span class="keyword">return</span> adm.values.length</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  reverse(): any[] &#123;</span><br><span class="line">    <span class="comment">// 开发环境提示用户 reverse 方法不会改变观察数据的内容</span></span><br><span class="line">    <span class="keyword">const</span> clone = (<span class="xml"><span class="tag">&lt;<span class="name">any</span>&gt;</span>this).slice()</span></span><br><span class="line"><span class="xml">    return clone.reverse.apply(clone, arguments)</span></span><br><span class="line"><span class="xml">  &#125;,</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  sort(compareFn?: (a: any, b: any) =&gt; number): any[] &#123;</span></span><br><span class="line"><span class="xml">    // 开发环境提示用户 sort 方法不会改变观察数据的内容</span></span><br><span class="line">    const clone = (&lt;any&gt;this).slice()</span><br><span class="line">    return clone.sort.apply(clone, arguments)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  remove(value: any): boolean &#123;</span><br><span class="line">    const adm: ObservableArrayAdministration = this[$mobx]</span><br><span class="line">    const idx = adm.dehanceValues(adm.values).indexOf(value)</span><br><span class="line">    if (idx &gt; -1) &#123;</span><br><span class="line">      this.splice(idx, 1)</span><br><span class="line">      return true</span><br><span class="line">    &#125;</span><br><span class="line">    return false</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  get(index: number): any | undefined &#123;</span><br><span class="line">    const adm: ObservableArrayAdministration = this[$mobx]</span><br><span class="line">    if (adm) &#123;</span><br><span class="line">      if (index &lt; adm.values.length) &#123;</span><br><span class="line">        adm.atom.reportObserved()</span><br><span class="line">        return adm.dehanceValue(adm.values[index])</span><br><span class="line">      &#125;</span><br><span class="line">      // 提示用户超过数组长度</span><br><span class="line">    &#125;</span><br><span class="line">    return undefined</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  set(index: number, newValue: any) &#123;</span><br><span class="line">    const adm: ObservableArrayAdministration = this[$mobx]</span><br><span class="line">    const values = adm.values</span><br><span class="line">    if (index &lt; values.length) &#123;</span><br><span class="line">      checkIfStateModificationsAreAllowed(adm.atom)</span><br><span class="line">      const oldValue = values[index]</span><br><span class="line">      if (hasInterceptors(adm)) &#123;</span><br><span class="line">        const change = interceptChange&lt;IArrayWillChange&lt;any&gt;&gt;(adm as any, &#123;</span><br><span class="line">          type: "update",</span><br><span class="line">          object: this as any,</span><br><span class="line">          index,</span><br><span class="line">          newValue</span><br><span class="line">        &#125;)</span><br><span class="line">        if (!change) return</span><br><span class="line">        newValue = change.newValue</span><br><span class="line">      &#125;</span><br><span class="line">      newValue = adm.enhancer(newValue, oldValue)</span><br><span class="line">      const changed = newValue !== oldValue</span><br><span class="line">      if (changed) &#123;</span><br><span class="line">        values[index] = newValue</span><br><span class="line">        adm.notifyArrayChildUpdate(index, newValue, oldValue)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; else if (index === values.length) &#123;</span><br><span class="line">      adm.spliceWithArray(index, 0, [newValue])</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // 超过数组长度，报错处理</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  "every",</span><br><span class="line">  "filter",</span><br><span class="line">  "forEach",</span><br><span class="line">  "indexOf",</span><br><span class="line">  "join",</span><br><span class="line">  "lastIndexOf",</span><br><span class="line">  "map",</span><br><span class="line">  "reduce",</span><br><span class="line">  "reduceRight",</span><br><span class="line">  "slice",</span><br><span class="line">  "some",</span><br><span class="line">  "toString",</span><br><span class="line">  "toLocaleString"</span><br><span class="line">].forEach(funcName =&gt; &#123;</span><br><span class="line">  arrayExtensions[funcName] = function () &#123;</span><br><span class="line">    const adm: ObservableArrayAdministration = this[$mobx]</span><br><span class="line">    adm.atom.reportObserved()</span><br><span class="line">    const res = adm.dehanceValues(adm.values)</span><br><span class="line">    return res[funcName].apply(res, arguments)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>可以看出，arrayExtensions 对象封装了数组的原型方法，便于通过 Proxy 语法构建代理，为原始数据提供响应式的数组操作。在 mobx 中，创建原始数组的代理通过 createObservableArray 函数实现。源码如下：</p>
<p><em>代码段 5，为数组创建代理</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObservableArray</span>&lt;<span class="title">T</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  initialValues: any[] | undefined,</span></span></span><br><span class="line"><span class="function"><span class="params">  enhancer: IEnhancer&lt;T&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  name = <span class="string">"ObservableArray@"</span> + getNextId(</span>),</span></span><br><span class="line"><span class="function">  <span class="title">owned</span> = <span class="title">false</span></span></span><br><span class="line"><span class="function">): <span class="title">IObservableArray</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> adm = <span class="keyword">new</span> ObservableArrayAdministration(name, enhancer, owned)</span><br><span class="line">  addHiddenFinalProp(adm.values, $mobx, adm)</span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(adm.values, arrayTraps) <span class="keyword">as</span> any</span><br><span class="line">  adm.proxy = proxy</span><br><span class="line">  <span class="keyword">if</span> (initialValues &amp;&amp; initialValues.length) &#123;</span><br><span class="line">    <span class="keyword">const</span> prev = allowStateChangesStart(<span class="literal">true</span>)</span><br><span class="line">    adm.spliceWithArray(<span class="number">0</span>, <span class="number">0</span>, initialValues)</span><br><span class="line">    allowStateChangesEnd(prev)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> proxy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arrayTraps = &#123;</span><br><span class="line">  <span class="keyword">get</span>(target, name) &#123;</span><br><span class="line">    <span class="keyword">if</span> (name === $mobx) <span class="keyword">return</span> target[$mobx]</span><br><span class="line">    <span class="keyword">if</span> (name === <span class="string">"length"</span>) <span class="keyword">return</span> target[$mobx].getArrayLength()</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">"number"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> arrayExtensions.get.call(target, name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">"string"</span> &amp;&amp; !<span class="built_in">isNaN</span>(name <span class="keyword">as</span> any)) &#123;</span><br><span class="line">      <span class="keyword">return</span> arrayExtensions.get.call(target, <span class="built_in">parseInt</span>(name))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arrayExtensions.hasOwnProperty(name)) &#123;</span><br><span class="line">      <span class="keyword">return</span> arrayExtensions[name]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target[name]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span>(target, name, value): boolean &#123;</span><br><span class="line">    <span class="keyword">if</span> (name === <span class="string">"length"</span>) &#123;</span><br><span class="line">      target[$mobx].setArrayLength(value)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">"number"</span>) &#123;</span><br><span class="line">      arrayExtensions.set.call(target, name, value)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(name)) &#123;</span><br><span class="line">      arrayExtensions.set.call(target, <span class="built_in">parseInt</span>(name), value)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  preventExtensions(target) &#123;</span><br><span class="line">    fail(<span class="string">`Observable arrays cannot be frozen`</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过创建代理对象，mobx 数组的处理效果就等同使用 Object.defineProperty 方法处理后的对象，赋值呈现响应式，取值获得更新后的值。</p>
<h3 id="ObservableMap"><a href="#ObservableMap" class="headerlink" title="ObservableMap"></a>ObservableMap</h3><p>mobx 介入对象处理的着眼点是属性，而对于 map 数据结构，其着眼点在于实例方法 set, get, has 等。因此，ObservableMap 与 ObservableArrayAdminstriation 处理上有相似的地方，都是对原始数据提供代理对象。在 ObservableArrayAdminstriation 的实现中，真正的代理对象需要在 createObservableArray 函数执行环节才能创建出 proxy 实例，而 ObservableMap 实例即是原始 map 结构的代理。</p>
<p><em>代码段 6，ObservableMap 的部分实例方法</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">has(key: K): boolean &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>._hasMap.has(key)) <span class="keyword">return</span> <span class="keyword">this</span>._hasMap.get(key)!.get()</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._updateHasMapEntry(key, <span class="literal">false</span>).get()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(key: K, value: V) &#123;</span><br><span class="line">  <span class="keyword">const</span> hasKey = <span class="keyword">this</span>._has(key)</span><br><span class="line">  <span class="keyword">if</span> (hasInterceptors(<span class="keyword">this</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> change = interceptChange&lt;IMapWillChange&lt;K, V&gt;&gt;(<span class="keyword">this</span>, &#123;</span><br><span class="line">      type: hasKey ? <span class="string">"update"</span> : <span class="string">"add"</span>,</span><br><span class="line">      object: <span class="keyword">this</span>,</span><br><span class="line">      newValue: value,</span><br><span class="line">      name: key</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (!change) <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    value = change.newValue!</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (hasKey) &#123;</span><br><span class="line">    <span class="keyword">this</span>._updateValue(key, value)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>._addValue(key, value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private _updateHasMapEntry(key: K, <span class="attr">value</span>: boolean): ObservableValue&lt;boolean&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> entry = <span class="keyword">this</span>._hasMap.get(key)</span><br><span class="line">  <span class="keyword">if</span> (entry) &#123;</span><br><span class="line">    entry.setNewValue(value)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    entry = <span class="keyword">new</span> ObservableValue(value, referenceEnhancer, <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>.<span class="subst">$&#123;key&#125;</span>?`</span>, <span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">this</span>._hasMap.set(key, entry)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> entry</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private _updateValue(key: K, <span class="attr">newValue</span>: V | <span class="literal">undefined</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> observable = <span class="keyword">this</span>._data.get(key)!</span><br><span class="line">  newValue = (observable <span class="keyword">as</span> any).prepareNewValue(newValue) <span class="keyword">as</span> V</span><br><span class="line">  <span class="keyword">if</span> (newValue !== UNCHANGED) &#123;</span><br><span class="line">    <span class="keyword">const</span> notifySpy = isSpyEnabled()</span><br><span class="line">    <span class="keyword">const</span> notify = hasListeners(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">const</span> change =</span><br><span class="line">      notify || notifySpy</span><br><span class="line">        ? &lt;IMapDidChange&lt;K, V&gt;&gt;&#123;</span><br><span class="line">          type: "update",</span><br><span class="line">          object: this,</span><br><span class="line">          oldValue: (observable as any).value,</span><br><span class="line">          name: key,</span><br><span class="line">          newValue</span><br><span class="line">        &#125;</span><br><span class="line">        : null</span><br><span class="line">    if (notifySpy &amp;&amp; process.env.NODE_ENV !== "production")</span><br><span class="line">      spyReportStart(&#123; ...change, name: this.name, key &#125;)</span><br><span class="line">    observable.setNewValue(newValue as V)</span><br><span class="line">    if (notify) notifyListeners(this, change)</span><br><span class="line">    if (notifySpy &amp;&amp; process.env.NODE_ENV !== "production") spyReportEnd()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private _addValue(key: K, newValue: V) &#123;</span><br><span class="line">  checkIfStateModificationsAreAllowed(this._keysAtom)</span><br><span class="line">  transaction(() =&gt; &#123;</span><br><span class="line">    const observable = new ObservableValue(</span><br><span class="line">      newValue,</span><br><span class="line">      this.enhancer,</span><br><span class="line">      `$&#123;this.name&#125;.$&#123;key&#125;`,</span><br><span class="line">      false</span><br><span class="line">    )</span><br><span class="line">    this._data.set(key, observable)</span><br><span class="line">    newValue = (observable as any).value // value might have been changed</span><br><span class="line">    this._updateHasMapEntry(key, true)</span><br><span class="line">    this._keysAtom.reportChanged()</span><br><span class="line">  &#125;)</span><br><span class="line">  const notifySpy = isSpyEnabled()</span><br><span class="line">  const notify = hasListeners(this)</span><br><span class="line">  const change =</span><br><span class="line">    notify || notifySpy</span><br><span class="line">      ? &lt;IMapDidChange&lt;K, V&gt;&gt;&#123;</span><br><span class="line">        type: "add",</span><br><span class="line">        object: this,</span><br><span class="line">        name: key,</span><br><span class="line">        newValue</span><br><span class="line">      &#125;</span><br><span class="line">      : null</span><br><span class="line">  if (notifySpy &amp;&amp; process.env.NODE_ENV !== "production")</span><br><span class="line">    spyReportStart(&#123; ...change, name: this.name, key &#125;)</span><br><span class="line">  if (notify) notifyListeners(this, change)</span><br><span class="line">  if (notifySpy &amp;&amp; process.env.NODE_ENV !== "production") spyReportEnd()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上述代码中，除了常规的 interceptChange, notifyListeners, spyReportStart, spyReportEnd 以外，mobx 构建了两个 observable 实例集合，其一是 this._hasMap（由 ObservableValue 实例构成），其二是 this._data（由 enhancer 构建的 observable 实例构成）。其中，this._hasMap 用于协助 map.has 方法的响应式特征，其实际存储的值也是布尔类型；this._data 用于协助 map.set 方法的响应式特征，其存储的就是用户设置的数据。这两个 observable 实例集合可能同时会通过 reportChanged 方法上报数据变更（this.keysAtom 也会上报 map 集合所有的 key 键变化），因此在代码的组织中，ObservableMap 构造函数使用了 mobx 内置的 tansaction 函数，用于在多次数据变更信息上报时协调事务，只有在最后一次数据上报时，才执行观察者 observer 的处理逻辑。</p>
<h2 id="接口层"><a href="#接口层" class="headerlink" title="接口层"></a>接口层</h2><p><em>图 6，observable 接口层处理流程</em><br><img src="/2018/08/03/frontend/library/mobx源码分析1/observable-interface.png"></p>
<p>结合上图和前文，可得出 mobx 接口层的一些处理逻辑：</p>
<ol>
<li>对于普通数据、map 数据结构的处理即是直接生成 ObservableValue, ObservableMap 实例。</li>
<li>对于数组，则通过 createObservableArray 创建 Proxy 代理实例，该代理实例的方法体中将调用 ObservableArrayAdminstrition 实例的响应式操作。</li>
<li>对于对象，则分为两种情况，当 options.proxy 为否值，只生成 ObservableObjectAdminstrition，再通过装饰器插入计算属性或可观察属性；当 options.proxy 为真值，创建 Proxy 代理实例，同样的，该代理实例的方法体中将调用 ObservableObjectAdminstrition 实例的响应式操作，再通过装饰器插入计算属性或可观察属性。</li>
<li>以上3点之外，mobx 通过 enhancer 决定对深层数据结构的处理操作，如 observable.deep 装饰器使用 deepEnhancer 增强器，将数据的深层结构统统转换为 observable 实例（默认操作）；observable.shallow 装饰器使用 shallowEnhancer 增强器，只将数据的首层转换为 observable 实例；observable.ref 装饰器使用 referenceEnhancer 增强器，不会将数据转换为 observable 实例（除非新值就是个 observable 实例）；observable.struct 装饰器使用 refStructEnhancer 增强器，同样不会将数据转换为 observable 实例，与 referenceEnhancer 区别是，当数据未作变更时，refStructEnhancer 将以引用对象形式返回原始数据，而不是值相同的新数据。</li>
</ol>
<p>值得说明的是，mobx 处理对象时会批量添加计算属性或可观察属性，所以实现中使用 startBatch, endBatch 开启事务，使观察者的处理逻辑只执行一次。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>library</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>react-redux源码分析</title>
    <url>/2018/07/08/frontend/library/react-redux%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>react-redux 类库的意义是将 redux 状态注入到组件中，且在状态更新时驱动组件重绘。在这个类库的设计和实现上，需要面临两个问题：如何将 store 中缓存的状态注入到组件中；在状态更新时，如何驱动组件重绘。</p>
<p>对于第一个问题，react-redux 解决手法也极为简单且常见。通过顶层 Provider 容器接受 store 作为 props，再将 store 作为 context 内容传入子孙组件；在用户端实际消费状态的组件（自定义组件）外层构造直属父级容器（HOC 高阶组件），由直属父级容器将通过 context.store 属性获取的状态数据输入为自定义组件的 props。</p>
<p>对于第二个问题，react-redux 解决手法是：通过 store.subscribe 方法注册状态变更后待执行的回调函数 listener，在该回调函数执行直属父级容器的 forceUpdate 或 setState 方法，重新计算注入自定义组件的 props 数据，由此重绘自定义组件。在这个过程中，无论 store 中的状态数据作何种更新，均会触发 listener 回调的执行，因而实现上有一个优化性能的关键点，即怎样使组件在指定状态更新时启用重绘机制。这一优化点通过重新计算注入自定义组件的 props 实现。在 react-redux 源码中，重新计算 props 数据由 selector 筛选器完成。除此以外，react-redux 还有另一处优化：为减少 listener 的数量，当某个 HOC 组件的重绘机制（在 redux 源码中，表现为该 HOC 组件的 onStateChange 方法）已挂载为 listener 时，其下子孙容器（同样是 HOC 组件）的重绘机制将在这个 listener 的函数体中实现。</p>
<p><em>图 1，react-redux 执行流程</em><br><img src="/2018/07/08/frontend/library/react-redux源码分析/react-redux.png"></p>
<p><em>图 1</em> 中，store, action, listener 概念来自于 redux，可参见<a href="http://xzfyu.com/2018/07/08/react/react%E7%9B%B8%E5%85%B3/redux%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">react源码分析</a>；context 用于为子孙组件传入数据，概念来自于 react；Provider 作为顶层容器，由 react-redux 提供；Component，实际为自定义组件的直属父级容器，由 react-redux 提供；selector 是 react-redux 机制中将state、dispatch 和 boundAction 转化为自定义组件所需的 props 的筛选器。</p>
<h2 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h2><p>selector 筛选器注入组件的 props 有两种：store 中存储的状态值、驱动状态值变更的方法 boundAction（包含 store.dispatch 方法）。这两份数据分别通过用户配置项 mapStateToProps, mapDispatchToProps 获得，再由用户配置的 mergeProps = (stateProps, dispatchProps, ownProps) =&gt; props 获取注入组件的 props（ownProps 是由父组件注入自定义组件的 props）。</p>
<p>主要处理流程：</p>
<ol>
<li>采用泛职责链模式处理用户配置项 mapStateToProps, mapDispatchToProps 的多态特征（配置项类型可能为函数、对象或 undefined），转换成 mapStateToProps = (state, ownProps) =&gt; stateProps, mapDispatchToProps = (dispatch, ownProps) =&gt; dispatchProps。链式处理参数多态的手法值得借鉴。</li>
<li>mapStateToProps, mapDispatchToProps 经由 wrapMapToPropsConstant, wrapMapToPropsFunc 函数封装为 initSelector = (dispatch, options) =&gt; sourceSelector 函数（在源码中，initSelector 函数实际表现为 connect/wrapMapToProps 模块中的 initConstantSelector, initProxySelector 函数，作归一化处理需要）。initSelector 的参数 dispatch 由组件传入。sourceSelector 为 (stateOrDispatch, ownProps?) =&gt; props 函数形式，返回值为 stateProps, dispatchProps，参数同样由组件注入（与 dispatch 不同的是，参数 state 是动态的），用于获取 stateProps, dispatchProps。封装的意义，就是将 selector 筛选器从组件中独立出来。</li>
<li>将前两步的处理逻辑复合为 mapStateToPropsFactory = mapStateToProps =&gt; initSelector, mapDispatchToPropsFactory = mapDispatchToProps =&gt; initSelector，可在构建父级直属容器时直接使用。返回值 initSelector = (dispatch, options) =&gt; stateOrDispatchSelector 通过父级指数容器获得入参 store.dispatch，并生成 stateOrDispatchSelector = (stateOrDispatch, ownProps) =&gt; props 。stateOrDispatchSelector 用于获得注入组件的 props，在源码中实际表现为 mapStateToPropsProxy, mapdispatchToPropsSelector。</li>
<li>stateOrDispatchSelector 由 selectorFctory 函数调用，并在 selectorFctory 函数体内通过 mergeProps 将 stateProps, dispatchProps 复合成待传入组件的 props（mergeProps 的多态特征也经过链式处理）。selectorFctory 函数的特殊意义是，如果 state 或 ownProps 未作更改，沿用缓存的 stateProps, dispatchProps，以提升性能。</li>
</ol>
<p><em>图 2，selector 总体执行流程</em><br><img src="/2018/07/08/frontend/library/react-redux源码分析/selector.png"></p>
<h3 id="mapToPropsFactory"><a href="#mapToPropsFactory" class="headerlink" title="mapToPropsFactory"></a>mapToPropsFactory</h3><p>mapToPropsFactory 包含 mapStateToPropsFactory, mapDispatchToPropsFactory，这里只概述 mapDispatchToPropsFactory 的处理流程。mapStateToPropsFactory 实现同 mapDispatchToPropsFactory。</p>
<p><em>图 3，mapToPropsFactory 执行流程</em><br><img src="/2018/07/08/frontend/library/react-redux源码分析/mapToPropsFactory.png"></p>
<p><em>代码段 1，mapToPropsFactory</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// connect/mapDispatchToProps</span></span><br><span class="line"><span class="keyword">import</span> &#123; bindActionCreators &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; wrapMapToPropsConstant, wrapMapToPropsFunc &#125; <span class="keyword">from</span> <span class="string">'./wrapMapToProps'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">whenMapDispatchToPropsIsFunction</span>(<span class="params">mapDispatchToProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">typeof</span> mapDispatchToProps === <span class="string">'function'</span>)</span><br><span class="line">    ? wrapMapToPropsFunc(mapDispatchToProps, <span class="string">'mapDispatchToProps'</span>)</span><br><span class="line">    : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">whenMapDispatchToPropsIsMissing</span>(<span class="params">mapDispatchToProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (!mapDispatchToProps)</span><br><span class="line">    ? wrapMapToPropsConstant(<span class="function"><span class="params">dispatch</span> =&gt;</span> (&#123; dispatch &#125;))</span><br><span class="line">    : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">whenMapDispatchToPropsIsObject</span>(<span class="params">mapDispatchToProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (mapDispatchToProps &amp;&amp; <span class="keyword">typeof</span> mapDispatchToProps === <span class="string">'object'</span>)</span><br><span class="line">    ? wrapMapToPropsConstant(<span class="function"><span class="params">dispatch</span> =&gt;</span> bindActionCreators(mapDispatchToProps, dispatch))</span><br><span class="line">    : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  whenMapDispatchToPropsIsFunction,</span><br><span class="line">  whenMapDispatchToPropsIsMissing,</span><br><span class="line">  whenMapDispatchToPropsIsObject</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// connect/wrapMapToProps</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">wrapMapToPropsConstant</span>(<span class="params">getConstant</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">initConstantSelector</span>(<span class="params">dispatch, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> constant = getConstant(dispatch, options)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">constantSelector</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> constant &#125;</span><br><span class="line">    constantSelector.dependsOnOwnProps = <span class="literal">false</span> </span><br><span class="line">    <span class="keyword">return</span> constantSelector</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">wrapMapToPropsFunc</span>(<span class="params">mapToProps, methodName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">initProxySelector</span>(<span class="params">dispatch, &#123; displayName &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> proxy = <span class="function"><span class="keyword">function</span> <span class="title">mapToPropsProxy</span>(<span class="params">stateOrDispatch, ownProps</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> proxy.dependsOnOwnProps</span><br><span class="line">        ? proxy.mapToProps(stateOrDispatch, ownProps)</span><br><span class="line">        : proxy.mapToProps(stateOrDispatch)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    proxy.dependsOnOwnProps = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    proxy.mapToProps = <span class="function"><span class="keyword">function</span> <span class="title">detectFactoryAndVerify</span>(<span class="params">stateOrDispatch, ownProps</span>) </span>&#123;</span><br><span class="line">      proxy.mapToProps = mapToProps</span><br><span class="line">      <span class="comment">// getDependsOnOwnProps 判断 mapToProps 是否依赖于父组件传入的 props</span></span><br><span class="line">      <span class="comment">//    通过 mapToProps.dependsOnOwnProps 属性进行判断</span></span><br><span class="line">      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps)</span><br><span class="line">      <span class="keyword">let</span> props = proxy(stateOrDispatch, ownProps)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> props === <span class="string">'function'</span>) &#123;</span><br><span class="line">        proxy.mapToProps = props</span><br><span class="line">        proxy.dependsOnOwnProps = getDependsOnOwnProps(props)</span><br><span class="line">        props = proxy(stateOrDispatch, ownProps)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> props</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> proxy</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><em>代码段 1</em> 中，wrapMapToPropsFunc 函数的写法相当有趣。如果想使用 ownProps 的某个方法决定当前组件需要 store 中的哪些状态值，首先需设定 mapStateToProps.dependsOnOwnProps 为真值，其次用户配置的 mapDispatchToProps 函数须以 ownProps 的那个方法作为返回值，该返回值将构成新的 mapDispatchToProps 函数，用于计算 dispatchProps。在源码编写上，react-redux 采用在函数执行过程中改变函数指向，两次调用自身的方式实现。以 proxy 字样命名函数也值得借鉴，因为 mapToPropsProxy 函数与 mapToProps 功能相同。</p>
<h4 id="mergeProps"><a href="#mergeProps" class="headerlink" title="mergeProps"></a>mergeProps</h4><p>mergeProps 处理流程可以参见上文，其意义是针对复杂的应用场景，能设置更灵活的 props 获取方式。</p>
<p><em>代码段 2，mergeProps 机制，mergePropsProxy 实现参看源码，与 mapToPropsFactory 相似</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// connect/selectorFactory</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">impureFinalPropsSelectorFactory</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  mapStateToProps,</span></span></span><br><span class="line"><span class="function"><span class="params">  mapDispatchToProps,</span></span></span><br><span class="line"><span class="function"><span class="params">  mergeProps,</span></span></span><br><span class="line"><span class="function"><span class="params">  dispatch</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">impureFinalPropsSelector</span>(<span class="params">state, ownProps</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mergeProps(</span><br><span class="line">      mapStateToProps(state, ownProps),</span><br><span class="line">      mapDispatchToProps(dispatch, ownProps),</span><br><span class="line">      ownProps</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pureFinalPropsSelectorFactory</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  mapStateToProps,</span></span></span><br><span class="line"><span class="function"><span class="params">  mapDispatchToProps,</span></span></span><br><span class="line"><span class="function"><span class="params">  mergeProps,</span></span></span><br><span class="line"><span class="function"><span class="params">  dispatch,</span></span></span><br><span class="line"><span class="function"><span class="params">  &#123; areStatesEqual, areOwnPropsEqual, areStatePropsEqual &#125;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> hasRunAtLeastOnce = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> state</span><br><span class="line">  <span class="keyword">let</span> ownProps</span><br><span class="line">  <span class="keyword">let</span> stateProps</span><br><span class="line">  <span class="keyword">let</span> dispatchProps</span><br><span class="line">  <span class="keyword">let</span> mergedProps</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleFirstCall</span>(<span class="params">firstState, firstOwnProps</span>) </span>&#123;</span><br><span class="line">    state = firstState</span><br><span class="line">    ownProps = firstOwnProps</span><br><span class="line">    stateProps = mapStateToProps(state, ownProps)</span><br><span class="line">    dispatchProps = mapDispatchToProps(dispatch, ownProps)</span><br><span class="line">    mergedProps = mergeProps(stateProps, dispatchProps, ownProps)</span><br><span class="line">    hasRunAtLeastOnce = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> mergedProps</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleNewPropsAndNewState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    stateProps = mapStateToProps(state, ownProps)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mapDispatchToProps.dependsOnOwnProps)</span><br><span class="line">      dispatchProps = mapDispatchToProps(dispatch, ownProps)</span><br><span class="line"></span><br><span class="line">    mergedProps = mergeProps(stateProps, dispatchProps, ownProps)</span><br><span class="line">    <span class="keyword">return</span> mergedProps</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleNewProps</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mapStateToProps.dependsOnOwnProps)</span><br><span class="line">      stateProps = mapStateToProps(state, ownProps)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mapDispatchToProps.dependsOnOwnProps)</span><br><span class="line">      dispatchProps = mapDispatchToProps(dispatch, ownProps)</span><br><span class="line"></span><br><span class="line">    mergedProps = mergeProps(stateProps, dispatchProps, ownProps)</span><br><span class="line">    <span class="keyword">return</span> mergedProps</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleNewState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> nextStateProps = mapStateToProps(state, ownProps)</span><br><span class="line">    <span class="keyword">const</span> statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps)</span><br><span class="line">    stateProps = nextStateProps</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (statePropsChanged)</span><br><span class="line">      mergedProps = mergeProps(stateProps, dispatchProps, ownProps)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mergedProps</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleSubsequentCalls</span>(<span class="params">nextState, nextOwnProps</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps)</span><br><span class="line">    <span class="keyword">const</span> stateChanged = !areStatesEqual(nextState, state)</span><br><span class="line">    state = nextState</span><br><span class="line">    ownProps = nextOwnProps</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (propsChanged &amp;&amp; stateChanged) <span class="keyword">return</span> handleNewPropsAndNewState()</span><br><span class="line">    <span class="keyword">if</span> (propsChanged) <span class="keyword">return</span> handleNewProps()</span><br><span class="line">    <span class="keyword">if</span> (stateChanged) <span class="keyword">return</span> handleNewState()</span><br><span class="line">    <span class="keyword">return</span> mergedProps</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">pureFinalPropsSelector</span>(<span class="params">nextState, nextOwnProps</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hasRunAtLeastOnce</span><br><span class="line">      ? handleSubsequentCalls(nextState, nextOwnProps)</span><br><span class="line">      : handleFirstCall(nextState, nextOwnProps)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initMapStateToProps, initMapDispatchToProps 为 _图 6_ 中的 initSelector</span></span><br><span class="line"><span class="comment">//    源码中实际表现为 wrapMapToProps 模块的 initProxySelector</span></span><br><span class="line"><span class="comment">//    通过传参 dispatch, options，获取实际可用的 mapStateToProps, mapDispatchToProps</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">finalPropsSelectorFactory</span>(<span class="params">dispatch, &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  initMapStateToProps,</span></span></span><br><span class="line"><span class="function"><span class="params">  initMapDispatchToProps,</span></span></span><br><span class="line"><span class="function"><span class="params">  initMergeProps,</span></span></span><br><span class="line"><span class="function"><span class="params">  ...options</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> mapStateToProps = initMapStateToProps(dispatch, options)</span><br><span class="line">  <span class="keyword">const</span> mapDispatchToProps = initMapDispatchToProps(dispatch, options)</span><br><span class="line">  <span class="keyword">const</span> mergeProps = initMergeProps(dispatch, options)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> selectorFactory = options.pure</span><br><span class="line">    ? pureFinalPropsSelectorFactory</span><br><span class="line">    : impureFinalPropsSelectorFactory</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> selectorFactory(</span><br><span class="line">    mapStateToProps,</span><br><span class="line">    mapDispatchToProps,</span><br><span class="line">    mergeProps,</span><br><span class="line">    dispatch,</span><br><span class="line">    options</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h3><p>如前文所指出的，dispatch 只能通过直属父级容器获得，state 又在 listener（直属父级容器的方法）执行过程中获取，因此对于用户配置项 mapStateToProps, mapDispatchToProps, mergeProps，react-redux 通过 connect 函数构建直属父级容器的时候将其转变为 initSelector, mergeProps，并注入直属父级容器中。当直属父级容器获得 store.dispatch 时，initSelector, mergeProps 又会通过 selectorFactory 转变为最终的 sourceSelector = (state, ownProps) =&gt; props，用于获取注入自定义组件的 props（包含状态值以及驱动状态转变的方法）。</p>
<p>在上述过程中，react-redux 为了实现逻辑的灵活性，connect 通过 createConnect 函数生成，执行逻辑中所使用的 mapStateToPropsFactory, mapDispatchToPropsFactory, mergePropsFactory, selectorFactory 均为 createConnect 的入参。而 sourceSelector 又用于构建直属父级容器的 this.selector，其 run 方法用于重新计算 props，shouldComponentUpdate 属性用于判断 props 是否便能，props 属性即是注入自定义组件的 props。</p>
<p>当 state 状态变更时，直属父级容器的 onStateChange 方法将以 listener 回调形式被执行。在 onStateChange 方法体中，首先调用 selector.run 重新计算 props，若变更，调用直属父级容器的 setState 方法重绘自定义组件。同时，无论 props 变更与否，直属父级容器都会驱动其子孙组件父容器的 onStateChange 执行。</p>
<p><em>图 4，connect 执行流程，不包含驱动子孙容器 onStateChange 执行部分</em><br><img src="/2018/07/08/frontend/library/react-redux源码分析/connect.png"></p>
<p><em>代码段 3，HOC 驱动自定义组件重绘，省略 displayName 等处理</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// connect/connect.js</span></span><br><span class="line"><span class="comment">// 上文 selector 内容输出的模块</span></span><br><span class="line"><span class="keyword">import</span> defaultMapDispatchToPropsFactories <span class="keyword">from</span> <span class="string">'./mapDispatchToProps'</span></span><br><span class="line"><span class="keyword">import</span> defaultMapStateToPropsFactories <span class="keyword">from</span> <span class="string">'./mapStateToProps'</span></span><br><span class="line"><span class="keyword">import</span> defaultMergePropsFactories <span class="keyword">from</span> <span class="string">'./mergeProps'</span></span><br><span class="line"><span class="keyword">import</span> defaultSelectorFactory <span class="keyword">from</span> <span class="string">'./selectorFactory'</span></span><br><span class="line"><span class="keyword">import</span> connectAdvanced <span class="keyword">from</span> <span class="string">'../components/connectAdvanced'</span></span><br><span class="line"><span class="keyword">import</span> shallowEqual <span class="keyword">from</span> <span class="string">'../utils/shallowEqual'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createConnect</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  connectHOC = connectAdvanced,</span></span></span><br><span class="line"><span class="function"><span class="params">  mapStateToPropsFactories = defaultMapStateToPropsFactories,</span></span></span><br><span class="line"><span class="function"><span class="params">  mapDispatchToPropsFactories = defaultMapDispatchToPropsFactories,</span></span></span><br><span class="line"><span class="function"><span class="params">  mergePropsFactories = defaultMergePropsFactories,</span></span></span><br><span class="line"><span class="function"><span class="params">  selectorFactory = defaultSelectorFactory</span></span></span><br><span class="line"><span class="function"><span class="params">&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    mapStateToProps,</span></span></span><br><span class="line"><span class="function"><span class="params">    mapDispatchToProps,</span></span></span><br><span class="line"><span class="function"><span class="params">    mergeProps,</span></span></span><br><span class="line"><span class="function"><span class="params">    &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      pure = true,</span></span></span><br><span class="line"><span class="function"><span class="params">      areStatesEqual = strictEqual,</span></span></span><br><span class="line"><span class="function"><span class="params">      areOwnPropsEqual = shallowEqual,</span></span></span><br><span class="line"><span class="function"><span class="params">      areStatePropsEqual = shallowEqual,</span></span></span><br><span class="line"><span class="function"><span class="params">      areMergedPropsEqual = shallowEqual,</span></span></span><br><span class="line"><span class="function"><span class="params">      ...extraOptions</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125; = &#123;&#125;</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    <span class="comment">// match 用于使用 factory 链式处理 mapToProps，以获得 initSelector = (dispatch, options) =&gt; selector</span></span><br><span class="line">    <span class="keyword">const</span> initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, <span class="string">'mapStateToProps'</span>)</span><br><span class="line">    <span class="keyword">const</span> initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, <span class="string">'mapDispatchToProps'</span>)</span><br><span class="line">    <span class="keyword">const</span> initMergeProps = match(mergeProps, mergePropsFactories, <span class="string">'mergeProps'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> connectHOC(selectorFactory, &#123;</span><br><span class="line">      initMapStateToProps,</span><br><span class="line">      initMapDispatchToProps,</span><br><span class="line">      initMergeProps,</span><br><span class="line">      pure,</span><br><span class="line">      areStatesEqual,</span><br><span class="line">      areOwnPropsEqual,</span><br><span class="line">      areStatePropsEqual,</span><br><span class="line">      areMergedPropsEqual,</span><br><span class="line"></span><br><span class="line">      ...extraOptions</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// components/connectAdvanced.js</span></span><br><span class="line"><span class="keyword">import</span> hoistStatics <span class="keyword">from</span> <span class="string">'hoist-non-react-statics'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dummyState = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noop</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeSelectorStateful</span>(<span class="params">sourceSelector, store</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> selector = &#123;</span><br><span class="line">    run: <span class="function"><span class="keyword">function</span> <span class="title">runComponentSelector</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> nextProps = sourceSelector(store.getState(), props)</span><br><span class="line">        <span class="keyword">if</span> (nextProps !== selector.props || selector.error) &#123;</span><br><span class="line">          selector.shouldComponentUpdate = <span class="literal">true</span></span><br><span class="line">          selector.props = nextProps</span><br><span class="line">          selector.error = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        selector.shouldComponentUpdate = <span class="literal">true</span></span><br><span class="line">        selector.error = error</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> selector</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connectAdvanced</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  selectorFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">  &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    storeKey = <span class="string">'store'</span></span></span></span><br><span class="line"><span class="function"><span class="params">  &#125; = &#123;&#125;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> subscriptionKey = storeKey + <span class="string">'Subscription'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> contextTypes = &#123;</span><br><span class="line">    [storeKey]: storeShape,</span><br><span class="line">    <span class="comment">// 子孙容器的 onStateChange 挂载到当前父容器创建的 listener 中，用于减少 listener 的数量</span></span><br><span class="line">    [subscriptionKey]: subscriptionShape,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> childContextTypes = &#123;</span><br><span class="line">    [subscriptionKey]: subscriptionShape,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">wrapWithConnect</span>(<span class="params">WrappedComponent</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Connect</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">      <span class="keyword">constructor</span>(props, context) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props, context)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.state = &#123;&#125;</span><br><span class="line">        <span class="keyword">this</span>.store = context[storeKey]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.initSelector()</span><br><span class="line">        <span class="keyword">this</span>.initSubscription()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      getChildContext() &#123;</span><br><span class="line">        <span class="keyword">const</span> subscription = <span class="keyword">this</span>.subscription</span><br><span class="line">        <span class="keyword">return</span> &#123; [subscriptionKey]: <span class="keyword">this</span>.subscription || <span class="keyword">this</span>.context[subscriptionKey] &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      componentDidMount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.subscription.trySubscribe()</span><br><span class="line">        <span class="keyword">this</span>.selector.run(<span class="keyword">this</span>.props)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.selector.shouldComponentUpdate) <span class="keyword">this</span>.forceUpdate()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">        <span class="keyword">this</span>.selector.run(nextProps)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      componentWillUnmount() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.subscription) <span class="keyword">this</span>.subscription.tryUnsubscribe()</span><br><span class="line">        <span class="keyword">this</span>.subscription = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">this</span>.notifyNestedSubs = noop</span><br><span class="line">        <span class="keyword">this</span>.store = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">this</span>.selector.run = noop</span><br><span class="line">        <span class="keyword">this</span>.selector.shouldComponentUpdate = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      initSelector() &#123;</span><br><span class="line">        <span class="keyword">const</span> sourceSelector = selectorFactory(<span class="keyword">this</span>.store.dispatch, selectorFactoryOptions)</span><br><span class="line">        <span class="keyword">this</span>.selector = makeSelectorStateful(sourceSelector, <span class="keyword">this</span>.store)</span><br><span class="line">        <span class="keyword">this</span>.selector.run(<span class="keyword">this</span>.props)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      initSubscription() &#123;</span><br><span class="line">        <span class="keyword">const</span> parentSub = <span class="keyword">this</span>.context[subscriptionKey]</span><br><span class="line">        <span class="keyword">this</span>.subscription = <span class="keyword">new</span> Subscription(<span class="keyword">this</span>.store, parentSub, <span class="keyword">this</span>.onStateChange.bind(<span class="keyword">this</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.notifyNestedSubs = <span class="keyword">this</span>.subscription.notifyNestedSubs.bind(<span class="keyword">this</span>.subscription)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      onStateChange() &#123;</span><br><span class="line">        <span class="keyword">this</span>.selector.run(<span class="keyword">this</span>.props)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.selector.shouldComponentUpdate) &#123;</span><br><span class="line">          <span class="keyword">this</span>.notifyNestedSubs()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.componentDidUpdate = <span class="keyword">this</span>.notifyNestedSubsOnComponentDidUpdate</span><br><span class="line">          <span class="keyword">this</span>.setState(dummyState)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      notifyNestedSubsOnComponentDidUpdate() &#123;</span><br><span class="line">        <span class="keyword">this</span>.componentDidUpdate = <span class="literal">undefined</span></span><br><span class="line">        <span class="keyword">this</span>.notifyNestedSubs()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      render() &#123;</span><br><span class="line">        <span class="keyword">const</span> selector = <span class="keyword">this</span>.selector</span><br><span class="line">        selector.shouldComponentUpdate = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (selector.error) &#123;</span><br><span class="line">          <span class="keyword">throw</span> selector.error</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> createElement(WrappedComponent, selector.props)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Connect.childContextTypes = childContextTypes</span><br><span class="line">    Connect.contextTypes = contextTypes</span><br><span class="line">    Connect.propTypes = contextTypes</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hoistStatics(Connect, WrappedComponent)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><em>代码段 3</em> 展示了直属父级容器的构建过程，其实例化过程中首先创建 selector 筛选器和 subscription 订阅器。随后，在 componentDidMount 生命周期执行过程中，将容器的 onStateChange 方法挂载为 store 的 listener 回调；调用 selector.run 方法重新计算 props，若 props 值变更，调用 forceUpdate 方法重绘组件。在 componentWillReceiveProps 生命周期中，再次调用 selector.run 方法重新计算 props，因为 ownProps 的变更可能影响注入自定义组件的 state, boundAction 数据（react-redux 为直属父级容器的 componentWillReceiveProps 和 componentDidUpdate 方法分派了不同的职能，前者驱动 ownProps, stateProps, dispatchProps 变更时自定义组件的重绘，后者驱动 stateProps, dispatchProps 变更时子孙容器的重绘。因此在 stateProps, dispatchProps 无变更的情形下，componentDidUpdate 方法将置为 undefined）。在 componentWillUnmount 生命周期里，将重置 selector 筛选器和 subscription 订阅器。</p>
<p>在状态值变更的情形下，容器的 onStateChange 方法将以 listener 回调形式得到执行，其将调用 selector.run 方法重新计算 props。若 props 已变更，调用 setState 方法驱动直属父级容器重绘；在自定义组件重绘完成后，通过 componentDidUpdate 生命周期方法通知子孙容器状态已更新，尝试执行其 onStateChange 方法。若 props 未作变更，直接通知子孙容器状态已更新，尝试执行其 onStateChange 方法。</p>
<p>subscription 用于将直属父级容器的 onStateChange 方法挂载为 store 中的 listener 回调，而子孙容器的 onStateChange 方法将存储在 subscription.listeners 数组中。当 action 被派发引起 state 变更时，直属父级容器的 onStateChange 方法自然会执行，而子孙容器的 onStateChange 方法则需要在当前直属父级容器中通过调用 subscription.notifyNestedSubs 执行（其执行时机参见 <em>代码段 3</em>，即在当前直属父级容器的 onStateChange 方法调用过程中唤起执行）。</p>
<p><em>代码段 4，subscription 订阅器</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CLEARED = <span class="literal">null</span></span><br><span class="line"><span class="keyword">const</span> nullListeners = &#123; notify() &#123;&#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createListenerCollection</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> current = []</span><br><span class="line">  <span class="keyword">let</span> next = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    clear() &#123;</span><br><span class="line">      next = CLEARED</span><br><span class="line">      current = CLEARED</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    notify() &#123;</span><br><span class="line">      <span class="keyword">const</span> listeners = current = next</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class="line">        listeners[i]()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> next</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    subscribe(listener) &#123;</span><br><span class="line">      <span class="keyword">let</span> isSubscribed = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">if</span> (next === current) next = current.slice()</span><br><span class="line">      next.push(listener)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unsubscribe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isSubscribed || current === CLEARED) <span class="keyword">return</span></span><br><span class="line">        isSubscribed = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (next === current) next = current.slice()</span><br><span class="line">        next.splice(next.indexOf(listener), <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Subscription</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(store, parentSub, onStateChange) &#123;</span><br><span class="line">    <span class="keyword">this</span>.store = store</span><br><span class="line">    <span class="keyword">this</span>.parentSub = parentSub</span><br><span class="line">    <span class="keyword">this</span>.onStateChange = onStateChange</span><br><span class="line">    <span class="keyword">this</span>.unsubscribe = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.listeners = nullListeners</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addNestedSub(listener) &#123;</span><br><span class="line">    <span class="keyword">this</span>.trySubscribe()</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.listeners.subscribe(listener)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  notifyNestedSubs() &#123;</span><br><span class="line">    <span class="keyword">this</span>.listeners.notify()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isSubscribed() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Boolean</span>(<span class="keyword">this</span>.unsubscribe)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  trySubscribe() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.unsubscribe) &#123;</span><br><span class="line">      <span class="keyword">this</span>.unsubscribe = <span class="keyword">this</span>.parentSub</span><br><span class="line">        ? <span class="keyword">this</span>.parentSub.addNestedSub(<span class="keyword">this</span>.onStateChange)</span><br><span class="line">        : <span class="keyword">this</span>.store.subscribe(<span class="keyword">this</span>.onStateChange)</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">this</span>.listeners = createListenerCollection()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tryUnsubscribe() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.unsubscribe) &#123;</span><br><span class="line">      <span class="keyword">this</span>.unsubscribe()</span><br><span class="line">      <span class="keyword">this</span>.unsubscribe = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">this</span>.listeners.clear()</span><br><span class="line">      <span class="keyword">this</span>.listeners = nullListeners</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>俗语，”麻雀虽小，五脏俱全“，”苔米花虽小，也学牡丹开“。使用 react-redux 无非 ‘Provider store={store}’ 和 ‘connect(mapStateToProps, mapDispatchToProps)(Component)’ 两段代码，而在 react-redux 的设计和实现上，我们又可以看见丰富的矿藏，真是”人不可貌相，海不可斗量，代码不可管窥“。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>library</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>redux源码分析</title>
    <url>/2018/07/02/frontend/library/redux%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为使页面组件和业务逻辑解耦，前端相继涌现出 MVC（Model-View-Controller）、MVP（Model-View-Presenter）、 MVVM（Model-View-ViewModel） 模式。在双向数据流的实现中，同一个 View 可能会触发多个 Model 的更新，并间接引起另一个 View 的刷新，使得状态变更的线索及影响变得错综复杂。redux 延续了 flux 架构，倡导单向数据流模式、不能通过访问器属性修改数据，这样就便于追踪状态变化的线索。</p>
<p><em>图 1，redux 数据流图</em><br><img src="/2018/07/02/frontend/library/redux源码分析/redux-data-stream.png"></p>
<p>在 redux 的设计中，state 为全局缓存的状态（存储于 Store 中），action 为状态变更的标识，派发特定的 action 将引起指定的 state 变更。不得不指出，首先，在视图组件的实现上，多个 View 可能会复用相同的 state，因此，在一个 View 中派发的 action 可能会影响另一个 View 的状态，这样的话，状态管理上仍会有错综的线索，并不具备清晰性。其次，redux 以状态变更的动作为着眼点，通过 redux 组织业务逻辑，不如包含数据及其变更动作的 Model 直观。</p>
<h2 id="源起"><a href="#源起" class="headerlink" title="源起"></a>源起</h2><p>redux 最初需要聚焦于实现 state = fn(state, action) 函数，用于刷新缓存的状态值。在这个函数中，state 可能包含多个状态属性；action 的职责有两种，其一使用 type 属性标识状态值作何变更，其二携带的附属信息将作为引导状态值变更的数据源。对于多种状态值变更，可采用分治的思想将其简化，即 childState = fn(childState, action)。</p>
<p><em>代码段 1，状态变更的雏形</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> state = &#123;</span><br><span class="line">  todoList: [&#123;</span><br><span class="line">    text: <span class="string">'Eat food'</span>,</span><br><span class="line">    completed: <span class="literal">true</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    text: <span class="string">'Exercise'</span>,</span><br><span class="line">    completed: <span class="literal">false</span></span><br><span class="line">  &#125;],</span><br><span class="line">  visibilityFilter: <span class="string">'SHOW_COMPLETED'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">visibilityFilter</span>(<span class="params">state = <span class="string">'SHOW_ALL'</span>, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (action.type === <span class="string">'SET_VISIBILITY_FILTER'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> action.filter;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todos</span>(<span class="params">state = [], action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'ADD_TODO'</span>:</span><br><span class="line">    <span class="keyword">return</span> state.concat([&#123; <span class="attr">text</span>: action.text, <span class="attr">completed</span>: <span class="literal">false</span> &#125;]);</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'TOGGLE_TODO'</span>:</span><br><span class="line">    <span class="keyword">return</span> state.map(<span class="function">(<span class="params">todo, index</span>) =&gt;</span></span><br><span class="line">      action.index === index ?</span><br><span class="line">        &#123; <span class="attr">text</span>: todo.text, <span class="attr">completed</span>: !todo.completed &#125; :</span><br><span class="line">        todo</span><br><span class="line">   )</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todoApp</span>(<span class="params">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    todos: todos(state.todos, action),</span><br><span class="line">    visibilityFilter: visibilityFilter(state.visibilityFilter, action)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Add_Todo_Action = &#123; <span class="attr">type</span>: <span class="string">'ADD_TODO'</span>, <span class="attr">text</span>: <span class="string">'Go to swimming pool'</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> Toggle_Todo_Action = &#123; <span class="attr">type</span>: <span class="string">'TOGGLE_TODO'</span>, <span class="attr">index</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> Set_Visibility_Filter_Action = &#123; <span class="attr">type</span>: <span class="string">'SET_VISIBILITY_FILTER'</span>, <span class="attr">filter</span>: <span class="string">'SHOW_ALL'</span> &#125;;</span><br><span class="line"></span><br><span class="line">todoApp(state, Add_Todo_Action);</span><br></pre></td></tr></table></figure></p>
<p>通过这份来自<a href="http://www.redux.org.cn/docs/introduction/CoreConcepts.html" target="_blank" rel="noopener">官网的代码示例</a>，我们既能瞧见源码作者最初聚焦的视点，又能看见 redux 的一大原则 —— 使用纯函数实现状态更新。</p>
<p>在 redux 中，函数 state = fn(state, action) 被称为 reducer。与 Array.prototype.reduce(arrReducer, result) 方法相同的是，在数组的原型方法中，result 的终值通过递归调用 arrReducer 获得；redux 中的 state 更新也是通过逐个调用 reducer 函数实现。如果我们把采用策略模式分而治之的示例代码转变为采用职责链模式实现，即 childState = fn(childState, action) 替换为 state = fn(state, action) 函数，传入 reducer 中的为全量 state 数据，多个 reducer 构成链式结构，当前一个执行完成后，再执行下一个，这样就更接近于 Array.prototype.reduce 方法的执行机制，我们也就更能看出更新状态的函数为什么会被叫做 reducer 了。</p>
<p><em>图 2，reducer 工作的两种可能性</em><br><img src="/2018/07/02/frontend/library/redux源码分析/reducer.png"></p>
<p>在 redux 源码中，串联多个 state 实际采用的是策略模式。与示例代码不同的是，state 状态会以业务模块的组织划分成多个状态管理模块，同一个状态管理模块内部又包含多个状态值。对于前者，redux 提供了 combineReducers 方法，用于复合多个 reducer 函数。对于后者，需要使用者手动复合。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>上一节提到了状态转换的机制，这是在 action 被派发以后所执行的动作。这一节我们将串联整个链路，包含 action 怎样被派发，状态值如何作缓存，以及更新等。</p>
<p>针对根据 action 触发 reducer 执行这一命题，我们自然地会想到使用发布-订阅模式加以处理，将 action.type 视为订阅的主题，action 中其余属性作为提供给订阅者的额外信息。然而 redux 的宗旨是使状态变化的线索变得清晰，易于追踪和调试，发布-订阅模式和这一宗旨相悖。因为在发布-订阅模式中，同一主题可以有多个订阅者，也就意味着同一个 action 可以触发多个 reducer，线索就会变得错综。在 redux 的设计中，一个 action 只能触发某个特定的reducer 执行。这样，我们就解释了为什么在 redux 源码中，针对独立状态集的多个子 reducer 可以被复合成一个单一的全局总 reducer（简单的，可以通过 switch 语句实现），用于负责处理全局状态的变更。当 action 被派发时，只需调用缓存的全局总 reducer，就可以实现全局状态的更新。</p>
<p>如果我们把总 reducer 称为 finalReducer，全局状态称为 globalState，派发 action 的过程其实只在于唤起 finalReducer 的执行。在 redux 源码中，无论 finalReducer，还是 globalState，都在 store 中维护。</p>
<p><em>图 3，store 的执行机制</em><br><img src="/2018/07/02/frontend/library/redux源码分析/store.png"></p>
<p>为了实现上述机制，store 将 finalReducer, globalState 实现为缓存数据，并提供 getState, dispatch, replaceReducer 方法。其中，store.getState 用于获取全局缓存的状态值，store.dispatch 用于派发 action，store.replaceReducer 用于替换 finalReducer。在 redux 源码中，store 表现为 createStore 模块，其提供 createStore(reducer, initialState) 函数，用于设置 finalReducer, globalState 的初始值。</p>
<p>从源码中抽出这部分内容，即为如下代码（剔除参数校验）：</p>
<p><em>代码段 2，store 基本功能</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer, preloadedState</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> currentReducer = reducer</span><br><span class="line">  <span class="keyword">let</span> currentState = preloadedState</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentState</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> action.type === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'Actions may not have an undefined "type" property. '</span> +</span><br><span class="line">          <span class="string">'Have you misspelled a constant?'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    currentState = currentReducer(currentState, action)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> action</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">replaceReducer</span>(<span class="params">nextReducer</span>) </span>&#123;</span><br><span class="line">    currentReducer = nextReducer</span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: ActionTypes.REPLACE &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dispatch(&#123; <span class="attr">type</span>: ActionTypes.INIT &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    dispatch,</span><br><span class="line">    getState,</span><br><span class="line">    replaceReducer</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>从上述代码中，redux 在创建 store 的过程，会派发 action = { type: ActionTypes.INIT }，意味着可以在应用初始化过程中更新 state；而 store.replaceReducer 方法的存在通常是为了支持编码时的热加载功能，同时又会派发 action = { type: ActionTypes.REPLACE }。从设计的角度考量源码，这是无需多加关注的细节。</p>
<h3 id="middleware"><a href="#middleware" class="headerlink" title="middleware"></a>middleware</h3><p>从 <em>图 3</em> 中，我们也能看出，action 经由 dispatch 函数直接交给 finalReducer 函数，middleware 中间件的意义是在 action 传入 dispatch 函数前，对 action 进行转换等特殊处理，功能类似 sevelet 中对请求进行转换、过滤等操作的 filter，或者 koa 中间件。redux 中间件的实现上也采用泛职责链模式，前一个中间件处理完成，交由下一个中间件进行处理。</p>
<p><em>图 4，中间件转换 action 流程</em><br><img src="/2018/07/02/frontend/library/redux源码分析/middleware.png"></p>
<p>redux 只能从 dispatch 函数的参数中截取到 action，因此在固有程序插入中间件的机制是通过封装 dispatch 函数来完成的，即函数 newDispatch = middleware(dispatch)。这样，在newDispatch 函数体内，我们就能获得使用者传入的 action。</p>
<p>在多个中间件的串联上，redux 借助 Array.prototype.reduce 方法实现。redux 又将 getState, dispatch 作为参数传入 middleware 中，作为工具函数。</p>
<p>使用 redux 时，编写中间件采用 ({ getState, dispatch }) =&gt; dispatch =&gt; action =&gt; {  } 形式。再次申明，参数 { getState, dispatch } 为 redux 中间件机制中传入的辅助函数，参数 dispatch 为本次 action 派发过程中唤起执行的 store.dispatch 方法，其意义就是通过封装该函数获取它的参数 action，参数 action 就是本次实际被派发的 action，中间件实际需要处理的转换对象。</p>
<p><em>图 5，单个中间件的处理流程</em><br><img src="/2018/07/02/frontend/library/redux源码分析/middleware-flow.png"></p>
<p><em>代码段 3，中间件机制</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...funcs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">arg</span> =&gt;</span> arg</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> funcs[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> funcs.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (...args) =&gt; a(b(...args)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">applyMiddleware(...middlewares) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">createStore</span> =&gt;</span> (...args) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> store = createStore(...args)</span><br><span class="line">    <span class="keyword">let</span> dispatch = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`Dispatching while constructing your middleware is not allowed. `</span> +</span><br><span class="line">          <span class="string">`Other middleware would not be applied to this dispatch.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> chain = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> middlewareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      dispatch: <span class="function">(<span class="params">...args</span>) =&gt;</span> dispatch(...args)</span><br><span class="line">    &#125;</span><br><span class="line">    chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class="line">    dispatch = compose(...chain)(store.dispatch)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过上述代码，我们也能看出，redux 植入中间件机制是通过 applyMiddleware 函数封装 createStore 完成的。在重新构建的 createStore 函数体内，其实现也如上文指出的，就是逐个调用中间件函数，对 store.dispatch 方法进行封装。值得借鉴的是，通过包装函数增强原函数的功能，可以使新功能点无缝地插入到原代码逻辑中。</p>
<p>回过头再看 createStore 模块，我们发现，redux 在 createStore 函数的实现上还有第三个参数 enhancer，其主要目的就是为 applyMiddleware 函数提供一个便捷的接口，enhancer 参数的意义也就在于包装 createStore 函数。</p>
<p><em>代码段 3，createStore 函数功能增强</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the enhancer to be a function.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> enhancer(createStore)(reducer, preloadedState)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="listener"><a href="#listener" class="headerlink" title="listener"></a>listener</h3><p>以上内容无不与状态更新环节相关联，并没有涉及 store 与视图层 view 怎样完成交互。针对这一命题，redux 采用了发布-订阅模式。实际表现为，当 store 派发一个 action 时（可视为发出一个消息），都会促使监视器 listener 与观察者 observer （可视为消息的接受者）运作其处理逻辑。</p>
<p>在具体实现过程中，监视器 listener 通过 store.subscribe 方法添加到 listeners 缓存队列中；当 action 被派发时，其将被取出执行。对于观察者 observer，首先通过 store.observable 方法获得接口层面的可观察对象，其次调用该可观察对象的 subscribe 方法，将 observer.next 转化为 listener，并添加到 listeners 缓存队列中。这样，当 action 被派发时，无论监视器 listener，还是观察者 observer 的 next 方法都将得到执行。不同的是，listener 为无参执行，observer.next 将以即时的 globalState 作为参数。</p>
<p><em>图 6，listener, observer 执行流程</em><br><img src="/2018/07/02/frontend/library/redux源码分析/listener.png"></p>
<p><em>代码段 4，listener, observer 实现</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ensureCanMutateNextListeners</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nextListeners === currentListeners) &#123;</span><br><span class="line">      nextListeners = currentListeners.slice()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">listener</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> isSubscribed = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    ensureCanMutateNextListeners()</span><br><span class="line">    nextListeners.push(listener)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unsubscribe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!isSubscribed) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">          <span class="string">'You may not unsubscribe from a store listener while the reducer is executing. '</span> +</span><br><span class="line">            <span class="string">'See http://redux.js.org/docs/api/Store.html#subscribe for more details.'</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      isSubscribed = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      ensureCanMutateNextListeners()</span><br><span class="line">      <span class="keyword">const</span> index = nextListeners.indexOf(listener)</span><br><span class="line">      nextListeners.splice(index, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">observable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> outerSubscribe = subscribe</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      subscribe(observer) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> observer !== <span class="string">'object'</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Expected the observer to be an object.'</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">observeState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (observer.next) &#123;</span><br><span class="line">            observer.next(getState())</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        observeState()</span><br><span class="line">        <span class="keyword">const</span> unsubscribe = outerSubscribe(observeState)</span><br><span class="line">        <span class="keyword">return</span> &#123; unsubscribe &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      [$$observable]() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      isDispatching = <span class="literal">true</span></span><br><span class="line">      currentState = currentReducer(currentState, action)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      isDispatching = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> listeners = (currentListeners = nextListeners)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> listener = listeners[i]</span><br><span class="line">      listener()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> action</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    subscribe,</span><br><span class="line">    [$$observable]: observable</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>关于 listener 的用法，我将在下一节，以特例 <a href>react-redux</a> 源码分析中穿插说明。</p>
<h3 id="utils"><a href="#utils" class="headerlink" title="utils"></a>utils</h3><p>redux 提供了三个工具函数，分别是 <em>代码段 3</em> 给出的 compose 函数，以及 bindActionCreators, combineReducers 函数。</p>
<p>compose 函数的功能和实现，可参见上文。</p>
<p>bindActionCreators 函数的意义在于支持动态配置 action。其实现原理是通过 actionCreator 函数生成 action，再调用 store.dispatch 方法加以派发。</p>
<p><em>代码段 5，bindActionCreators</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreator</span>(<span class="params">actionCreator, dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dispatch(actionCreator.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindActionCreators</span>(<span class="params">actionCreators, dispatch</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators === <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> bindActionCreator(actionCreators, dispatch)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreators !== <span class="string">'object'</span> || actionCreators === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">`bindActionCreators expected an object or a function, instead received <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">        actionCreators === <span class="literal">null</span> ? <span class="string">'null'</span> : <span class="keyword">typeof</span> actionCreators</span></span></span><br><span class="line"><span class="string"><span class="subst">      &#125;</span>. `</span> +</span><br><span class="line">        <span class="string">`Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(actionCreators)</span><br><span class="line">  <span class="keyword">const</span> boundActionCreators = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i]</span><br><span class="line">    <span class="keyword">const</span> actionCreator = actionCreators[key]</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> actionCreator === <span class="string">'function'</span>) &#123;</span><br><span class="line">      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> boundActionCreators</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>combineReducers 函数的意义在于复合 reducer。其实现过程中校验了初始状态，状态的 key 值是否有与之匹配的 reducer。</p>
<p><em>代码段 6，combineReducers</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combineReducers</span>(<span class="params">reducers</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reducerKeys = <span class="built_in">Object</span>.keys(reducers)</span><br><span class="line">  <span class="keyword">const</span> finalReducers = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; reducerKeys.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = reducerKeys[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> reducers[key] === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        warning(<span class="string">`No reducer provided for key "<span class="subst">$&#123;key&#125;</span>"`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> reducers[key] === <span class="string">'function'</span>) &#123;</span><br><span class="line">      finalReducers[key] = reducers[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> finalReducerKeys = <span class="built_in">Object</span>.keys(finalReducers)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> unexpectedKeyCache</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    unexpectedKeyCache = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> shapeAssertionError</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// assertReducerShape 校验 reducer 返回初始状态非 undefined，且有兜底 state</span></span><br><span class="line">    assertReducerShape(finalReducers)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    shapeAssertionError = e</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">combination</span>(<span class="params">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (shapeAssertionError) &#123;</span><br><span class="line">      <span class="keyword">throw</span> shapeAssertionError</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">// getUnexpectedStateShapeWarningMessage 函数校验 state 初始值和 reducer 各键的匹配程度</span></span><br><span class="line">      <span class="comment">// state 初始值可通过 ActionTypes.INIT 设定或参数注入</span></span><br><span class="line">      <span class="keyword">const</span> warningMessage = getUnexpectedStateShapeWarningMessage(</span><br><span class="line">        state,</span><br><span class="line">        finalReducers,</span><br><span class="line">        action,</span><br><span class="line">        unexpectedKeyCache</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">if</span> (warningMessage) &#123;</span><br><span class="line">        warning(warningMessage)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> hasChanged = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">const</span> nextState = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; finalReducerKeys.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> key = finalReducerKeys[i]</span><br><span class="line">      <span class="keyword">const</span> reducer = finalReducers[key]</span><br><span class="line">      <span class="keyword">const</span> previousStateForKey = state[key]</span><br><span class="line">      <span class="keyword">const</span> nextStateForKey = reducer(previousStateForKey, action)</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> nextStateForKey === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        <span class="comment">// reducer 返回值为 undefined 时，由 getUndefinedStateErrorMessage 函数拼接错误文案</span></span><br><span class="line">        <span class="keyword">const</span> errorMessage = getUndefinedStateErrorMessage(key, action)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(errorMessage)</span><br><span class="line">      &#125;</span><br><span class="line">      nextState[key] = nextStateForKey</span><br><span class="line">      hasChanged = hasChanged || nextStateForKey !== previousStateForKey</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hasChanged ? nextState : state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>为简化 redux 使用过程中的编码量，可参考 dva 设计 redux-model 模块，通过 namespace 复合 constants, actions, reducers 文件。</p>
<p>异步请求的 loading 状态可制作 redux-loading-middleware 中间件模块作统一处理。</p>
<p>以上两点，以及状态数据的设计（在状态管理模块确定之后，如何高效、稳妥地组织状态数据通常是编写业务代码的重心），介于篇幅和能力的限制，我将不再作阐述。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>对我这样半道出家的人来说，阅读源码比如专研一本好书。先从薄处入手，藉由丰富的关联性思想到每个可挖掘的点，视野渐渐变得开阔，纸张上的字句也会渐渐变得厚实。再从厚处着眼，借着内在已储备的知识量，更容易拨开阻碍视线的枝蔓，洞见维系着本质的主干，作者构思的线条也会变得越来越简明。像每一段求索经历，这是一个从薄到厚、再从厚到薄的过程，就中的滋味不乏刑侦、推理的乐趣。但是，阅读源码譬如靠经验增进技艺，对知识的汲取往往流于碎片化。对那些才能稍嫌拙劣、又想一探究竟的人来说，以阅读源码的方式攀升到系统化认知的高度，这当中所需的演绎过程将置那些流行、已成熟的技术体系于不顾，势必会耗费莫大的心力，譬如绕一段未必能达到终点的远路。我认为，科班生有一种高屋建瓴的视角，较之半道出家的人，他们具备更为全面的认知，更容易跳过沿途遭遇的细节，理出解决命题的主要线索。当然，假如有个人以一种谈不上正确的方式探寻 api 或数学公式背后的奥秘，他的动机是值得鼓励的。只是等他回落在简单的哲学中，那就需要一段或长或短的时间了。</p>
<p>吴军博士在《数学之美》中引用了牛顿的一句话，”（人们发觉）真理在形式上从来都是简单的，而不是复杂和含混的。“在阅读这本书的过程中，我既能感受到作者行文简明扼要的美感，又能从作者的描述中体会到简单哲学的分量。因为简单，可以助人在错综的表象中洞悉本质，可以摆脱心理上的弊病，免于将学识敷在脸面上。我想，演绎得越多，仰赖于记忆的成分也越少，深藏在海平面下的设计矿产也越加丰富（在其上方形成的概念可以理解为变动不居的表象）。秉持着对简单哲学的信奉，我开始写作这篇分析 redux 源码的文章，虽然对简单哲学的应用以现有的编程功底仍旧有力所不逮的感觉。</p>
<p>总之，这篇文章是逐渐摸索的产物，其中难免错谬与勉强，却是我试图在编程行业中登堂入室的中转站。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[深入 React 技术栈 - 陈屹]<br><a href="http://www.redux.org.cn/" target="_blank" rel="noopener">Redux 中文文档</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>library</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>职责链模式</title>
    <url>/2018/06/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>职责链模式(Chain of Responsibility)的主要实现逻辑为，将请求的处理对象构造为链式结构，然后在这条链上依序传递请求，直到请求被某个对象处理，或者最终得不到处理。</p>
<p>《设计模式:可复用面向对象软件的基础》一书将职责链模式描述为：</p>
<p>Avoid coupling the sender of a request to its receiver by giving morethan one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.</p>
<h2 id="经典实现"><a href="#经典实现" class="headerlink" title="经典实现"></a>经典实现</h2><p>职责链模式包含下列组件：</p>
<ul>
<li>Handler: 处理请求对象的抽象接口，包含 handle 抽象方法，用于处理请求或调用下一个处理对象处理请求；setNextHandler 方法（可选），用于设定下一个处理对象；nextHandler 属性为下一个处理对象。</li>
<li>ConcerteHandler: 处理请求的具体类，包含 handle, setNextHandler 方法的实现，nextHandler 属性访问下一个处理对象。</li>
<li>Client: 用于向链上的具体处理者传递请求。</li>
</ul>
<p>以下代码使用职责链模式揣测浏览器事件冒泡机制的简要实现。与浏览器不同的是，示例代码只演示父子层级关系中，子节点如何将事件对象转交给父节点，并触发绑定在父节点上的事件处理函数。不过，通过这段简要的代码实现，可以猜想事件对象 stopPropagation 方法的实现。事件对象可在鼠标或键盘点击时构造；在浏览器中，指定下一个处理对象这一过程，也可以在解析 dom 树的时候实现，使父节点自然成为子节点的下一个处理对象。关于事件捕获的实现，疑似通过事件对象的坐标属性和元素的位置属性比对实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line">  nextHandler;</span><br><span class="line"></span><br><span class="line">  handle()&#123;&#125;</span><br><span class="line">  setNextHandler(nextHandler)&#123;</span><br><span class="line">    <span class="keyword">this</span>.nextHandler = nextHandler;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</span><br><span class="line">  clickHandlers = [];</span><br><span class="line"></span><br><span class="line">  handle(event)&#123;</span><br><span class="line">    <span class="keyword">switch</span>(event.type)&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'onClick'</span>:</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">const</span> handler <span class="keyword">of</span> <span class="keyword">this</span>.clickHandlers )&#123;</span><br><span class="line">          handler();</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">if</span> ( <span class="keyword">this</span>.nextHandler ) <span class="keyword">this</span>.nextHandler.handle(event);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onClick(handler)&#123;</span><br><span class="line">    <span class="keyword">this</span>.clickHandlers.push(handler);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentNode</span> <span class="keyword">extends</span> <span class="title">Node</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildNode</span> <span class="keyword">extends</span> <span class="title">Node</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parentNode = <span class="keyword">new</span> ParentNode();</span><br><span class="line"><span class="keyword">const</span> childNode = <span class="keyword">new</span> ChildNode();</span><br><span class="line">childNode.setNextHandler(parentNode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mouseEvent = <span class="keyword">new</span> MouseEvent();</span><br><span class="line">childNode.handle(mouseEvent);</span><br></pre></td></tr></table></figure>
<p>通过上述代码示例，我们也可以猜想 JavaScript 语言中原型链的实现。</p>
<p>职责链模式具有如下特点：</p>
<ol>
<li>处理对象呈链式结构，因此，天然可以用来处理流程。在实现上，可以使用 setNextHandler 方法指定下一个处理对象，也可以使用一条已有的链，如父子结构形成的层级关系，或者队列形式（队列内若存储函数，当函数返回值为 false 时，表示不再将请求转交给下一个处理对象）。通常情况下，职责链模式表现为，根据请求的不同，再唤醒链上的某个处理对象加以操作，效果等同于策略模式。介于其链式处理的特征，职责链模式有一个变种，即请求经由前一个处理对象封装后，再交由下一个处理对象，这和浏览器的事件冒泡机制相仿（这样的链式操作，也可以通过函数队列或者迭代器模式实现）。</li>
<li>当链未明确指定时，可在链中灵活地添加处理对象、并指定下一个处理对象，跳过不必要的处理逻辑。</li>
<li>请求对象可以采用最简单的硬编码形式，也可以采用复杂的对象形式、或者使用特定的 Request 类加以构造，甚至使用转换函数从标识符中获取到传入处理对象的数据。这里要指出职责链模式的另一个变种，即可通过处理对象对请求进行特定包装后，再唤醒下一个处理对象。如第一点指出的，对于简单的请求对象，我们可以换用策略模式实现多样的处理机制；甚至对于复杂的请求对象，我们也可以制定规则转换引擎将其转换为简单的标识符形式，再通过策略模式加以处理。但是策略模式只能选中一种算法，且没有呈现出链式结构，因此策略模式不能像职责链模式那样不能用于控制流程，如审批流。</li>
<li>职责链模式可用于降低请求发送者和接受者的耦合度，处理对象也不需要知道链的结构。</li>
<li>过长的职责链影响程序的性能，同时也占用内存开销。在某些情况下，传入的请求会得不到处理，这时可以在链的尾端添加一个兜底函数处理请求。</li>
</ol>
<h2 id="js-中的职责链模式"><a href="#js-中的职责链模式" class="headerlink" title="js 中的职责链模式"></a>js 中的职责链模式</h2><p>在 js 中，可借助 AOP 切面实现职责链模式，在实现上呈现出函数式特征。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler1</span>(<span class="params"></span>)</span>&#123; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler2</span>(<span class="params"></span>)</span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.property.after = <span class="function"><span class="params">nextHandler</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> ret = <span class="keyword">this</span>.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !!ret ) <span class="keyword">return</span> nextHandler.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">handler1.after(handler2);</span><br></pre></td></tr></table></figure>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>如前文所说，职责链模式可应用于呈现出父子结构的图形界面上，以实现事件处理或者其他图形效果。</p>
<p>职责链也可用于流程控制，如审批流等。</p>
<p>在已知的应用中，职责链模式见于 servelt 过滤器的实现，redux、koa 中间件的实现，koa-router 路由的实现。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[设计模式:可复用面向对象软件的基础]<br>[Javascript 设计模式和开发实践 - 曾探]</p>
]]></content>
      <categories>
        <category>计算机科学</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>js设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>jquery 动效分析</title>
    <url>/2018/06/13/frontend/library/jquery%20%E5%8A%A8%E6%95%88%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="动效基础"><a href="#动效基础" class="headerlink" title="动效基础"></a>动效基础</h2><p>在阅读 jquery/effects 模块源码之前，有必要先了解一下制作前端动效的一些基本知识，其内容包含动效实现的基本原理、缓动函数等。对于以上内容，笔者将在这一小节一一加以介绍。</p>
<h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>动效实现的基本原理如同逐帧制作动画，相隔时间较短的两帧动画可以促使人类视觉误以为那是连续的一个过程。术语刷新率 fps 指每秒更新多少帧画面。通常，每秒刷新 24 张画面最适宜于人类视觉，也就是单张画面的滞留时间为 25 毫秒。因此，制作小球动效等价于在时间轴上计算小球当前的运动位置这一数学命题，即算术表达式 x = fn(t)。</p>
<h3 id="缓动函数"><a href="#缓动函数" class="headerlink" title="缓动函数"></a>缓动函数</h3><p>常规的缓动函数表达式为 x = fn(t, b, c, d)，其中 x 为当前样式，t 为动画执行事件，b 为起始样式，c 为最终样式，d 为动画总时长。在已知 b, c, d 三个参数的情形下，缓动函数可以表述为 x = fn(t)，其斜率为速度，二次导数为加速度。</p>
<p>常见的缓动函数可以查看 <a href="https://esings.net/zh-cn" target="_blank" rel="noopener">缓动函数速查表</a>。缓动函数名中，后缀 In 表示加速，Out 表示减速，InOut 标识先加速、后减速；后缀 Sine 表示由三角函数实现，Quad 表示由二次方函数实现，Cubic 为三次方，Quart 为四次方，Quint 为五次方，Circ 为开平方根，Expo 为开立方根，Elastic 为结合三角函数和开立方根的初级弹簧效果，Back 为使用常数 1.70158 计算的回退效果，Bounce 为高级弹簧效果。linear 为线性函数。</p>
<img src="/2018/06/13/frontend/library/jquery%20动效分析/easing.png">
<p>jquery.esing 类库列出了多种缓动函数集合，参数 p 为动画已执行时间占动画总时长的百分比，返回值当前移动距离占总移动距离的百分比。代码如下（包含 jquery 中提供的 linear, swing 函数）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> c1 = <span class="number">1.70158</span>;</span><br><span class="line"><span class="keyword">const</span> c2 = c1 * <span class="number">1.525</span>;</span><br><span class="line"><span class="keyword">const</span> c3 = c1 + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> c4 = ( <span class="number">2</span> * <span class="built_in">Math</span>.PI ) / <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> c5 = ( <span class="number">2</span> * <span class="built_in">Math</span>.PI ) / <span class="number">4.5</span>;</span><br><span class="line"></span><br><span class="line">$.esing = &#123;</span><br><span class="line">  linear(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;,</span><br><span class="line">  swing(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.5</span> - <span class="built_in">Math</span>.Math.cos( p * <span class="built_in">Math</span>.PI ) / <span class="number">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  easeInQuad(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> p * p;</span><br><span class="line">  &#125;,</span><br><span class="line">  easeOutQuad(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> - ( <span class="number">1</span> - p ) * ( <span class="number">1</span> - p );</span><br><span class="line">  &#125;,</span><br><span class="line">  easeInOutQuad(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> p &lt; <span class="number">0.5</span> ? </span><br><span class="line">      <span class="number">2</span> * p * p : </span><br><span class="line">      <span class="number">1</span> - <span class="built_in">Math</span>.pow( <span class="number">-2</span> * p + <span class="number">2</span>, <span class="number">2</span> ) / <span class="number">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  easeInCubic(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> p * p * p;</span><br><span class="line">  &#125;,</span><br><span class="line">  easeOutCubic(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> - <span class="built_in">Math</span>.pow( <span class="number">1</span> - p, <span class="number">3</span> );</span><br><span class="line">  &#125;,</span><br><span class="line">  easeInOutCubic(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> p &lt; <span class="number">0.5</span> ? </span><br><span class="line">      <span class="number">4</span> * p * p * p : </span><br><span class="line">      <span class="number">1</span> - <span class="built_in">Math</span>.pow( <span class="number">-2</span> * p + <span class="number">2</span>, <span class="number">3</span> ) / <span class="number">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  easeInQuart(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> p * p * p * p;</span><br><span class="line">  &#125;,</span><br><span class="line">  easeOutQuart(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> - <span class="built_in">Math</span>.pow( <span class="number">1</span> - p, <span class="number">4</span> );</span><br><span class="line">  &#125;,</span><br><span class="line">  easeInOutQuart(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> p &lt; <span class="number">0.5</span> ?</span><br><span class="line">      <span class="number">8</span> * p * p * p * p :</span><br><span class="line">      <span class="number">1</span> - <span class="built_in">Math</span>.pow( <span class="number">-2</span> * p + <span class="number">2</span>, <span class="number">4</span> ) / <span class="number">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  easeInQuint(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> p * p * p * p * p;</span><br><span class="line">  &#125;,</span><br><span class="line">  easeOutQuint(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> - <span class="built_in">Math</span>.pow( <span class="number">1</span> - p, <span class="number">5</span> );</span><br><span class="line">  &#125;,</span><br><span class="line">  easeInOutQuint(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> p &lt; <span class="number">0.5</span> ?</span><br><span class="line">      <span class="number">16</span> * p * p * p * p * p :</span><br><span class="line">      <span class="number">1</span> - <span class="built_in">Math</span>.pow( <span class="number">-2</span> * p + <span class="number">2</span>, <span class="number">5</span> ) / <span class="number">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  easeInSine(p) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> - <span class="built_in">Math</span>.cos( p * <span class="built_in">Math</span>.PI/<span class="number">2</span> );</span><br><span class="line">  &#125;,</span><br><span class="line">  easeOutSine(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.sin( p * <span class="built_in">Math</span>.PI/<span class="number">2</span> );</span><br><span class="line">  &#125;,</span><br><span class="line">  easeInOutSine(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> -( <span class="built_in">Math</span>.cos( <span class="built_in">Math</span>.PI * p ) - <span class="number">1</span> ) / <span class="number">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  easeInEppo(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> p === <span class="number">0</span> ? <span class="number">0</span> : <span class="built_in">Math</span>.pow( <span class="number">2</span>, <span class="number">10</span> * p - <span class="number">10</span> );</span><br><span class="line">  &#125;,</span><br><span class="line">  easeOutEppo(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> p === <span class="number">1</span> ? <span class="number">1</span> : <span class="number">1</span> - <span class="built_in">Math</span>.pow( <span class="number">2</span>, <span class="number">-10</span> * p );</span><br><span class="line">  &#125;,</span><br><span class="line">  easeInOutEppo(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> p === <span class="number">0</span> ? <span class="number">0</span> : p === <span class="number">1</span> ? <span class="number">1</span> : p &lt; <span class="number">0.5</span> ?</span><br><span class="line">      <span class="built_in">Math</span>.pow( <span class="number">2</span>, <span class="number">20</span> * p - <span class="number">10</span> ) / <span class="number">2</span> :</span><br><span class="line">      ( <span class="number">2</span> - <span class="built_in">Math</span>.pow( <span class="number">2</span>, <span class="number">-20</span> * p + <span class="number">10</span> ) ) / <span class="number">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  easeInCirc(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> - <span class="built_in">Math</span>.sqrt( <span class="number">1</span> - <span class="built_in">Math</span>.pow( p, <span class="number">2</span> ) );</span><br><span class="line">  &#125;,</span><br><span class="line">  easeOutCirc(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt( <span class="number">1</span> - <span class="built_in">Math</span>.pow( p - <span class="number">1</span>, <span class="number">2</span> ) );</span><br><span class="line">  &#125;,</span><br><span class="line">  easeInOutCirc(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> p &lt; <span class="number">0.5</span> ?</span><br><span class="line">      ( <span class="number">1</span> - <span class="built_in">Math</span>.sqrt( <span class="number">1</span> - <span class="built_in">Math</span>.pow( <span class="number">2</span> * p, <span class="number">2</span> ) ) ) / <span class="number">2</span> :</span><br><span class="line">      ( <span class="built_in">Math</span>.sqrt( <span class="number">1</span> - <span class="built_in">Math</span>.pow( <span class="number">-2</span> * p + <span class="number">2</span>, <span class="number">2</span> ) ) + <span class="number">1</span> ) / <span class="number">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  easeInElastic(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> p === <span class="number">0</span> ? <span class="number">0</span> : p === <span class="number">1</span> ? <span class="number">1</span> :</span><br><span class="line">      -<span class="built_in">Math</span>.pow( <span class="number">2</span>, <span class="number">10</span> * p - <span class="number">10</span> ) * <span class="built_in">Math</span>.sin( ( p * <span class="number">10</span> - <span class="number">10.75</span> ) * c4 );</span><br><span class="line">  &#125;,</span><br><span class="line">  easeOutElastic(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> p === <span class="number">0</span> ? <span class="number">0</span> : p === <span class="number">1</span> ? <span class="number">1</span> :</span><br><span class="line">      <span class="built_in">Math</span>.pow( <span class="number">2</span>, <span class="number">-10</span> * p ) * <span class="built_in">Math</span>.sin( ( p * <span class="number">10</span> - <span class="number">0.75</span> ) * c4 ) + <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  easeInOutElastic(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> p === <span class="number">0</span> ? <span class="number">0</span> : p === <span class="number">1</span> ? <span class="number">1</span> : p &lt; <span class="number">0.5</span> ?</span><br><span class="line">      -( <span class="built_in">Math</span>.pow( <span class="number">2</span>, <span class="number">20</span> * p - <span class="number">10</span> ) * <span class="built_in">Math</span>.sin( ( <span class="number">20</span> * p - <span class="number">11.125</span> ) * c5 )) / <span class="number">2</span> :</span><br><span class="line">      <span class="built_in">Math</span>.pow( <span class="number">2</span>, <span class="number">-20</span> * p + <span class="number">10</span> ) * <span class="built_in">Math</span>.sin( ( <span class="number">20</span> * p - <span class="number">11.125</span> ) * c5 ) / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  easeInBack(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> c3 * p * p * p - c1 * p * p;</span><br><span class="line">  &#125;,</span><br><span class="line">  easeOutBack(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + c3 * <span class="built_in">Math</span>.pow( p - <span class="number">1</span>, <span class="number">3</span> ) + c1 * <span class="built_in">Math</span>.pow( p - <span class="number">1</span>, <span class="number">2</span> );</span><br><span class="line">  &#125;,</span><br><span class="line">  easeInOutBack(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> p &lt; <span class="number">0.5</span> ?</span><br><span class="line">      ( <span class="built_in">Math</span>.pow( <span class="number">2</span> * p, <span class="number">2</span> ) * ( ( c2 + <span class="number">1</span> ) * <span class="number">2</span> * p - c2 ) ) / <span class="number">2</span> :</span><br><span class="line">      ( <span class="built_in">Math</span>.pow( <span class="number">2</span> * p - <span class="number">2</span>, <span class="number">2</span> ) *( ( c2 + <span class="number">1</span> ) * ( p * <span class="number">2</span> - <span class="number">2</span> ) + c2 ) + <span class="number">2</span> ) / <span class="number">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  easeInBounce(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> - bounceOut( <span class="number">1</span> - p );</span><br><span class="line">  &#125;,</span><br><span class="line">  easeOutBounce(p) &#123;</span><br><span class="line">    <span class="keyword">var</span> n1 = <span class="number">7.5625</span>,</span><br><span class="line">      d1 = <span class="number">2.75</span>;</span><br><span class="line">    <span class="keyword">if</span> ( p &lt; <span class="number">1</span> / d1 ) &#123;</span><br><span class="line">      <span class="keyword">return</span> n1 * p * p;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( p &lt; <span class="number">2</span> / d1 ) &#123;</span><br><span class="line">      <span class="keyword">return</span> n1 * (p -= (<span class="number">1.5</span> / d1)) * p + <span class="number">0.75</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( p &lt; <span class="number">2.5</span> / d1 ) &#123;</span><br><span class="line">      <span class="keyword">return</span> n1 * (p -= (<span class="number">2.25</span> / d1)) * p + <span class="number">0.9375</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> n1 * (p-=(<span class="number">2.625</span>/d1))*p + <span class="number">0.984375</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  easeInOutBounce(p)&#123;</span><br><span class="line">    <span class="keyword">return</span> p &lt; <span class="number">0.5</span> ?</span><br><span class="line">      ( <span class="number">1</span> - bounceOut( <span class="number">1</span> - <span class="number">2</span> * p ) ) / <span class="number">2</span> :</span><br><span class="line">      ( <span class="number">1</span> + bounceOut( <span class="number">2</span> * p - <span class="number">1</span> ) ) / <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>关于各式缓动函数的由来、及其与贝塞尔曲线的关系，笔者暂时没能力加以分析。</p>
<h3 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h3><p>有了缓动函数，就需要通过定时器运作动画脚本，间隔 25 毫秒刷新元素的显示样式。通常，我们会使用 setInterval 函数创建定时器，但在这种情况下，当页面上有多个动画脚本时，创建的多个定时器无疑会影响性能，就容易造成动画的执行延时。为了优化性能，我们可借助于创建队列的方式，把待执行的动画脚本添加到队列中，再使用单个定时器在 25 毫秒取出队列中的函数加以执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> millisec = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> uuid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  [...queue.values()].map(<span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">    fn(<span class="keyword">new</span> <span class="built_in">Date</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.setInterval(animate, millisec);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = <span class="function"><span class="params">handler</span> =&gt;</span> &#123;</span><br><span class="line">  uuid++;</span><br><span class="line">  queue.set(uuid, handler);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> uuid;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cancel = <span class="function"><span class="params">id</span> =&gt;</span> &#123;</span><br><span class="line">  queue.delete(id);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  request,</span><br><span class="line">  cancel</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>对于上述 js 代码，浏览器端提供的 requestAnimationFrame 接口也实现了相同的功能，由浏览器管控 dom 渲染的时机、事件队列等，刷新率为 60 帧左右，不能快进，也不能放慢，不适用于帧率要求较高的动画，如游戏等。requestAnimationFrame 函数的返回值为 ID，可用于终止动画；通过调用 cancelAnimationFrame 接口的方式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAnimationFrame</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; </span><br><span class="line">    requestAnimationFrame, cancelAnimationFrame, </span><br><span class="line">    mozRequestAnimationFrame, mozCancelAnimationFrame, </span><br><span class="line">    webiketRequestAnimationFrame, webkitCancelAnimationFrame </span><br><span class="line">  &#125; = <span class="built_in">window</span>;</span><br><span class="line">  <span class="keyword">const</span> EmptyFunction = <span class="function"><span class="params">timestamp</span> =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// IE10, Chrome24</span></span><br><span class="line">  <span class="keyword">if</span> ( requestAnimationFrame )&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      request: requestAnimationFrame,</span><br><span class="line">      cancel: cancelAnimationFrame</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// FireFox 11 以下没有实现 mozCancelAnimationFrame 接口</span></span><br><span class="line">  <span class="comment">// 且 mozRequestAnimationFrame 接口只用于触发 'MozBeforePaint' 事件</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( mozRequestAnimationFrame &amp;&amp; mozCancelAnimationFrame )&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      request: mozRequestAnimationFrame,</span><br><span class="line">      cancel: mozCancelAnimationFrame</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// webkit 某个版本没有返回 id，动画不能清除</span></span><br><span class="line">  <span class="comment">// webkit 某个版本没有给动画函数注入 time 参数</span></span><br><span class="line">  <span class="comment">// webkit 早期版本使用 webkitCancelRequestAnimationFrame 清除动画</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( webiketRequestAnimationFrame &amp;&amp; webiketRequestAnimationFrame(EmptyFunction) )&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      request: <span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> webiketRequestAnimationFrame(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> fn(<span class="keyword">new</span> <span class="built_in">Date</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      cancel: webkitCancelAnimationFrame || webkitCancelRequestAnimationFrame</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p>除了 setInterval, requestAnimationFrame 方法，还可以借助 setTimeout 函数（通过递归调用）、postMessage 异步方法（同 setImmediate 函数，在所有页面脚本执行完成后被调用，通过 addEventListener 方法监听 ‘message’ 事件）实现动画，IE10 还可以借助 setImmediate 方法。</p>
<p>通过自制脚本，可以侦测 setInterval, setTimeout, requestAnimationFrame, postMessage 诸方法在 1s 时间内的最小帧数，最大帧数以及平均帧数，并以图形化界面输出。关于这部分内容，可参考司徒正美的《Javascript 框架设计》一书第 381 页。笔者不作详谈。</p>
<p>关于 setImmediate 方法以及 node 端 process.nextTick 方法的实现原理，笔者将在后续的文章中加以分析。</p>
<h3 id="动画队列"><a href="#动画队列" class="headerlink" title="动画队列"></a>动画队列</h3><p>动画队列是指以联动方式组织同一个元素的动画流程，当前一个动画执行完成后，再执行下一个动画。</p>
<h2 id="jQuery-基础"><a href="#jQuery-基础" class="headerlink" title="jQuery 基础"></a>jQuery 基础</h2><p>这部分内容将介绍 jQuery/effects 动画模块所涉及的 jQuery 接口。关于这些接口的实现，读者可参详网上内容。当然，笔者也将在后续的文章加以详谈。</p>
<h3 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a>Promise 对象</h3><p>$.deferred 方法用于创建 Promise 延迟对象。该Promise 对象中，promise 方法，可以为 Promise 对象添加额外的属性和方法；progress, done, fail, always 方法可用于挂载回调函数；notifyWith, resolveWith, rejectWith 方法用于触发回调函数的执行。</p>
<p>Promise 对象在动效模块中的表现就是在动画执行期间或动画执行完成后，触发特定回调函数的执行。</p>
<p>在 jQuery 动效源码中，我们也将看到嵌套使用 promise.done 方法（defaultPrefilter 函数中嵌套使用 anim.always 方法，以清除缓存中的 queue 属性），以确保某个回调函数必然最后执行。因为该回调函数在包裹它的回调执行期间，被添加回调队列中，也就是回调队列中的最后一项。</p>
<h3 id="css-操作"><a href="#css-操作" class="headerlink" title="css 操作"></a>css 操作</h3><p>$.css(prop, [val]) 方法用于获取或设置元素的显示样式。</p>
<p>$.cssHooks 集合形式，为指定 css 样式设置 $.css 方法的执行逻辑，如 $.cssHooks.borderRadius 是为对圆角进行处理，其值为 { get: (elem, computed, extra) =&gt; {}, set: (elem, value) =&gt; {}, expand: value =&gt; {} } 形式的对象。其中，get, set 方法影响 css 样式的取值、赋值操作，expand 方法对样式的值进行处理。</p>
<p>adjustCSS(elem, prop, valueParts, tween)，内部方法，转换并获得待设置的 css 样式值。参数 valueParts 为新设置的 css 属性，包含 +/- 符号、数值和单位，有两种设定形式，包含 +/- 号时，在原值上累加；不包含，取 valueParts 中的数值作为新的样式值。在第一种情形下，valueParts 中的单位若与获取到的样式值的原单位不符，需要将原样式值转换为新单位下的相应值。参数 tween 在动画情形中使用，其 cur 方法用于获取当前样式值，在 adjustCSS 方法执行过程中，其 unit, start, end 属性将相应得到修正。</p>
<p>showHide(elems, showFlag)，内部方法，用于显式或隐藏元素。</p>
<h3 id="data-缓存"><a href="#data-缓存" class="headerlink" title="data 缓存"></a>data 缓存</h3><p>jQuery 中创建的 Data 实例，是通过挂载在特定的节点上实现的，又分为两类，第一类通过 dataPriv 函数创建私有的 Data 实例，第二类通过 dataUser 函数创建外部使用的 Data 实例。data 实例又包含 cache(owner), get(owner, key), set(owner, key, value), access(owner, key, [value]), remove(owner, key), hasData(owner) 方法，其中，参数 owner 为挂载缓存数据的对象，通常为节点。</p>
<p>当全量取出 data 缓存数据时（在不设定 key 键的情况下），作为引用对象，修改其值，也将影响缓存数据。这一点在 jQuery 动效源码中 defaultPrefilter 处理 queue 队列时有使用。</p>
<h3 id="queue-队列"><a href="#queue-队列" class="headerlink" title="queue 队列"></a>queue 队列</h3><p>jQuery.queue(elem, type, data) 方法通过 dataPriv 数据缓存创建、添加或获取以 <code>${queueName}queue</code> 为主键的函数队列。</p>
<p>jQuery.dequeue(elem, type) 方法取出 <code>${queueName}queue</code> 函数队列中首个函数并执行。每个队列函数获得的参数为 elem, next, hooks，其中，next 借助于 jQuery.dequeue 方法执行第二个队列函数，hooks 为 <code>${queueName}queueHooks</code> 钩子函数集合。当 type 为默认的 ‘fx’ 时，在队列顶端插入 ‘inprogress’ 字符串，标记当前有队列函数在执行中，阻止 $.queue 方法运作过程取出首个队列函数并执行，而只能通过 $.dequeue 或 jQuery.dequeue 方法执行队列函数。不得不说，jQuery 中的多态性、各模块间的耦合度几至于芜杂，并不简单明朗，也许借助于类的方式可以写得更为晓畅明白。</p>
<p>jQuery._queueHooks(elem, type) 方法取出 <code>${queueName}queueHooks</code> 钩子函数集合，或其默认值。默认的钩子函数集合只包含 empty 方法，即如前所述，其用于从 dataPriv 缓存中移除 <code>${queueName}queue</code> 属性。</p>
<p>$.queue(queueName, [queue || callback]) 创建、添加或获取 <code>${queueName}queue</code> 函数队列。当添加队列函数时，其会调用 jQuery.dequeue 取出居于首位的队列函数并执行，若其取出的 <code>${queueName}queue</code> 首项不是 ‘inprogress’ 字符串。</p>
<p>$.dequeue(queueName) 方法从 <code>${queueName}queue</code> 函数队列中取出顶端的函数并执行，且下一个队列函数将作为参数 next 传入前一个队列函数中，queue 缓存数据则会即时移除该顶端函数；所有队列函数取出执行后，调用 <code>${queueName}queueHooks</code> 钩子函数集合中的 empty 方法，用于从 dataPriv 缓存中移除 <code>${queueName}queue</code> 属性。</p>
<p>$.clearQueue(queueName) 方法用于清空 <code>${queueName}queue</code> 函数队列。</p>
<p>queue 队列在动效模块中的表现就是组织动画队列。jQuery 的动画可分为两种情形，其一立即执行，多个动画也将并行执行，其二使用动画队列，挨个执行。jQuery 默认使用动画队列方式处理动效。</p>
<p>使用 $.queue 方法添加动画函数时，默认首个动画会立即执行。当再度调用 $.queue 方法添加第二个动画函数时，因为其从 queue 队列中取出的首项为 ‘inprogress’ 字符串（将阻止通过 $.queue 执行首个队列函数，而只能采用 jQuery.dequeue 方法予以执行），第二个动画函数在 $.queue 方法执行期间得不到执行。若在此时，第一个动画函数执行完成后的回调中使用 jQuery.dequeue 方法，则将触发第二个动画函数的执行。按上述实现，在动画执行结束后，因为有 ‘inprogress’ 字符串存储在队列中，无论调用 $.queue 还是 $.animate 方法添加队列函数，都将不能自动执行。这是 jQuery 队列中的诡异现象，需要调用 jQuery.dequeue 方法或者清除队列，才能使 $.queue, $.animate 方法添加的队列函数不再被阻塞。源码参见下文。</p>
<p>下文中，queue 队列指代本节中的 <code>${queueName}queue</code> 函数队列，queueHooks 钩子函数集合指代 <code>${queueName}queueHooks</code> 钩子函数集合，queueHooks.empty 指代钩子函数集合中的 empty 方法，dataPriv.queue 指代 dataPriv[<code>${queueName}queue</code>] 队列函数。</p>
<h2 id="动效模块设计"><a href="#动效模块设计" class="headerlink" title="动效模块设计"></a>动效模块设计</h2><p>jQuery 对动效模块的设计中，首先映入眼帘的是 Animation 函数，其基本骨架是以 deferred 模块组织异步逻辑。其中，tick 内含定时任务函数用于计算动画已执行时长百分比，并触发挂载在 promise 对象上的 progress, done, fail 回调函数的执行；animation 内部变量既包含基本的动画属性和方法，又兼有 promise 对象的属性和方法，随后通过该 animation 对象挂载 progress, done, fail 回调。</p>
<p>在 Animation 函数中，propFilter 函数用于转换 Animation 函数参数中的样式配置项及缓动配置项；Animation.prefilters 数组为动画执行前的一组预处理函数，既能影响应用于动画上的一些属性，又能通过 animation 的 progress, done, fail, always 方法影响异步回调。默认的 defaultPrefilter 函数用于清空 queue 队列，以及对显示隐藏动画作特殊处理。</p>
<p>tick 定时任务通过 jQuery.fx.timer 函数执行，其实现是添加到 jQuery.timers 动画队列中，由 schedule 调度函数通过 window.requestAnimationFrame 方法或 window.setTimeout 函数在一定时间内取出执行。所以，jQuery 中所有动画可理解为均借助于单个定时器实现。在 schedule 函数调度实现的基础上，jQuery 中所有动画可以通过 jQuery.fx.stop 函数终止动画的运作。</p>
<p>以上描述均不涉及 jQuery 动画中的样式变更凭何实现，那么 jQuery 动画中的样式变更到底是怎么实现的呢？原来在定时任务 tick 执行过程中，jQuery 会取出 animation.tweens 数组并执行数组项的 run 方法。tween 又是怎样一个概念呢？tween 针对单个 css 样式属性，通过当前样式值及动画已执行时长计算待调整的样式值，并对元素的样式做出调整。因此在 Animation 函数的实现中，程序首先将遍历待变更的 css 样式属性创建 tween；当 jQuery.fx.timer 函数触发 tick 定时任务函数执行时，在 tick 函数执行过程中，将遍历 tween 数组并执行其 run 方法，促使元素的样式得到更新。</p>
<p>以上内容，可以分为三个板块：</p>
<ol>
<li><p>以 jQuery.fx.timer 等函数为核心的定时任务调用机制。</p>
</li>
<li><p>Tween 实例的创建和执行。其执行过程中，将使用缓动函数更新节点样式。</p>
</li>
<li><p>基于 promise 实现的 Animation 函数，其将创建 tick 定时任务，添加 promise 回调，设置回调的执行时机。抛开这些，Animation 函数还将对参数作适当的转化处理，并执行 prefilter 预处理器。</p>
</li>
</ol>
<p>基于以上三点，就能实现单个元素的动画效果，但是没有涉及动画队列。虽然在 jQuery 中，对队列函数的控制主要在 queue 模块中，而 effects 动效模块与此交互的部分却落在接口层，如 $.animate, $.stop, $.finish 方法的实现中。这在实现部分将予以详述。</p>
<img src="/2018/06/13/frontend/library/jquery%20动效分析/effects.png">
<h2 id="动效模块实现"><a href="#动效模块实现" class="headerlink" title="动效模块实现"></a>动效模块实现</h2><h3 id="jQuery-fx-timer-定时任务"><a href="#jQuery-fx-timer-定时任务" class="headerlink" title="jQuery.fx.timer 定时任务"></a>jQuery.fx.timer 定时任务</h3><p>当有定时任务 timer 函数，通过 jQuery.fx.timer 函数存入 jQuery.timers 定时任务队列中，再调用 jQuery.fx.start 函数，以启动定时任务调用程序。当用户反复调用 jQuery.fx.timer 函数时，为了避免定时任务调用程序多次执行，jQuery.fx.start 函数中带有 inProgress 标识。当定时任务调用程序已启动，inProgress 标识置为真值，实际的调度函数 schedule 将不再被重复调用。</p>
<p>通过 jQuery.fx.start 函数调用的调度函数 schedule 中，或者借助于 window.requestAnimationFrame 方法或者借助于 window.setTimeout 方法，以在间隔一定时间内递归调用 schedule 函数，从而触发 jQuery.fx.tick 函数的执行。</p>
<p>jQuery.fx.tick 函数中，程序将取出 jQuery.timers 队列中的所有定时任务并同步执行执行，若定时任务返回否值，则将其从 jQuery.timers 队列中移除。即当某个定时任务返回真值时，该定时任务将在一定时间间隔后再次被调用，直到其返回否值。</p>
<p>借助于 inProgress 标识为真值时，实际的调度函数 schedule 才会遍历 jQuery.timers 队列中的定时任务并予以执行，jQuery.fx.stop 方法通过将 inProgress 标识置为 null 的方式，可用于终止定时任务调用程序。而在 schedule 调度函数的执行逻辑中，当 jQuery.timers 队列已清空，也会通过调用 jQuery.fx.stop 方法，将 inProgress 标识置为 null。</p>
<p>在 jQuery 动画模块中，作为 timer 定时任务函数的是，Animation 函数体内创建的 tick 函数，其执行逻辑为在动画执行期间更新样式并触发 progress 回调，在动画完成后触发 done, fail 回调。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fxNow;</span><br><span class="line">jQuery.timers = [];</span><br><span class="line">jQuery.fx.interval = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line">jQuery.fx.timer = <span class="function"><span class="keyword">function</span>(<span class="params"> timer </span>) </span>&#123;</span><br><span class="line">	jQuery.timers.push( timer );</span><br><span class="line">	jQuery.fx.start();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">jQuery.fx.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ( inProgress ) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	inProgress = <span class="literal">true</span>;</span><br><span class="line">	schedule();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">schedule</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ( inProgress ) &#123;</span><br><span class="line">		<span class="keyword">if</span> ( <span class="built_in">document</span>.hidden === <span class="literal">false</span> &amp;&amp; <span class="built_in">window</span>.requestAnimationFrame ) &#123;</span><br><span class="line">			<span class="built_in">window</span>.requestAnimationFrame( schedule );</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">window</span>.setTimeout( schedule, jQuery.fx.interval );</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		jQuery.fx.tick();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jQuery.fx.tick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> timer,</span><br><span class="line">		i = <span class="number">0</span>,</span><br><span class="line">		timers = jQuery.timers;</span><br><span class="line"></span><br><span class="line">	fxNow = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> ( ; i &lt; timers.length; i++ ) &#123;</span><br><span class="line">		timer = timers[ i ];</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Run the timer and safely remove it when done (allowing for external removal)</span></span><br><span class="line">		<span class="keyword">if</span> ( !timer() &amp;&amp; timers[ i ] === timer ) &#123;</span><br><span class="line">			timers.splice( i--, <span class="number">1</span> );</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ( !timers.length ) &#123;</span><br><span class="line">		jQuery.fx.stop();</span><br><span class="line">	&#125;</span><br><span class="line">	fxNow = <span class="literal">undefined</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">jQuery.fx.stop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	inProgress = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Tween-样式更新"><a href="#Tween-样式更新" class="headerlink" title="Tween 样式更新"></a>Tween 样式更新</h3><h4 id="Tween-构造函数"><a href="#Tween-构造函数" class="headerlink" title="Tween 构造函数"></a>Tween 构造函数</h4><p>Tween 在实例化过程中，首先记录关联的节点 this.elem、待更新的样式属性 this.prop、缓动函数类型 this.easing、选项 this.options（包含动画执行时长 duration、步进函数 step = (currentStyle, tween) =&gt; {}。其中，步进函数执行时的上下文为节点元素，即 this.elem），随后计算起始样式值 this.start，并记录结束样式值 this.end、样式的单位 this.unit。</p>
<p>在 Tween 实例的 run 方法中，将更新节点的样式值。其实现的具体逻辑为，根据传参动 percent 画已执行时长百分比，通过缓动函数 eased = fn(percent, duration * percent, 0, 1, duration)，计算样式已变更值占所需变更值的百分比 eased，并存入 this.pos 属性中，由此获得新的样式值 this.now。（缓动函数见前文）</p>
<p>在 Tween 实例的执行逻辑中，jQuery 额外构建了一套节点样式取值、赋值机制，即通过 Tween.propHooks 样式处理集合进行操作。其所需面对的一种情形是，this.elem 不是节点元素，或者指定的样式属性 this.prop 不是节点所有的属性，来自于用户自定义。在这种情况下，Tween.propHooks 作为一种钩子处理集合，将截获样式的获取和赋值，由 elem 引用对象以 elem[this.prop] = this.now 的形式存储待更新的样式。同时针对 IE 9 及其以下浏览器，scrollTop 作为特殊的样式，其样式赋值操作将直接作用于 elem 元素，而不是 elem.style 样式集合中。</p>
<p>与此同时，若用户在 jQuery.fx.step 步进函数集合中注册了针对某一个样式的特殊行为，样式赋值操作将只唤醒该行为，而不会对节点 this.elem 进行处理。如需对 this.elem 节点的样式进行处理，仍需要由用户承担额外的开发工作。</p>
<p>关于选项中的步进函数 options.step，其可用于以日志形式记录待更新样式的值、或者在样式更新的某个值上作特殊处理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tween</span>(<span class="params"> elem, options, prop, end, easing </span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Tween.prototype.init( elem, options, prop, end, easing );</span><br><span class="line">&#125;</span><br><span class="line">jQuery.Tween = Tween;</span><br><span class="line"></span><br><span class="line">Tween.prototype = &#123;</span><br><span class="line">	<span class="keyword">constructor</span>: Tween,</span><br><span class="line">	init: function( elem, options, prop, end, easing, unit ) &#123;</span><br><span class="line">		<span class="keyword">this</span>.elem = elem;</span><br><span class="line">		<span class="keyword">this</span>.prop = prop;</span><br><span class="line">		<span class="keyword">this</span>.easing = easing || jQuery.easing._default;</span><br><span class="line">		<span class="keyword">this</span>.options = options;</span><br><span class="line">		<span class="keyword">this</span>.start = <span class="keyword">this</span>.now = <span class="keyword">this</span>.cur();</span><br><span class="line">		<span class="keyword">this</span>.end = end;</span><br><span class="line">		<span class="keyword">this</span>.unit = unit || ( jQuery.cssNumber[ prop ] ? <span class="string">""</span> : <span class="string">"px"</span> );</span><br><span class="line">	&#125;,</span><br><span class="line">	cur: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> hooks = Tween.propHooks[ <span class="keyword">this</span>.prop ];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> hooks &amp;&amp; hooks.get ?</span><br><span class="line">			hooks.get( <span class="keyword">this</span> ) :</span><br><span class="line">			Tween.propHooks._default.get( <span class="keyword">this</span> );</span><br><span class="line">	&#125;,</span><br><span class="line">	run: <span class="function"><span class="keyword">function</span>(<span class="params"> percent </span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> eased,</span><br><span class="line">			hooks = Tween.propHooks[ <span class="keyword">this</span>.prop ];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> ( <span class="keyword">this</span>.options.duration ) &#123;</span><br><span class="line">			<span class="keyword">this</span>.pos = eased = jQuery.easing[ <span class="keyword">this</span>.easing ](</span><br><span class="line">				percent, <span class="keyword">this</span>.options.duration * percent, <span class="number">0</span>, <span class="number">1</span>, <span class="keyword">this</span>.options.duration</span><br><span class="line">			);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">this</span>.pos = eased = percent;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">this</span>.now = ( <span class="keyword">this</span>.end - <span class="keyword">this</span>.start ) * eased + <span class="keyword">this</span>.start;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> ( <span class="keyword">this</span>.options.step ) &#123;</span><br><span class="line">			<span class="keyword">this</span>.options.step.call( <span class="keyword">this</span>.elem, <span class="keyword">this</span>.now, <span class="keyword">this</span> );</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> ( hooks &amp;&amp; hooks.set ) &#123;</span><br><span class="line">			hooks.set( <span class="keyword">this</span> );</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			Tween.propHooks._default.set( <span class="keyword">this</span> );</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Tween.prototype.init.prototype = Tween.prototype;</span><br><span class="line"></span><br><span class="line">Tween.propHooks = &#123;</span><br><span class="line">	_default: &#123;</span><br><span class="line">		<span class="keyword">get</span>: function( tween ) &#123;</span><br><span class="line">			<span class="keyword">var</span> result;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Use a property on the element directly when it is not a DOM element,</span></span><br><span class="line">			<span class="comment">// or when there is no matching style property that exists.</span></span><br><span class="line">			<span class="keyword">if</span> ( tween.elem.nodeType !== <span class="number">1</span> ||</span><br><span class="line">				tween.elem[ tween.prop ] != <span class="literal">null</span> &amp;&amp; tween.elem.style[ tween.prop ] == <span class="literal">null</span> ) &#123;</span><br><span class="line">				<span class="keyword">return</span> tween.elem[ tween.prop ];</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Passing an empty string as a 3rd parameter to .css will automatically</span></span><br><span class="line">			<span class="comment">// attempt a parseFloat and fallback to a string if the parse fails.</span></span><br><span class="line">			<span class="comment">// Simple values such as "10px" are parsed to Float;</span></span><br><span class="line">			<span class="comment">// complex values such as "rotate(1rad)" are returned as-is.</span></span><br><span class="line">			result = jQuery.css( tween.elem, tween.prop, <span class="string">""</span> );</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Empty strings, null, undefined and "auto" are converted to 0.</span></span><br><span class="line">			<span class="keyword">return</span> !result || result === <span class="string">"auto"</span> ? <span class="number">0</span> : result;</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="keyword">set</span>: function( tween ) &#123;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Use step hook for back compat.</span></span><br><span class="line">			<span class="comment">// Use cssHook if its there.</span></span><br><span class="line">			<span class="comment">// Use .style if available and use plain properties where available.</span></span><br><span class="line">			<span class="keyword">if</span> ( jQuery.fx.step[ tween.prop ] ) &#123;</span><br><span class="line">				jQuery.fx.step[ tween.prop ]( tween );</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> ( tween.elem.nodeType === <span class="number">1</span> &amp;&amp;</span><br><span class="line">				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != <span class="literal">null</span> ||</span><br><span class="line">					jQuery.cssHooks[ tween.prop ] ) ) &#123;</span><br><span class="line">				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				tween.elem[ tween.prop ] = tween.now;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Support: IE &lt;=9 only</span></span><br><span class="line"><span class="comment">// Panic based approach to setting things on disconnected nodes</span></span><br><span class="line">Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = &#123;</span><br><span class="line">	<span class="keyword">set</span>: function( tween ) &#123;</span><br><span class="line">		<span class="keyword">if</span> ( tween.elem.nodeType &amp;&amp; tween.elem.parentNode ) &#123;</span><br><span class="line">			tween.elem[ tween.prop ] = tween.now;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">jQuery.easing = &#123;</span><br><span class="line">	linear: <span class="function"><span class="keyword">function</span>(<span class="params"> p </span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> p;</span><br><span class="line">	&#125;,</span><br><span class="line">	swing: <span class="function"><span class="keyword">function</span>(<span class="params"> p </span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0.5</span> - <span class="built_in">Math</span>.cos( p * <span class="built_in">Math</span>.PI ) / <span class="number">2</span>;</span><br><span class="line">	&#125;,</span><br><span class="line">	_default: <span class="string">"swing"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Back compat &lt;1.8 extension point</span></span><br><span class="line">jQuery.fx.step = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="创建-Tween-实例"><a href="#创建-Tween-实例" class="headerlink" title="创建 Tween 实例"></a>创建 Tween 实例</h4><p>不得不说，jQuery 有五花八门的拦截机制，部分是为了满足吊诡的开发需要，部分是为了便于对 jQuery 作一层封装。其实既不借助于事件系统，也不像 webpack 那样采用回调链的方式（适用于异步形式，可以拦截后续的流程），而是使用注册 hooks 集合，针对属性对原始行为作一些拓展。Tween 构造函数中如此，创建 Tween 实例也是如此。</p>
<p>在 Animation 函数中，jQuery 将针对每个待调整的样式属性创建各自的 Tween 实例，默认采用 animition.createTween 方法。这一过程由 Animation.tweeners[ “<em>“ ] 方法实现，当样式值带有 +, - 号时，adjustCSS 用于调整结束样式。除此之外，用户可以使用 Animation.tweener(callback) 方法改变 Animation.tweeners[ “</em>“ ] 方法的行为，或者使用 Animation.tweener(prop, callback) 方法创建自定义的 tween，用于变更样式值。</p>
<p>需要指明的一点是，只要调用 createTween 函数，就会将新创建的 tween 添加到 animation.tweens 数组中，动画执行期间，均会刷新样式。jQuery 源码中，创建 tween 的时机有两个，其一在 Animation 函数中根据待变更的样式创建 tween，其二在 defaultPrefilter 预处理器中针对 slideUp 等动效，用于处理元素的宽高属性更新。源码见下文。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTween</span>(<span class="params"> value, prop, animation </span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> tween,</span><br><span class="line">		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ <span class="string">"*"</span> ] ),</span><br><span class="line">		index = <span class="number">0</span>,</span><br><span class="line">		length = collection.length;</span><br><span class="line">	<span class="keyword">for</span> ( ; index &lt; length; index++ ) &#123;</span><br><span class="line">		<span class="keyword">if</span> ( ( tween = collection[ index ].call( animation, prop, value ) ) ) &#123;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// We're done with this property</span></span><br><span class="line">			<span class="keyword">return</span> tween;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animation</span>(<span class="params"> elem, properties, options </span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> animation = deferred.promise( &#123;</span><br><span class="line">			tweens: [],</span><br><span class="line">			createTween: <span class="function"><span class="keyword">function</span>(<span class="params"> prop, end </span>) </span>&#123;</span><br><span class="line">				<span class="keyword">var</span> tween = jQuery.Tween( elem, animation.opts, prop, end,</span><br><span class="line">						animation.opts.specialEasing[ prop ] || animation.opts.easing );</span><br><span class="line">				animation.tweens.push( tween );</span><br><span class="line">				<span class="keyword">return</span> tween;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">		&#125; );</span><br><span class="line"></span><br><span class="line">  jQuery.map( props, createTween, animation );</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jQuery.Animation = jQuery.extend( Animation, &#123;</span><br><span class="line">	tweeners: &#123;</span><br><span class="line">		<span class="string">"*"</span>: [ <span class="function"><span class="keyword">function</span>(<span class="params"> prop, value </span>) </span>&#123;</span><br><span class="line">			<span class="keyword">var</span> tween = <span class="keyword">this</span>.createTween( prop, value );</span><br><span class="line">			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );</span><br><span class="line">			<span class="keyword">return</span> tween;</span><br><span class="line">		&#125; ]</span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">	tweener: <span class="function"><span class="keyword">function</span>(<span class="params"> props, callback </span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ( isFunction( props ) ) &#123;</span><br><span class="line">			callback = props;</span><br><span class="line">			props = [ <span class="string">"*"</span> ];</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			props = props.match( rnothtmlwhite );</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">var</span> prop,</span><br><span class="line">			index = <span class="number">0</span>,</span><br><span class="line">			length = props.length;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> ( ; index &lt; length; index++ ) &#123;</span><br><span class="line">			prop = props[ index ];</span><br><span class="line">			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];</span><br><span class="line">			Animation.tweeners[ prop ].unshift( callback );</span><br><span class="line">		&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Animation-动画函数"><a href="#Animation-动画函数" class="headerlink" title="Animation 动画函数"></a>Animation 动画函数</h3><p>剥离 jQuery.fx.timer 定时任务执行机制和 Tween 样式变更机制后，Animation 函数的实现也极为简单。其主要逻辑为，借助 deferred 模块创建 promise 对象（其表现为 animation 对象），构建 tick 函数用于设置 promise 回调的执行时机以及调用 tween.run 方法更新样式，为 promise 对象设置回调函数。</p>
<p>在 animation 对象中，createTween 方法用于创建 tween，并存入 animation.tweens 数组中，动画执行期间，再取出数组项刷新元素样式。stop 方法通过将 stopped 置为 true，以终止动画，若其传参 gotoEnd 为真值，则逐个遍历 animation.tweens 数组，将动画执行到末端状态。stop 方法中触发回调的机制也由 gotoEnd 传参决定，若其为真，触发成功回调，反之，触发失败回调；回调参数带有 gotoEnd 标识。</p>
<p>除了设置 promise 回调相关内容、启动定时任务执行脚本外，Animation 函数还有一些预处理操作。其中，propFilter 对参数进行预处理；Animation.prefilters 对 queue 队列以及特殊样式进行预处理，其返回值中的 stop 方法将注册为 queueHooks 钩子函数集合的 stop 方法；选项 options.start 由用户对 animation 进行一些预处理操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animation</span>(<span class="params"> elem, properties, options </span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> result,</span><br><span class="line">		stopped,</span><br><span class="line">		index = <span class="number">0</span>,</span><br><span class="line">		length = Animation.prefilters.length,</span><br><span class="line">		deferred = jQuery.Deferred().always( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Don't match elem in the :animated selector</span></span><br><span class="line">			<span class="keyword">delete</span> tick.elem;</span><br><span class="line">		&#125; ),</span><br><span class="line">		tick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> ( stopped ) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">var</span> currentTime = fxNow || createFxNow(),</span><br><span class="line">				remaining = <span class="built_in">Math</span>.max( <span class="number">0</span>, animation.startTime + animation.duration - currentTime ),</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Support: Android 2.3 only</span></span><br><span class="line">				<span class="comment">// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)</span></span><br><span class="line">				temp = remaining / animation.duration || <span class="number">0</span>,</span><br><span class="line">				percent = <span class="number">1</span> - temp,</span><br><span class="line">				index = <span class="number">0</span>,</span><br><span class="line">				length = animation.tweens.length;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> ( ; index &lt; length; index++ ) &#123;</span><br><span class="line">				animation.tweens[ index ].run( percent );</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			deferred.notifyWith( elem, [ animation, percent, remaining ] );</span><br><span class="line"></span><br><span class="line">			<span class="comment">// If there's more to do, yield</span></span><br><span class="line">			<span class="keyword">if</span> ( percent &lt; <span class="number">1</span> &amp;&amp; length ) &#123;</span><br><span class="line">				<span class="keyword">return</span> remaining;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// If this was an empty animation, synthesize a final progress notification</span></span><br><span class="line">			<span class="keyword">if</span> ( !length ) &#123;</span><br><span class="line">				deferred.notifyWith( elem, [ animation, <span class="number">1</span>, <span class="number">0</span> ] );</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Resolve the animation and report its conclusion</span></span><br><span class="line">			deferred.resolveWith( elem, [ animation ] );</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;,</span><br><span class="line">		animation = deferred.promise( &#123;</span><br><span class="line">			elem: elem,</span><br><span class="line">			props: jQuery.extend( &#123;&#125;, properties ),</span><br><span class="line">			opts: jQuery.extend( <span class="literal">true</span>, &#123;</span><br><span class="line">				specialEasing: &#123;&#125;,</span><br><span class="line">				easing: jQuery.easing._default</span><br><span class="line">			&#125;, options ),</span><br><span class="line">			originalProperties: properties,</span><br><span class="line">			originalOptions: options,</span><br><span class="line">			startTime: fxNow || createFxNow(),</span><br><span class="line">			duration: options.duration,</span><br><span class="line">			tweens: [],</span><br><span class="line">			createTween: <span class="function"><span class="keyword">function</span>(<span class="params"> prop, end </span>) </span>&#123;</span><br><span class="line">				<span class="keyword">var</span> tween = jQuery.Tween( elem, animation.opts, prop, end,</span><br><span class="line">						animation.opts.specialEasing[ prop ] || animation.opts.easing );</span><br><span class="line">				animation.tweens.push( tween );</span><br><span class="line">				<span class="keyword">return</span> tween;</span><br><span class="line">			&#125;,</span><br><span class="line">			stop: <span class="function"><span class="keyword">function</span>(<span class="params"> gotoEnd </span>) </span>&#123;</span><br><span class="line">				<span class="keyword">var</span> index = <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">					<span class="comment">// If we are going to the end, we want to run all the tweens</span></span><br><span class="line">					<span class="comment">// otherwise we skip this part</span></span><br><span class="line">					length = gotoEnd ? animation.tweens.length : <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">if</span> ( stopped ) &#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				stopped = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">for</span> ( ; index &lt; length; index++ ) &#123;</span><br><span class="line">					animation.tweens[ index ].run( <span class="number">1</span> );</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Resolve when we played the last frame; otherwise, reject</span></span><br><span class="line">				<span class="keyword">if</span> ( gotoEnd ) &#123;</span><br><span class="line">					deferred.notifyWith( elem, [ animation, <span class="number">1</span>, <span class="number">0</span> ] );</span><br><span class="line">					deferred.resolveWith( elem, [ animation, gotoEnd ] );</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					deferred.rejectWith( elem, [ animation, gotoEnd ] );</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; ),</span><br><span class="line">		props = animation.props;</span><br><span class="line"></span><br><span class="line">	propFilter( props, animation.opts.specialEasing );</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> ( ; index &lt; length; index++ ) &#123;</span><br><span class="line">		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );</span><br><span class="line">		<span class="keyword">if</span> ( result ) &#123;</span><br><span class="line">			<span class="keyword">if</span> ( isFunction( result.stop ) ) &#123;</span><br><span class="line">				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =</span><br><span class="line">					result.stop.bind( result );</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> result;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	jQuery.map( props, createTween, animation );</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ( isFunction( animation.opts.start ) ) &#123;</span><br><span class="line">		animation.opts.start.call( elem, animation );</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Attach callbacks from options</span></span><br><span class="line">	animation</span><br><span class="line">		.progress( animation.opts.progress )</span><br><span class="line">		.done( animation.opts.done, animation.opts.complete )</span><br><span class="line">		.fail( animation.opts.fail )</span><br><span class="line">		.always( animation.opts.always );</span><br><span class="line"></span><br><span class="line">	jQuery.fx.timer(</span><br><span class="line">		jQuery.extend( tick, &#123;</span><br><span class="line">			elem: elem,</span><br><span class="line">			anim: animation,</span><br><span class="line">			queue: animation.opts.queue</span><br><span class="line">		&#125; )</span><br><span class="line">	);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> animation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="propFilter"><a href="#propFilter" class="headerlink" title="propFilter"></a>propFilter</h4><p>propFilter 函数以引用对象形式对传参样式属性集合 props, 缓动函数类型集合 specialEasing 进行处理。首先，其将 props 属性转化为驼峰式书写形式，同时 props 属性的值支持以二元数组形式约定样式和缓动函数类型。其次，当传入的 props 属性作为复合属性、且在 jQuery.cssHooks 注册了预处理集合，且该集合中存在 expand 处理，传入的 props 属性的值将经过 expand 方法处理，由返回值定义该操作哪些样式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">propFilter</span>(<span class="params"> props, specialEasing </span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> index, name, easing, value, hooks;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// camelCase, specialEasing and expand cssHook pass</span></span><br><span class="line">	<span class="keyword">for</span> ( index <span class="keyword">in</span> props ) &#123;</span><br><span class="line">		name = camelCase( index );</span><br><span class="line">		easing = specialEasing[ name ];</span><br><span class="line">		value = props[ index ];</span><br><span class="line">		<span class="keyword">if</span> ( <span class="built_in">Array</span>.isArray( value ) ) &#123;</span><br><span class="line">			easing = value[ <span class="number">1</span> ];</span><br><span class="line">			value = props[ index ] = value[ <span class="number">0</span> ];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> ( index !== name ) &#123;</span><br><span class="line">			props[ name ] = value;</span><br><span class="line">			<span class="keyword">delete</span> props[ index ];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		hooks = jQuery.cssHooks[ name ];</span><br><span class="line">		<span class="keyword">if</span> ( hooks &amp;&amp; <span class="string">"expand"</span> <span class="keyword">in</span> hooks ) &#123;</span><br><span class="line">			value = hooks.expand( value );</span><br><span class="line">			<span class="keyword">delete</span> props[ name ];</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Not quite $.extend, this won't overwrite existing keys.</span></span><br><span class="line">			<span class="comment">// Reusing 'index' because we have the correct "name"</span></span><br><span class="line">			<span class="keyword">for</span> ( index <span class="keyword">in</span> value ) &#123;</span><br><span class="line">				<span class="keyword">if</span> ( !( index <span class="keyword">in</span> props ) ) &#123;</span><br><span class="line">					props[ index ] = value[ index ];</span><br><span class="line">					specialEasing[ index ] = easing;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			specialEasing[ name ] = easing;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Animation-prefilters"><a href="#Animation-prefilters" class="headerlink" title="Animation.prefilters"></a>Animation.prefilters</h4><p>jQuery.Animation.prefilters 作为预处理函数队列，可通过 jQuery.Animation.prefilter 添加，默认只有一个预处理函数 defaultPrefilter。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">jQuery.Animation = jQuery.extend( Animation, &#123;</span><br><span class="line">	prefilters: [ defaultPrefilter ],</span><br><span class="line"></span><br><span class="line">	prefilter: <span class="function"><span class="keyword">function</span>(<span class="params"> callback, prepend </span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ( prepend ) &#123;</span><br><span class="line">			Animation.prefilters.unshift( callback );</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			Animation.prefilters.push( callback );</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure>
<p>defaultPrefilter 函数的处理内容有两块，其一针对即时执行的动画，当类型为 ‘fx’ 的 queue 队列的长度变为 0 时，也即队列等待执行的动画时，使用 queueHooks.empty 方法移除 dataPriv 中与当前 queue 相关的属性；其二针对 slideUp 等动效，不只元素的 display 属性需要在动画起始、结束时作特殊处理，元素的宽高等样式也需要通过计算获得。</p>
<p>对于内容一，有一点疑问，既然动画没有添加到 queue 队列中，为什么还要调用 queueHooks 钩子清除缓存中的数据呢？作为用于避免内存浪费的保证吗？</p>
<p>内容一的实现，在于缓存在元素上的 hooks.unqueued 标识，动画执行期间加 1，动画执行完成后减 1，由此可以判断所有动画是否均已执行完成。当 hooks.unqueued 标识重新变成 0 值时，且缓存中的 queue 队列长度也为 0，调用钩子集合中的 empty 方法，移除 dataPriv.queue 属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defaultPrefilter</span>(<span class="params"> elem, props, opts </span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> hooks, oldfire,</span><br><span class="line">		isBox = <span class="string">"width"</span> <span class="keyword">in</span> props || <span class="string">"height"</span> <span class="keyword">in</span> props,</span><br><span class="line">		anim = <span class="keyword">this</span>,</span><br><span class="line">		orig = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Queue-skipping animations hijack the fx hooks</span></span><br><span class="line">	<span class="keyword">if</span> ( !opts.queue ) &#123;</span><br><span class="line">		hooks = jQuery._queueHooks( elem, <span class="string">"fx"</span> );</span><br><span class="line">		<span class="keyword">if</span> ( hooks.unqueued == <span class="literal">null</span> ) &#123;</span><br><span class="line">			hooks.unqueued = <span class="number">0</span>;</span><br><span class="line">			oldfire = hooks.empty.fire;</span><br><span class="line">			hooks.empty.fire = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">				<span class="keyword">if</span> ( !hooks.unqueued ) &#123;</span><br><span class="line">					oldfire();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;;</span><br><span class="line">		&#125;</span><br><span class="line">		hooks.unqueued++;</span><br><span class="line"></span><br><span class="line">		anim.always( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Ensure the complete handler is called before this completes</span></span><br><span class="line">			anim.always( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">				hooks.unqueued--;</span><br><span class="line">				<span class="keyword">if</span> ( !jQuery.queue( elem, <span class="string">"fx"</span> ).length ) &#123;</span><br><span class="line">					hooks.empty.fire();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; );</span><br><span class="line">		&#125; );</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>内容二的处理逻辑为，在 slideUp 等动效执行期间，需要对元素的显示动效作处理，从隐藏到显示或者从显示到隐藏；当动效包含宽高属性的变动时，需要将 display 从 ‘none’ 或 ‘inline’ 转换成 ‘inline-block’，以使 slideUp 等动效发生过程中，宽高样式能在视图中正常显示；当动效包含 overflow 属性变更时（作为参数 opts 选项的属性，而不像其他样式变更那样在 props 参数中），在动效执行期间，将元素的 overslow 属性设置 ‘hidden’，在动效执行完成后，再切换为配置值。</p>
<p>内容二的实现，借助于 dataShow 缓存数据，该缓存用于记录动效起始状态，其包含 display, hidden 属性，也包含 slideUp 等动效相关的 height, marginTop, paddingTop, [width] 属性。</p>
<p>dataShow.display 属性取决于元素本身的 display 样式。情形一，若其为 ‘none’，则尝试先将该元素展示在视图上，然后取其 display 样式，并存入 dataShow.display 缓存中。在这种情况下，缓存 dataShow.display 的意义在于，动画执行期间将元素的 display 样式设定为缓存值（当元素显示的 display 样式为 ‘inline’ 或 ‘inline-block’，进入情形二中的处理逻辑），以使动画得以展示。情形二，若其为 ‘inline’ 或 ‘inline-block’，dataShow.display 属性直接取元素的 display 样式。在这种情形下，缓存 dataShow.display 的意义在于，首次动画执行期间将元素的 display 样式设为 ‘inline-block’，以使 width 属性能正常变更；且对于 slideUp 等滑动、渐隐类特效（在源码中的表现为，传入 Animation 的参数为 { marginLeft: ‘show’ } 等形式），等动画执行结束后，元素的 display 样式仍回设为 dataShow.display 缓存值；当首次动画执行期间、再启动第二个动画时，则跳过上述处理逻辑、沿用第一个动画将 display 样式置为 ‘inline-block’ 的做法。</p>
<p>以上处理存在两个疑点。其一，上文也有指出，当元素包含除 slideUp 等类型以外的动效时，动画执行结束后，元素的 display 属性将定格为 ‘inline-block’，而不是初始的 ‘inline’。这种做法是为了满足下一个动画改变元素宽度的需求吗？其二，当第一个动画类型为 slideUp 等，在该动画执行期间插入第二个动画，当第一个动画执行完成后，元素的 display 样式将可能被设为 ‘inline’，这是否会影响第二个动画的执行？这种处理方式仍取决于动画通常以队列方式添加，而不是即时执行吗（即两个动画并行执行的可能很小）？</p>
<p>内容二中，最后的处理逻辑是，使用 dataShow 缓存记录元素的初始 height, marginTop, paddingTop, [width] 等属性（这些数据经 createTween 函数处理后获得），并在动画执行前后使用 display 属性切换元素的显示状态，这样就不会影响元素原有的宽高属性。与此同时，程序将使用 createTween 函数在 animation.tweens 数组中添加 tween，该 tween 用于在动画执行期间刷新元素的 height, marginTop, paddingTop, [width] 等属性，从而实现动画效果。</p>
<p>上述处理逻辑的设计，基于接口层面需实现 $.slideUp 等方法。如果以类的方式构造动画模块，可以用继承类实现 slideUp 等动效，而不需要像 jQuery 那样在一体化处理逻辑掺杂 slideUp 等动效的实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rfxtypes = <span class="regexp">/^(?:toggle|show|hide)$/</span>；</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defaultPrefilter</span>(<span class="params"> elem, props, opts </span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> prop, value, toggle, propTween, restoreDisplay, display,</span><br><span class="line">		isBox = <span class="string">"width"</span> <span class="keyword">in</span> props || <span class="string">"height"</span> <span class="keyword">in</span> props,</span><br><span class="line">		anim = <span class="keyword">this</span>,</span><br><span class="line">		orig = &#123;&#125;,</span><br><span class="line">		style = elem.style,</span><br><span class="line">		hidden = elem.nodeType &amp;&amp; isHiddenWithinTree( elem ),</span><br><span class="line">		dataShow = dataPriv.get( elem, <span class="string">"fxshow"</span> );</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Detect show/hide animations</span></span><br><span class="line">	<span class="keyword">for</span> ( prop <span class="keyword">in</span> props ) &#123;</span><br><span class="line">		value = props[ prop ];</span><br><span class="line">		<span class="keyword">if</span> ( rfxtypes.test( value ) ) &#123;</span><br><span class="line">			<span class="keyword">delete</span> props[ prop ];</span><br><span class="line">			toggle = toggle || value === <span class="string">"toggle"</span>;</span><br><span class="line">			<span class="keyword">if</span> ( value === ( hidden ? <span class="string">"hide"</span> : <span class="string">"show"</span> ) ) &#123;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Pretend to be hidden if this is a "show" and</span></span><br><span class="line">				<span class="comment">// there is still data from a stopped show/hide</span></span><br><span class="line">				<span class="keyword">if</span> ( value === <span class="string">"show"</span> &amp;&amp; dataShow &amp;&amp; dataShow[ prop ] !== <span class="literal">undefined</span> ) &#123;</span><br><span class="line">					hidden = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Ignore all other no-op show/hide data</span></span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			orig[ prop ] = dataShow &amp;&amp; dataShow[ prop ] || jQuery.style( elem, prop );</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Bail out if this is a no-op like .hide().hide()</span></span><br><span class="line">	propTween = !jQuery.isEmptyObject( props );</span><br><span class="line">	<span class="keyword">if</span> ( !propTween &amp;&amp; jQuery.isEmptyObject( orig ) ) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Restrict "overflow" and "display" styles during box animations</span></span><br><span class="line">	<span class="keyword">if</span> ( isBox &amp;&amp; elem.nodeType === <span class="number">1</span> ) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Support: IE &lt;=9 - 11, Edge 12 - 15</span></span><br><span class="line">		<span class="comment">// Record all 3 overflow attributes because IE does not infer the shorthand</span></span><br><span class="line">		<span class="comment">// from identically-valued overflowX and overflowY and Edge just mirrors</span></span><br><span class="line">		<span class="comment">// the overflowX value there.</span></span><br><span class="line">		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Identify a display type, preferring old show/hide data over the CSS cascade</span></span><br><span class="line">		restoreDisplay = dataShow &amp;&amp; dataShow.display;</span><br><span class="line">		<span class="keyword">if</span> ( restoreDisplay == <span class="literal">null</span> ) &#123;</span><br><span class="line">			restoreDisplay = dataPriv.get( elem, <span class="string">"display"</span> );</span><br><span class="line">		&#125;</span><br><span class="line">		display = jQuery.css( elem, <span class="string">"display"</span> );</span><br><span class="line">		<span class="keyword">if</span> ( display === <span class="string">"none"</span> ) &#123;</span><br><span class="line">			<span class="keyword">if</span> ( restoreDisplay ) &#123;</span><br><span class="line">				display = restoreDisplay;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Get nonempty value(s) by temporarily forcing visibility</span></span><br><span class="line">				showHide( [ elem ], <span class="literal">true</span> );</span><br><span class="line">				restoreDisplay = elem.style.display || restoreDisplay;</span><br><span class="line">				display = jQuery.css( elem, <span class="string">"display"</span> );</span><br><span class="line">				showHide( [ elem ] );</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Animate inline elements as inline-block</span></span><br><span class="line">		<span class="keyword">if</span> ( display === <span class="string">"inline"</span> || display === <span class="string">"inline-block"</span> &amp;&amp; restoreDisplay != <span class="literal">null</span> ) &#123;</span><br><span class="line">			<span class="keyword">if</span> ( jQuery.css( elem, <span class="string">"float"</span> ) === <span class="string">"none"</span> ) &#123;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Restore the original display value at the end of pure show/hide animations</span></span><br><span class="line">				<span class="keyword">if</span> ( !propTween ) &#123;</span><br><span class="line">					anim.done( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">						style.display = restoreDisplay;</span><br><span class="line">					&#125; );</span><br><span class="line">					<span class="keyword">if</span> ( restoreDisplay == <span class="literal">null</span> ) &#123;</span><br><span class="line">						display = style.display;</span><br><span class="line">						restoreDisplay = display === <span class="string">"none"</span> ? <span class="string">""</span> : display;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				style.display = <span class="string">"inline-block"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ( opts.overflow ) &#123;</span><br><span class="line">		style.overflow = <span class="string">"hidden"</span>;</span><br><span class="line">		anim.always( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			style.overflow = opts.overflow[ <span class="number">0</span> ];</span><br><span class="line">			style.overflowX = opts.overflow[ <span class="number">1</span> ];</span><br><span class="line">			style.overflowY = opts.overflow[ <span class="number">2</span> ];</span><br><span class="line">		&#125; );</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Implement show/hide animations</span></span><br><span class="line">	propTween = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">for</span> ( prop <span class="keyword">in</span> orig ) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// General show/hide setup for this element animation</span></span><br><span class="line">		<span class="keyword">if</span> ( !propTween ) &#123;</span><br><span class="line">			<span class="keyword">if</span> ( dataShow ) &#123;</span><br><span class="line">				<span class="keyword">if</span> ( <span class="string">"hidden"</span> <span class="keyword">in</span> dataShow ) &#123;</span><br><span class="line">					hidden = dataShow.hidden;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				dataShow = dataPriv.access( elem, <span class="string">"fxshow"</span>, &#123; <span class="attr">display</span>: restoreDisplay &#125; );</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Store hidden/visible for toggle so `.stop().toggle()` "reverses"</span></span><br><span class="line">			<span class="keyword">if</span> ( toggle ) &#123;</span><br><span class="line">				dataShow.hidden = !hidden;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Show elements before animating them</span></span><br><span class="line">			<span class="keyword">if</span> ( hidden ) &#123;</span><br><span class="line">				showHide( [ elem ], <span class="literal">true</span> );</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">/* eslint-disable no-loop-func */</span></span><br><span class="line"></span><br><span class="line">			anim.done( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">			<span class="comment">/* eslint-enable no-loop-func */</span></span><br><span class="line"></span><br><span class="line">				<span class="comment">// The final step of a "hide" animation is actually hiding the element</span></span><br><span class="line">				<span class="keyword">if</span> ( !hidden ) &#123;</span><br><span class="line">					showHide( [ elem ] );</span><br><span class="line">				&#125;</span><br><span class="line">				dataPriv.remove( elem, <span class="string">"fxshow"</span> );</span><br><span class="line">				<span class="keyword">for</span> ( prop <span class="keyword">in</span> orig ) &#123;</span><br><span class="line">					jQuery.style( elem, prop, orig[ prop ] );</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; );</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Per-property setup</span></span><br><span class="line">		propTween = createTween( hidden ? dataShow[ prop ] : <span class="number">0</span>, prop, anim );</span><br><span class="line">		<span class="keyword">if</span> ( !( prop <span class="keyword">in</span> dataShow ) ) &#123;</span><br><span class="line">			dataShow[ prop ] = propTween.start;</span><br><span class="line">			<span class="keyword">if</span> ( hidden ) &#123;</span><br><span class="line">				propTween.end = propTween.start;</span><br><span class="line">				propTween.start = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h3><p>在动效接口部分，笔者将拆分为两类加以分析，其一是通用的动画接口，其二是 slideUp 等特殊动效。前者提供 $.animate, $.stop, $.finish 方法；后者基于前者的 animate 方法实现。</p>
<h4 id="通用动画接口"><a href="#通用动画接口" class="headerlink" title="通用动画接口"></a>通用动画接口</h4><p>$.animate 方法的处理逻辑为：</p>
<p>首先，使用 jQuery.speed 方法处理传参，且该方法将把 jQuery.dequeue 方法挂载到动画的回调函数中，以使前一个动画执行完成后，能取出 queue 队列中的下一个动画或普通函数并执行。特别的，当 jQuery.fx.off 开关置为真值时，样式变更将在下一个定时任务中即时得到完成。</p>
<p>其次，在 $.animate 方法中，如果传参 speed.queue 为 false，那么就以立即执行方式调用 Animation 函数；反之，以动画队列方式处理 Animation 函数。Animation 函数通过 doAnimation 函数封装，后续将指出为什么要用 doAnimation 函数进行封装。</p>
<p>$.stop 方法的处理逻辑为：</p>
<p>首先，视传参 clearQueue 是否为真值，清空 queue 队列函数。</p>
<p>其次，调用 queueHooks 钩子中的 stop 方法，并传入 gotoEnd 参数。该 stop 一则可以通过添加返回值带有 stop 方法的 prefilter 函数实现，一则可以调用 jQuery._queueHooks 注册。</p>
<p>其次，通过 queue 类型和 elem 属性，从 jQuery.timers 定时任务队列中取出待执行的 animation 对象，执行其 stop 方法，阻止元素样式更新或者将样式更新为最终状态（由  gotoEnd 入参决定）；并从 jQuery.timers 缓存中剔除当前元素的动画任务，基于 queue 类型判断，存储在同一个 queue 队列中的动画都将被移除。</p>
<p>最后，如果 gotoEnd 入参为否值，或者动画函数尚没有添加到 jQuery.timers 定时任务队列中（其情形为，动画函数在 queue 队列中等待执行。这种情形发生在调用 $.animate 方法在 queue 队列中创建 ‘inprogress’ 字符串的时候，等该动画执行完后，再使用 $.animate, $.queue 方法都将只把动画或普通函数添加到队列中，而不会自动执行，这部分可参见 jQuery 基础 - queue 队列一节），那么调用 jQuery.dequeue 方法，取出下一个动画函数并执行。如果 jQuery 对 stop 方法的设计采用如 requestAnimationFrame 的形式，即将 animation 对象输出给用户，由用户手动调用该 animation 的 stop 方法，就不会出现如上问题，而且对终止动画的操作也更具颗粒性。也许使用类的编码方式会更加合理。</p>
<p>$.finish 方法的处理逻辑为：</p>
<p>首先，从 queue 队列中取出 $.animate 方法创建的 doAnimation 函数，将 dataPriv.finish 缓存属性置为真。</p>
<p>其次，将 queue 队列置为空数组。</p>
<p>其次，调用 queueHooks.stop 钩子。</p>
<p>其次，根据 queue 类型和 elem 属性，遍历 jQuery.timers 定时任务队列，执行 animation.stop 方法，并从 jQuery.timers 队列中移除动画。</p>
<p>其次，执行 doAnimation.finish 方法，即 doAnimation 本身，这里仍是针对动画在队列中排队、得不到执行的情形。</p>
<p>最后，移除 dataPriv.finish 标识，意味着 doAnimation 函数中的 dataPriv.finish 只可能发生于 $.finish 方法执行期间。</p>
<p>由以上可以看出，jQuery 在顾全某些特殊情形时，各模块、各函数间的耦合度相当高，编码极不明朗，在程序设计上大有不可取的姿态。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rrun = <span class="regexp">/queueHooks$/</span>;</span><br><span class="line"></span><br><span class="line">jQuery.speed = <span class="function"><span class="keyword">function</span>(<span class="params"> speed, easing, fn </span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> opt = speed &amp;&amp; <span class="keyword">typeof</span> speed === <span class="string">"object"</span> ? jQuery.extend( &#123;&#125;, speed ) : &#123;</span><br><span class="line">		complete: fn || !fn &amp;&amp; easing ||</span><br><span class="line">			isFunction( speed ) &amp;&amp; speed,</span><br><span class="line">		duration: speed,</span><br><span class="line">		easing: fn &amp;&amp; easing || easing &amp;&amp; !isFunction( easing ) &amp;&amp; easing</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Go to the end state if fx are off</span></span><br><span class="line">	<span class="keyword">if</span> ( jQuery.fx.off ) &#123;</span><br><span class="line">		opt.duration = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> ( <span class="keyword">typeof</span> opt.duration !== <span class="string">"number"</span> ) &#123;</span><br><span class="line">			<span class="keyword">if</span> ( opt.duration <span class="keyword">in</span> jQuery.fx.speeds ) &#123;</span><br><span class="line">				opt.duration = jQuery.fx.speeds[ opt.duration ];</span><br><span class="line"></span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				opt.duration = jQuery.fx.speeds._default;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Normalize opt.queue - true/undefined/null -&gt; "fx"</span></span><br><span class="line">	<span class="keyword">if</span> ( opt.queue == <span class="literal">null</span> || opt.queue === <span class="literal">true</span> ) &#123;</span><br><span class="line">		opt.queue = <span class="string">"fx"</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Queueing</span></span><br><span class="line">	opt.old = opt.complete;</span><br><span class="line"></span><br><span class="line">	opt.complete = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ( isFunction( opt.old ) ) &#123;</span><br><span class="line">			opt.old.call( <span class="keyword">this</span> );</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> ( opt.queue ) &#123;</span><br><span class="line">			jQuery.dequeue( <span class="keyword">this</span>, opt.queue );</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> opt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">jQuery.fn.extend( &#123;</span><br><span class="line">	animate: <span class="function"><span class="keyword">function</span>(<span class="params"> prop, speed, easing, callback </span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> empty = jQuery.isEmptyObject( prop ),</span><br><span class="line">			optall = jQuery.speed( speed, easing, callback ),</span><br><span class="line">			doAnimation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Operate on a copy of prop so per-property easing won't be lost</span></span><br><span class="line">				<span class="keyword">var</span> anim = Animation( <span class="keyword">this</span>, jQuery.extend( &#123;&#125;, prop ), optall );</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Empty animations, or finishing resolves immediately</span></span><br><span class="line">				<span class="keyword">if</span> ( empty || dataPriv.get( <span class="keyword">this</span>, <span class="string">"finish"</span> ) ) &#123;</span><br><span class="line">					anim.stop( <span class="literal">true</span> );</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;;</span><br><span class="line">			doAnimation.finish = doAnimation;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> empty || optall.queue === <span class="literal">false</span> ?</span><br><span class="line">			<span class="keyword">this</span>.each( doAnimation ) :</span><br><span class="line">			<span class="keyword">this</span>.queue( optall.queue, doAnimation );</span><br><span class="line">	&#125;,</span><br><span class="line">	stop: <span class="function"><span class="keyword">function</span>(<span class="params"> type, clearQueue, gotoEnd </span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> stopQueue = <span class="function"><span class="keyword">function</span>(<span class="params"> hooks </span>) </span>&#123;</span><br><span class="line">			<span class="keyword">var</span> stop = hooks.stop;</span><br><span class="line">			<span class="keyword">delete</span> hooks.stop;</span><br><span class="line">			stop( gotoEnd );</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> ( <span class="keyword">typeof</span> type !== <span class="string">"string"</span> ) &#123;</span><br><span class="line">			gotoEnd = clearQueue;</span><br><span class="line">			clearQueue = type;</span><br><span class="line">			type = <span class="literal">undefined</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> ( clearQueue &amp;&amp; type !== <span class="literal">false</span> ) &#123;</span><br><span class="line">			<span class="keyword">this</span>.queue( type || <span class="string">"fx"</span>, [] );</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.each( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">var</span> dequeue = <span class="literal">true</span>,</span><br><span class="line">				index = type != <span class="literal">null</span> &amp;&amp; type + <span class="string">"queueHooks"</span>,</span><br><span class="line">				timers = jQuery.timers,</span><br><span class="line">				data = dataPriv.get( <span class="keyword">this</span> );</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> ( index ) &#123;</span><br><span class="line">				<span class="keyword">if</span> ( data[ index ] &amp;&amp; data[ index ].stop ) &#123;</span><br><span class="line">					stopQueue( data[ index ] );</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">for</span> ( index <span class="keyword">in</span> data ) &#123;</span><br><span class="line">					<span class="keyword">if</span> ( data[ index ] &amp;&amp; data[ index ].stop &amp;&amp; rrun.test( index ) ) &#123;</span><br><span class="line">						stopQueue( data[ index ] );</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> ( index = timers.length; index--; ) &#123;</span><br><span class="line">				<span class="keyword">if</span> ( timers[ index ].elem === <span class="keyword">this</span> &amp;&amp;</span><br><span class="line">					( type == <span class="literal">null</span> || timers[ index ].queue === type ) ) &#123;</span><br><span class="line"></span><br><span class="line">					timers[ index ].anim.stop( gotoEnd );</span><br><span class="line">					dequeue = <span class="literal">false</span>;</span><br><span class="line">					timers.splice( index, <span class="number">1</span> );</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Start the next in the queue if the last step wasn't forced.</span></span><br><span class="line">			<span class="comment">// Timers currently will call their complete callbacks, which</span></span><br><span class="line">			<span class="comment">// will dequeue but only if they were gotoEnd.</span></span><br><span class="line">			<span class="keyword">if</span> ( dequeue || !gotoEnd ) &#123;</span><br><span class="line">				jQuery.dequeue( <span class="keyword">this</span>, type );</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; );</span><br><span class="line">	&#125;,</span><br><span class="line">	finish: <span class="function"><span class="keyword">function</span>(<span class="params"> type </span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ( type !== <span class="literal">false</span> ) &#123;</span><br><span class="line">			type = type || <span class="string">"fx"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.each( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">var</span> index,</span><br><span class="line">				data = dataPriv.get( <span class="keyword">this</span> ),</span><br><span class="line">				queue = data[ type + <span class="string">"queue"</span> ],</span><br><span class="line">				hooks = data[ type + <span class="string">"queueHooks"</span> ],</span><br><span class="line">				timers = jQuery.timers,</span><br><span class="line">				length = queue ? queue.length : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Enable finishing flag on private data</span></span><br><span class="line">			data.finish = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Empty the queue first</span></span><br><span class="line">			jQuery.queue( <span class="keyword">this</span>, type, [] );</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> ( hooks &amp;&amp; hooks.stop ) &#123;</span><br><span class="line">				hooks.stop.call( <span class="keyword">this</span>, <span class="literal">true</span> );</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Look for any active animations, and finish them</span></span><br><span class="line">			<span class="keyword">for</span> ( index = timers.length; index--; ) &#123;</span><br><span class="line">				<span class="keyword">if</span> ( timers[ index ].elem === <span class="keyword">this</span> &amp;&amp; timers[ index ].queue === type ) &#123;</span><br><span class="line">					timers[ index ].anim.stop( <span class="literal">true</span> );</span><br><span class="line">					timers.splice( index, <span class="number">1</span> );</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Look for any animations in the old queue and finish them</span></span><br><span class="line">			<span class="keyword">for</span> ( index = <span class="number">0</span>; index &lt; length; index++ ) &#123;</span><br><span class="line">				<span class="keyword">if</span> ( queue[ index ] &amp;&amp; queue[ index ].finish ) &#123;</span><br><span class="line">					queue[ index ].finish.call( <span class="keyword">this</span> );</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Turn off finishing flag</span></span><br><span class="line">			<span class="keyword">delete</span> data.finish;</span><br><span class="line">		&#125; );</span><br><span class="line">	&#125;</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure>
<h4 id="特殊动效"><a href="#特殊动效" class="headerlink" title="特殊动效"></a>特殊动效</h4><p>jQuery 中的特殊动效包含 toggle, show, hide, slideUp, slideDown, fadeIn, fadeOut, fadeToggle，主要为滑动及渐隐。</p>
<p>对于 toggle, show, hide，其处理逻辑为区分是即时的样式改变，还是动画。</p>
<p>对于其他样式，则需要通过 genFx 函数获取注入 Animation 函数的 props。如针对 $.slideUp 方法，genFx 函数的返回值为 { height: ‘show’, marginTop: ‘show’, paddingTop: ‘show’, marginBottom: ‘show’, paddingottom: ‘show’ }。前文已经提到，这样的数据作为参数 props 注入 Animation 函数时，将被 defaultProfilter 预处理器所拦截，并创建 tween 已更新元素的相关样式，构成滑动效果。余同</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Generate parameters to create a standard animation</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genFx</span>(<span class="params"> type, includeWidth </span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> which,</span><br><span class="line">		i = <span class="number">0</span>,</span><br><span class="line">		attrs = &#123; <span class="attr">height</span>: type &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// If we include width, step value is 1 to do all cssExpand values,</span></span><br><span class="line">	<span class="comment">// otherwise step value is 2 to skip over Left and Right</span></span><br><span class="line">	includeWidth = includeWidth ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> ( ; i &lt; <span class="number">4</span>; i += <span class="number">2</span> - includeWidth ) &#123;</span><br><span class="line">		which = cssExpand[ i ];</span><br><span class="line">		attrs[ <span class="string">"margin"</span> + which ] = attrs[ <span class="string">"padding"</span> + which ] = type;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> ( includeWidth ) &#123;</span><br><span class="line">		attrs.opacity = attrs.width = type;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> attrs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jQuery.each( [ <span class="string">"toggle"</span>, <span class="string">"show"</span>, <span class="string">"hide"</span> ], <span class="function"><span class="keyword">function</span>(<span class="params"> i, name </span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> cssFn = jQuery.fn[ name ];</span><br><span class="line">	jQuery.fn[ name ] = <span class="function"><span class="keyword">function</span>(<span class="params"> speed, easing, callback </span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> speed == <span class="literal">null</span> || <span class="keyword">typeof</span> speed === <span class="string">"boolean"</span> ?</span><br><span class="line">			cssFn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> ) :</span><br><span class="line">			<span class="keyword">this</span>.animate( genFx( name, <span class="literal">true</span> ), speed, easing, callback );</span><br><span class="line">	&#125;;</span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">jQuery.each( &#123;</span><br><span class="line">	slideDown: genFx( <span class="string">"show"</span> ),</span><br><span class="line">	slideUp: genFx( <span class="string">"hide"</span> ),</span><br><span class="line">	slideToggle: genFx( <span class="string">"toggle"</span> ),</span><br><span class="line">	fadeIn: &#123; <span class="attr">opacity</span>: <span class="string">"show"</span> &#125;,</span><br><span class="line">	fadeOut: &#123; <span class="attr">opacity</span>: <span class="string">"hide"</span> &#125;,</span><br><span class="line">	fadeToggle: &#123; <span class="attr">opacity</span>: <span class="string">"toggle"</span> &#125;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"> name, props </span>) </span>&#123;</span><br><span class="line">	jQuery.fn[ name ] = <span class="function"><span class="keyword">function</span>(<span class="params"> speed, easing, callback </span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.animate( props, speed, easing, callback );</span><br><span class="line">	&#125;;</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure>
<h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><p>这几天，我总想用一种形象化的比喻来描述自己管窥中的程序设计。有想过把它比作为流水线上的零部件加工，可使这样的形容不足以说明程序设计的复杂度。在源码阅读过程中，我发现，程序设计里对模块的使用并不像产业工人那样只是做简单的拼装。模块间的耦合度会因为设计的不合理、开发者能力的局限、问题的复杂度，而显出一定的复杂度。譬如，在 jQuery 中，queue 模块会内嵌许多针对动效的处理逻辑，基于类的形式构建程序处理的多样性会比在函数体内设置标识、或者通过传参判断，条理会更清晰明朗；在 webpack 中，module 的编译流程会散落在多个模块中，各个模块间的关联性并不是那么容易理清。程序设计并不像对汽车零部件的加工，走完这道工序，就是那一道工序。它更像从史记中理出某个历史事件，比如汉武帝听从大行王恢的建议在马邑对匈奴设伏，事件的枝节会散落在各个人物传记中；各方人物的心理也小挖掘；针对史料，又需要摸索作者的曲笔、晦言；当把事件置入历史长河、国内外局势中，则需要作一番更深远的考量。换回到工业层面，也许可以把程序设计思想为，模块就好比一台可以加工多种产品的设备，模块间的铰链就好比产品在多个设备中周转，程序设计像是创建一个工厂、一套工程，而不止于一个产品。</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol>
<li><p>参考 Java 中多线程 Thread 的设计，使用类的形式构建 Animation 模块。</p>
</li>
<li><p>是否能构建一个独立的流程控制器，用于在制作模块时，控制其执行流程，并对外提供钩子。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>frontend</category>
        <category>library</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/2018/05/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>状态模式(Strategy pattern，也称为算法簇模式)的主要实现逻辑为，构建多个策略类用于封装不同的算法，并将这些算法的其中一个以引用形式注入给上下文对象，以使上下文对象可以将其行为委托给策略类处理。相较于<a href="http://xzfyu.com/2018/03/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/">状态模式</a>内部封装了状态切换，上下文对象的行为多数委托给状态对象加以处理，策略模式委托给策略类的处理通常只是单个行为，即算法，并且，设置策略（即替换算法）的过程由外部调用者完成。</p>
<p>《设计模式:可复用面向对象软件的基础》一书将状态模式描述为：</p>
<p>Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently fromclients that use it.</p>
<h2 id="经典实现"><a href="#经典实现" class="headerlink" title="经典实现"></a>经典实现</h2><p>策略模式包含下列组件：</p>
<ul>
<li>Context: 以引用对象形式持有某个 ConcreteStrategy，对外暴露的交互接口通过将行为委托给 ConcreteStrategy 实现。</li>
<li>Strategy: 策略类，定义算法的抽象接口。</li>
<li>ConcreteStrategy: 具体策略子类，实现 Strategy 抽象类中定义的算法。</li>
</ul>
<p>以下代码使用策略模式实现了排序算法，通过 ArrayList 实例的 setSortStragery 方法即可切换排序算法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">SortPolicy</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(context)&#123;</span><br><span class="line">    <span class="keyword">this</span>.context = context;<span class="comment">// 通过引用属性访问 Context 实例，可访问实例属性，以处理状态切换操作；可改为传参实现</span></span><br><span class="line">  &#125;</span><br><span class="line">  sort()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 冒泡排序，比较相邻元素，将最小值左移</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> <span class="keyword">extends</span> <span class="title">SortPolicy</span> </span>&#123;</span><br><span class="line">  sort()&#123;</span><br><span class="line">    <span class="keyword">const</span> arr = <span class="keyword">this</span>.context.target;</span><br><span class="line">    <span class="keyword">const</span> len = arr.length;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++ )&#123;</span><br><span class="line">      <span class="keyword">for</span> ( <span class="keyword">let</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( arr[j] &gt; arr[j+<span class="number">1</span>] ) </span><br><span class="line">          <span class="keyword">this</span>.context.swap(j, j + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择排序，选取最小值，排在左侧</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SelectionSort</span> <span class="keyword">extends</span> <span class="title">SortPolicy</span> </span>&#123;</span><br><span class="line">  sort()&#123;</span><br><span class="line">    <span class="keyword">const</span> arr = <span class="keyword">this</span>.context.target;</span><br><span class="line">    <span class="keyword">const</span> len = arr.length;</span><br><span class="line">    <span class="keyword">let</span> minIndex;<span class="comment">// 最小值序号</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++ )&#123;</span><br><span class="line">      minIndex = i;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> ( <span class="keyword">let</span> j = i; j &lt; len; j++ )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( arr[minIndex] &gt; arr[j] ) </span><br><span class="line">          minIndex = j;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ( i !== minIndex )</span><br><span class="line">        <span class="keyword">this</span>.context.swap(i, minIndex);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入排序，将后一位比较项顺序插入到之前已排序的数组中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InsertionSort</span> <span class="keyword">extends</span> <span class="title">SortPolicy</span> </span>&#123;</span><br><span class="line">  sort()&#123;</span><br><span class="line">    <span class="keyword">const</span> arr = <span class="keyword">this</span>.context.target;</span><br><span class="line">    <span class="keyword">const</span> len = arr.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">1</span>; i &lt; length; i++ )&#123;</span><br><span class="line">      <span class="keyword">let</span> j = i;</span><br><span class="line">      <span class="keyword">let</span> temp = arr[i];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> ( j &gt; <span class="number">0</span> &amp;&amp; arr[j - <span class="number">1</span>] &gt; temp )&#123;</span><br><span class="line">        arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">        j--;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      arr[j] = temp;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序，将数组项拆分后分别排序，再合并排序</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> <span class="keyword">extends</span> <span class="title">SortPolicy</span> </span>&#123;</span><br><span class="line">  sort()&#123;</span><br><span class="line">    <span class="keyword">const</span> arr = <span class="keyword">this</span>.context.target;</span><br><span class="line">    <span class="keyword">this</span>.mergeSortRec(arr);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 分治</span></span><br><span class="line">  mergeSortRec(arr)&#123;</span><br><span class="line">    <span class="keyword">const</span> len = arr.length;</span><br><span class="line">    <span class="keyword">if</span> ( len === <span class="number">1</span> ) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> mid = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">let</span> left = arr.slice(<span class="number">0</span>, mid);</span><br><span class="line">    <span class="keyword">let</span> right = arr.slice(mid, len);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.merge(<span class="keyword">this</span>.mergeSortRec(left), <span class="keyword">this</span>.mergeSortRec(right));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 合并两个已排序数组</span></span><br><span class="line">  merge(left, right)&#123;</span><br><span class="line">    <span class="keyword">const</span> leftLen = left.length;</span><br><span class="line">    <span class="keyword">const</span> rightLen = right.length;</span><br><span class="line">    <span class="keyword">let</span> leftIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> rightIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ( leftIndex &lt; leftLen &amp;&amp; rightIndex &lt; rightLen )&#123;</span><br><span class="line">      <span class="keyword">if</span> ( left[leftIndex] &lt; right[rightIndex] )</span><br><span class="line">        result.push(left[leftIndex++]);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        result.push(right[rightIndex++]);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ( leftIndex &lt; leftLen )&#123;</span><br><span class="line">      result.push(left[leftIndex++]);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ( rightIndex &lt; rightLen )&#123;</span><br><span class="line">      result.push(right[rightIndex++]);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速排序，选取中间项，将左右两边元素按和中间相的比较结果对调，递归该过程，实现数组排序</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> <span class="keyword">extends</span> <span class="title">SortPolicy</span> </span>&#123;</span><br><span class="line">  sort()&#123;</span><br><span class="line">    <span class="keyword">const</span> arr = <span class="keyword">this</span>.context.target;</span><br><span class="line">    <span class="keyword">const</span> len = arr.length;</span><br><span class="line">    <span class="keyword">this</span>.quick(arr, <span class="number">0</span>, len);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 递归，实现分治</span></span><br><span class="line">  quick(arr, left, right)&#123;</span><br><span class="line">    <span class="keyword">const</span> len = arr.length;</span><br><span class="line">    <span class="keyword">let</span> index;</span><br><span class="line">    <span class="keyword">if</span> ( len &gt; <span class="number">1</span> )&#123;</span><br><span class="line">      index = <span class="keyword">this</span>.partition(arr, left, right);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ( left &lt; index <span class="number">-1</span> )</span><br><span class="line">        <span class="keyword">this</span>.quick(arr, left, index - <span class="number">1</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> ( index &lt; right )</span><br><span class="line">        <span class="keyword">this</span>.quick(arr, index, right);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 按中间项对调元素，大值放在右边，小值放在左边</span></span><br><span class="line">  partition(arr, left, right)&#123;</span><br><span class="line">    <span class="keyword">let</span> pivot = arr[<span class="built_in">Math</span>.floor((right + left) / <span class="number">2</span>)];</span><br><span class="line">    <span class="keyword">let</span> i = left;</span><br><span class="line">    <span class="keyword">let</span> j = right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ( i &lt;= j )&#123;</span><br><span class="line">      <span class="keyword">while</span> ( arr[i] &lt; pivot )&#123;</span><br><span class="line">        i++;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> ( arr[j] &gt; pivot )&#123;</span><br><span class="line">        j--;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ( i &lt;= j )&#123;</span><br><span class="line">        <span class="keyword">this</span>.context.swap(arr, i, j);</span><br><span class="line">        i++;</span><br><span class="line">        j--;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆排序</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> <span class="keyword">extends</span> <span class="title">SortPolicy</span> </span>&#123;</span><br><span class="line">  sort()&#123;</span><br><span class="line">    <span class="keyword">const</span> arr = <span class="keyword">this</span>.context.target;</span><br><span class="line">    <span class="keyword">let</span> heapSize = arr.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.buildHeap(arr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ( heapSize &gt; <span class="number">1</span> )&#123;</span><br><span class="line">      heapSize--;</span><br><span class="line">      <span class="keyword">this</span>.context.swap(arr, <span class="number">0</span>, heapSize);</span><br><span class="line">      <span class="keyword">this</span>.heapify(arr, heapSize, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  buildHeap(arr)&#123;</span><br><span class="line">    <span class="keyword">const</span> heapSize = arr.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="built_in">Math</span>.floor(heapSize / <span class="number">2</span>); i &gt;= <span class="number">0</span>; i-- )&#123;</span><br><span class="line">      <span class="keyword">this</span>.heapify(arr, heapSize, i);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  heapify(arr, heapSize, i)&#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> right = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> largest = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( left &lt; heapSize &amp;&amp; arr[left] &gt; arr[largest] )</span><br><span class="line">      largest = left;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( right &lt; heapSize &amp;&amp; arr[right] &gt; arr[largest] )</span><br><span class="line">      largest = right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( largest !== i )&#123;</span><br><span class="line">      <span class="keyword">this</span>.context.swap(arr, i, largest);</span><br><span class="line">      <span class="keyword">this</span>.heapify(arr, heapSize, largest);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">this</span>.target = [];</span><br><span class="line">    <span class="keyword">this</span>.sortStragery = <span class="keyword">new</span> BubbleSort(<span class="keyword">this</span>);<span class="comment">// 排序策略</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  insert(item)&#123;</span><br><span class="line">    <span class="keyword">this</span>.target.push(item);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 元素互换</span></span><br><span class="line">  swap(i, j)&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = <span class="keyword">this</span>.target;</span><br><span class="line">    <span class="keyword">let</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setSortStragery(Stragery)&#123;</span><br><span class="line">    <span class="keyword">this</span>.sortStragery = <span class="keyword">new</span> Stragery(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sort()&#123;</span><br><span class="line">    <span class="keyword">this</span>.sortStragery.sort();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.target.join();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>策略模式需要注意的点：</p>
<ol>
<li>调用者需要对策略模式提供的算法足够了解。</li>
<li>Context 类既可以通过调用时向 ConcreteStrategy 具体策略子类注入参数实现，也可以将自身作为引用存储在 ConcreteStrategy 具体策略子类中。同时 ConcreteStrategy 具体策略子类可以从 Strategy 抽象接口继承属性，其自身也可以实现为有状态值的。</li>
<li>Context 类可设置多个，以针对不同的需求，如不同的设备。</li>
</ol>
<h2 id="js-中的策略模式"><a href="#js-中的策略模式" class="headerlink" title="js 中的策略模式"></a>js 中的策略模式</h2><p>同<a href="http://xzfyu.com/2018/03/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/">状态模式</a>，js 可以使用对象字面量声明多个策略子类，通过访问对象属性的方式调用算法。</p>
<h3 id="动效算法切换"><a href="#动效算法切换" class="headerlink" title="动效算法切换"></a>动效算法切换</h3><p>本节以前端动效为例，试图说明策略模式在该领域中的应用。读者若想对前端动效有更深入的理解，可参见笔者的另一篇文章，<a href="http://xzfyu.com/2018/05/20/jquery/%E5%8A%A8%E6%95%88%E5%88%86%E6%9E%90/">jquery 动效分析</a>。</p>
<p>动效实现的基本数学思想是通过动画执行时长 duration、起始位置 beginning val、结束位置(即要变化的总量) change 计算动画已执行时间 timestamp 的所处位置 pos，即函数 pos = fn(t, b, c, d)。在动效中，位置这个概念会被起始样式和结束样式所替换。策略模式的用武之地即在于设定不同的缓动函数，以计算当前样式值。</p>
<p>在表达式 pos = fn(t, b, c, d) 中，参数 t 动画已执行时间, b 起始样式 由程序计算获得，参数 c 结束样式, d 动画总时长 由调用方提供。为扼要说明起见，示例代码将不提供计算样式和设置样式值的 getStyles, setStyles 方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Easings = &#123;</span><br><span class="line">  linear(t, b, c, d)&#123;</span><br><span class="line">    <span class="keyword">return</span> c * t / d + b;</span><br><span class="line">  &#125;,</span><br><span class="line">  easeIn(t, b, c, d)&#123;</span><br><span class="line">    <span class="keyword">return</span> c * (t / d) * t + b;</span><br><span class="line">  &#125;,</span><br><span class="line">  easeOut(t, b, c, d)&#123;</span><br><span class="line">    <span class="keyword">return</span> -c * (t / d) * (t - <span class="number">2</span>) + b;</span><br><span class="line">  &#125;,</span><br><span class="line">  easeInOut(t, b, c, d)&#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="number">2</span>t / d &lt; <span class="number">1</span> ) <span class="keyword">return</span> c / <span class="number">2</span> * t * t + b;</span><br><span class="line">    <span class="keyword">return</span> - c / <span class="number">2</span> * ((--t) * (t - <span class="number">2</span>) - <span class="number">1</span>) + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">  node = <span class="literal">null</span>;</span><br><span class="line">  startTime = <span class="number">0</span>;</span><br><span class="line">  startStyles = <span class="literal">null</span>;</span><br><span class="line">  endStyles = <span class="literal">null</span>;</span><br><span class="line">  duration = <span class="literal">null</span>;</span><br><span class="line">  easing = <span class="literal">null</span>;</span><br><span class="line">  running = <span class="literal">false</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span>(node, styles, duration, easing)&#123;</span><br><span class="line">    <span class="keyword">this</span>.node = node;</span><br><span class="line">    <span class="keyword">this</span>.startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>;</span><br><span class="line">    <span class="keyword">this</span>.startStyles = getStyles(node);</span><br><span class="line">    <span class="keyword">this</span>.endStyles = styles;</span><br><span class="line">    <span class="keyword">this</span>.duration = duration;</span><br><span class="line">    <span class="keyword">this</span>.easing = Easings[easing];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.run();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.running = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      that.tween();</span><br><span class="line">      <span class="keyword">if</span> ( !running ) clearInterval(timer);</span><br><span class="line">    &#125;, <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tween()&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; node, startTime, startStyles, endStyles, duration, easing &#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> currentTime = +<span class="keyword">new</span> <span class="built_in">Date</span>;</span><br><span class="line">    <span class="keyword">const</span> t = currentTime - startTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( t &gt;= <span class="keyword">this</span>.duration )&#123;</span><br><span class="line">      setStyles(node, endStyles);</span><br><span class="line">      <span class="keyword">this</span>.running = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> currentStyles = &#123;&#125;;</span><br><span class="line">    <span class="built_in">Object</span>.keys(endStyles).map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> startStyle = startStyles[key];</span><br><span class="line">      <span class="keyword">let</span> endStyle = endStyles[key];</span><br><span class="line"></span><br><span class="line">      currentStyles[key] = easing(t, startStyle, endStyle, duration);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    setStyles(<span class="keyword">this</span>.node, currentStyles);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>上述代码中，由调用方提供缓动函数算法名，animation 实例将根据将通过指定的缓动函数计算节点的当前样式，并作相应更新。关于前端动效（包含缓动函数，动画队列等）的细微说明，笔者将在后续的文章加以展开。</p>
<h3 id="校验算法切换"><a href="#校验算法切换" class="headerlink" title="校验算法切换"></a>校验算法切换</h3><p>策略模式也可以应用于数据校验中，即通过对某个字段设定校验规则，通过该规则从校验函数集合中选取函数，并对相应的数据做出校验。若需深入理解数据校验过程，可参看笔者的另一篇文章 <a href="http://xzfyu.com/2018/01/24/%E6%B5%85%E6%9E%90async-validator%E6%BA%90%E7%A0%81/">浅析async-validator源码</a>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> stratrgies = &#123;</span><br><span class="line">  notEmpty(value, rule)&#123;</span><br><span class="line">    <span class="keyword">if</span> ( value === <span class="string">''</span> ) <span class="keyword">return</span> rule.msg;</span><br><span class="line">  &#125;,</span><br><span class="line">  minLength(value, rule)&#123;</span><br><span class="line">    <span class="keyword">if</span> ( value.length &lt; rule.length ) <span class="keyword">return</span> rule.msg;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.rules = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(rules)&#123;</span><br><span class="line">    <span class="keyword">this</span>.rules = rules;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  validate(data)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; rules &#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> errors = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.keys(data).map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> rule = rules[key];</span><br><span class="line">      <span class="keyword">const</span> value = data[key];</span><br><span class="line">      <span class="keyword">const</span> validateMethod = stratrgies[rule.type];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> msg = validateMethod(value, rule);</span><br><span class="line">      <span class="keyword">if</span> ( msg )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( !errors ) errors = &#123;&#125;;</span><br><span class="line">        errors[key] = msg;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> errors;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[设计模式:可复用面向对象软件的基础]<br>[Javascript 设计模式和开发实践 - 曾探]</p>
]]></content>
      <categories>
        <category>计算机科学</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>js设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>状态模式</title>
    <url>/2018/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>状态模式(State pattern) 的主要处理逻辑为，构建多个状态对象(state object)以维护特定状态下的行为集，和一个上下文对象(context)以引用形式维护与当前状态对应的状态对象，并将与状态相关的行为委托给这个状态对象加以处理；当状态更新时，上下文对象将重设其实际引用的状态对象，而其行为也将得到变更。通常，状态以标识符形式（有时候表现为内部数据值，即除了标识符以外，还有额外的数据）存储，在编写上下文对象的行为时，会使用大量的条件语句，通过当前的状态值判断实际需要执行的动作；对于新添加的状态，上下文对象的行为也需要相应改变其处理逻辑。当状态以引用对象的形式存储后，状态对象的行为可直接调用其引用的状态对象的方法；对于新添加的状态，只需要构建新的状态对象，即可加以实现。</p>
<p>状态模式的表现即如《设计模式:可复用面向对象软件的基础》一书中所说的：</p>
<p>Allow an object to alter its behavior when its internal state changes.The object will appear to change its class.</p>
<h2 id="经典实现"><a href="#经典实现" class="headerlink" title="经典实现"></a>经典实现</h2><p>状态模式包含下列组件：</p>
<ul>
<li>Context: 定义交互接口，以引用对象形式持有某个 ConcreteState，其行为通过委托给 ConcreteState 实现；当状态更新时，其持有的 ConcreteState 引用也将得到更新。</li>
<li>State: 状态对象，定义行为的抽象类。</li>
<li>ConcreteState: 具体状态子类，实现 State 抽象类中定义的行为。</li>
</ul>
<p>使用状态模式的效果：</p>
<ol>
<li>使用特定的类维护特定状态的行为，该类可以共享，且不同状态的类之间相互没有耦合。</li>
<li>状态转换更加显式化。从 Context 的角度看，状态转换只需更新其下引用的状态对象，其过程是原子的。而以内部数据值存储状态时，更新状态时，需要同时更新多个内部数据值。</li>
</ol>
<p>以下载状态为例，其简单实现为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// typescript 编码</span></span><br><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">State</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(context)&#123;</span><br><span class="line">    <span class="keyword">super</span>(context);</span><br><span class="line">    <span class="keyword">this</span>.context = context;<span class="comment">// 通过引用属性访问 Context 实例，可访问实例属性，以处理状态切换操作；可改为传参实现</span></span><br><span class="line">  &#125;</span><br><span class="line">  download()&#123;&#125;</span><br><span class="line">  pause()&#123;&#125;</span><br><span class="line">  fail()&#123;&#125;</span><br><span class="line">  finish()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadyState</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">  @override</span><br><span class="line">  download()&#123;</span><br><span class="line">    <span class="keyword">this</span>.context.setState(<span class="keyword">this</span>.context.downloadingState());</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Start Download!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  pause()&#123;&#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  fail()&#123;&#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  finish()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DownLoadState, PauseState, FailState, FinishState 实现</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownLoad</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">this</span>.readyState = <span class="keyword">new</span> ReadyState(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.downLoadState = <span class="keyword">new</span> DownLoadState(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.pauseState = <span class="keyword">new</span> PauseState(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.failState = <span class="keyword">new</span> FailState(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.finishState = <span class="keyword">new</span> FinishState(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="keyword">this</span>.readyState;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  download()&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.download();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pause()&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.pause();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fail()&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.fail();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  finish()&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.finish();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setState(State)&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = State;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>上述实现存在的问题：</p>
<ol>
<li>状态转换在 ConcreteState 具体状态子类中实现，这样 ConcreteState 就存在相互依赖关系，其中一个必须知道后继状态是哪一个。同时对于状态转换策略不同的业务场景，也不能共享状态对象。状态转换也可以放在 Context 中完成，这样做不利于状态转换的扩展，同时，状态转换较为复杂时（如开叉后再汇合，就像 git 的提交记录），其中的处理逻辑就会显得繁复。</li>
<li>状态对象在 Context 初始化过程中即予创建，且始终不销毁，而不是在需要使用的时候再行创建，使用完以后即予销毁。状态变更较为频繁的场景推荐在 Context 初始化过程中一次性创建所有状态对象；状态变更不频繁且初始状态未知的场景推荐使用即时创建状态对象。</li>
</ol>
<p>因此，实现可以改写为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用时创建状态对象，状态切换仍由状态对象完成</span></span><br><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">State</span></span>&#123;</span><br><span class="line">  download(context)&#123;&#125;</span><br><span class="line">  pause(context)&#123;&#125;</span><br><span class="line">  fail(context)&#123;&#125;</span><br><span class="line">  finish(context)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadyState</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">  @override</span><br><span class="line">  download(context)&#123;</span><br><span class="line">    context.setState(<span class="keyword">new</span> DownLoadState());</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Start Download!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  pause(context)&#123;&#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  fail(context)&#123;&#125;</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  finish(context)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DownLoadState, PauseState, FailState, FinishState 实现</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownLoad</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="keyword">new</span> ReadyState(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  download()&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.download(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pause()&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.pause(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fail()&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.fail(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  finish()&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.finish(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setState(State)&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = State;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="js-中的状态模式"><a href="#js-中的状态模式" class="headerlink" title="js 中的状态模式"></a>js 中的状态模式</h2><p>在 js 中，可直接使用对象字面量声明状态对象，同时，借助于 Function.prototype.call 方法可以将上下文对象的行为委托给状态对象加以处理。实现代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> FSM = &#123;</span><br><span class="line">  ready: &#123;</span><br><span class="line">    download: <span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">      <span class="keyword">this</span>.state = FSM.download;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Start Download!"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    pause: <span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;,</span><br><span class="line">    fail: <span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;,</span><br><span class="line">    finish: <span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  download: &#123;</span><br><span class="line">    download: <span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;,</span><br><span class="line">    pause: <span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">      <span class="keyword">this</span>.state = FSM.pause;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Download is paused!"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    fail: <span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">      <span class="keyword">this</span>.state = FSM.fail;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Download is failed!"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    finish: <span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">      <span class="keyword">this</span>.state = FSM.finish;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Download is finished!"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// pause, fail, success 状态实现</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownLoad</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = FSM.ready;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  download()&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.download.call(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pause()&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.pause.call(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fail()&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.fail.call(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  finish()&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.finish.call(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将上述代码中 Function.prototype.call 方法作进一步封装，可实现为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> delegate = <span class="function">(<span class="params">context, delegation</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    download: <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123; </span><br><span class="line">      <span class="keyword">return</span> delegation.download.call(context, ...args);</span><br><span class="line">    &#125;,</span><br><span class="line">    pause: <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123; </span><br><span class="line">      <span class="keyword">return</span> delegation.pause.call(context, ...args);</span><br><span class="line">    &#125;,</span><br><span class="line">    fail: <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123; </span><br><span class="line">      <span class="keyword">return</span> delegation.fail.call(context, ...args);</span><br><span class="line">    &#125;,</span><br><span class="line">    finish: <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123; </span><br><span class="line">      <span class="keyword">return</span> delegation.finish.call(context, ...args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> FSM = &#123;</span><br><span class="line">  ready: &#123;</span><br><span class="line">    download: <span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">      <span class="keyword">this</span>.state = <span class="keyword">this</span>.download;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Start Download!"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    pause: <span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;,</span><br><span class="line">    fail: <span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;,</span><br><span class="line">    finish: <span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  download: &#123;</span><br><span class="line">    download: <span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;,</span><br><span class="line">    pause: <span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">      <span class="keyword">this</span>.state = <span class="keyword">this</span>.pause;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Download is paused!"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    fail: <span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">      <span class="keyword">this</span>.state = <span class="keyword">this</span>.fail;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Download is failed!"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    finish: <span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">      <span class="keyword">this</span>.state = <span class="keyword">this</span>.finish;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Download is finished!"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// pause, fail, success 状态实现</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownLoad</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">this</span>.ready = delegate(<span class="keyword">this</span>, FSM.ready);</span><br><span class="line">    <span class="keyword">this</span>.download = delegate(<span class="keyword">this</span>, FSM.download);</span><br><span class="line">    <span class="keyword">this</span>.pause = delegate(<span class="keyword">this</span>, FSM.pause);</span><br><span class="line">    <span class="keyword">this</span>.fail = delegate(<span class="keyword">this</span>, FSM.fail);</span><br><span class="line">    <span class="keyword">this</span>.success = delegate(<span class="keyword">this</span>, FSM.success);</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="keyword">this</span>.ready;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  download()&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.download();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pause()&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.pause();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fail()&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.fail(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  finish()&#123;</span><br><span class="line">    <span class="keyword">this</span>.state.finish(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过 Proxy 代理实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> FSM = &#123;</span><br><span class="line">  ready: &#123;</span><br><span class="line">    download: <span class="function">(<span class="params">context</span>) =&gt;</span> &#123; </span><br><span class="line">      context.state = FSM.download;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Start Download!"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    pause: <span class="function">(<span class="params">context</span>) =&gt;</span> &#123; &#125;,</span><br><span class="line">    fail: <span class="function">(<span class="params">context</span>) =&gt;</span> &#123; &#125;,</span><br><span class="line">    finish: <span class="function">(<span class="params">context</span>) =&gt;</span> &#123; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  download: &#123;</span><br><span class="line">    download: <span class="function">(<span class="params">context</span>) =&gt;</span> &#123; &#125;,</span><br><span class="line">    pause: <span class="function">(<span class="params">context</span>) =&gt;</span> &#123; </span><br><span class="line">      context.state = FSM.pause;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Download is paused!"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    fail: <span class="function">(<span class="params">context</span>) =&gt;</span> &#123; </span><br><span class="line">      context.state = <span class="keyword">this</span>.fail;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Download is failed!"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    finish: <span class="function">(<span class="params">context</span>) =&gt;</span> &#123; </span><br><span class="line">      context.state = <span class="keyword">this</span>.finish;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Download is finished!"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// pause, fail, success 状态实现</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownLoad</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">this</span>.state = FSM.ready;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> download = <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="keyword">new</span> Download(), &#123;</span><br><span class="line">  <span class="keyword">get</span>(target, propKey, receiver)&#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">Object</span>.keys(target.state).indexOf(propKey) !== <span class="number">-1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        target.state[propKey](target, ...args);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> target[propKey];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="表驱动的状态模式"><a href="#表驱动的状态模式" class="headerlink" title="表驱动的状态模式"></a>表驱动的状态模式</h2><p>表驱动的状态模式，其处理逻辑为使用表结构约定每种状态在特定条件下（该条件也可以是执行状态转换逻辑的函数名）的后继状态为谁，就此实现状态转换。</p>
<p>借助于 Proxy 代理，实现表驱动的简易代码为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> FSM = &#123;</span><br><span class="line">  ready: &#123;</span><br><span class="line">    download: <span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Start Download!"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    pause: <span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;,</span><br><span class="line">    fail: <span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;,</span><br><span class="line">    finish: <span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  download: &#123;</span><br><span class="line">    download: <span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;,</span><br><span class="line">    pause: <span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Download is paused!"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    fail: <span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Download is failed!"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    finish: <span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Download is finished!"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// pause, fail, success 状态实现</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownLoad</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="comment">// 状态转换规则</span></span><br><span class="line">    <span class="keyword">this</span>.rules = &#123;</span><br><span class="line">      ready: [&#123; <span class="attr">transition</span>: <span class="string">'download'</span>, <span class="attr">to</span>: <span class="string">'downloading'</span> &#125;],</span><br><span class="line">      download: [&#123; </span><br><span class="line">        transition: <span class="string">'pause'</span>, <span class="attr">to</span>: <span class="string">'paused'</span> </span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        transition: <span class="string">'fail'</span>, <span class="attr">to</span>: <span class="string">'failed'</span> </span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        transition: <span class="string">'finish'</span>, <span class="attr">to</span>: <span class="string">'finished'</span> </span><br><span class="line">      &#125;],</span><br><span class="line">      pause: [&#123; <span class="attr">transition</span>: <span class="string">'download'</span>, <span class="attr">to</span>: <span class="string">'downloading'</span> &#125;]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'ready'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> download = <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="keyword">new</span> Download(), &#123;</span><br><span class="line">  <span class="keyword">get</span>(target, propKey, receiver)&#123;</span><br><span class="line">    <span class="keyword">const</span> state = target.state;</span><br><span class="line">    <span class="keyword">const</span> stateObject = FSM[state];</span><br><span class="line">    <span class="keyword">const</span> rules = target.rules[state];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">Object</span>.keys(stateObject).indexOf(propKey) !== <span class="number">-1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">        stateObject[propKey](target, rules, ...args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 状态装换</span></span><br><span class="line">        <span class="keyword">const</span> rule = rules.filter(<span class="function"><span class="params">rl</span> =&gt;</span> rl.transition === propKey)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> ( rule ) target.state = rule.to;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> target[propKey];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>通过上述代码可以发现，基于表结构实现的状态转换需要从表中查询后继状态，没有函数调用直观便捷，同时，状态转换过程需要扩展的动作也难以添加。</p>
<h3 id="javascript-state-machine"><a href="#javascript-state-machine" class="headerlink" title="javascript-state-machine"></a>javascript-state-machine</h3><p><a href="https://github.com/jakesgordon/javascript-state-machine" target="_blank" rel="noopener">javascript-state-machine</a> 是基于表结构实现的状态转换管理器。相较于状态模式使用状态对象管理状态，并借此改变上下文对象的行为，其重心在于不同状态下行为的不同，换句话说，就是不同模式下不同的业务表现。因此，《设计模式:可复用面向对象软件的基础》书中描述了 GUI 编程使用状态模式协调不同的绘图控件。而 javascript-state-machine 模块的重心在于状态转换的流程，由此种状态进入另一种状态，通过事件执行钩子函数。</p>
<p>javascript-state-machine 模块有如下几个概念：</p>
<ul>
<li>transition: 事务，设定状态切换的方法名，并制定该方法状态切换的规则，从 [from] 状态转变为 [to] 状态。当切换前的 [from] 状态不同时，可使用同一个事务定制多种状态切换规则。由 transitions = [{ name, from, to }] 选项注入。</li>
<li>state: 状态。通过 transitions 选项转换得来。特别的，transition.to 状态可以用函数形式设定，在状态转换过程中注入 states 状态集中。</li>
<li>lifecycle events: 生命周期事件，即执行钩子，分为两类，以 onBefore, onAfter 为前缀的事务执行前后的生命周期钩子，以 onEnter, onLeave 为前缀的状态变更前后的生命周期钩子。特殊的，onBeforeTransition, onLeaveState, onTransition, onEnterState, onAfterTransition 为全局声明周期钩子。事件名由 transitions 选项注入，绑定函数由 methods = { eventName: () =&gt; {} } 选项注入，或者通过调用 fsm.observer({ eventName: () =&gt; {} }) 方法注入。</li>
<li>observer: 观察者，即绑定函数。可以通过 methods 选项添加，或者通过 StateMachine 实例的 observe 方法添加，以数组形式存储对象 { event: ({ transition, from, to, fsm, event }) =&gt; {} }。当事件发生时，再取出串行执行，通过 promise 实现了异步执行机制。</li>
</ul>
<p>在 javascript-state-machine 模块的构造中，整体架构：</p>
<ul>
<li>config 模块提供 Config 类，用于管理 states, transitions, lifecycle, data, methods, plugins 等实例属性。其中 state 以 this.states 数组形式存储，transitions 以 this.transitions 数组形式存储方法名，this.map = { [from]:{ [name]: transition } } 存储转换规则（其中，transition 为 transitions 选项中的数组项，from 为 transition.from，name 为 transition.name）,this.lifecycle = { onBefore: { transition, …customTransitionName }, onAfter, on, onEnter: { state, …customStateName }, onLeave } 形式存储事件名（其中，this.lifecycle.onBefore.transition 等为全局事件名 ）。Config 还提供 transitionFor(state, transition) 用于查找切换后的状态。</li>
<li>jsm 模式提供 JSM 类，用于组织状态切换及触发钩子函数的逻辑。通过 this.config 访问 Config 实例，this.context 访问 StateMachine 实例，其 init 方法将 config.data 注入为 StateMachine 实例的属性；在 JSM 实例化过程中，又将注入到 StateMachine 实例方法的config.methods 绑定函数注入为 jsm.observers 属性中，通过 observersForEvent(event) 方法取出绑定函数，再交由 observeEvents 方法统筹一次状态变更过程中执行依序执行的事件、并执行绑定函数（以取出的 observer = { eventName: ({ transition, from, to, fsm, event }) =&gt; {} } 作为上下文，特别的，首个 observer 的就是 StateMachine 实例），最终提供 jsm.fire(transition, args) 方法将当前状态更改为 transition 事务下指定的后继状态（并导出为 stateMachine 实例的 transition 同名方法）、以及 jsm.transit(transition, from, to, args) 方法将状态转换到 to，并指定状态时的 transition, from。事件触发、执行绑定函数过程，绑定函数中的异步逻辑通过返回 promise 处理；状态变更期间，jsm.pending 属性置为真，直到状态变更完毕或报错。</li>
<li>app 模块提供 StateMachine 类，暴露用户接口。StateMachine 类实例化过程中会将 config 实例的 methods, data 属性转变为其实例属性，同时添加以 transition.name 标识的实例方法，因此三者的命名不能冲突。以 config, jsm, app 三个模块实现 StateMachine 类的好处是尽量少地暴露出交互接口。可通过 StateMachine 实例访问当前的状态 stateMachine.state，公共方法 is(state), can(transition), cannot(transition), observe({ event: () =&gt; {} }), transitions(), allTransitions(), allStates(), onInvalidTransition(transition, from, to), onPendingTransition(transition, from, to)，以及通过选线注入的实例属性或方法如 data, transitions, methods 选项。</li>
</ul>
<p>需要留意的特性包含：</p>
<ul>
<li>data 选项依赖注入。当 data 选项包含方法时，其参数依赖注入的机制通过工厂函数 StateMachine.factory 实现，创建并返回 StateMachine 的另一种构造函数，该构造函数只将参数注入为 data 方法的参数；选项由 StateMachine.factory 注入。其目的是让多个 StateMachine 实例握有不同的 data 数据，但在不同状态中定制 data 数据需要借助于常规的状态模式。</li>
<li>to 状态转换的条件性。javascript-state-machine 模块没有设置 condition 条件（在匹配 condition 条件下，才从 from 状态转换到 to 状态），而是可以用函数形式设置 to，以使切换后的状态可以在转换阶段获得。</li>
<li>插件机制。如同 Vue, mocha 的插件机制，javascript-state-machine 模块的插件在 StateMachine 实例化过程中就会执行 plugin 函数或 plugin.configure 方法，其返回值中的 methods, properties 属性注入为 StateMachine 实例的方法或属性、init, lifecycle 方法将在状态初始化及变更期间被唤起执行。插件通过 plugins 选项或者 StateMachine.plugin 静态属性注入。</li>
<li>内置 history 插件，通过 require(‘javascipt-state-machine/lib/history’) 引用，记录状态变更历史，通过 fsm.transit 方法实现回撤、前进功能。</li>
<li>内置 visualize 工具，通过 require(‘javascipt-state-machine/lib/visualize’) 引用，将状态转变为 .dot 语句，借助于 <a href="http://www.graphviz.org/" target="_blank" rel="noopener">GraphViz</a> 类库表现为图形。</li>
</ul>
<p>具体请参考 javascript-state-machine 类库文档及源码。</p>
]]></content>
      <categories>
        <category>计算机科学</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>js设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>修饰器</title>
    <url>/2018/03/17/frontend/js/Decorator/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>修饰器是 es7 中的一个提案，其本质为编译期间执行的一个函数，用于装饰类、方法、属性等，不能用于装饰函数（因为函数存在声明提升）。</p>
<p>使用 decorator(target, property?, desciptor?){} 语句声明修饰器函数，其中，参数 target 为目标函数，property 为属性，desciptor 为属性描述符，后两个参数用于装饰方法或属性的情景下。装饰类，在修饰器中直接操纵类即可；装饰方法或属性时，通过返回新的属性描述符实现。</p>
<p><em>代码段 1：装饰类</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">  target.isTestable = <span class="literal">true</span>;</span><br><span class="line">  target.prototype.isTestable = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@test</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p><em>代码段 2：装饰属性或方法</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readonly</span>(<span class="params">target, name, descriptor</span>)</span>&#123;</span><br><span class="line">  descriptor.writable = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, age, tel)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @readonly</span><br><span class="line">  id()&#123;<span class="keyword">return</span> <span class="keyword">this</span>.id&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="core-decorators"><a href="#core-decorators" class="headerlink" title="core-decorators"></a>core-decorators</h2><p><a href="https://github.com/jayphelps/core-decorators" target="_blank" rel="noopener">core-decorators.js</a> 是一个第三方模块，提供了常见的修饰器。</p>
<ol>
<li>@readonly 修饰属性或方法为只读。通过将 descriptor.writable 赋值为 false 实现。</li>
<li>@nonconfigurable 修饰属性或方法为不可配置。通过将 descriptor.configurable 赋值为 false 实现。</li>
<li>@decorate(decorator, …args) 以指定函数装饰方法或属性。通过执行 decorator(fn|value, …args) 实现，其中 fn|value 为 descriptor.get 或 target[property]。</li>
<li>@extendDescriptor 继承父类的 get/set 方法。通过 Object.getPrototypeOf(target) 获取父类实现。</li>
<li>@nonenumerable 修饰属性不可枚举。通过将 descriptor.enumerable 赋值为 false 实现。</li>
<li>@lazyInitialize 在访问时延迟赋值属性。通过在访问属性时执行 descriptor.initializer 方法实现。</li>
<li>@autobind 将方法的上下文赋值为 target，即便方法通过 fn = target.method 语句赋值给某函数 fn，在函数 fn 执行期间，其上下文仍为 target。通过 fn.bind(target) 实现。autobind 修饰器可用于装饰类。</li>
<li>@deprecate(message, {url}?)|@deprecated(message, {url}?) 在方法执行期间予以已废除提示。通过将 descriptor.value 赋值为封装了提示动作的函数实现。</li>
<li>@override 检查子类是否正确覆盖了父类的同名方法，descriptor.value 形式时校验类型是否相同；descriptor.get, descriptor.set 形式校验父类、子类是否存在对等的设置。</li>
<li>@time 打印方法的执行时间，借助于 console.time, console.timeEnd 实现，可通过改写 defaultConsole 实现自定义设置。</li>
<li>@profile 浏览器端监测方法的执行性能，借助于 console.profile, console.profileEnd 实现。</li>
</ol>
<h2 id="babel-转码"><a href="#babel-转码" class="headerlink" title="babel 转码"></a>babel 转码</h2><p>借助于 babel-plugin-transform-decorators-legacy 插件，可以将修饰符降级为 es5。</p>
<h3 id="babel-plugin-transform-decorators-legacy-原理"><a href="#babel-plugin-transform-decorators-legacy-原理" class="headerlink" title="babel-plugin-transform-decorators-legacy 原理"></a>babel-plugin-transform-decorators-legacy 原理</h3>]]></content>
      <categories>
        <category>frontend</category>
        <category>es</category>
      </categories>
      <tags>
        <tag>carrier</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 源码分析 - 数据侦测</title>
    <url>/2018/03/15/frontend/vue/%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>数据侦测，也称为数据绑定，即是监测数据的更新状况，当数据更新时，触发后续动作的执行。以伪语法的形式，可以用 <em>表达式 1</em> 概括说明。</p>
<p><em>表达式 1</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">when(data changed)&#123;</span><br><span class="line">  <span class="keyword">do</span> compute</span><br><span class="line">  <span class="keyword">do</span> reaction</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>基于 <em>表达式 1</em> ，有如下概念（基于 <a href="http://cn.mobx.js.org/" target="_blank" rel="noopener">mobx 文档</a> 整理）：</p>
<p><em>概念 1</em><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Observable: 监测数据，可以是状态，更新其值将触发执行 compute 及 reaction</span><br><span class="line">action: 促使 Observable 更新的动作，可用于收集 Observable 更新前后的状况</span><br><span class="line">compute: Observable 更新后，触发执行的动作，用于获取计算属性</span><br><span class="line">reaction: Observable 更新后，触发执行的动作，用于执行副作用</span><br><span class="line">derivations: 衍生，Observable 更新后触发动作的统称，包含 compute 及 reaction</span><br></pre></td></tr></table></figure></p>
<p>程序实现 <em>表达式 1</em> 中的逻辑，主要有两种方式。第一种方式是使用定时器周期性检测 <em>Observable</em> 数据（下文中的响应式数据，即指监测数据 <em>Observable</em>）的变更，当数据变更时，触发执行后续的动作。第二种方式是借助于硬编码或钩子，将后续执行动作添加到数据更新的过程 <em>action</em> 之后。本篇文章旨在讨论基于观察者模式（即钩子函数的底层实现）这一种解决方案。上述两种方式都聚焦于解决怎样在数据更新后、引起后续动作的执行。当使用观察者模式实现数据侦测时，所要面临的难题是，怎样推断单个 <em>Observable</em> 数据被哪些 <em>derivations</em> 订阅（也可以称为观察或监测，当数据更新时，将引起这些 <em>derivations</em> 的执行），以及单个 <em>derivations</em> 订阅了哪些 <em>Observable</em> 数据（在这些数据更新后，都会引起 <em>derivations</em> 的执行），即确定 <em>Observable</em> 和 <em>derivations</em> 的依赖关系。</p>
<p>这篇文章首先将探讨使用观察者模式实现数据侦测的基本思路（见诸 _探讨_ 一节），随后分析 <em>Vue</em> 源码对数据侦测功能的实现（见诸 <em>Vue 实现</em> 一节），其次分析数据侦测在 <em>Vue</em> 中的实际使用，表现为 <em>Vue</em> 实例的配置项以及 <em>Vue</em> 对外提供的接口（见诸 <em>Vue 应用</em> 一节），最后将借鉴 <em>mobx</em> 的 api，简单制作一个相应类库（见诸 _延伸_ 一节）。需要说明的是，无论探讨一节，还是延伸一节，都是基于笔者对 <em>Vue</em> 源码的领悟，思路也因而有所局限。对于实现数据侦测功能的多种技术方案，笔者譬如井底之蛙。在这方面，读者可自行翻阅实现了数据侦测功能的其他类库或框架，免使思维陷入这篇文章的小小格局。</p>
<p>在阅读后续章节前，读者可以酌情先了解下 <a href="http://xzfyu.com/2018/03/04/设计模式/观察者模式/">观察者模式</a>，或者跟随笔者的思路拾级而上。</p>
<h2 id="探讨"><a href="#探讨" class="headerlink" title="探讨"></a>探讨</h2><p>数据侦测用观察者模式实现的简易原理是，当访问数据时，调用 <strong>Observer.subscribe(topic, listener)</strong> 方法，以绑定函数（下文将用订阅函数代称）形式添加订阅者；当更新数据时，调用 <strong>Observer.publish(topic, …args)</strong> 方法，执行后续的动作，即调用 <strong>listener(…args)</strong> 函数。通过在更新数据前，先访问数据，就可以使绑定函数观察这份数据变更，在数据变更后自动执行绑定函数。</p>
<p><em>代码段 1</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> handlebars <span class="keyword">from</span> <span class="string">'handlebars'</span>;</span><br><span class="line"><span class="keyword">import</span> Observer <span class="keyword">from</span> <span class="string">'./observer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rerender</span>(<span class="params">key, data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> el = <span class="built_in">document</span>.getElementById(<span class="string">"entry"</span>);</span><br><span class="line">  <span class="keyword">let</span> template = el.innerHTML;</span><br><span class="line">  <span class="keyword">let</span> compiler = handlebars.compile(template);</span><br><span class="line">  <span class="keyword">let</span> html = compiler(data)</span><br><span class="line">  el.innerHTML = html;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">  data = <span class="literal">null</span>;</span><br><span class="line">  </span><br><span class="line">  construtor(data)&#123;</span><br><span class="line">    <span class="keyword">this</span>.data = data;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span>(key)&#123;</span><br><span class="line">    Observer.subscribe(key, rerender);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[key];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span>(key, val)&#123;</span><br><span class="line">    <span class="keyword">let</span> oldVal = <span class="keyword">this</span>.get(key);</span><br><span class="line">    <span class="keyword">if</span> ( oldVal !== val )&#123;</span><br><span class="line">      <span class="keyword">this</span>.data[key] = val;</span><br><span class="line">      Observer.publish(key, <span class="keyword">this</span>.data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ob = <span class="keyword">new</span> Observable(&#123; <span class="attr">name</span>: <span class="string">'jack'</span> &#125;);</span><br><span class="line">ob.set(<span class="string">'name'</span>, <span class="string">'andy'</span>);<span class="comment">// 通过执行绑定函数 rerender 重绘视图</span></span><br></pre></td></tr></table></figure></p>
<p>上述代码就是用观察者模式表现硬编码形式的 <strong>data.name = ‘andy’; rerender(data)</strong> 语句的处理逻辑。有关 <em>Observer</em> 类的实现，请参详 <a href="http://xzfyu.com/2018/03/04/设计模式/观察者模式/">观察者模式</a> 一文。然而，上述代码存在下述问题：</p>
<p><em>问题清单 1</em></p>
<ol>
<li>代码书写风格的问题。<strong>ob.set(key, val)</strong> 可否简化为 <strong>data[key] = val</strong> 形式，使其同样能唤起后续动作的执行？</li>
<li>显式指明的订阅函数和硬编码风格相差无几，对于 <em>derivations</em> 多样的业务场景并不适用，能否将其解耦，使 <em>derivations</em> 的执行过程更为灵活？</li>
</ol>
<p><em>解决方案 1</em></p>
<ol>
<li>针对 <em>问题 1</em>，可通过调用 <strong>Object.defineProperty(targer, key, descriptor)</strong> 方法，将 <em>代码段 1</em> 中 <strong>get, set</strong> 方法的处理逻辑写进访问器属性中，得到解决。而 <strong>Object.defineProperty</strong> 方法，也是 Vue 相关源码的实现内核所在。</li>
<li>针对 <em>问题 2</em>，可通过将硬编码的 <strong>rerenderView</strong> 订阅函数演化为更灵活的订阅者管理器 <em>SubscriberManager</em> 类实现。即在响应式数据变更过程中，由 <em>SubscriberManager</em> 实例实时查找同这些响应式数据相关的订阅函数，并触发订阅函数的执行。</li>
</ol>
<p>为着实现 <em>SubscriberManager</em> 类，将要面临如何解决 <em>Observable</em> 和 <em>derivations</em> 之间依赖关系管理的问题。</p>
<p><em>问题清单 2</em></p>
<ol>
<li><em>Observable</em> 和 <em>derivations</em> 的依赖关系问题。思想如由 <strong>getFullname</strong> 计算函数获得的 <strong>fullname</strong> 依赖于响应式数据中 <strong>firstname, secondname</strong> 属性的场景，即 <strong>firstname, secondname</strong> 属性变更时，将触发调用 <strong>getFullname</strong> 订阅函数的执行，而当其他属性变更时，并不触发 <strong>getFullname</strong> 的执行。<strong>getFullname</strong> 订阅函数和 <strong>firstname, secondname</strong> 监测属性有相互依赖关系。当 <strong>firstname, secondname</strong> 属性移除后，<strong>getFullname</strong> 订阅函数不再执行；当 <strong>getFullname</strong> 函数移除后，<strong>firstname, secondname</strong> 属性更新不再通知 <strong>getFullname</strong> 函数。并且，依赖关系问题不只包含当响应式数据或订阅函数移除时如何重置依赖，还包含当新增一项 <em>derivations</em> 观察的数据或者新增一项订阅 <em>Observable</em> 的函数时如何更新依赖。</li>
</ol>
<p><em>解决方案 2</em></p>
<ol>
<li>针对 <em>问题 1</em>，在没有使用 <strong>Object.defineProperty(targer, key, descriptor)</strong> 方法的场景中，可以通过 <strong>Observer.subscribe(observale, key, listener)</strong> 方式显式指明订阅函数 <strong>listener</strong> 需要在 <strong>observale[key]</strong> 数据变更后执行。这种显式指明的方式譬如手动添加，其依赖关系也必然要手动移除，需要费一番功夫才能实现自动化更新和重置依赖。虽然，可以将订阅函数 <strong>listener</strong> 以 <strong>{ bindTo: [ keyPath ], linstener }</strong> 形式存储到 <strong>observale._listening</strong> 属性中（其中，<strong>keyPath</strong> 为键路径），或者以 <strong>Map</strong> 映射存储响应式对象键路径和订阅函数，通过 <strong>id</strong> 号搜寻依赖，以避免对外暴露依赖关系。在这方面，可以参考 <a href="https://github.com/jashkenas/backbone" target="_blank" rel="noopener">backbone</a> 及 <a href="https://github.com/emberjs/ember.js" target="_blank" rel="noopener">emberjs</a> 的实现。对这两者，笔者的领悟还不够充分。</li>
<li>继上，在使用 <strong>Object.defineProperty(targer, key, descriptor)</strong> 方法的场景中，订阅函数 <strong>listener</strong> 若以 <strong>observale</strong> 为上下文，在其执行过程中并访问 <strong>this[key]</strong> 属性时，<strong>descriptor.get</strong> 方法将得到调用。可以确知的是，<strong>descriptor.get</strong> 方法在 <strong>listener</strong> 执行背景下得到调用。当使用变量缓存 <strong>listener</strong> 时（必要情况下，可再使用先进后出队列存储执行中的订阅函数数组，其意义是在多个订阅函数嵌套执行的场景中获取当前执行的订阅函数），就可以从容建立当前订阅函数 <strong>listener</strong> 和监测数据 <strong>target[key]</strong> 的互为依赖关系。</li>
</ol>
<p><em>代码段 2</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> currentSubscriber = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(reactiveData, subscriber)&#123;</span><br><span class="line">    currentSubscriber = subscriber.bind(reactiveData);</span><br><span class="line">    subscriber.call(reactiveData);</span><br><span class="line">    currentSubscriber = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubscriberManager</span> </span>&#123;</span><br><span class="line">  subscribers = [];</span><br><span class="line"></span><br><span class="line">  refreshSubscribers()&#123;</span><br><span class="line">    <span class="comment">// 实时查找订阅者</span></span><br><span class="line">    <span class="keyword">let</span> &#123; subscribers &#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> ( subscribers.indexOf(currentSubscriber) !== <span class="number">-1</span> ) </span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    subscribers.push(currentSubscriber);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  notify()&#123;</span><br><span class="line">    <span class="comment">// 通知订阅者数据已变更</span></span><br><span class="line">    <span class="keyword">this</span>.subscribers.map(<span class="function"><span class="params">subscriber</span> =&gt;</span> &#123;</span><br><span class="line">      subscriber();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertToReactiveData</span>(<span class="params">target, key, val</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> subscriberManager = <span class="keyword">new</span> SubscriberManager();<span class="comment">// target 的每个属性，都需要一个订阅者管理器</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> property = <span class="built_in">Object</span>.getOwnPropertyDescriptor(target, key);</span><br><span class="line">  <span class="keyword">if</span> (property &amp;&amp; property.configurable === <span class="literal">false</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> getter = property &amp;&amp; property.get;</span><br><span class="line">  <span class="keyword">const</span> setter = property &amp;&amp; property.set;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target, key, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    <span class="keyword">get</span>: function reactiveGetter () &#123;</span><br><span class="line">      <span class="keyword">const</span> value = getter ? getter.call(target) : val;</span><br><span class="line">      <span class="keyword">if</span> ( currentSubscriber ) subscriberManager.refreshSubscribers();</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function reactiveSetter (newVal) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = getter ? getter.call(target) : val;</span><br><span class="line">      <span class="keyword">if</span> ( newVal === value ) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">if</span> ( setter )</span><br><span class="line">        setter.call(target, newVal);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        val = newVal;</span><br><span class="line">      subscriberManager.notify();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReactiveDataManager</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(data)&#123;</span><br><span class="line">    data.__reactiveDataManager__ = <span class="keyword">this</span>;</span><br><span class="line">    <span class="built_in">Object</span>.keys(data).map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> val = data[key];</span><br><span class="line">      convertToReactiveData(data, key, val);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = &#123; <span class="attr">firstname</span>: <span class="string">'Steven'</span>, <span class="attr">secondname</span>: <span class="string">'Spielberg'</span> &#125;;</span><br><span class="line"><span class="keyword">new</span> ReactiveDataManager(data);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computeFullname</span>(<span class="params"></span>)</span>&#123;<span class="comment">// 将构建两个 SubscriberManager 实例</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`computed fullname is <span class="subst">$&#123;<span class="keyword">this</span>.firstname&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.secondname&#125;</span>.`</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.firstname&#125;</span> <span class="subst">$&#123;<span class="keyword">this</span>.secondname&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> Watcher(data, computeFullname);<span class="comment">// 'computed fullname is Steven Spielberg.'</span></span><br><span class="line"></span><br><span class="line">data.secondname = <span class="string">'Jobs'</span>;<span class="comment">// 'computed fullname is Steven Jobs.'</span></span><br></pre></td></tr></table></figure></p>
<p><em>代码段 2</em> 即为 Vue 扼要的实现逻辑，至于怎样将数组和深度嵌套的数据转变成响应式数据，以及如何重置依赖关系，将在下一节分析 Vue 源码的过程中予以说明。</p>
<h2 id="Vue-实现"><a href="#Vue-实现" class="headerlink" title="Vue 实现"></a>Vue 实现</h2><p>在 <em>Vue</em> 源码中，<strong>src/core/oberser</strong> 目录下各模块用于实现数据侦测。下文将用 <strong>oberser</strong> 包代称 <strong>src/core/oberser</strong> 目录。</p>
<p><em>目录结构 1</em><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">|--- observer </span><br><span class="line">  |--- index.js <span class="comment"># 将对象或数组转化为响应式数据</span></span><br><span class="line">  |--- array.js <span class="comment"># 提供改写数组 push 等原型方法的工具包</span></span><br><span class="line">  |--- watcher.js <span class="comment"># 将订阅函数实现为订阅者 Watcher 实例</span></span><br><span class="line">  |--- dep.js <span class="comment"># 管理响应式数据和订阅者 Watcher 的依赖关系，在 Vue 中视为 observable</span></span><br><span class="line">  └--- scheduler.js <span class="comment"># 用于调度订阅者的延迟执行</span></span><br></pre></td></tr></table></figure></p>
<p>本节主要针对 <strong>index, array, watcher, dep, scheduler</strong> 模块予以扼要分析，与 Vue 实例、重新渲染机制的交互过程将在下一节予以分析。</p>
<h3 id="响应式数据"><a href="#响应式数据" class="headerlink" title="响应式数据"></a>响应式数据</h3><p>在 <em>Vue</em> 中，<strong>index</strong> 模块提供的 <strong>new Observer(value)</strong> 类用于将普通数据 <strong>value</strong> 转化成响应式数据，当响应式数据更新时，将自动订阅函数的执行。<strong>value</strong> 的数据类型可以是对象或数组。若 <strong>value</strong> 为对象，遍历其属性，通过 <strong>defineReactive</strong> 函数将属性的存取过程转变为响应式，取值时更新依赖，赋值时触发订阅函数的执行。若 <strong>value</strong> 为数组，改写其 <strong>push, pop, shift, unshift, splice, sort, reverse</strong> 原型方法，将其变异为响应式数组，上述方法执行时将触发订阅函数的执行；并通过创建新的 <strong>Observer</strong> 实例将数组项转化为响应式数据。</p>
<p>因此，将普通数据转化为响应式数据基于 <strong>defineReactive(target, key, value)</strong> 函数。如前文所述，<strong>defineReactive</strong> 函数通过 <strong>Object.defineProperty(obj, key, descriptor)</strong> 方法改写属性描述符实现，其中，getter 方法用于更新订阅者，setter 方法用于触发订阅函数的执行。因为 obj[key] 等同于一个主题对象，因此在 defineReactive 函数执行过程，会针对每个 key 键创建一个 Dep 依赖管理实例，再由 getter 访问器属性调用 dep.depend 方法刷新依赖。刷新依赖的机制，可参见前文，也即订阅函数(在 Vue 表现为 Watcher 实例)在执行过程中需要访问 obj[key]，就可以将 watcher 实例赋值给 Dep.target 静态属性，并促使 dep 实例和 watcher 实例相互建立引用关系(其中，dep.subs 数组存储 watchcer 实例，即与主题对象相关的订阅函数；watcher.deps 数组存储 dep 实例，即与订阅函数相关的主题对象)。当 setter 访问器执行过程中(即 action 促使数据更新时。在 Vue 中，action 表现为 method)，将由 dep.notify 方法调用 dep.subs 数组中每个 watchcer 实例的update，进而执行 watcher 挂载的订阅函数。</p>
<p>当 obj 为深度嵌套的数据结构时，需要作怎样的处理才能将其转变为响应式数据？易于想到的处理方式是，遍历对象的属性，当其为复杂数据结构时，递归调用 new Observer(obj[key]) 将该属性转化为响应式数据，自顶向下(或者如backbone的实现，自底向上构建响应式数据)。Vue 另辟蹊径，既然每次调用 setter 访问器时，同样需要将 newValue 转变为响应式数据，将 obj[key] 初始值转化为 observer 实例也在属性描述符中处理。对于深度嵌套的数据结构，defineReactive 函数也多了入参 sallow，用于指定是否将复杂数据结构的子属性转化为响应式数据。</p>
<p><em>代码段 3</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// observer/array.js</span></span><br><span class="line"><span class="keyword">const</span> arrayProto = <span class="built_in">Array</span>.prototype</span><br><span class="line"><span class="keyword">const</span> arrayMethods = <span class="built_in">Object</span>.create(arrayProto)</span><br><span class="line"></span><br><span class="line">;[</span><br><span class="line">  <span class="string">'push'</span>,</span><br><span class="line">  <span class="string">'pop'</span>,</span><br><span class="line">  <span class="string">'shift'</span>,</span><br><span class="line">  <span class="string">'unshift'</span>,</span><br><span class="line">  <span class="string">'splice'</span>,</span><br><span class="line">  <span class="string">'sort'</span>,</span><br><span class="line">  <span class="string">'reverse'</span></span><br><span class="line">]</span><br><span class="line">.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">method</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// cache original method</span></span><br><span class="line">  <span class="keyword">const</span> original = arrayProto[method]</span><br><span class="line">  def(arrayMethods, method, <span class="function"><span class="keyword">function</span> <span class="title">mutator</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = original.apply(<span class="keyword">this</span>, args)</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">this</span>.__ob__</span><br><span class="line">    <span class="keyword">let</span> inserted</span><br><span class="line">    <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'push'</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'unshift'</span>:</span><br><span class="line">        inserted = args</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'splice'</span>:</span><br><span class="line">        inserted = args.slice(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (inserted) ob.observeArray(inserted)</span><br><span class="line">    ob.dep.notify()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// observer/index.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">protoAugment</span> (<span class="params">target, src: Object, keys: any</span>) </span>&#123;</span><br><span class="line">  target.__proto__ = src</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyAugment</span> (<span class="params">target: Object, src: Object, keys: Array&lt;string&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = keys.length; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i]</span><br><span class="line">    def(target, key, src[key])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dependArray</span> (<span class="params">value: Array&lt;any&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> e, i = <span class="number">0</span>, l = value.length; i &lt; l; i++) &#123;</span><br><span class="line">    e = value[i]</span><br><span class="line">    e &amp;&amp; e.__ob__ &amp;&amp; e.__ob__.dep.depend()</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(e)) &#123;</span><br><span class="line">      dependArray(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  value: any;</span><br><span class="line">  dep: Dep;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> (value: any) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value</span><br><span class="line">    <span class="keyword">this</span>.dep = <span class="keyword">new</span> Dep()</span><br><span class="line">    def(value, <span class="string">'__ob__'</span>, <span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">      <span class="keyword">const</span> augment = hasProto</span><br><span class="line">        ? protoAugment<span class="comment">// protoAugment(target, src) 执行 target.__proto__ = src</span></span><br><span class="line">        : copyAugment<span class="comment">// copyAugment(target, src, keys) 遍历 keys，将 src[key] 赋值给 target[key]</span></span><br><span class="line">      augment(value, arrayMethods, arrayKeys)<span class="comment">// 将数组的 push 等方法改写为响应式</span></span><br><span class="line">      <span class="keyword">this</span>.observeArray(value)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.walk(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  walk (obj: <span class="built_in">Object</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(obj)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">      defineReactive(obj, keys[i], obj[keys[i]])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  observeArray (items: <span class="built_in">Array</span>&lt;any&gt;) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = items.length; i &lt; l; i++) &#123;</span><br><span class="line">      observe(items[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span> (<span class="params">value: any</span>): <span class="title">Observer</span> | <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!isObject(value)) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> ob: Observer | <span class="keyword">void</span></span><br><span class="line">  <span class="keyword">if</span> (hasOwn(value, <span class="string">'__ob__'</span>) &amp;&amp; value.__ob__ <span class="keyword">instanceof</span> Observer) &#123;</span><br><span class="line">    ob = value.__ob__</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">    (<span class="built_in">Array</span>.isArray(value) || isPlainObject(value)) &amp;&amp;</span><br><span class="line">    <span class="built_in">Object</span>.isExtensible(value)</span><br><span class="line">  ) &#123;</span><br><span class="line">    ob = <span class="keyword">new</span> Observer(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ob</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  obj: Object,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: string,</span></span></span><br><span class="line"><span class="function"><span class="params">  val: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  shallow?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> property = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, key)</span><br><span class="line">  <span class="keyword">if</span> (property &amp;&amp; property.configurable === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> getter = property &amp;&amp; property.get</span><br><span class="line">  <span class="keyword">const</span> setter = property &amp;&amp; property.set</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> childOb = !shallow &amp;&amp; observe(val)</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    <span class="keyword">get</span>: function reactiveGetter () &#123;</span><br><span class="line">      <span class="keyword">const</span> value = getter ? getter.call(obj) : val</span><br><span class="line">      <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">        dep.depend()</span><br><span class="line">        <span class="keyword">if</span> (childOb) &#123;</span><br><span class="line">          childOb.dep.depend()</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">            dependArray(value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function reactiveSetter (newVal) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = getter ? getter.call(obj) : val</span><br><span class="line">      <span class="keyword">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;<span class="comment">// 更新前后均为 NaN</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (setter) &#123;</span><br><span class="line">        setter.call(obj, newVal)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        val = newVal</span><br><span class="line">      &#125;</span><br><span class="line">      childOb = !shallow &amp;&amp; observe(newVal)</span><br><span class="line">      dep.notify()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上述代码中，数组的依赖(指需要访问数据的订阅函数，即实际的订阅者)更新仍旧基于 Object.defineProperty 方法，可以得知的是，observer 不能单纯地将数组转变为响应式数据，数组必须是某个响应式对象的子属性。因此，vue 中的数据侦测实现不能单独作为类库使用。这在下一节中将作再度说明。</p>
<p>当 observer 实例对应的原始数据为数组时，observer 实例的 dep 属性存在的意义是，用于在 getter 访问器属性中通过该 dep 值(即 childOb.dep.depend)更新依赖，以使数组的 push 等方法执行时，好通过调用 dep.notify 方法，触发订阅函数的执行。同时，Vue 也不支持通过 arr[idx] = item 或 arr.length = len 语句触发订阅函数的调用。</p>
<p>介于 Object.defineProperty 方法只能对存在的属性起作用，Vue 中提供 set(target, key, value), del(target, key) 函数用于实现新增和删除属性同样需要触发订阅函数的场景。针对数组项，调用改写的原型方法 unshift, pop, splice 即可以移除数组项，并触发订阅函数的执行。然而，Vue 中提供的 set, del 函数将调用变异的 splice 方法处理数组，在数组项新增或删除时也触发订阅函数的执行。因此，set(arr, idx, item) 函数可用于代替 arr[idx] = item。</p>
<p>若 set, del 函数为响应式对象，将调用该对象相应的 observer 实例的 dep.notify 方法，也因而，observer 实例的 dep 属性存在的另一层意义是，用于促使 set, del 函数中的 observer.dep.notify 方法调用过程中，唤起订阅函数的执行。更新依赖仍旧在于 getter 访问器属性中的 childOb.dep.depend 方法。</p>
<p><em>代码段 4</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set</span> (<span class="params">target: Array&lt;any&gt; | Object, key: any, val: any</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(target) &amp;&amp; isValidArrayIndex(key)) &#123;</span><br><span class="line">    target.length = <span class="built_in">Math</span>.max(target.length, key)</span><br><span class="line">    target.splice(key, <span class="number">1</span>, val)</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (hasOwn(target, key)) &#123;</span><br><span class="line">    target[key] = val</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> ob = (target: any).__ob__</span><br><span class="line">  <span class="keyword">if</span> (!ob) &#123;</span><br><span class="line">    target[key] = val</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  defineReactive(ob.value, key, val)</span><br><span class="line">  ob.dep.notify()</span><br><span class="line">  <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">del</span> (<span class="params">target: Array&lt;any&gt; | Object, key: any</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(target) &amp;&amp; isValidArrayIndex(key)) &#123;</span><br><span class="line">    target.splice(key, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> ob = (target: any).__ob__</span><br><span class="line">  hasOwn(target, key)) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> target[key]</span><br><span class="line">  <span class="keyword">if</span> (!ob) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  ob.dep.notify()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><p>参见探讨一节中所示的最后一段代码，每个访问属性及其订阅函数的依赖关系可以通过 SubscriberManager 类加以管理。在 Vue 中，将 SubscriberManager 类分拆为 Dep 和 Watcher 两个类。</p>
<p>其中，Dep 根据对象的每个访问属性、或 Observer 实例(原始数据为对象或数组)，管理其依赖(即订阅函数)，因此，Vue 又将 Dep 实例注释为 observable 监视数据。依赖更新过程通过在 index.js 模块中调用 dep.depend 实现。dep.depend 方法执行过程中，将会调用 Dep.target. depend 方法更新该 dep 实例和 Dep.target(即当前运行中的订阅者 watcher 实例) 的依赖关系，也即更新 watcher.deps 数组(数组项为 Dep 实例)，表示订阅者 watcher 正在监测哪些响应式数据的变更；更新 dep.subs 数组(数组项为 Watcher 实例)，表示监视数据需要把状态更新通知哪些订阅者。这样就建立了 watcher 和 dep 互为引用关系。需要强调的是，更新依赖基于 getter 访问器属性中的 dep.depend 执行语句，getter 访问器又通过显式调用订阅函数才能触发，因此，在 Watcher 类的实现中，以 expOrFn 入参形式设定的订阅函数需要在响应式数据更新前得到调用，这也就是为什么在 Vue 中 Watcher 构造函数中会执行 this.get 方法的原因了。</p>
<p>因为实际的开发者可能嵌套两个以上订阅函数，所以 Vue 中使用 targetStack 以堆栈形式存储 Dep.target，以使嵌套调用的两个订阅函数中，后一个订阅函数执行完成后，将 Dep.target 回滚到前一个订阅函数的相关 Watcher 实例。</p>
<p><em>代码段 5</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// observer/dep.js</span></span><br><span class="line"><span class="keyword">let</span> uid = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> target: ?Watcher;</span><br><span class="line">  id: number;</span><br><span class="line">  subs: <span class="built_in">Array</span>&lt;Watcher&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">this</span>.id = uid++</span><br><span class="line">    <span class="keyword">this</span>.subs = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addSub (sub: Watcher) &#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.push(sub)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeSub (sub: Watcher) &#123;</span><br><span class="line">    remove(<span class="keyword">this</span>.subs, sub)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  depend () &#123;</span><br><span class="line">    <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">      Dep.target.addDep(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  notify () &#123;</span><br><span class="line">    <span class="keyword">const</span> subs = <span class="keyword">this</span>.subs.slice()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = subs.length; i &lt; l; i++) &#123;</span><br><span class="line">      subs[i].update()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 针对嵌套使用订阅函数的场景</span></span><br><span class="line">Dep.target = <span class="literal">null</span></span><br><span class="line"><span class="keyword">const</span> targetStack = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">pushTarget</span> (<span class="params">_target: Watcher</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Dep.target) targetStack.push(Dep.target)</span><br><span class="line">  Dep.target = _target</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">popTarget</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  Dep.target = targetStack.pop()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如前文所述，在 Vue 中，Watcher 构造函数的参数 expOrFn 为实际的订阅函数，而参数 cb 为响应式数据变更后待执行的回调函数，expOrFn 决定 cb 关联哪些响应式数据或其监测属性。</p>
<p>在 Watcher 类的实现中，参数 expOrFn 将被包装为 watcher.getter 方法，执行时以 vm 为上下文及首参，并通过 watcher.get 方法调用。watcher.get 方法的主要流程为，在 watcher.getter 执行前，通过 pushTarget(this) 将 Dep.target 赋值为当前的 watcher 实例，以使 dep.depend 方法执行过程中可以更新 watcher.deps 及 dep.subs 依赖；在 watcher.getter 执行后，通过调用 popTarget 函数释放 Dep.target，并调用 watcher 实例的 cleanupDeps 方法重置依赖。参数 expOrFn 可以是以 ‘.’ 分割的键名或普通函数。前者用于获取入参 vm 的深层属性，并作为返回值，意味着该属性及其祖先属性的更新将引起 cb 函数的执行(当返回值为复杂结构属性，可通过传参 options.deep 监测其子属性的更新，其实现原理是，利用 traverse 函数访问 watcher.getter 方法返回值的子孙属性或数组项，以此刷新依赖)；后者通过访问响应式数据 this 或首参 vm 的属性更新依赖，允许用户在 expOrFn 函数中自定义需要侦测哪个响应式数据的变更。</p>
<p>watcher 实例的依赖更新过程为，addDep 方法将新增的 dep 实例(通过和 newDepIds 比较判断新增与否)添加到 newDeps, newDepIds 中，所包含的 dep 实例为订阅函数执行过程中访问的响应式数据及其监测属性的相关 dep；cleanupDeps 方法将 newDeps, newDepIds 赋值给 deps, depIds，并置空 newDeps, newDepIds，即 newDeps, newDepIds 仅保留本次订阅函数执行过程中 dep 依赖，针对场景如订阅函数中使用条件语句变更访问的响应式数据等。</p>
<p>可以看见的是，Vue 更新 dep 和 watcher 的依赖关系都基于实际访问函数 expOrFn 的执行过程，却没法感知订阅函数的存在与否，这就造成了一个问题，当订阅函数删除时，dep.subs 中仍会有该订阅函数的相关 watcher 实例，这将促使订阅函数在响应式数据更新时再度执行。为此，Vue 提供了 watcher.teardown 实例方法，通过显式调用，能将当前 watcher 实例从 dep.subs 及 vm._watchers 数组中剔除掉。watcher.teardown 执行过程中，将this.active 标识符置为否，针对异步更新响应式数据过程时、手动调用 watcher.teardown 方法移除订阅函数的场景。而 watcher.depend 实例方法用于显式更新关联 dep 实例的依赖，即将当前 watcher 实例添加到各关联 dep.subs 数组中。</p>
<p>上述说明的 Watcher 类如下：</p>
<p><em>代码段 6</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> uid = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  vm: Component;</span><br><span class="line">  expression: string;</span><br><span class="line">  cb: <span class="built_in">Function</span>;</span><br><span class="line">  id: number;</span><br><span class="line">  active: boolean;</span><br><span class="line">  deps: <span class="built_in">Array</span>&lt;Dep&gt;;</span><br><span class="line">  newDeps: <span class="built_in">Array</span>&lt;Dep&gt;;</span><br><span class="line">  depIds: ISet;</span><br><span class="line">  newDepIds: ISet;</span><br><span class="line">  getter: <span class="built_in">Function</span>;</span><br><span class="line">  value: any;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> (</span><br><span class="line">    vm: Component,</span><br><span class="line">    expOrFn: string | Function,</span><br><span class="line">    cb: Function,</span><br><span class="line">    options?: Object</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">this</span>.vm = vm</span><br><span class="line">    vm._watchers.push(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">if</span> (options) &#123;</span><br><span class="line">      <span class="keyword">this</span>.deep = !!options.deep</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.deep = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.cb = cb</span><br><span class="line">    <span class="keyword">this</span>.id = ++uid <span class="comment">// uid for batching</span></span><br><span class="line">    <span class="keyword">this</span>.active = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">this</span>.deps = []</span><br><span class="line">    <span class="keyword">this</span>.newDeps = []</span><br><span class="line">    <span class="keyword">this</span>.depIds = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">    <span class="keyword">this</span>.newDepIds = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">    <span class="keyword">this</span>.expression = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">      ? expOrFn.toString()</span><br><span class="line">      : <span class="string">''</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> expOrFn === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.getter = expOrFn</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.getter = parsePath(expOrFn)</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.getter) &#123;</span><br><span class="line">        <span class="keyword">this</span>.getter = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">        process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">          <span class="string">`Failed watching path: "<span class="subst">$&#123;expOrFn&#125;</span>" `</span> +</span><br><span class="line">          <span class="string">'Watcher only accepts simple dot-delimited paths. '</span> +</span><br><span class="line">          <span class="string">'For full control, use a function instead.'</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="keyword">this</span>.get()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> () &#123;</span><br><span class="line">    pushTarget(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">let</span> value</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">this</span>.vm</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      value = <span class="keyword">this</span>.getter.call(vm, vm)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> e</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.deep) &#123;</span><br><span class="line">        traverse(value)<span class="comment">// 通过访问复杂结构数据 value 的子孙属性及数组项，实现依赖刷新</span></span><br><span class="line">      &#125;</span><br><span class="line">      popTarget()</span><br><span class="line">      <span class="keyword">this</span>.cleanupDeps()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addDep (dep: Dep) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = dep.id</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.newDepIds.has(id)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.newDepIds.add(id)</span><br><span class="line">      <span class="keyword">this</span>.newDeps.push(dep)</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.depIds.has(id)) &#123;</span><br><span class="line">        dep.addSub(<span class="keyword">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cleanupDeps () &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="keyword">this</span>.deps.length</span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">      <span class="keyword">const</span> dep = <span class="keyword">this</span>.deps[i]</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.newDepIds.has(dep.id)) &#123;</span><br><span class="line">        dep.removeSub(<span class="keyword">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> tmp = <span class="keyword">this</span>.depIds</span><br><span class="line">    <span class="keyword">this</span>.depIds = <span class="keyword">this</span>.newDepIds</span><br><span class="line">    <span class="keyword">this</span>.newDepIds = tmp</span><br><span class="line">    <span class="keyword">this</span>.newDepIds.clear()</span><br><span class="line">    tmp = <span class="keyword">this</span>.deps</span><br><span class="line">    <span class="keyword">this</span>.deps = <span class="keyword">this</span>.newDeps</span><br><span class="line">    <span class="keyword">this</span>.newDeps = tmp</span><br><span class="line">    <span class="keyword">this</span>.newDeps.length = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  update () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.active) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = <span class="keyword">this</span>.get()</span><br><span class="line">      <span class="keyword">const</span> oldValue = <span class="keyword">this</span>.value</span><br><span class="line">      <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm, value, oldValue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  depend () &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="keyword">this</span>.deps.length</span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">      <span class="keyword">this</span>.deps[i].depend()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  teardown () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.active) &#123;</span><br><span class="line">      remove(<span class="keyword">this</span>.vm._watchers, <span class="keyword">this</span>)</span><br><span class="line">      <span class="keyword">let</span> i = <span class="keyword">this</span>.deps.length</span><br><span class="line">      <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">        <span class="keyword">this</span>.deps[i].removeSub(<span class="keyword">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.active = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上述代码存在的问题：</p>
<p><em>问题清单 3</em></p>
<ol>
<li>每次响应式数据变更时，都会唤起订阅函数的执行，如一前一后分别改变 <strong>firstname</strong> 和 <strong>secondname</strong> 将会两次调用 <strong>getFullname</strong> 函数。有没有办法何必更新，只触发调用 <em>derivations</em> 执行一次呢？</li>
<li>订阅函数的执行时机由响应式数据有否更新决定。当开发者使用 <strong>computed</strong> 选项声明了一个计算属性，无论他有没有实际使用这个计算属性，当数据更新时，仍会触发 <strong>computed</strong> 方法的执行，这是不必要的。该问题的一般意义是，怎样只注册订阅函数，而订阅函数的执行时机仍由开发者决定，该订阅函数执行时，又能获取到更新后的数据？</li>
<li>作为 <em>derivations</em> 的 <strong>watcher.getter</strong> 兼有 <em>action</em> 更新响应式数据的能力，因其以响应式数据 <em>observale</em> 为执行上下文。用户可以在传入的 <strong>expOrFn</strong> 函数中使用 <strong>this[key] = value</strong> 语句唤起订阅函数的执行，该过程将再次调用 <strong>expOrFn</strong> 函数中的赋值语句，若 <strong>value</strong> 值每次都在改变（如赋值为 <strong>Math.random()</strong>），将造成死循环。</li>
</ol>
<p><em>解决方案 3</em></p>
<ol>
<li>针对 <em>问题 1</em>，可以将与当前触发本次响应式数据变更的 <em>action</em> 函数的所有相关 <strong>watcher</strong> 依赖添加到队列中，等待 <em>action</em> 执行完成后，再取出 <strong>watcher</strong> 实例加以执行。当然，这样处理存在的问题是，多个 <em>action</em> 更新同一份数据时，仍会造成订阅函数执行多次。在 Vue 的实现中，<strong>watcher</strong> 实例由 nextTick 函数添加到异步队列中，在主线程任务跑完后，才会执行异步队里中的 <strong>watcher</strong> 实例，而不是等待当前的 <em>action</em> 执行完成。这样处理的意义也解决了另一个问题，<em>Vue</em> 可以在模板中使用 _js_ 语句更新响应式数据，这会造成承载着重绘职责的 <strong>watcher</strong> 实例变成深度嵌套结构。使用 nextTick 函数后，须等待前一个重绘流程完成，再执行下一个重绘流程。关于这部分内容，将在下一节再度予以分析。Vue 默认将 <strong>watcher</strong> 添加到异步队列中，与之平级的还有 <strong>lazy, sync</strong> 模式。顾名思义，<strong>sync</strong> 模式指，响应式数据变更后，当即触发订阅函数的执行。</li>
<li>针对 <em>问题 2</em>，Vue 中提供了 <em>lazy</em> 模式，通过传参 options.lazy = true 设置。该模式下，在响应式数据更新后，只引起 watcher.dirty 状态被置为 true，触发 watcher.get 方法需要主动调用 watcher.evaluate 方法。在 watcher.evaluate 方法执行过程中，watcher.getter 方法的返回值将存储在 watcher.value 中，由此对外提供访问属性，用于获取新的计算值。可以想见，使用 <em>lazy</em> 模式也能处理同一个 <em>action</em> 函数更新多个响应式数据、触发订阅函数执行多次的 <em>问题 1</em>。Vue 中的计算属性即基于 lazy 模式实现，即在视图更新时访问计算属性，以此主动调用 watcher.evaluate 方法，<strong>firstname</strong> 和 <strong>secondname</strong> 属性的前后变更都只将触发 <strong>getFullname</strong> 执行一次，而更新 watcher.dirty 状态的动作仍会执行两次。关于计算属性相关内容，将在下一节 <em>Vue 应用</em> 中予以再次分析。</li>
<li>异步队列仅能解决同一个 <em>action</em> 更新多个响应式数据引起的订阅函数执行多次的问题，但是，不能用于处理同一个 <em>action</em> 反复更新同一个响应式数据引起的死循环。对于 <em>问题 3</em> 中的特例 – 使用 lazy 模式处理的计算属性，响应式数据变更时实际触发的动作只是将 watcher.dirty 置为真值，而没有调用 <strong>watcher.getter</strong> 方法，<em>derivations</em> 并不兼有 <em>action</em> 更新响应式数据的能力，也就不会引起死循环问题。对于没有采用 <em>lazy</em> 模式的 <strong>watcher</strong> 实例，当监测中的响应式数据前后相继更新时，其 <strong>watcher.getter</strong> 方法仍会执行多次，而由外部传入的 <strong>expOrFn</strong> 函数以及 <strong>cb</strong> 回调也会执行多次。这也是 Vue 实例中 watch 选项存在的问题。当 watch 选项中某方法将关联的响应式属性赋值为 <strong>Math.random()</strong> 时，会引起死循环。参考计算属性的实现，订阅函数单次执行的场景，也许可使用 <strong>vue.$watch(expOrFn, null, { lazy: true })</strong> 处理，这也将在下一节予以分析。</li>
</ol>
<p><em>解决方案 3</em> 是不完全的，需要开发者遵从一种规约，譬如变异数组不能通过 <strong>arr[index] = item</strong> 语句触发订阅函数的执行一样。通过计算属性这个特例，也可以发现，在 Vue 使用过程中，需注意区分参数 expOrFn 及 cb 的职责。非 lazy 模式下，expOrFn 主要用于引导订阅者 watcher 监测哪些响应式数据变更，定位监测数据通过在函数形式 expOrFn 使用 this 关键字访问数据，或者通过键路径形式的 expOrFn 设定观察属性，或者通过 options.deep 选项监测两者的返回值。cb 仅在非 lazy 模式下使用，作为回调函数，有可能在响应式数据变更后执行。Vue 为 cb 设定的执行条件为，watcher.getter 方法返回值与原有值不等，或返回了对象，或 options.deep 为真值。这样的条件，也未见逻辑上的妥帖。非 lazy 模式下，在 expOrFn 中作除依赖收集之外的处理时须谨慎。lazy 模式下，cb 回调没有机会得到触发执行（除非 Vue 对外暴露 watcher 实例，可以显示调用 watcher.run 方法），expOrFn 的执行时机由 observer 模块的使用者调用 watcher.evaluate 方法决定（非 lazy 模式由 Vue 决定其执行时机）。计算属性这个特例就使用了 lazy 模式，expOrFn 的返回值用于更新 watcher.value 并输出。非 lazy 模式或 lazy 模式下，都需要避免在 expOrFn 或 cb 中修改响应式数据（cb 同样以全量的 observable 为执行上下文），以免再次触发订阅函数的执行。当然，若足够 Vue 实现的原理，在 expOrFn 或 cb 中修改响应式数据也许能开启某些黑魔法，这些黑魔法也可能因为 Vue 版本的升级而惨遭淘汰。</p>
<p>在 Vue 中，Watcher 实例化过程还接受 user 选项，用于判断当前 watcher 实例是 Vue 内建的，还是来自于开发者。而当 user 选项置真值时，Vue 只负责校验 expOrFn 键路径能否正确取值或者函数能否正确执行，而没有包含依赖关系的梳理、死循环的避免等等。</p>
<p>为实现 lazy, sync 模式，<em>代码段 3</em> 中 update 方法将被拆解为 update, run 方法。update 方法用于判断当前使用的模式，run 方法调用 watcher.get 更新依赖，再执行 cb 回调。</p>
<p><em>代码段 4</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; queueWatcher &#125; <span class="keyword">from</span> <span class="string">'./scheduler'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  user: boolean;</span><br><span class="line">  lazy: boolean;</span><br><span class="line">  dirty: boolean;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span> (</span><br><span class="line">    vm: Component,</span><br><span class="line">    expOrFn: string | Function,</span><br><span class="line">    cb: Function,</span><br><span class="line">    options?: Object</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (options) &#123;</span><br><span class="line">      <span class="keyword">this</span>.user = !!options.user</span><br><span class="line">      <span class="keyword">this</span>.lazy = !!options.lazy</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.user = <span class="keyword">this</span>.lazy = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.value = <span class="keyword">this</span>.lazy</span><br><span class="line">      ? <span class="literal">undefined</span></span><br><span class="line">      : <span class="keyword">this</span>.get()<span class="comment">// 当即执行，收集 watcher 观察的响应式数据，建立依赖关系</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  update()&#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="keyword">this</span>.lazy )&#123;</span><br><span class="line">      <span class="keyword">this</span>.dirty = <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.sync) &#123;</span><br><span class="line">      <span class="keyword">this</span>.run()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      queueWatcher(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  run () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.active) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = <span class="keyword">this</span>.get()</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        value !== <span class="keyword">this</span>.value ||</span><br><span class="line">        isObject(value) ||</span><br><span class="line">        <span class="keyword">this</span>.deep</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">const</span> oldValue = <span class="keyword">this</span>.value</span><br><span class="line">        <span class="keyword">this</span>.value = value</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.user) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm, value, oldValue)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            handleError(e, <span class="keyword">this</span>.vm, <span class="string">`callback for watcher "<span class="subst">$&#123;<span class="keyword">this</span>.expression&#125;</span>"`</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm, value, oldValue)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="调度器"><a href="#调度器" class="headerlink" title="调度器"></a>调度器</h4><p><em>代码段 4</em> 中的 <strong>queueWatcher</strong> 函数由 <strong>scheduler</strong> 模块提供。<strong>scheduler</strong> 模块通过 <strong>nextTick</strong> 函数将 <strong>watcher</strong> 添加到异步队列中，等待主线程任务执行完成后，再予以执行 <strong>watcher.run</strong> 方法。</p>
<p><strong>scheduler</strong> 模块主要逻辑为当主线程任务尚在执行过程中，将 <strong>watcher</strong> 实例添加到 <strong>queue</strong> 异步队列中；若异步队列已经开始执行，则将 <strong>watcher</strong> 按 <strong>id</strong> 顺序添加 <strong>queue</strong> 队列中。特殊情况是，若在 <strong>watcher</strong> 中更新响应式数据，触发当前 <strong>watcher</strong> 再度被添加到异步队列中、并等待执行，即如 <em>问题清单 3</em> 中 <em>问题 3</em> 中的描述，通过 <strong>circular</strong> 记录当前 <strong>watcher</strong> 执行次数，若超过 <strong>MAX_UPDATE_COUNT</strong> 个数，予以警告提示。</p>
<p>异步队列中，<strong>watcher</strong> 实例的执行顺序以 <strong>watcher</strong>实例的创建顺序为准，通过 <strong>watcher.id</strong> 判断，主要目的是保证组价的重绘动作放在响应式数据更新时尾端，同时保证父子组件的重绘顺序，这部分内容，将在下一节予以分析。</p>
<p><em>代码段 5</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MAX_UPDATE_COUNT = <span class="number">100</span><span class="comment">// 开发环境同一个 watcher 在单次异步队列中最大执行次数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue: <span class="built_in">Array</span>&lt;Watcher&gt; = []</span><br><span class="line"><span class="keyword">let</span> has: &#123; [key: number]: ?<span class="literal">true</span> &#125; = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> circular: &#123; [key: number]: number &#125; = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> waiting = <span class="literal">false</span><span class="comment">// 异步队列等待执行中状态标识</span></span><br><span class="line"><span class="keyword">let</span> flushing = <span class="literal">false</span><span class="comment">// 异步队列执行中状态标识</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resetSchedulerState</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  index = queue.length = <span class="number">0</span></span><br><span class="line">  has = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    circular = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  waiting = flushing = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flushSchedulerQueue</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  flushing = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">let</span> watcher, id</span><br><span class="line"></span><br><span class="line">  queue.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.id - b.id)<span class="comment">// watcher 重排序</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; queue.length; index++) &#123;</span><br><span class="line">    watcher = queue[index]</span><br><span class="line">    id = watcher.id</span><br><span class="line">    has[id] = <span class="literal">null</span></span><br><span class="line">    watcher.run()</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; has[id] != <span class="literal">null</span>) &#123;</span><br><span class="line">      circular[id] = (circular[id] || <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">      <span class="keyword">if</span> (circular[id] &gt; MAX_UPDATE_COUNT) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">'You may have an infinite update loop '</span> + (</span><br><span class="line">            watcher.user</span><br><span class="line">              ? <span class="string">`in watcher with expression "<span class="subst">$&#123;watcher.expression&#125;</span>"`</span></span><br><span class="line">              : <span class="string">`in a component render function.`</span></span><br><span class="line">          ),</span><br><span class="line">          watcher.vm</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  resetSchedulerState()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queueWatcher</span> (<span class="params">watcher: Watcher</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> id = watcher.id</span><br><span class="line">  <span class="keyword">if</span> (has[id] == <span class="literal">null</span>) &#123;</span><br><span class="line">    has[id] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主线程尚在执行中</span></span><br><span class="line">    <span class="keyword">if</span> (!flushing) &#123;</span><br><span class="line">      queue.push(watcher)</span><br><span class="line">    <span class="comment">// 异步队列开始执行</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> i = queue.length - <span class="number">1</span></span><br><span class="line">      <span class="keyword">while</span> (i &gt; index &amp;&amp; queue[i].id &gt; watcher.id) &#123;</span><br><span class="line">        i--</span><br><span class="line">      &#125;</span><br><span class="line">      queue.splice(i + <span class="number">1</span>, <span class="number">0</span>, watcher)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!waiting) &#123;</span><br><span class="line">      waiting = <span class="literal">true</span></span><br><span class="line">      nextTick(flushSchedulerQueue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Vue-应用"><a href="#Vue-应用" class="headerlink" title="Vue 应用"></a>Vue 应用</h2><p>创建 <em>Vue</em> 实例（下文中 <strong>vm</strong> 即指 <em>Vue</em> 实例）过程中，调用 <strong>observe</strong> 包的模块主要包含 <strong>core/instance</strong> 目录下的 <strong>state, inject, lifecycle</strong> 模块。<strong>state</strong> 模块用于将 Vue 选项 <strong>prop, data, methods, computed, watch</strong> 注入数据侦测功能，并导出数据侦测功能相关的实例属性或方法如 <strong>$props, $data, $set, $del, $watch</strong>。<strong>inject</strong>模块用于将 Vue 选项 <strong>inject</strong> 注入数据侦测功能。<strong>lifecycle</strong> 模块用于将 <strong>updateComponent</strong> 组件更新函数绑定为订阅函数。</p>
<h3 id="prop-data-methods-computed-watch"><a href="#prop-data-methods-computed-watch" class="headerlink" title="prop, data, methods, computed, watch"></a>prop, data, methods, computed, watch</h3><p>注入 Vue 实例且与数据侦测功能相关的选项包含 prop, data, methods, computed, watch。其中 props 为父组件传入的属性或方法，data 将转化为实际的响应式数据，methods 为影响响应式数据变更的 action，computed 为响应式数据变更后执行的计算函数，watch 为响应式数据变更后执行的副作用函数。props, data, methods, computed 均将通过代理导出为 Vue 实例的实例属性或方法，意味着 props, data, methods, computed 中的属性或方法名不能相重，Vue 实例代理的优先级为 props, methods，data, computed。</p>
<p><em>代码段 6</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxy</span> (<span class="params">target: Object, sourceKey: string, key: string</span>) </span>&#123;</span><br><span class="line">  sharedPropertyDefinition.get = <span class="function"><span class="keyword">function</span> <span class="title">proxyGetter</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[sourceKey][key]</span><br><span class="line">  &#125;</span><br><span class="line">  sharedPropertyDefinition.set = <span class="function"><span class="keyword">function</span> <span class="title">proxySetter</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>[sourceKey][key] = val</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target, key, sharedPropertyDefinition)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initState 函数将在 Vue 实例化过程中通过 _init 实例方法得到执行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initState</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  vm._watchers = []</span><br><span class="line">  <span class="keyword">const</span> opts = vm.$options</span><br><span class="line">  <span class="keyword">if</span> (opts.props) initProps(vm, opts.props)</span><br><span class="line">  <span class="keyword">if</span> (opts.methods) initMethods(vm, opts.methods)</span><br><span class="line">  <span class="keyword">if</span> (opts.data) &#123;</span><br><span class="line">    initData(vm)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    observe(vm._data = &#123;&#125;, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (opts.computed) initComputed(vm, opts.computed)</span><br><span class="line">  <span class="comment">// Firefox 中，普通对象含有 watch 原型方法，nativeWatch 即该原型方法</span></span><br><span class="line">  <span class="keyword">if</span> (opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class="line">    initWatch(vm, opts.watch)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><em>代码段 6</em> 中，<strong>initState</strong> 函数将在 <em>Vue</em> 实例化过程中通过 <strong>vm._init</strong> 实例方法得到执行，其中，<strong>initProps, initMethods, initData, initComputed, initWatch</strong> 分别对 <strong>props, data, methods, computed, watch</strong> 选项进行处理操作。<strong>proxy</strong> 函数提供通过 <strong>vm</strong> 代理取值和赋值的功能。</p>
<h4 id="props"><a href="#props" class="headerlink" title="props"></a>props</h4><p><em>代码段 7</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initProps</span> (<span class="params">vm: Component, propsOptions: Object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> propsData = vm.$options.propsData || &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> props = vm._props = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> keys = vm.$options._propKeys = []<span class="comment">// 辅助遍历</span></span><br><span class="line">  <span class="keyword">const</span> isRoot = !vm.$parent</span><br><span class="line">  observerState.shouldConvert = isRoot</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> propsOptions) &#123;</span><br><span class="line">    keys.push(key)</span><br><span class="line">    <span class="keyword">const</span> value = validateProp(key, propsOptions, propsData, vm)</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> hyphenatedKey = hyphenate(key)</span><br><span class="line">      <span class="keyword">if</span> (isReservedAttribute(hyphenatedKey) ||</span><br><span class="line">          config.isReservedAttr(hyphenatedKey)) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">`"<span class="subst">$&#123;hyphenatedKey&#125;</span>" is a reserved attribute and cannot be used as component prop.`</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      defineReactive(props, key, value, () =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (vm.$parent &amp;&amp; !isUpdatingChildComponent) &#123;</span><br><span class="line">          warn(</span><br><span class="line">            <span class="string">`Avoid mutating a prop directly since the value will be `</span> +</span><br><span class="line">            <span class="string">`overwritten whenever the parent component re-renders. `</span> +</span><br><span class="line">            <span class="string">`Instead, use a data or computed property based on the prop's `</span> +</span><br><span class="line">            <span class="string">`value. Prop being mutated: "<span class="subst">$&#123;key&#125;</span>"`</span>,</span><br><span class="line">            vm</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      defineReactive(props, key, value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(key <span class="keyword">in</span> vm)) &#123;</span><br><span class="line">      proxy(vm, <span class="string">`_props`</span>, key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  observerState.shouldConvert = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stateMixin</span> (<span class="params">Vue: Class&lt;Component&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> propsDef = &#123;&#125;</span><br><span class="line">  propsDef.get = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>._props &#125;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    propsDef.set = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      warn(<span class="string">`$props is readonly.`</span>, <span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$props'</span>, propsDef)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><em>代码段 7</em> 中，通过 <strong>defineReactive</strong> 函数监测从父组件传入的 <strong>props</strong> 变更，该变更过程发生在更新子组件时，见于 <strong>core/instance/lifecycle.js</strong> 模块中的 <strong>updateChildComponent</strong> 函数。当渲染的是顶层根节点时，将 <strong>observerState.shouldConvert</strong> 标识符置为真值，意味着当顶层根节点的 <strong>props</strong> 子属性为复杂结构数据且不是响应式数据时，将其转换为响应式数据。当渲染的是其他节点是，<strong>props</strong> 子属性保持原有的数据状态，即其传入响应式数据，则输出响应式数据；传入普通数据，则输出普通数据。因为 <strong>props</strong> 是响应式数据，<em>Vue</em> 在开发环境下提示使用者修改 <strong>props</strong> 须谨慎。通过 <strong>stateMixin</strong> 函数导出的 <strong>vm.$props</strong> 在开发环境也是只读的。但用户仍可以修改 <strong>vm.$props</strong> 的子属性。</p>
<p>同时，<em>代码段 7</em> 中 observe 函数改写为 <em>代码段 7</em> 中形式，添加 <strong>observerState.shouldConvert</strong> 标识符阻止将子组件获得的 props 子属性转变为 Observer 实例。</p>
<p><em>代码段 8</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> observerState = &#123;</span><br><span class="line">  shouldConvert: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span> (<span class="params">value: any</span>): <span class="title">Observer</span> | <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!isObject(value)) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> ob: Observer | <span class="keyword">void</span></span><br><span class="line">  <span class="keyword">if</span> (hasOwn(value, <span class="string">'__ob__'</span>) &amp;&amp; value.__ob__ <span class="keyword">instanceof</span> Observer) &#123;</span><br><span class="line">    ob = value.__ob__</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">    observerState.shouldConvert &amp;&amp;<span class="comment">// 阻止将子组件获得的 props 子属性转变为 Observer 实例</span></span><br><span class="line">    (<span class="built_in">Array</span>.isArray(value) || isPlainObject(value)) &amp;&amp;</span><br><span class="line">    <span class="built_in">Object</span>.isExtensible(value) &amp;&amp;</span><br><span class="line">    !value._isVue<span class="comment">// 排除 Vue 实例</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    ob = <span class="keyword">new</span> Observer(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ob</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="data"><a href="#data" class="headerlink" title="data"></a>data</h4><p><em>代码段 9</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span> (<span class="params">data: Function, vm: Component</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data.call(vm, vm)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    handleError(e, vm, <span class="string">`data()`</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initData</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = vm.$options.data</span><br><span class="line">  data = vm._data = <span class="keyword">typeof</span> data === <span class="string">'function'</span></span><br><span class="line">    ? getData(data, vm)</span><br><span class="line">    : data || &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> (!isPlainObject(data)) &#123;</span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">      <span class="string">'data functions should return an object:\n'</span> +</span><br><span class="line">      <span class="string">'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function'</span>,</span><br><span class="line">      vm</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(data)</span><br><span class="line">  <span class="keyword">const</span> props = vm.$options.props</span><br><span class="line">  <span class="keyword">const</span> methods = vm.$options.methods</span><br><span class="line">  <span class="keyword">let</span> i = keys.length</span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i]</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (methods &amp;&amp; hasOwn(methods, key)) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">`Method "<span class="subst">$&#123;key&#125;</span>" has already been defined as a data property.`</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (props &amp;&amp; hasOwn(props, key)) &#123;</span><br><span class="line">      process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; warn(</span><br><span class="line">        <span class="string">`The data property "<span class="subst">$&#123;key&#125;</span>" is already declared as a prop. `</span> +</span><br><span class="line">        <span class="string">`Use prop default value instead.`</span>,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isReserved(key)) &#123;</span><br><span class="line">      proxy(vm, <span class="string">`_data`</span>, key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将 data 转变为响应式数据</span></span><br><span class="line">  observe(data, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stateMixin</span> (<span class="params">Vue: Class&lt;Component&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dataDef = &#123;&#125;</span><br><span class="line">  dataDef.get = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>._data &#125;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    dataDef.set = <span class="function"><span class="keyword">function</span> (<span class="params">newData: Object</span>) </span>&#123;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="string">'Avoid replacing instance root $data. '</span> +</span><br><span class="line">        <span class="string">'Use nested data properties instead.'</span>,</span><br><span class="line">        <span class="keyword">this</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$data'</span>, dataDef)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><em>代码段 9</em> 中，通过 <strong>observe</strong> 函数将 <strong>data</strong> 选项转变为响应式数据。<strong>data</strong> 选项可以是对象或函数形式，当其为函数时，可以通过上下文或首参 <em>Vue</em> 实例获取从父组件注入的 <strong>props</strong>。<strong>initData</strong> 函数中，通过代理将 data 导出为 <em>Vue</em> 实例的属性，开发者也可以通过 <strong>vm._data</strong> 或 <strong>vm.$data</strong> 获取全量数据。</p>
<h4 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h4><p><em>代码段 10</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initMethods</span> (<span class="params">vm: Component, methods: Object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> props = vm.$options.props</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> methods) &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (methods[key] == <span class="literal">null</span>) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">`Method "<span class="subst">$&#123;key&#125;</span>" has an undefined value in the component definition. `</span> +</span><br><span class="line">          <span class="string">`Did you reference the function correctly?`</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (props &amp;&amp; hasOwn(props, key)) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">`Method "<span class="subst">$&#123;key&#125;</span>" has already been defined as a prop.`</span>,</span><br><span class="line">          vm</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ((key <span class="keyword">in</span> vm) &amp;&amp; isReserved(key)) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="string">`Method "<span class="subst">$&#123;key&#125;</span>" conflicts with an existing Vue instance method. `</span> +</span><br><span class="line">          <span class="string">`Avoid defining component methods that start with _ or $.`</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vm[key] = methods[key] == <span class="literal">null</span> ? noop : bind(methods[key], vm)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对 <strong>methods</strong> 选项的处理无他，也就是将 <em>Vue</em> 实例作为其执行上下文。methods 作为更新响应式数据的 <em>action</em>，仍是开发者需要遵从的一种规则。通过 <strong>methods</strong> 各方法对 <em>Vue</em> 实例中的响应式数据执行赋值操作，既可以触发订阅函数的执行。也可以通过直接赋值 <strong>vm.$data</strong> 的子属性触发订阅函数的执行，但不推荐。</p>
<h4 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h4><p><em>代码段 11</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> computedWatcherOptions = &#123; <span class="attr">lazy</span>: <span class="literal">true</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initComputed</span> (<span class="params">vm: Component, computed: Object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> watchers = vm._computedWatchers = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> computed) &#123;</span><br><span class="line">    <span class="keyword">const</span> userDef = computed[key]</span><br><span class="line">    <span class="keyword">const</span> getter = <span class="keyword">typeof</span> userDef === <span class="string">'function'</span> ? userDef : userDef.get</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; getter == <span class="literal">null</span>) &#123;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="string">`Getter is missing for computed property "<span class="subst">$&#123;key&#125;</span>".`</span>,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    watchers[key] = <span class="keyword">new</span> Watcher(</span><br><span class="line">      vm,</span><br><span class="line">      getter || noop,</span><br><span class="line">      noop,</span><br><span class="line">      computedWatcherOptions</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(key <span class="keyword">in</span> vm)) &#123;</span><br><span class="line">      defineComputed(vm, key, userDef)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (key <span class="keyword">in</span> vm.$data) &#123;</span><br><span class="line">        warn(<span class="string">`The computed property "<span class="subst">$&#123;key&#125;</span>" is already defined in data.`</span>, vm)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vm.$options.props &amp;&amp; key <span class="keyword">in</span> vm.$options.props) &#123;</span><br><span class="line">        warn(<span class="string">`The computed property "<span class="subst">$&#123;key&#125;</span>" is already defined as a prop.`</span>, vm)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineComputed</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  target: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: string,</span></span></span><br><span class="line"><span class="function"><span class="params">  userDef: Object | Function</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> shouldCache = !isServerRendering()</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> userDef === <span class="string">'function'</span>) &#123;</span><br><span class="line">    sharedPropertyDefinition.get = createComputedGetter(key)</span><br><span class="line">    sharedPropertyDefinition.set = noop</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    sharedPropertyDefinition.get = userDef.get</span><br><span class="line">      ? userDef.cache !== <span class="literal">false</span></span><br><span class="line">        ? createComputedGetter(key) </span><br><span class="line">        : userDef.get</span><br><span class="line">      : noop</span><br><span class="line">    sharedPropertyDefinition.set = userDef.set</span><br><span class="line">      ? userDef.set</span><br><span class="line">      : noop</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">      sharedPropertyDefinition.set === noop) &#123;</span><br><span class="line">    sharedPropertyDefinition.set = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="string">`Computed property "<span class="subst">$&#123;key&#125;</span>" was assigned to but it has no setter.`</span>,</span><br><span class="line">        <span class="keyword">this</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target, key, sharedPropertyDefinition)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createComputedGetter</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">computedGetter</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> watcher = <span class="keyword">this</span>._computedWatchers &amp;&amp; <span class="keyword">this</span>._computedWatchers[key]</span><br><span class="line">    <span class="keyword">if</span> (watcher) &#123;</span><br><span class="line">      <span class="keyword">if</span> (watcher.dirty) &#123;</span><br><span class="line">        watcher.evaluate()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">        watcher.depend()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> watcher.value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><em>代码段 11</em> 中，通过创建 lazy 模式的 Watcher 实例处理计算属性。通过代码，也可以看出，开发者传入的 computed 选项，其属性 userDef 可以是函数或对象形式。若 userDef 为函数，当响应式数据未更新，使用 vm[computedKey] 取值时将获取缓存中的 watcher.value；当响应式数据已更新，则调用 watcher.evaluate 方法（即在模板 template 中使用计算属性时）重新计算值。若 userDef 为对象，且 userDef.cache 属性为真值，vm[computedKey] 取值方式与 userDef 为函数的情形相同；而 vm[computedKey] 赋值操作以 vm 为上下文，可以手动操作响应式数据，也就有可能触发 userDef.get 的再次执行，须谨慎。若 userDef 为对象，且 userDef.cache 属性为否值，vm[computedKey] 的取值、赋值操作仍以 vm 为上下文，两者在响应式数据更新后均不会触发执行，但可以可以手动操作响应式数据。</p>
<h4 id="watcher"><a href="#watcher" class="headerlink" title="watcher"></a>watcher</h4><p><em>代码段 12</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initWatch</span> (<span class="params">vm: Component, watch: Object</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> watch) &#123;</span><br><span class="line">    <span class="keyword">const</span> handler = watch[key]</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(handler)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; handler.length; i++) &#123;</span><br><span class="line">        createWatcher(vm, key, handler[i])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      createWatcher(vm, key, handler)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWatcher</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  vm: Component,</span></span></span><br><span class="line"><span class="function"><span class="params">  keyOrFn: string | Function,</span></span></span><br><span class="line"><span class="function"><span class="params">  handler: any,</span></span></span><br><span class="line"><span class="function"><span class="params">  options?: Object</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isPlainObject(handler)) &#123;</span><br><span class="line">    options = handler</span><br><span class="line">    handler = handler.handler</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> handler === <span class="string">'string'</span>) &#123;</span><br><span class="line">    handler = vm[handler]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vm.$watch(keyOrFn, handler, options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对 watcher 选项处理，即是创建 Watcher 实例的过程。watcher 选项的属性名可以是键路径，作为 Watcher 构造函数的入参 keyOrFn；而其值可以是函数或对象，若为对象，以 watch[key].handler 作为 Watcher 构造函数的入参 cb，其余属性作为入参 options。vm.$watch 方法见下一小节。</p>
<h4 id="set-del-watch-Vue-set-Vue-del"><a href="#set-del-watch-Vue-set-Vue-del" class="headerlink" title="$set, $del, $watch, Vue.set, Vue.del"></a>$set, $del, $watch, Vue.set, Vue.del</h4><p><em>代码段 13</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stateMixin</span> (<span class="params">Vue: Class&lt;Component&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  Vue.prototype.$<span class="keyword">set</span> = <span class="keyword">set</span></span><br><span class="line">  Vue.prototype.$delete = del</span><br><span class="line"></span><br><span class="line">  Vue.prototype.$watch = function (</span><br><span class="line">    expOrFn: string | Function,</span><br><span class="line">    cb: any,</span><br><span class="line">    options?: Object</span><br><span class="line">  ): Function &#123;</span><br><span class="line">    <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">if</span> (isPlainObject(cb)) &#123;</span><br><span class="line">      <span class="keyword">return</span> createWatcher(vm, expOrFn, cb, options)</span><br><span class="line">    &#125;</span><br><span class="line">    options = options || &#123;&#125;</span><br><span class="line">    options.user = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">const</span> watcher = <span class="keyword">new</span> Watcher(vm, expOrFn, cb, options)</span><br><span class="line">    <span class="keyword">if</span> (options.immediate) &#123;</span><br><span class="line">      cb.call(vm, watcher.value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unwatchFn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      watcher.teardown()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>vm.$set, vm.$del 即取 observe 包导出的 set, del 函数。vm.$watch 方法允许次参 cb 为对象，并将 options.user 选项置为真值，标识为用户设定的 watcher；若 options.immediate 选项为真值，当即执行 cb；返回函数用于在 derivations, observale 依赖关系中释放该 watcher。</p>
<p>Vue.set, Vue.del 方法同 vm.$set, vm.$del。</p>
<h4 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide, inject"></a>provide, inject</h4><p><em>代码段 14</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initProvide</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> provide = vm.$options.provide</span><br><span class="line">  <span class="keyword">if</span> (provide) &#123;</span><br><span class="line">    vm._provided = <span class="keyword">typeof</span> provide === <span class="string">'function'</span></span><br><span class="line">      ? provide.call(vm)</span><br><span class="line">      : provide</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initInjections</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = resolveInject(vm.$options.inject, vm)</span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    observerState.shouldConvert = <span class="literal">false</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(result).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">        defineReactive(vm, key, result[key], () =&gt; &#123;</span><br><span class="line">          warn(</span><br><span class="line">            <span class="string">`Avoid mutating an injected value directly since the changes will be `</span> +</span><br><span class="line">            <span class="string">`overwritten whenever the provided component re-renders. `</span> +</span><br><span class="line">            <span class="string">`injection being mutated: "<span class="subst">$&#123;key&#125;</span>"`</span>,</span><br><span class="line">            vm</span><br><span class="line">          )</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        defineReactive(vm, key, result[key])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    observerState.shouldConvert = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveInject</span> (<span class="params">inject: any, vm: Component</span>): ?<span class="title">Object</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (inject) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">const</span> keys = hasSymbol</span><br><span class="line">        ? <span class="built_in">Reflect</span>.ownKeys(inject).filter(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">Object</span>.getOwnPropertyDescriptor(inject, key).enumerable</span><br><span class="line">        &#125;)</span><br><span class="line">        : <span class="built_in">Object</span>.keys(inject)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> key = keys[i]</span><br><span class="line">      <span class="keyword">const</span> provideKey = inject[key].from</span><br><span class="line">      <span class="keyword">let</span> source = vm</span><br><span class="line">      <span class="keyword">while</span> (source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source._provided &amp;&amp; provideKey <span class="keyword">in</span> source._provided) &#123;</span><br><span class="line">          result[key] = source._provided[provideKey]</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        source = source.$parent</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">'default'</span> <span class="keyword">in</span> inject[key]) &#123;</span><br><span class="line">          <span class="keyword">const</span> provideDefault = inject[key].default</span><br><span class="line">          result[key] = <span class="keyword">typeof</span> provideDefault === <span class="string">'function'</span></span><br><span class="line">            ? provideDefault.call(vm)</span><br><span class="line">            : provideDefault</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">          warn(<span class="string">`Injection "<span class="subst">$&#123;key&#125;</span>" not found`</span>, vm)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>provide, inject 选项用于实现组件间的跨级传递，其基本实现同 props 选项，可参考 props 一小节。</p>
<h4 id="vm-watcher"><a href="#vm-watcher" class="headerlink" title="vm._watcher"></a>vm._watcher</h4><p>Vue 中，将更新后的响应式数据重绘到页面上，这一过程借助于在挂载组件时执行 <strong>vm._watcher = new Watcher(vm, updateComponent, noop)</strong> 语句创建 Watcher 实例实现。需要更新视图时，通过 <strong>vm._watcher.update</strong> 方法即可更新视图。这条执行语句见于 lifecycle 模块中的 mountComponent 函数，updateComponent 函数将作为 Watcher 构造函数的入参 expOrFn，即当在 vm 中响应式数据变更后，调用 updateComponent 函数更新组件、重绘视图。这部分内容，笔者将在后续的文章中加以分析。</p>
<p>前文提到的 <strong>computed, watch</strong> 选项和 <strong>$watch</strong> 方法均会创建 <strong>watcher</strong> 实例；同时这一小节也指明，各组件的 <strong>mountComponent</strong> 函数执行过程中均会创建 <strong>watcher</strong> 实例。可以预知的是，与组件 <strong>updateComponent</strong> 函数相关的重绘 <strong>watcher</strong> 实例会在与 <strong>computed, watch</strong> 选项相关的一般 <strong>watcher</strong> 实例后创建，因此上文中的 <strong>scheduler</strong> 模块通过 <strong>watcher.id</strong> 排序执行各 <strong>watcher.run</strong> 方法，以保证一般 <strong>watcher</strong> 实例在重绘 <strong>watcher</strong> 实例之后执行；重绘 <strong>watcher</strong> 实例按父子组件的顺序执行；当子组件移除时，其下的各 <strong>watcher</strong> 实例又将被跳过（响应式数据删除后，相关 watcher 实例便不再被唤起执行）。实现参见 <em>代码段 5</em>。</p>
<p>当 <strong>updateComponent</strong> 函数执行过程中，模板中设定的 _js_ 函数可以更新响应式数据，在该函数执行过程中，与一般 <strong>watcher</strong> 实例执行过程触发响应式数据变更一样，都会将后续的 <strong>watcher</strong> 实例添加到异步队列中，并在同一个异步队列中执行完成。在 <strong>updateComponent</strong> 函数，须执行组件的 update 钩子，组件 Vue 实例通过 watcher.vm 获取；以及 keep-alive 组件的 activated 钩子。关于这部分内容，笔者将在后续的文章中再加以分析</p>
<p>改写 <strong>scheduler</strong> 模块中 <strong>flushSchedulerQueue</strong> 的函数如下：</p>
<p><em>代码段 15</em><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flushSchedulerQueue</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  resetSchedulerState()</span><br><span class="line"></span><br><span class="line">  callActivatedHooks(activatedQueue)</span><br><span class="line">  callUpdatedHooks(updatedQueue)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// devtool hook</span></span><br><span class="line">  <span class="keyword">if</span> (devtools &amp;&amp; config.devtools) &#123;</span><br><span class="line">    devtools.emit(<span class="string">'flush'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callUpdatedHooks</span> (<span class="params">queue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = queue.length</span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> watcher = queue[i]</span><br><span class="line">    <span class="keyword">const</span> vm = watcher.vm</span><br><span class="line">    <span class="keyword">if</span> (vm._watcher === watcher &amp;&amp; vm._isMounted) &#123;</span><br><span class="line">      callHook(vm, <span class="string">'updated'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createComponent 函数执行时调用，添加 keep-alive 组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queueActivatedComponent</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  vm._inactive = <span class="literal">false</span></span><br><span class="line">  activatedChildren.push(vm)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callActivatedHooks</span> (<span class="params">queue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; queue.length; i++) &#123;</span><br><span class="line">    queue[i]._inactive = <span class="literal">true</span></span><br><span class="line">    activateChildComponent(queue[i], <span class="literal">true</span> <span class="comment">/* true */</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以上即为 Vue 内部对数据监测功能的使用。</p>
<h2 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h2><p>本节将根据 mobx 的 api 接口设计响应式 model。</p>
<p>class Model {<br>  @observable data = {<br>    firstname: ‘steven’,<br>    secondname: ‘spielberg’<br>  };</p>
<p>  @action changeData(){<br>    this.data = {<br>      firstname: ‘steven’,<br>      secondname: ‘jobs’<br>    }<br>  }</p>
<p>  @computed get fullname(){<br>    return <code>${this.firstname}.${this.secondname}</code>;<br>  }</p>
<p>  @reaction log(){<br>    console.log(‘name changed’);<br>  }<br>};</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者模式</title>
    <url>/2018/03/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>观察者模式(Observer pattern)也称为发布-订阅模式(publish-subscribe pattern)，其处理逻辑即是当主题对象(a subject or a observable，也称为目标)的状态发生变更时，自动以广播的形式通知依赖于它的多个观察者(observers)，促使这些观察者执行后续的动作。其一般意义即为，在一对多的依赖关系中，当依赖更新时，所有依赖于它的对象(dependent)都会自动接收通知，并启用后续的处理流程。</p>
<p>在《设计模式:可复用面向对象软件的基础》一书中，观察者模式被定义为</p>
<p>One or more observers are interested in the state of a subject and register their interest with the subject by attaching themselves. When something changes in our subject that the observer may be interested in, a notify message is sent which calls the update method in each observer. When the observer is no longer interested in the subject’s state, they can simply detach themselves.</p>
<h2 id="经典实现"><a href="#经典实现" class="headerlink" title="经典实现"></a>经典实现</h2><p>观察者模式包含下列组件：</p>
<ul>
<li>Subject: 维护 observers 清单，可添加或移除 observer。由 Subject 衍生出具象类 ConcreteSubject，通过继承或 extend。</li>
<li>Observer: 提供 update 接口。当 observer 对象接到 subject 状态更新的通知时，自动调用 update 方法。由 Observer 衍生出具象类 ConcreteObserver。</li>
<li>ConcreteSubject: 在 Subject 基础上构建，存储主题状态。当状态更新时，通知所有 ConcreteObserver 具体观察者。</li>
<li>ConcreteObserver: 在 Observer 基础上构建，存储 ConcreteSubject 的引用，实现 update 接口。该接口调用时，具体观察者的内部状态 observerState 将与 ConcreteSubject 具体主题对象的 subjectState 状态保持一致。</li>
</ul>
<p>简单实现为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">  observers = <span class="keyword">new</span> ObserverList();</span><br><span class="line"></span><br><span class="line">  attach(observer)&#123;</span><br><span class="line">    <span class="keyword">this</span>.observers.push(observer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  detach(observer)&#123;</span><br><span class="line">    <span class="keyword">this</span>.observers = <span class="keyword">this</span>.observers.filter(<span class="function"><span class="params">ob</span> =&gt;</span> ob !== observer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  notify()&#123;</span><br><span class="line">    <span class="keyword">this</span>.observers.map(<span class="function"><span class="params">observer</span> =&gt;</span> observer.update());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  update()&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">  subjectState = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  attach(concreteObserver)&#123;</span><br><span class="line">    concreteObserver.concreteSubject = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">super</span>.attach(concreteObserver);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  detach(concreteObserver)&#123;</span><br><span class="line">    concreteObserver.concreteSubject = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">super</span>.detach(concreteObserver);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getState()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subjectState;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setState(state)&#123;</span><br><span class="line">    <span class="keyword">this</span>.subjectState = state;</span><br><span class="line">    <span class="keyword">this</span>.notify();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> </span>&#123;</span><br><span class="line">  observerState = <span class="literal">null</span>;</span><br><span class="line">  concreteSubject = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  update()&#123;</span><br><span class="line">    <span class="keyword">this</span>.observerState = <span class="keyword">this</span>.concreteSubject.getState();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述实现存在的问题：</p>
<ol>
<li>观察者需要监听多个主题对象的更新状态。可将 subject 实例作为 update 方法的参数，以使 observer 知晓哪个主题对象触发了更新。</li>
<li>多个状态更新过程，将触发同样多个 notify，造成效率低。可由 observer 实例在合并多个状态更新后，控制 notify 方法的调用。</li>
<li>观察者接受通知时，需要额外的附属信息。可由 subject 实例在调用 update 方法时注入参数实现。按参数信息量的大小，可分为推模型(push model)、拉模型(pull model)两类。推模型，subject 将全量信息注入 update 方法；拉模型，subject 只将少量信息注入 update 方法，再由 observer 实例获取 subject 实例的状态。</li>
<li>观察者只对主题对象的部分信息感兴趣。可由 attach(observer, interset?) 方法中添加 interset 参数实现，interset 表示观察者实际感兴趣的方面(aspects)。</li>
<li><p>当主题对象和观察者的依赖关系较为复杂时，需要实现更改管理器 ChangeManager 来管理依赖关系。ChangeManager 的目的尽量减少观察者反映其主题对象的状态变化所需的工作量。ChangeManager 包含三种职责，维护主体对象到观察者的映射，因此就不需要主题对象维护观察者的引用，也不需要观察者维护主题对象的引用；定义一个特定的更新策略；根据主题对象的请求，更新所有观察者。有两种特殊的 ChangeManager，SimpleChangeManager 总是更新每一个主题对象的所有观察者；DAGChangeManager 处理主题对象及其观察者之间依赖关系构成的无环有向图，两个或多个主题对象改变产生冗余更新时，DAGChangeManager 将保证观察者仅接受一个更新。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeManager</span> </span>&#123;</span><br><span class="line">  subjectToObserverMap = <span class="keyword">new</span> <span class="built_in">Map</span>;</span><br><span class="line"></span><br><span class="line">  register(subject, observer)&#123;</span><br><span class="line">    <span class="keyword">let</span> observers = <span class="keyword">this</span>.subjectToObserverMap.get(subject);</span><br><span class="line">    <span class="keyword">let</span> has = observers.some(<span class="function"><span class="params">ob</span> =&gt;</span> ob === observer);</span><br><span class="line">    <span class="keyword">if</span> ( !has ) observers.push(observer);</span><br><span class="line">    <span class="keyword">this</span>.subjectToObserverMap.set(subject, observers);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  unregister(subject, observer)&#123;</span><br><span class="line">    <span class="keyword">let</span> observers = <span class="keyword">this</span>.subjectToObserverMap.get(subject);</span><br><span class="line">    observers = observers.some(<span class="function"><span class="params">ob</span> =&gt;</span> ob !== observer);</span><br><span class="line">    <span class="keyword">this</span>.subjectToObserverMap.set(subject, observers);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  notify()&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleChangeManager</span> <span class="keyword">extends</span> <span class="title">ChangeManager</span> </span>&#123;</span><br><span class="line">  notify()&#123;</span><br><span class="line">    subjectToObserverMap.keys.map(<span class="function"><span class="params">subject</span> =&gt;</span> &#123;</span><br><span class="line">      subjectToObserverMap.get(subject).map(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">        observer.update(subject);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DAGChangeManager</span> <span class="keyword">extends</span> <span class="title">ChangeManager</span> </span>&#123;</span><br><span class="line">  notify()&#123;</span><br><span class="line">    <span class="keyword">let</span> shouldUpdate = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    subjectToObserverMap.keys.map(<span class="function"><span class="params">subject</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="comment">/* subject */</span>) shouldUpdate = <span class="literal">true</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    subjectToObserverMap.keys.map(<span class="function"><span class="params">subject</span> =&gt;</span> &#123;</span><br><span class="line">      subjectToObserverMap.get(subject).map(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (shouldUpdate) observer.update();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>结合主题对象和观察者，将其接口结合在一个类中实现，这样可以避免多重继承。</p>
</li>
</ol>
<h2 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h2><p>发布订阅模式(或者事件模型)即是观察者模式的一个变种。观察者模式基于在主题对象(the object firing event)中维护观察者(the object wishing receive topic notiffications)，状态更新时触发观察者的行为实现；当观察者仅对主题对象的部分数据感兴趣时，需要在 attach(observer, interset?) 方法执行过程中注入参数 interset。发布订阅模式通过主题频道(topic channel or event channel，也称为事件频道)关联订阅者(subscribers, the object wishing receive topic notiffications)和发布者(publisher, the object firing event)。简单地说，观察者模式基于主题对象、观察者这两个类实现，各自维护另一方的引用；发布订阅模式基于事件模型实现，订阅者以绑定函数形式存储于 topics 或 events 内部属性中，发布过程即取出绑定函数并执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基于发布订阅语义</span></span><br><span class="line"><span class="keyword">let</span> subUid = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pubsub</span> </span>&#123;</span><br><span class="line">  topics = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  subscribe(topic, func)&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.topics[topic])</span><br><span class="line">      <span class="keyword">this</span>.topics[topic] = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> token = (++subUid).toString();</span><br><span class="line">    <span class="keyword">this</span>.topics[topic].push(&#123;</span><br><span class="line">      token: token,</span><br><span class="line">      func: func</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> token;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  publish(topic, ...args)&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.topics[topic])</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.topics[topic].map(<span class="function"><span class="params">subscriber</span> =&gt;</span> &#123;</span><br><span class="line">      subscriber.func(topic, ...args);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  unsubscribe(token)&#123;</span><br><span class="line">    <span class="keyword">this</span>.topics.map(<span class="function"><span class="params">topic</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.topics[topic] = <span class="keyword">this</span>.topics[topic].filter(<span class="function"><span class="params">subscribe</span> =&gt;</span> subscribe.token !== token);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基于事件模型语义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">  events = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  on(event, handler)&#123;<span class="comment">// 也可实现为 linsten, bind 方法</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.events[event])</span><br><span class="line">      <span class="keyword">this</span>.events[event] = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.events[event].push(handler);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  emit(event, ...args)&#123;<span class="comment">// 也可实现为 trigger, fire 方法</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.events[event])</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.events[event].map(<span class="function"><span class="params">handler</span> =&gt;</span> &#123;</span><br><span class="line">      handler(event, ...args);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  off(event, handler)&#123;<span class="comment">// 也可实现为 remove 方法</span></span><br><span class="line">    <span class="keyword">if</span> ( !<span class="keyword">this</span>.events[event] ) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( !handler )</span><br><span class="line">      <span class="keyword">this</span>.events[event] = [];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">this</span>.events[event] = <span class="keyword">this</span>.events[event].filter(<span class="function"><span class="params">fn</span> =&gt;</span> handler !== fn);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="延迟订阅"><a href="#延迟订阅" class="headerlink" title="延迟订阅"></a>延迟订阅</h3><p>在事件模型中，通常需要先添加订阅者，然后再发布事件。在实际业务场景中，有可能存在先发布，发布时还没有订阅者的情景，如 QQ 的离线消息。这时需要构建一个存放离线事件的堆栈(offlineStack)存储发布的消息，当有对象订阅这条消息时，再遍历堆栈，取出事件执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OfflineEvent</span> </span>&#123;</span><br><span class="line">  offlineStack = [];</span><br><span class="line"></span><br><span class="line">  on(event, handler, last)&#123;</span><br><span class="line">    <span class="keyword">super</span>.on(event, handler);</span><br><span class="line">    <span class="keyword">if</span> ( last )&#123;</span><br><span class="line">      <span class="keyword">this</span>.offlineStack.pop()();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.offlineStack.map(<span class="function"><span class="params">fn</span> =&gt;</span> &#123;</span><br><span class="line">        fn();</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  emit(event, ...args)&#123;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123; supper.emit.call(<span class="keyword">this</span>, event, ...args) &#125;;</span><br><span class="line">    <span class="keyword">this</span>.offlineStack.push(fn);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  off(event, handler)&#123;</span><br><span class="line">    <span class="keyword">super</span>.off(event, handler);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="node-events-模块"><a href="#node-events-模块" class="headerlink" title="node: events 模块"></a>node: events 模块</h3><p>events 模块提供 EventEmitter 类，主要实现逻辑见前述 Event 类。</p>
<p>不同的是:</p>
<ol>
<li>once(event, linstener): node 中的 events 模块实现了 once 方法，其实现逻辑为用包装函数(wrapped)装饰 listener，在 emit 方法触发事件调用后，由触发执行的包装函数(wrapped)移除 listener，即调用 eventEmitter.removeListener(event, listener) 方法。</li>
<li>prependListener(event, listener): events 模块还实现了 prependListener 方法，用于在 this._events[event] 数组头部插入 listener，addListener 或 on 方法为尾部插入。</li>
<li>removeListener, removeAllListeners: removeListener(event, listener) 方法只能移除某个绑定函数，即需要指定参数 listener；removeAllListeners(event) 用于移除所有绑定函数，或者某个事件的绑定函数(当指定 event 参数时)，其移除过程中，先移除普通事件的绑定函数，再移除 ‘removeListener’ 事件的绑定函数，即在普通事件的绑定函数移除过程中，仍会触发 ‘removeListener’ 事件。</li>
<li>‘error’ 事件: 对于 ‘error’ 事件，即便没有注册绑定函数，也会以抛出错误对象的形式加以处理。</li>
<li>‘newListener’ 事件: 以 ‘newListener’ 添加的绑定函数，若未曾调用 emit 方法显式触发事件，在下一次 addListener, prependListener 方法执行过程中，将取出 ‘newListener’ 事件的绑定函数，率先执行，即 ‘newListener’ 特殊事件在注册绑定函数时触发执行。</li>
<li>‘removeListener’ 事件: 同 ‘newListener’ 事件，为 events 模块的特殊事件，即在移除绑定函数时触发执行。</li>
<li>在注册绑定函数的过程中，单个绑定函数将以函数形式存储，多个存储为数组形式。</li>
<li>listeners(event), rawListeners(event): 用于获取某个事件的绑定函数。</li>
<li>listenerCount(event): 在 events 模块中，添加和移除绑定函数，都会更新 this._eventsCount 属性(绑定函数个数)，然而 listenerCount(event) 方法用于获取某个事件的绑定函数个数。</li>
<li>setMaxListeners(num), getMaxListeners: 在 events 模块中，this._maxListeners 属性用于限定可注册绑定函数的最大个数，setMaxListeners(num), getMaxListeners 方法即用于设置或获取该值。</li>
</ol>
<p>具体代码，请翻看 node/lib/events.js 文件(version = 9.7.1)。</p>
<h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><ol>
<li>关于 DAGChangeManager？</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[设计模式:可复用面向对象软件的基础]<br><a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript" target="_blank" rel="noopener">学习 Javascript 设计模式</a><br>[Javascript 设计模式和开发实践 - 曾探]</p>
]]></content>
      <categories>
        <category>计算机科学</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>js设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>vue整体架构</title>
    <url>/2018/02/28/frontend/vue/vue%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">|--- compiler <span class="comment"># 将 html 脚本编译为字符串函数体，作为 Vue 实例的 render 方法???</span></span><br><span class="line">  |--- codegen <span class="comment"># 将 ast 转化成字符串拼接的函数内容体</span></span><br><span class="line">    |--- events.js <span class="comment"># 提供 genHandlers(events, isNative, warn) 将 </span></span><br><span class="line">    <span class="comment"># el.events = &#123; name: ['handler1', 'handler2'] &#125; 事件转化为字符串 </span></span><br><span class="line">    <span class="comment"># `on:&#123;$&#123;name&#125;:handler1,handler2&#125;` 形式。html 中绑定事件接受三种形式，</span></span><br><span class="line">    <span class="comment"># 纯函数形式，函数名或方法名，或函数体，由 vue 注入 $event 事件对象</span></span><br><span class="line">    └--- index.js <span class="comment"># 提供 generate(ast, options) 函数，将抽象语法树转化成</span></span><br><span class="line">    <span class="comment"># 字符串拼接的函数 render = `with(this)&#123;return $&#123;code&#125;&#125;`，返回值为</span></span><br><span class="line">    <span class="comment"># &#123; render, staticRenderFns &#125; 对象。options 通过 CodegenState 类</span></span><br><span class="line">    <span class="comment"># 注入全局指令及 options.modules['transformCode'|'genData']</span></span><br><span class="line">  |--- directives <span class="comment"># 注入为 CodegenState 实例的 directives 属性，在 html</span></span><br><span class="line">  <span class="comment"># 中为节点注入指令属性时，在 codegen/index.js 脚本执行 genDirectives 函数</span></span><br><span class="line">  <span class="comment"># 阶段，通过指令属性名获取相应的全局指令脚本 directive，并执行 </span></span><br><span class="line">  <span class="comment"># directives(el, dir, warn)，其中 dir 为指令名</span></span><br><span class="line">    |--- bind.js </span><br><span class="line">    |--- index.js </span><br><span class="line">    |--- model.js </span><br><span class="line">    └--- on.js </span><br><span class="line">  |--- parser <span class="comment"># 将 html 字符串转化成 ast 抽象语法树</span></span><br><span class="line">    |--- entity-decoder.js </span><br><span class="line">    |--- html-parser.js <span class="comment"># 提供 parseHtml(html, options) 函数，解析 html，</span></span><br><span class="line">    <span class="comment"># 通过 options['start'|    'end'|'comment'|'chars'] 提取</span></span><br><span class="line">    <span class="comment"># 节点标签(含属性)、注释和节点内外字符集</span></span><br><span class="line">    |--- index.js <span class="comment"># 提供 parse(template, options) 函数，内部调用 parseHtml </span></span><br><span class="line">    <span class="comment"># 函数，将 html 字符串转化成抽象语法树，树节点 el 注入 parent, children, </span></span><br><span class="line">    <span class="comment"># events, props, attrs, if, for, key, ref 等属性</span></span><br><span class="line">    |--- filter-parser.js <span class="comment"># 提供 parseFilters(exp) 函数，</span></span><br><span class="line">    <span class="comment"># 将 exp = `$&#123;expression&#125;|$&#123;filter&#125;|...` 转换成特定字符串 </span></span><br><span class="line">    <span class="comment"># `_f("$&#123;filter&#125;")($&#123;exp&#125;)`</span></span><br><span class="line">    └--- text-parser.js <span class="comment"># 提供 parseText(text, delimiters?) 函数，</span></span><br><span class="line">    <span class="comment"># 区分对待普通字符串和由分隔符包裹的字符串(应用过滤器，</span></span><br><span class="line">    <span class="comment"># 以 token = `_s($&#123;exp&#125;)` 形式返回)，最终生成 tokens 数组</span></span><br><span class="line">  |--- optimizer.js <span class="comment"># 提供 optimize(root, options) 函数，为视图中不会</span></span><br><span class="line">  <span class="comment"># 改变的静态节点注入 static = true 属性，为只包含文本的静态节点注入</span></span><br><span class="line">  <span class="comment"># staticRoot = true 属性及 staticInFor 属性</span></span><br><span class="line">  |--- create-compiler.js <span class="comment"># 提供 createCompilerCreator(baseCompile) </span></span><br><span class="line">  <span class="comment"># 函数，返回 createCompiler(template, options) 函数，用于创建 </span></span><br><span class="line">  <span class="comment"># &#123; compile, compileToFunctions &#125;。compile 方法，即由通过调用 </span></span><br><span class="line">  <span class="comment"># baseCompile 函数，先执行 parse 函数，后执行 generate 函数，</span></span><br><span class="line">  <span class="comment"># 返回 &#123; render, staticRenderFns, errors,tips &#125; 对象。</span></span><br><span class="line">  <span class="comment"># compileToFunctions 方法即 createCompileToFunctionFn(compile) 返回值</span></span><br><span class="line">  |--- to-function.js <span class="comment"># 提供 createCompileToFunctionFn(compile) 函数，</span></span><br><span class="line">  <span class="comment"># 返回 compileToFunctions(template, options?, vm?) 函数。</span></span><br><span class="line">  <span class="comment"># compileToFunctions 函数同样返回 &#123; render, staticRenderFns &#125; 对象，</span></span><br><span class="line">  <span class="comment"># 其中 render 方法用于将 compile().render 字符串构建为函数并执行</span></span><br><span class="line">  |--- index.js <span class="comment"># 通过为 createCompilerCreator 函数注入 baseCompile 回调，</span></span><br><span class="line">  <span class="comment"># 返回 &#123; compile, compileToFunctions &#125; 对象，见 create-compiler.js 文件注释</span></span><br><span class="line">  |--- error-detector.js</span><br><span class="line">  └--- helpers.js <span class="comment"># 工具函数</span></span><br><span class="line">|--- core</span><br><span class="line">  |--- components </span><br><span class="line">    |--- index.js </span><br><span class="line">    └--- keep-alive.js </span><br><span class="line">  |--- global-api </span><br><span class="line">    |--- use.js <span class="comment"># 添加 Vue.use(plugin, ...args) 静态方法，插件机制，直接执行插件</span></span><br><span class="line">    <span class="comment"># plugin 函数或 plugin.install 函数</span></span><br><span class="line">    |--- mixin.js <span class="comment"># 添加 Vue.mixin(obj) 静态方法，参数 obj 将混入到 Vue.options 属性中</span></span><br><span class="line">    |--- extend.js <span class="comment"># 添加 Vue.extend(options) 静态方法，基于 Vue 构造函数，创建子构造函数</span></span><br><span class="line">    <span class="comment"># 可用于创建生成 vue 实例的工厂函数，由 instance/init.js 模块将各类的 options 注入为</span></span><br><span class="line">    <span class="comment"># Vue 实例的 $options 属性</span></span><br><span class="line">    |--- assets.js <span class="comment"># 添加 Vue['component'|'directive'|'filter'](id, definition?) </span></span><br><span class="line">    <span class="comment"># 静态方法，获取或添加 Vue.options['components'|'directives'|'filters'][id]，</span></span><br><span class="line">    <span class="comment"># 用于创建全局组件、指令或过滤器</span></span><br><span class="line">    └--- index.js <span class="comment"># 添加 Vue.config 静态属性，Vue.util 工具函数集合，</span></span><br><span class="line">    <span class="comment"># Vue.['set'|'delete'|'nextTick'] 静态方法</span></span><br><span class="line">  |--- instance </span><br><span class="line">    |--- render-helpers</span><br><span class="line">      |--- <span class="built_in">bind</span>-object-listeners.js</span><br><span class="line">      |--- <span class="built_in">bind</span>-object-props.js</span><br><span class="line">      |--- check-keycodes.js</span><br><span class="line">      |--- index.js</span><br><span class="line">      |--- render-list.js</span><br><span class="line">      |--- render-slot.js</span><br><span class="line">      |--- render-static.js</span><br><span class="line">      |--- resolve-filter.js</span><br><span class="line">      └--- resolve-slots.js</span><br><span class="line">    |--- init.js <span class="comment"># initMixin(Vue) 为 Vue 添加 _init(options) 原型方法，</span></span><br><span class="line">    <span class="comment"># 合并祖先组件的 options 及 options 入参，赋值给 vm.$options，</span></span><br><span class="line">    <span class="comment"># 相继调用 initProxy, initLifecycle, initEvents, initRender, </span></span><br><span class="line">    <span class="comment"># initInjections, initState, initProvide 方法，执行 'beforeCreate', 'mounted' </span></span><br><span class="line">    <span class="comment"># 生命周期方法，条件调用 $mount(vm.$options.el) 挂载组件</span></span><br><span class="line">    |--- proxy.js <span class="comment"># initProxy(vm)，赋值vm._renderProxy，用户通过 vm._renderProxy </span></span><br><span class="line">    <span class="comment"># 获取不存在的 vm 属性时将会予以警告</span></span><br><span class="line">    |--- lifecycle.js <span class="comment"># initLifecycle(vm)，初始化生命周期相关属性</span></span><br><span class="line">    <span class="comment"># lifecycleMixin(Vue) 为 Vue 添加 _update, $forceUpdate, $destory 原型方法；</span></span><br><span class="line">    <span class="comment"># mountComponent(vm, el, hydrating?) 构建 Watcher 实例，回调中执行 </span></span><br><span class="line">    <span class="comment"># vm._update 方法，执行 'beforeCreate', 'mounted' 方法；</span></span><br><span class="line">    <span class="comment"># update(vm, propsData, listeners, parentVnode, renderChildren) 调用 </span></span><br><span class="line">    <span class="comment"># vm.$forceUpdate 方法更新视图???</span></span><br><span class="line">    <span class="comment"># activateChildComponent(vm, direct?), deactivateChildComponent(vm, direct?)；</span></span><br><span class="line">    <span class="comment"># callHook(vm, hook) 执行 vm.$options[hook]，条件调用 vm.$emit(`hook:$&#123;hook&#125;`)</span></span><br><span class="line">    |--- events.js <span class="comment"># initEvents(vm) 通过 vm.$on, vm.$once 绑定 </span></span><br><span class="line">    <span class="comment"># vm.$options._parentListeners 函数；eventMixin(Vue) 为 Vue 添加 </span></span><br><span class="line">    <span class="comment"># $on, $once, $off, $emit 原型方法，注册事件存储在 vm._events 属性中</span></span><br><span class="line">    |--- render.js <span class="comment"># initRender(vm) 设置 vm['$node'|'$slot'|'$scopeSlots'|</span></span><br><span class="line">    <span class="comment"># '$createElement'|'_c'] 属性或方法，调用 defineReactive 使 </span></span><br><span class="line">    <span class="comment"># vm['$attrs'|'listeners'] 为响应式；renderMixin(Vue) 为 Vue 添加 </span></span><br><span class="line">    <span class="comment"># $nextTick, _render(调用 vm.$options.render 创建 Vnode), </span></span><br><span class="line">    <span class="comment"># _o, _n, _s, _l, ... (注入 compile 函数)等方法</span></span><br><span class="line">    |--- inject.js <span class="comment"># 组件跨级传递数据。initProvider(vm) 将 vm.$options.provide </span></span><br><span class="line">    <span class="comment"># 赋值给 vm._provide；initInjections 调用 defineReactive 将先辈组件传入的</span></span><br><span class="line">    <span class="comment"># 数据响应式化；resolveInject 获取先辈组件的数据</span></span><br><span class="line">    |--- state.js <span class="comment"># proxy(target, sourceKey, key) 将 target[sourceKey][key] </span></span><br><span class="line">    <span class="comment"># 代理为 target[key]；initState(vm) 调用 initProps, initMethods, initData, </span></span><br><span class="line">    <span class="comment"># initComputed, initWatch，间接使用 defineReactive 或 new Watch 响应化</span></span><br><span class="line">    <span class="comment"># 数据或观察数据；stateMixin(Vue) 为 Vue 添加 $data, $props 只读属性，</span></span><br><span class="line">    <span class="comment"># $set, $delete, watch(expOrFn, cb, options?) 原型方法</span></span><br><span class="line">    └--- index.js <span class="comment"># Vue 构造函数，调用 initMixin(Vue), stateMixin(Vue), </span></span><br><span class="line">    <span class="comment"># eventsMixin(Vue), lifecycleMixin(Vue), renderMixin(Vue) 注入原型方法</span></span><br><span class="line">  |--- observer </span><br><span class="line">    |--- index.js <span class="comment"># observerState.shouldConvert 是否将新值转换为响应式；</span></span><br><span class="line">    <span class="comment"># new Observer(value)，若 value 为数组，改写 push 方法，递归为数组项生成 </span></span><br><span class="line">    <span class="comment"># Observer 实例；若 value 为对象，调用 defineReactive 函数使属性响应化，</span></span><br><span class="line">    <span class="comment"># value.__ob__ 挂载 Observer 实例；observer(value, asRootData?) 创建</span></span><br><span class="line">    <span class="comment"># 并返回 value 对应的 Observer 实例；defineReactive 函数调用 </span></span><br><span class="line">    <span class="comment"># Object.defineProperty 方法重写属性的访问器属性，set 方法触发 dep.notify，</span></span><br><span class="line">    <span class="comment"># get 方法触发 dep.depend 方法；set 函数将新添加的属性转化为响应式；</span></span><br><span class="line">    <span class="comment"># delete 函数删除属性触发 dep.notify 方法</span></span><br><span class="line">    |--- array.js <span class="comment"># arrayMethods 提供改写数组 push 等方法的对象，push 等方法</span></span><br><span class="line">    <span class="comment"># 执行时触发 dep.notify 方法调用</span></span><br><span class="line">    |--- dep.js <span class="comment"># Dep 类，管理订阅者，addSub, removeSub 添加或移除订阅者，</span></span><br><span class="line">    <span class="comment"># depend 使 dep 和 Dep.target = watcher 实例相互关联，notify 调用</span></span><br><span class="line">    <span class="comment"># 订阅者的 update 方法；pushTarget, popTarget 更改 Dep.Target</span></span><br><span class="line">    |--- watcher.js <span class="comment"># new Watcher(vm, expOrFn, cb, options?) 通过更改</span></span><br><span class="line">    <span class="comment"># 响应式数据，触发 dep.notify 调用 watcher.update，执行 cb 回调</span></span><br><span class="line">    └--- scheduler.js <span class="comment"># queueWatcher(watcher) 将 watcher 置入队列，</span></span><br><span class="line">    <span class="comment"># 通过 nextTick 在下次渲染完成后调用 watcher 队列的 run 方法，执行其 </span></span><br><span class="line">    <span class="comment"># cb 回调，并调用 'updated', 'activated' 生命周期方法；</span></span><br><span class="line">    <span class="comment"># queueActivatedComponent(vm) 将 vm 加入 activatedChildren 队列，</span></span><br><span class="line">    <span class="comment"># 用于触发 'activated' 生命周期方法</span></span><br><span class="line">  |--- util </span><br><span class="line">    |--- debug.js </span><br><span class="line">    |--- env.js </span><br><span class="line">    |--- error.js </span><br><span class="line">    |--- index.js</span><br><span class="line">    |--- lang.js </span><br><span class="line">    |--- options.js </span><br><span class="line">    |--- perf.js</span><br><span class="line">    └--- props.js </span><br><span class="line">  |--- vdom </span><br><span class="line">    |--- helpers</span><br><span class="line">      |--- extract-props.js </span><br><span class="line">      |--- get-first-component-child.js </span><br><span class="line">      |--- index.js</span><br><span class="line">      |--- is-async-placeholder.js </span><br><span class="line">      |--- merge-hook.js </span><br><span class="line">      |--- normalize-children.js</span><br><span class="line">      |--- resolve-async-component.js </span><br><span class="line">      └--- update-listeners.js</span><br><span class="line">    |--- modules</span><br><span class="line">      |--- directives.js</span><br><span class="line">      |--- index.js </span><br><span class="line">      └--- ref.js</span><br><span class="line">    |--- vnode.js <span class="comment"># Vnode 类，虚拟节点，其 context 属性通常为 vm 实例；</span></span><br><span class="line">    <span class="comment"># createEmptyNode(text) 创建注释节点，createTextNode(text) 创建文本节点</span></span><br><span class="line">    <span class="comment"># cloneNode(vnode, deep?), cloneNodes(vnodes, deep?) 复制节点</span></span><br><span class="line">    |--- create-element.js <span class="comment"># 提供 _createElement(context, tag?, data?, </span></span><br><span class="line">    <span class="comment"># children, normalizationType?) 函数，区分固有元素、已定义组件名、组件的</span></span><br><span class="line">    <span class="comment"># 构造函数等情况，创建 Vnode 实例；createElement 函数，调用 _createElement，</span></span><br><span class="line">    <span class="comment"># 构建 vm._c, vm.$createElement，创建 Vnode 实例</span></span><br><span class="line">    |--- create-component.js <span class="comment"># 提供 createComponent(Ctor, data, context, </span></span><br><span class="line">    <span class="comment"># children, tag?) 参数 Ctor 为构造函数、options 对象或 async 函数，</span></span><br><span class="line">    <span class="comment"># context 为 vm 实例，data 来自 ast，当 options.functional 为真值，</span></span><br><span class="line">    <span class="comment"># 为无状态组件，最终创建 Vnode</span></span><br><span class="line">    |--- create-functional-component.js <span class="comment"># 提供 createFunctionalComponent</span></span><br><span class="line">    <span class="comment"># (Ctor, propsData, data, contextVm, children) 函数，无状态组件，</span></span><br><span class="line">    <span class="comment"># 不会生成 Vue 实例，没有 data，最终创建 Vnode</span></span><br><span class="line">    └--- patch.js <span class="comment"># 提供 createPatchFunction(backend) 函数，参数 backend 中，</span></span><br><span class="line">    <span class="comment"># nodeOpts 属性为平台节点操作，modules 数组为平台属性、样式、事件操作以及</span></span><br><span class="line">    <span class="comment"># Vue 特有的指令、ref 引用操作，生成 patch(oldVnode, Vnode, hydrating, </span></span><br><span class="line">    <span class="comment"># removeOnly, parentElm, refElm) 函数，绘制或重绘视图</span></span><br><span class="line">  |--- config.js </span><br><span class="line">  └--- index.js </span><br><span class="line">|--- platforms</span><br><span class="line">  |--- web</span><br><span class="line">    |--- compiler</span><br><span class="line">      |--- directives</span><br><span class="line">        |--- html.js</span><br><span class="line">        |--- index.js</span><br><span class="line">        |--- model.js</span><br><span class="line">        └--- text.js</span><br><span class="line">      |--- modules</span><br><span class="line">        |--- class.js</span><br><span class="line">        |--- index.js</span><br><span class="line">        |--- model.js</span><br><span class="line">        └--- style.js</span><br><span class="line">      |--- index.js</span><br><span class="line">      |--- options.js</span><br><span class="line">      └--- util.js</span><br><span class="line">    |--- runtime</span><br><span class="line">      |--- components</span><br><span class="line">        |--- index.js</span><br><span class="line">        |--- transition-group.js</span><br><span class="line">        └--- transition.js</span><br><span class="line">      |--- directives</span><br><span class="line">        |--- index.js</span><br><span class="line">        |--- model.js</span><br><span class="line">        └--- show.js</span><br><span class="line">      |--- modules</span><br><span class="line">        |--- attrs.js <span class="comment"># 浏览器端 updateAttrs(oldVnode, vnode) 更新 attr 属性</span></span><br><span class="line">        <span class="comment"># 返回 &#123; create: updateAttrs, update: updateAttrs &#125;</span></span><br><span class="line">        |--- class.js <span class="comment"># 浏览器端 updateClass(oldVnode, vnode) 更新 class 属性</span></span><br><span class="line">        <span class="comment"># 返回 &#123; create: updateClass, update: updateClass &#125;</span></span><br><span class="line">        |--- dom-props.js <span class="comment"># 浏览器端 updateDOMProps(oldVnode, vnode) 更新 prop 属性</span></span><br><span class="line">        <span class="comment"># 返回 &#123; create: updateDOMProps, update: updateDOMProps &#125;</span></span><br><span class="line">        |--- events.js <span class="comment"># 浏览器端 updateDOMListeners(oldVnode, vnode) 更新绑定事件，</span></span><br><span class="line">        <span class="comment"># updateDOMListeners 将为 core/vdom/helpers/index.js 模块注入 add, remove，</span></span><br><span class="line">        <span class="comment"># 返回 &#123; create: updateDOMListeners, update: updateDOMListeners &#125;</span></span><br><span class="line">        |--- style.js <span class="comment"># 浏览器端 updateStyle(oldVnode, vnode) 更新 style 属性</span></span><br><span class="line">        <span class="comment"># 返回 &#123; create: updateStyle, update: updateStyle &#125;</span></span><br><span class="line">        |--- transition.js</span><br><span class="line">        └--- index.js <span class="comment"># 用于构建传入 createPatchFunction(backend) 函数中的 </span></span><br><span class="line">        <span class="comment"># backend.modules 数组，浏览器端节点属性、类、事件、样式操作</span></span><br><span class="line">      |--- class-util.js <span class="comment"># 浏览器端 addClass(el, cls), removeClass(el, cls) 函数</span></span><br><span class="line">      |--- transition-util.js <span class="comment"># resolveTransition(def?) 构建 transition 类名；</span></span><br><span class="line">      <span class="comment"># transitionProp, transitionEndEvent, animationProp, animationEndEvent </span></span><br><span class="line">      <span class="comment"># 相关事件名；nextFrame(fn) 通过 requestAnimationFrame 或 setTimeout </span></span><br><span class="line">      <span class="comment"># 执行 fn 函数；addTransitionClass(el, cls), removeTransitionClass(el, cls)，</span></span><br><span class="line">      <span class="comment"># 类操作；getTransitionInfo(el, expectedType?) 通过 el 样式获取相关属性；</span></span><br><span class="line">      <span class="comment"># whenTransitionEnds(el, expectedType, cb) 通过事件执行 cb 回调</span></span><br><span class="line">      |--- node-ops.js <span class="comment"># 浏览器端 createElement(tagName, vnode), </span></span><br><span class="line">      <span class="comment"># createElementNS(namespace, tagName), createTextNode(text), </span></span><br><span class="line">      <span class="comment"># createComment(text), insertBefore(parentNode, newNode, referenceNode), </span></span><br><span class="line">      <span class="comment"># removeChild(node, child), appendChild(node, child), parentNode(node), </span></span><br><span class="line">      <span class="comment"># nextSibling(node), tagName(node), setTextContext(node), </span></span><br><span class="line">      <span class="comment"># setAttribute(node, key, val) 函数</span></span><br><span class="line">      <span class="comment"># 用于构建传入 createPatchFunction(backend) 函数中的 backend.nodeOpts</span></span><br><span class="line">      |--- patch.js <span class="comment"># 通过 core/vdom/patch.js 模块构建 patch 函数</span></span><br><span class="line">      └--- index.js <span class="comment"># 添加 Vue.config 属性；添加 Vue.options.directives 指令，</span></span><br><span class="line">      <span class="comment"># 添加 Vue.options.components 组件；添加 __patch__, $mount 原型方法；</span></span><br><span class="line">      <span class="comment"># devtools 触发 'emit' 事件；导出 Vue</span></span><br><span class="line">    |--- server</span><br><span class="line">      |--- directives</span><br><span class="line">        |--- index.js</span><br><span class="line">        └--- show.js</span><br><span class="line">      |--- modules</span><br><span class="line">        |--- attrs.js</span><br><span class="line">        |--- class.js</span><br><span class="line">        |--- dom-props.js</span><br><span class="line">        |--- index.js</span><br><span class="line">        └--- style.js</span><br><span class="line">      |--- compiler.js</span><br><span class="line">      └--- util.js</span><br><span class="line">    |--- util</span><br><span class="line">      |--- attrs.js</span><br><span class="line">      |--- class.js</span><br><span class="line">      |--- compat.js</span><br><span class="line">      |--- element.js</span><br><span class="line">      |--- index.js</span><br><span class="line">      └--- style.js</span><br><span class="line">    |--- entry-runtime.js <span class="comment"># 导出 web/runtime/index.js 文件中的 Vue 构造函数</span></span><br><span class="line">    |--- entry-compiler.js</span><br><span class="line">    |--- entry-runtime-with-compiler.js <span class="comment"># 改写 $mount 原型方法，通过 template </span></span><br><span class="line">    <span class="comment"># 节点、html 字符串或节点 id，设置 options.render 方法，随后挂载组件；</span></span><br><span class="line">    <span class="comment"># 添加 Vue.compile =  compileToFunctions 静态方法</span></span><br><span class="line">    |--- entry-server-basic-renderer.js</span><br><span class="line">    └--- entry-server-renderer.js</span><br><span class="line">  └--- weex</span><br><span class="line">    |--- compiler</span><br><span class="line">      |--- directives</span><br><span class="line">        |--- index.js</span><br><span class="line">        └--- model.js</span><br><span class="line">      |--- modules</span><br><span class="line">        |--- append.js</span><br><span class="line">        |--- class.js</span><br><span class="line">        |--- index.js</span><br><span class="line">        |--- props.js</span><br><span class="line">        └--- style.js</span><br><span class="line">      └--- index.js</span><br><span class="line">    |--- runtime</span><br><span class="line">      |--- components</span><br><span class="line">        |--- index.js</span><br><span class="line">        |--- richtext.js</span><br><span class="line">        |--- transition-group.js</span><br><span class="line">        └--- transition.js</span><br><span class="line">      |--- directives</span><br><span class="line">        └--- index.js</span><br><span class="line">      |--- modules</span><br><span class="line">        |--- attrs.js</span><br><span class="line">        |--- class.js</span><br><span class="line">        |--- events.js</span><br><span class="line">        |--- index.js</span><br><span class="line">        |--- style.js</span><br><span class="line">        └--- transition.js</span><br><span class="line">      |--- index.js</span><br><span class="line">      |--- node-ops.js</span><br><span class="line">      |--- patch.js</span><br><span class="line">      └--- text-node.js</span><br><span class="line">    |--- util</span><br><span class="line">      └--- index.js</span><br><span class="line">    |--- entry-compiler.js</span><br><span class="line">    |--- entry-framework.js</span><br><span class="line">    └--- entry-runtime-factory.js</span><br><span class="line">|--- server</span><br><span class="line">  |--- bundle-renderer.js </span><br><span class="line">    |--- create-bundle-renderer.js</span><br><span class="line">    |--- create-bundle-runner.js</span><br><span class="line">    └--- <span class="built_in">source</span>-map-support.js</span><br><span class="line">  |--- optimizing-compiler.js </span><br><span class="line">    |--- codegen.js</span><br><span class="line">    |--- index.js</span><br><span class="line">    |--- modules.js</span><br><span class="line">    |--- optimizer.js</span><br><span class="line">    └--- runtime-helpers.js</span><br><span class="line">  |--- template-renderer.js </span><br><span class="line">    |--- create-async-file-mapper.js</span><br><span class="line">    |--- index.js</span><br><span class="line">    |--- parse-template.js</span><br><span class="line">    └--- template-stream.js</span><br><span class="line">  |--- webpack-plugin.js </span><br><span class="line">    |--- client.js</span><br><span class="line">    |--- server.js</span><br><span class="line">    └--- util.js</span><br><span class="line">  |--- create-basic-renderer.js </span><br><span class="line">  |--- create-renderer.js </span><br><span class="line">  |--- render-context.js </span><br><span class="line">  |--- render-stream.js </span><br><span class="line">  |--- render.js </span><br><span class="line">  |--- util.js </span><br><span class="line">  └--- write.js </span><br><span class="line">|--- sfc</span><br><span class="line">  └--- parser.js </span><br><span class="line">└--- shared</span><br><span class="line">  |--- constants.js <span class="comment"># 导出 SSR_ATTR 服务器端渲染, ASSET_TYPES 静态成员名</span></span><br><span class="line">  <span class="comment"># (component, directive, filter), LIFECYCLE_HOOKS 生命周期钩子</span></span><br><span class="line">  └--- util.js</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>frontend</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript文档笔记</title>
    <url>/2018/02/25/frontend/js/typescript%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><p>ts 基础类型包含 boolean, number, string, array, tuple 元祖, enum, any 任意类型, void 非任意类型(可赋值为 undefined 或 null，通常用于函数无返回值时), undefined, null, never 永不存在值的类型(通常用于函数报错或陷入死循环时), symbol。</p>
<p>其中，数值类型支持十进制、十六进制、八进制和二进制字面量。</p>
<p>字符串类型支持 es6 模板字符串。</p>
<p>数组类型 Array<t> 限定元素类型一致，使用 let list: number[] = [1, 2, 3]; 或 let list: Array<number> = [1, 2, 3]; 声明。ReadonlyArray<t> 只读数组类型，不能将其赋值给普通数组，但可以通过类型断言将其转化为普通数组，如 numberReadonlyArray as number[]。</t></number></t></p>
<p>元祖类型预先声明元素类型，元素类型可以不一致。如 let x: [string, number]; x = [‘hello’, 10]; 同时，对于新增的元素，其类型必须在已声明类型中。上述示例中，x[6] = true; 将报错。</p>
<p>枚举从 0 开始为元素编号，也可以手动编号，如 enum Color {Red = 1, Green, Blue}; 通过 Color.Red 或 Color[1] 可以获取枚举值。</p>
<p>symbol 类型的值是通过 Symbol 构造函数创建，其值不可改变且唯一，如 let sym = Symbol()。es6 支持。</p>
<h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>类型断言使用 <type>value 或 value as Type；JSX 中只能使用 as，不能使用尖括号。TS 尝试做类型转换，而没有类型检查和结构。</type></p>
<h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><ul>
<li>Symbol.hasInstance 方法，instanceof 运算符内部调用 Symbol.hasInstance 方法。</li>
<li>Symbol.iterator 方法，for-of语句内部调用 Symbol.iterator 方法，返回对象的默认迭代器。</li>
<li>Symbol.isConcatSpreadable 属性，Array.prototype.concat 方法内部使用 Symbol.isConcatSpreadable 判断数组是否可展开。</li>
<li>Symbol.match 方法，String.prototype.match 方法内部调用 Symbol.match 方法。</li>
<li>Symbol.replace 方法，String.prototype.replace 方法内部调用 Symbol.replace 方法。</li>
<li>Symbol.search 方法，String.prototype.search 方法内部调用 Symbol.search 方法。</li>
<li>Symbol.split 方法，String.prototype.split 方法内部调用 Symbol.split 方法。</li>
<li>Symbol.toStringTag 方法，Object.prototype.toString 方法内部调用 Symbol.toStringTag 方法。</li>
<li>Symbol.species 构造函数，用于创建派生对象。</li>
<li>Symbol.toPrimitive 方法，ToPrimitive 抽象操作调用 Symbol.toPrimitive 方法，把对象转换为相应的原始值。</li>
<li>Symbol.unscopables 对象，它自己拥有的属性会被with作用域排除在外。</li>
</ul>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>let 为块级作用域，用于修正 var 为函数、模块级作用域的怪异问题。<br>const 块级作用域，常量。</p>
<h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>var 变量的声明会在编译阶段上移到函数、模块头部，因此造成怪异一为在 if, for 语句中声明的 var 变量可以在条件或循环语句外访问；造成怪异二为在内外两层 for 语句条件体内声明的同一变量引用同一个变量；造成怪异三为 for 语句执行过程有延迟，其最终引用的是条件体执行完成的结果。</p>
<p>推想 let 修正块级作用域的过程，就是在编译过程中用匿名函数包裹代码块(if, for, {} 平级)，var 变量在该匿名函数中声明，可以解决怪异一、二；使用闭包包裹延迟函数，可以在延迟函数等待期间保留原有的作用域，这可能会导致内存泄漏。</p>
<h3 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h3><p>数组使用 [ item1, item2, …rests ] = arr; 语法解构，如 [first, second] = [second, first]; 即为变量交换数据。</p>
<p>对象使用 { prop1, prop2, …rests } = obj; 语法解构。</p>
<p>属性重命名采用 “:”，默认值采用 “=”，如 { prop1 = “default”, prop2: “key” }。</p>
<p>解构适用于函数入参。</p>
<h3 id="展开"><a href="#展开" class="headerlink" title="展开"></a>展开</h3><p>展开同样使用 “…”，如 val = { prop1: “value”, …obj }。</p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="接口作为类型"><a href="#接口作为类型" class="headerlink" title="接口作为类型"></a>接口作为类型</h3><p>当使用 value: Interface 语法将接口用于类型检查时，value 必须满足 Interface 声明的结构化类型，即 value 作为对象时，其属性需满足 Interface 属性的类型规则，允许 value 包含接口未声明的额外属性；value 作为函数时，其入参、返回值须满足接口约定的类型规则，value 参数名可与 Interface 定义的名字不同。</p>
<p>接口类型使用 “?” 后缀声明可选属性，当可选属性存在时，且 value 为对象字面量时，将不允许 value 包含接口未声明的额外属性；若 value 为变量，则允许。</p>
<p>使用 “readonly” 修饰符声明只读属性。</p>
<p>使用 [propName: Type1]: Type2 索引签名可用于接受特定类型的属性，Type1 用于约定索引的类型(索引包含对象的属性和数组项)，Type2 用于约定值类型。索引签名 Type1 可以是 “string”, “number” 中的一个，数字通过转化为字符串索引对象，因此数字索引的返回值必须是字符串索引的返回值的子类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface SquareConfig &#123;</span><br><span class="line">  color?: string;</span><br><span class="line">  width?: number;</span><br><span class="line">  [propName: string]: any;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface SearchFunc &#123;</span><br><span class="line">  (source: string, <span class="attr">subString</span>: string): boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关于索引类型</span></span><br><span class="line">interface NumberDictionary &#123;</span><br><span class="line">  [index: string]: number;</span><br><span class="line">  length: number;<span class="comment">// 可以，length是number类型</span></span><br><span class="line">  name: string<span class="comment">// 错误，`name`的类型与索引类型返回值的类型不匹配</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="接口用于实现"><a href="#接口用于实现" class="headerlink" title="接口用于实现"></a>接口用于实现</h3><p>接口描述了类的公共部分，但不包含私有部分。</p>
<p>当类实现了接口时，只对其实例部分进行类型检查，而 constructor 方法属于类的静态部分。对 constructor 方法进行校验需要由工厂函数完成。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface ClockConstructor &#123;</span><br><span class="line">  <span class="keyword">new</span> (hour: number, <span class="attr">minute</span>: number): ClockInterface;</span><br><span class="line">&#125;</span><br><span class="line">interface ClockInterface &#123;</span><br><span class="line">  tick();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createClock</span>(<span class="params">ctor: ClockConstructor, hour: number, minute: number</span>): <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ctor(hour, minute);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DigitalClock</span> <span class="title">implements</span> <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(h: number, m: number) &#123; &#125;</span><br><span class="line">  tick() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"beep beep"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> digital = createClock(DigitalClock, <span class="number">12</span>, <span class="number">17</span>);</span><br></pre></td></tr></table></figure>
<p>接口可以继承接口，且一个接口可以继承多个接口。</p>
<p>接口可以继承类。当接口继承类时，接口会继承类的private和protected成员，但不包含类的实现。继承类的接口只能被该类及其子类继承。</p>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>子类通过 super 关键字访问父类，如 super() 用于执行父类的构造函数。</p>
<p>public 关键字用于声明公共属性，默认使用 public 修饰符；protected 关键字用于声明保护属性；private 关键字用于声明私有属性。实例含有相同的公共属性、私有属性，且这些公共属性、私有属性声明在同一个类中，两个实例就是兼容的，就可以互相赋值，否则会报错。</p>
<p>constructor 构造函数也能被标注为 protected，意味着这个类不能在包含它的类外被实例化，但是能被继承。</p>
<p>对构造函数的入参使用 private, protected, public 修饰符时，类初始化将构建同名私有属性、保护属性、公共属性。</p>
<p>readonly 关键字用于声明只读属性，只读属性必须在声明时或构造函数里被初始化。</p>
<p>get, set 关键字用于声明存取器属性，需要将编译器设置为输出ECMAScript 5或更高，只带有 get 不带有 set的存取器自动被推断为 readonly。</p>
<p>static 关键字用于声明静态属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  protected name: string;</span><br><span class="line">  protected <span class="keyword">constructor</span>(theName: string) &#123; <span class="keyword">this</span>.name = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Employee 能够继承 Person</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  private department: string;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(name: string, department: string) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">    <span class="keyword">this</span>.department = department;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public getElevatorPitch() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> and I work in <span class="subst">$&#123;<span class="keyword">this</span>.department&#125;</span>.`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> howard = <span class="keyword">new</span> Employee(<span class="string">"Howard"</span>, <span class="string">"Sales"</span>);</span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> Person(<span class="string">"John"</span>); <span class="comment">// 错误: 'Person' 的构造函数是被保护的.</span></span><br></pre></td></tr></table></figure>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>abstract 关键字用于声明抽象类。在抽象类，abstract 关键字还可以用于声明抽象方法，抽象方法只定义方法签名但不包含方法体，即不包含实现。由子类提供具体方法。</p>
<h3 id="Mixins混入"><a href="#Mixins混入" class="headerlink" title="Mixins混入"></a>Mixins混入</h3><p>ts 中的类，可以用 implements 关键字实现多个类，即将类视为接口，需要在实现类中添加接口类的成员属性，再通过 applyMixins 等自定义函数将接口类的原型属性赋给实现类。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Disposable Mixin</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Disposable</span> </span>&#123;</span><br><span class="line">  isDisposed: boolean;</span><br><span class="line">  dispose() &#123;</span><br><span class="line">    <span class="keyword">this</span>.isDisposed = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Activatable Mixin</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Activatable</span> </span>&#123;</span><br><span class="line">  isActive: boolean;</span><br><span class="line">  activate() &#123;</span><br><span class="line">    <span class="keyword">this</span>.isActive = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  deactivate() &#123;</span><br><span class="line">    <span class="keyword">this</span>.isActive = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartObject</span> <span class="title">implements</span> <span class="title">Disposable</span>, <span class="title">Activatable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>.isActive + <span class="string">" : "</span> + <span class="keyword">this</span>.isDisposed), <span class="number">500</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  interact() &#123;</span><br><span class="line">    <span class="keyword">this</span>.activate();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Disposable</span></span><br><span class="line">  isDisposed: boolean = <span class="literal">false</span>;</span><br><span class="line">  dispose: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">  <span class="comment">// Activatable</span></span><br><span class="line">  isActive: boolean = <span class="literal">false</span>;</span><br><span class="line">  activate: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">  deactivate: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line">applyMixins(SmartObject, [Disposable, Activatable]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> smartObj = <span class="keyword">new</span> SmartObject();</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> smartObj.interact(), <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// In your runtime library somewhere</span></span><br><span class="line"><span class="comment">////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyMixins</span>(<span class="params">derivedCtor: any, baseCtors: any[]</span>) </span>&#123;</span><br><span class="line">  baseCtors.forEach(<span class="function"><span class="params">baseCtor</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span>.getOwnPropertyNames(baseCtor.prototype).forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">      derivedCtor.prototype[name] = baseCtor.prototype[name];</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>定义函数时，可以声明参数和返回值的类型，如 (arg: Type1) =&gt; Type2 {} 或 function(arg: Type1): Type2 {}。</p>
<p>函数重载通过定义多个函数类型来实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> suits = [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x: &#123;suit: string; card: number; &#125;[]</span>): <span class="title">number</span>;</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">pickCard</span>(<span class="params">x: number</span>): </span>&#123;suit: string; card: number; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">"object"</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * x.length);</span><br><span class="line">    <span class="keyword">return</span> pickedCard;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">"number"</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(x / <span class="number">13</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">suit</span>: suits[pickedSuit], <span class="attr">card</span>: x % <span class="number">13</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myDeck = [&#123; <span class="attr">suit</span>: <span class="string">"diamonds"</span>, <span class="attr">card</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">suit</span>: <span class="string">"spades"</span>, <span class="attr">card</span>: <span class="number">10</span> &#125;, &#123; <span class="attr">suit</span>: <span class="string">"hearts"</span>, <span class="attr">card</span>: <span class="number">4</span> &#125;];</span><br><span class="line"><span class="keyword">let</span> pickedCard1 = myDeck[pickCard(myDeck)];</span><br><span class="line">alert(<span class="string">"card: "</span> + pickedCard1.card + <span class="string">" of "</span> + pickedCard1.suit);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pickedCard2 = pickCard(<span class="number">15</span>);</span><br><span class="line">alert(<span class="string">"card: "</span> + pickedCard2.card + <span class="string">" of "</span> + pickedCard2.suit);</span><br></pre></td></tr></table></figure>
<h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p>非方法式调用会将 this 视为 window(在严格模式下，this 为 undefined)。fn(…args) 等同 fn.call(window [ES5-strict: undefined], …args)。obj.method(…args) 等同 obj.method.call(obj, …args)。</p>
<p>方法若以闭包形式书写，其返回函数的 this 始终指向 undefined 或 window，而不是挂载的对象。箭头函数即用于将返回函数的 this 指向挂载对象。不同于函数在调用时才获知 this 的指向，箭头函数在定义时就声明了 this 的指向。</p>
<p>推想函数 this 指向，就是在编译过程通过判断调用方式是函数还是方法，将 this 赋值为 undefined 或相关对象。箭头函数改写 this 的实现过程也即是，在编译阶段通过包装函数调用 bind 方法将箭头函数的 this 改写为函数所在的 this 或方法的上层对象。箭头函数的 this 指向在包装函数内实现，因此不能改变 this 的指向。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface Card &#123;</span><br><span class="line">    suit: string;</span><br><span class="line">    card: number;</span><br><span class="line">&#125;</span><br><span class="line">interface Deck &#123;</span><br><span class="line">    suits: string[];</span><br><span class="line">    cards: number[];</span><br><span class="line">    createCardPicker(<span class="keyword">this</span>: Deck): <span class="function"><span class="params">()</span> =&gt;</span> Card;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> deck: Deck = &#123;</span><br><span class="line">    suits: [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>],</span><br><span class="line">    cards: <span class="built_in">Array</span>(<span class="number">52</span>),</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> The function now explicitly specifies that its callee must be of type Deck</span></span><br><span class="line">    <span class="comment">// 使用 this 参数将 this 的类型从 any 变更成 Deck 类型</span></span><br><span class="line">    createCardPicker: <span class="function"><span class="keyword">function</span>(<span class="params">this: Deck</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">52</span>);</span><br><span class="line">            <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(pickedCard / <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">suit</span>: <span class="keyword">this</span>.suits[pickedSuit], <span class="attr">card</span>: pickedCard % <span class="number">13</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cardPicker = deck.createCardPicker();</span><br><span class="line"><span class="keyword">let</span> pickedCard = cardPicker();</span><br><span class="line"></span><br><span class="line">alert(<span class="string">"card: "</span> + pickedCard.card + <span class="string">" of "</span> + pickedCard.suit);</span><br></pre></td></tr></table></figure>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>声明时不确定类型，调用时设定类型，促使定义的函数或类适用于不同的类型，同时能避免使用 any 时跳过类型校验的情景。</p>
<p>泛型使用 ‘&lt;’, ‘&gt;’ 包裹。</p>
<p>泛型函数使用 function<t>(arg: T): T {  } 或 function<t>(arg: Array<t>): T {  } 等形式。</t></t></t></p>
<p>泛型类使用 class ClassName<t> { method: (arg: T) =&gt; T } 等形式。</t></p>
<p>泛型可使用继承接口的形式加以约束</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 泛型函数</span></span><br><span class="line">interface GenericIdentityFn&lt;T&gt; &#123;</span><br><span class="line">  (arg: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: GenericIdentityFn&lt;number&gt; = identity;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericNumber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  zeroValue: T;</span><br><span class="line">  add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;number&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用泛型创建工厂函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>&lt;<span class="title">T</span>&gt;(<span class="params">c: &#123;new(</span>): <span class="title">T</span>; &#125;): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> c();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>枚举类型在编译阶段通过函数赋值对象的方式构建，每个枚举成员包含枚举值和枚举名，生成枚举值到枚举名的双向映射。在编译阶段，枚举值通过直接求值获得；若未指定枚举值，首个枚举成员的枚举值初始化为 0，其余枚举成员的枚举值由前一个枚举成员的枚举值加 1 获得。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">enum Directions &#123;</span><br><span class="line">  Up,</span><br><span class="line">  Down,</span><br><span class="line">  Left,</span><br><span class="line">  Right</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Directions.Up;<span class="comment">// 0</span></span><br><span class="line">Directions[<span class="number">0</span>];<span class="comment">// "Up"</span></span><br></pre></td></tr></table></figure>
<h2 id="高级类型"><a href="#高级类型" class="headerlink" title="高级类型"></a>高级类型</h2><p>交叉类型使用 Type1 &amp; Type2 &amp; Type3 语法，被校验数据须包含所有声明类型的特性。</p>
<p>联合类型使用 Type1 | Type2 | Type3 语法，被校验数据可以是所有声明类型的其中之一。</p>
<p>标签联合仍使用 Type1 | Type2 | Type3 语法，且 Type1, Type2, Type3 中包含可辨识的标签属性，用于区分到底属于哪个类型。</p>
<p>索引类型使用 keyof T 校验对象属性, T[K] 校验值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标签联合</span></span><br><span class="line">interface Square &#123;</span><br><span class="line">  kind: <span class="string">"square"</span>;</span><br><span class="line">  size: number;</span><br><span class="line">&#125;</span><br><span class="line">interface Rectangle &#123;</span><br><span class="line">  kind: <span class="string">"rectangle"</span>;</span><br><span class="line">  width: number;</span><br><span class="line">  height: number;</span><br><span class="line">&#125;</span><br><span class="line">interface Circle &#123;</span><br><span class="line">  kind: <span class="string">"circle"</span>;</span><br><span class="line">  radius: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Shape = Square | Rectangle | Circle;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params">s: Shape</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (s.kind) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"square"</span>: <span class="keyword">return</span> s.size * s.size;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"rectangle"</span>: <span class="keyword">return</span> s.height * s.width;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"circle"</span>: <span class="keyword">return</span> <span class="built_in">Math</span>.PI * s.radius ** <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 索引类型</span></span><br><span class="line">function getProperty&lt;T, K extends keyof T&gt;(o: T, name: K): T[K] &#123;</span><br><span class="line">  <span class="keyword">return</span> o[name]; <span class="comment">// o[name] is of type T[K]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>映射类型，通过 [P in keyof T] 遍历旧类型的值 T[P]，以构建新类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Readonly, Partial, Pick, Record 包含在 ts 标准库中</span></span><br><span class="line">type Readonly&lt;T&gt; = &#123;</span><br><span class="line">  readonly [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;</span><br><span class="line">type Partial&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;</span><br><span class="line">type Pick&lt;T, K extends keyof T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;</span><br><span class="line">type Record&lt;K extends string, T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> K]: T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><p>类型别名使用 type Alias = Type 语法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">type Name = string;</span><br><span class="line">type NameResolver = <span class="function"><span class="params">()</span> =&gt;</span> string;</span><br><span class="line">type NameOrResolver = Name | NameResolver;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">n: NameOrResolver</span>): <span class="title">Name</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型类型别名</span></span><br><span class="line">type Container&lt;T&gt; = &#123; <span class="attr">value</span>: T &#125;;</span><br></pre></td></tr></table></figure>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>模块有其自身的作用域，通过模块加载器导入其他模块。模块导入使用 import 关键字，导出使用 export 关键字，默认导出使用 default 关键字(数值、类和函数声明可以直接被标记为默认导出)。</p>
<p>模块导入导出也可以使用 export = xxx; import module = require(“module”); 语法。</p>
<p>根据编译时指定的模块目标参数，编译器会生成相应的供Node.js (CommonJS)，Require.js (AMD)，isomorphic (UMD), SystemJS或ECMAScript 2015 native modules (ES6)模块加载系统使用的代码。编译时，使用 –module commonjs，将转化为 CommonJS 模块；使用 –module amd，将转化为 AMD 模块；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 导出重命名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZipCodeValidator</span> <span class="title">implements</span> <span class="title">StringValidator</span> </span>&#123;</span><br><span class="line">  isAcceptable(s: string) &#123;</span><br><span class="line">    <span class="keyword">return</span> s.length === <span class="number">5</span> &amp;&amp; numberRegexp.test(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; ZipCodeValidator &#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; ZipCodeValidator <span class="keyword">as</span> mainValidator &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新导出</span></span><br><span class="line"><span class="keyword">export</span> &#123;ZipCodeValidator <span class="keyword">as</span> RegExpBasedZipCodeValidator&#125; <span class="keyword">from</span> <span class="string">"./ZipCodeValidator"</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">"./ZipCodeValidator"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入重命名</span></span><br><span class="line"><span class="keyword">import</span> &#123; ZipCodeValidator <span class="keyword">as</span> ZCV &#125; <span class="keyword">from</span> <span class="string">"./ZipCodeValidator"</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> validator <span class="keyword">from</span> <span class="string">"./ZipCodeValidator"</span>;</span><br></pre></td></tr></table></figure>
<h3 id="模块解析策略"><a href="#模块解析策略" class="headerlink" title="模块解析策略"></a>模块解析策略</h3><p>ts 共有两种模块解析策略，Node 和 Classic，默认值为使用了 –module AMD | System | ES2015 模块系统的 Classic 策略。当使用 Classic 策略时，查找非相对模块通过从包含导入文件的目录开始依次向上级目录遍历，以定位匹配的声明文件。当使用 Node 策略时，查找相对模块先定位到同名文件，再定位到同名目录(根据目录下 package.json 文件中的 types 属性定位文件，或者定位到目录下 index.ts 文件)；查找相对模块通过先上遍历目录，定位到每层 node_modules 目录下与 模块同名的目录，再通过 package.json 或 index.ts 定位模块文件。</p>
<p>tsconfig.json 文件中的 compilerOptions.baseUrl, compilerOptions.paths 属性用于设定查找文件的基础路径以及特定模块的查找路径。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    "baseUrl": ".", // 相对于当前路径进行计算，compilerOptions.paths 存在时须指定 baseUrl</span><br><span class="line">    "paths": &#123;</span><br><span class="line">      "jquery": ["node_modules/jquery/dist/jquery"], // 此处映射是相对于"baseUrl"</span><br><span class="line">      "*": [// 其他模块分别在 projectRoot 或 projectRoot/generated 目录下查找</span><br><span class="line">        "*",</span><br><span class="line">        <span class="string">"generated/*"</span></span><br><span class="line">      ],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>命名空间使用 namespace Name {} 声明，使用 export 关键字将命名空间内部声明的数据导出，没有使用 export 修饰的数据只能在命名空间内使用。编译阶段，在全局空间下构建一个普通对象，export 导出的数据构成该对象的属性或方法，因此，从命名空间中导出的数据通过 Name.exportName 加以引用。</p>
<p>可以将同一个命名空间内声明的多个类放置在不同的文件中，仍旧使用同一个命名空间，再使用引用标签可以告知编译器这些文件之间的关联。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">namespace Validation &#123;</span><br><span class="line">  <span class="keyword">export</span> interface StringValidator &#123;</span><br><span class="line">    isAcceptable(s: string): boolean;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> lettersRegexp = <span class="regexp">/^[A-Za-z]+$/</span>;</span><br><span class="line">  <span class="keyword">const</span> numberRegexp = <span class="regexp">/^[0-9]+$/</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LettersOnlyValidator</span> <span class="title">implements</span> <span class="title">StringValidator</span> </span>&#123;</span><br><span class="line">    isAcceptable(s: string) &#123;</span><br><span class="line">        <span class="keyword">return</span> lettersRegexp.test(s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ZipCodeValidator</span> <span class="title">implements</span> <span class="title">StringValidator</span> </span>&#123;</span><br><span class="line">    isAcceptable(s: string) &#123;</span><br><span class="line">      <span class="keyword">return</span> s.length === <span class="number">5</span> &amp;&amp; numberRegexp.test(s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strings = [<span class="string">"Hello"</span>, <span class="string">"98052"</span>, <span class="string">"101"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> validators: &#123; [s: string]: Validation.StringValidator; &#125; = &#123;&#125;;</span><br><span class="line">validators[<span class="string">"ZIP code"</span>] = <span class="keyword">new</span> Validation.ZipCodeValidator();</span><br><span class="line">validators[<span class="string">"Letters only"</span>] = <span class="keyword">new</span> Validation.LettersOnlyValidator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> s <span class="keyword">of</span> strings) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> name <span class="keyword">in</span> validators) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`"<span class="subst">$&#123; s &#125;</span>" - <span class="subst">$&#123; validators[name].isAcceptable(s) ? <span class="string">"matches"</span> : <span class="string">"does not match"</span> &#125;</span> <span class="subst">$&#123; name &#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用多个文件分解命名空间</span></span><br><span class="line"><span class="comment">// Validation.ts</span></span><br><span class="line">namespace Validation &#123;</span><br><span class="line">  <span class="keyword">export</span> interface StringValidator &#123;</span><br><span class="line">    isAcceptable(s: string): boolean;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LettersOnlyValidator.ts</span></span><br><span class="line"><span class="comment">/// &lt;reference path="Validation.ts" /&gt;</span></span><br><span class="line">namespace Validation &#123;</span><br><span class="line">  <span class="keyword">const</span> lettersRegexp = <span class="regexp">/^[A-Za-z]+$/</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">LettersOnlyValidator</span> <span class="title">implements</span> <span class="title">StringValidator</span> </span>&#123;</span><br><span class="line">    isAcceptable(s: string) &#123;</span><br><span class="line">      <span class="keyword">return</span> lettersRegexp.test(s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ZipCodeValidator.ts</span></span><br><span class="line"><span class="comment">/// &lt;reference path="Validation.ts" /&gt;</span></span><br><span class="line">namespace Validation &#123;</span><br><span class="line">  <span class="keyword">const</span> numberRegexp = <span class="regexp">/^[0-9]+$/</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ZipCodeValidator</span> <span class="title">implements</span> <span class="title">StringValidator</span> </span>&#123;</span><br><span class="line">    isAcceptable(s: string) &#123;</span><br><span class="line">      <span class="keyword">return</span> s.length === <span class="number">5</span> &amp;&amp; numberRegexp.test(s);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Test.ts</span></span><br><span class="line"><span class="comment">/// &lt;reference path="Validation.ts" /&gt;</span></span><br><span class="line"><span class="comment">/// &lt;reference path="LettersOnlyValidator.ts" /&gt;</span></span><br><span class="line"><span class="comment">/// &lt;reference path="ZipCodeValidator.ts" /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strings = [<span class="string">"Hello"</span>, <span class="string">"98052"</span>, <span class="string">"101"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> validators: &#123; [s: string]: Validation.StringValidator; &#125; = &#123;&#125;;</span><br><span class="line">validators[<span class="string">"ZIP code"</span>] = <span class="keyword">new</span> Validation.ZipCodeValidator();</span><br><span class="line">validators[<span class="string">"Letters only"</span>] = <span class="keyword">new</span> Validation.LettersOnlyValidator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> s <span class="keyword">of</span> strings) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> name <span class="keyword">in</span> validators) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">""</span><span class="string">" + s + "</span><span class="string">" "</span> + (validators[name].isAcceptable(s) ? <span class="string">" matches "</span> : <span class="string">" does not match "</span>) + name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 import q = x.y.z 语法以别名形式导出常用命名空间内的类，import 相较于 var，会构建新的引用</span></span><br><span class="line">namespace Shapes &#123;</span><br><span class="line">  <span class="keyword">export</span> namespace Polygons &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> </span>&#123; &#125;</span><br><span class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> </span>&#123; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> polygons = Shapes.Polygons;</span><br><span class="line"><span class="keyword">let</span> sq = <span class="keyword">new</span> polygons.Square(); <span class="comment">// Same as "new Shapes.Polygons.Square()"</span></span><br></pre></td></tr></table></figure>
<h2 id="声明合并"><a href="#声明合并" class="headerlink" title="声明合并"></a>声明合并</h2><p>ts 的声明会创建以下三种实体，命名空间，类型或值。创建命名空间的声明会新建一个命名空间，用 “.” 访问其下设定的值(包含类，函数等)。创建类型的声明会用声明的模型创建一个类型并绑定到给定的名字上，包含类，枚举，接口，类型别名。创建值的声明会创建在 js 输出中看到的值，包含函数，变量。给定名字相同时，ts 会将声明合并。</p>
<h3 id="合并接口"><a href="#合并接口" class="headerlink" title="合并接口"></a>合并接口</h3><p>ts 合并接口时，后声明接口中的函数成员具有较高优先级(当该函数的参数类型更为精细时，则该函数成员具有更高优先级)；同名非函数成员有不同类型时，会造成编译错误。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface Document &#123;</span><br><span class="line">  createElement(tagName: any): Element;</span><br><span class="line">&#125;</span><br><span class="line">interface Document &#123;</span><br><span class="line">  createElement(tagName: <span class="string">"div"</span>): HTMLDivElement;</span><br><span class="line">  createElement(tagName: <span class="string">"span"</span>): HTMLSpanElement;</span><br><span class="line">&#125;</span><br><span class="line">interface Document &#123;</span><br><span class="line">  createElement(tagName: string): HTMLElement;</span><br><span class="line">  createElement(tagName: <span class="string">"canvas"</span>): HTMLCanvasElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并后</span></span><br><span class="line">interface Document &#123;</span><br><span class="line">  createElement(tagName: <span class="string">"canvas"</span>): HTMLCanvasElement;</span><br><span class="line">  createElement(tagName: <span class="string">"div"</span>): HTMLDivElement;</span><br><span class="line">  createElement(tagName: <span class="string">"span"</span>): HTMLSpanElement;</span><br><span class="line">  createElement(tagName: string): HTMLElement;</span><br><span class="line">  createElement(tagName: any): Element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="合并命名空间"><a href="#合并命名空间" class="headerlink" title="合并命名空间"></a>合并命名空间</h3><p>ts 合并命名空间时，当某个命名空间有非导出成员，编译时将会报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">namespace Animals &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Zebra</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace Animals &#123;</span><br><span class="line">  <span class="keyword">export</span> interface Legged &#123; <span class="attr">numberOfLegs</span>: number; &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并后</span></span><br><span class="line">namespace Animals &#123;</span><br><span class="line">  <span class="keyword">export</span> interface Legged &#123; <span class="attr">numberOfLegs</span>: number; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Zebra</span> </span>&#123; &#125;</span><br><span class="line">  <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="合并命名空间和类"><a href="#合并命名空间和类" class="headerlink" title="合并命名空间和类"></a>合并命名空间和类</h3><p>为类添加静态属性，可用于创建内部类。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Album</span> </span>&#123;</span><br><span class="line">  label: Album.AlbumLabel;</span><br><span class="line">&#125;</span><br><span class="line">namespace Album &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AlbumLabel</span> </span>&#123; &#125;<span class="comment">// 必须导出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="合并命名空间和函数"><a href="#合并命名空间和函数" class="headerlink" title="合并命名空间和函数"></a>合并命名空间和函数</h3><p>为函数添加属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildLabel</span>(<span class="params">name: string</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> buildLabel.prefix + name + buildLabel.suffix;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace buildLabel &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">let</span> suffix = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">let</span> prefix = <span class="string">"Hello, "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="合并命名空间和枚举"><a href="#合并命名空间和枚举" class="headerlink" title="合并命名空间和枚举"></a>合并命名空间和枚举</h3><p>为枚举添加属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">enum Color &#123;</span><br><span class="line">  red = <span class="number">1</span>,</span><br><span class="line">  green = <span class="number">2</span>,</span><br><span class="line">  blue = <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 Color.mixColor 添加枚举成员</span></span><br><span class="line">namespace Color &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mixColor</span>(<span class="params">colorName: string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (colorName == <span class="string">"yellow"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Color.red + Color.green;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (colorName == <span class="string">"white"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Color.red + Color.green + Color.blue;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (colorName == <span class="string">"magenta"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Color.red + Color.blue;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (colorName == <span class="string">"cyan"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Color.green + Color.blue;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>装饰器使用 @expression 语法，可以修饰类，属性，方法，访问符或参数，可以添加多个装饰器，由内至外依次求值。装饰器为普通函数，可以通过创建装饰器工厂的方式向装饰器注入特定的依赖。</p>
<p>类装饰器只接受类的构造函数作为参数，如 function classDecorator (constructor){}。</p>
<p>属性装饰器接受类的构造函数(当方法属于静态成员)或类的原型对象(当方法属于实例成员)，成员的名字作为参数，如 function propDecorator (target, propertyKey)。</p>
<p>方法装饰器接受类的构造函数(当方法属于静态成员)或类的原型对象(当方法属于实例成员)，成员的名字，成员的属性描述符作为参数，如 function methodDecorator (target, propertyKey, descriptor)。</p>
<p>访问器装饰器接受类的构造函数(当方法属于静态成员)或类的原型对象(当方法属于实例成员)，成员的名字，成员的属性描述符作为参数，但不能同时装饰 get, set 访问器，如 function vistitorDecorator (target, propertyKey, descriptor)。</p>
<p>参数装饰器接受接受类的构造函数(当方法属于静态成员)或类的原型对象(当方法属于实例成员)，成员的名字，参数在函数参数列表中的索引，如 function parameterDecorator (target, propertyKey, parameterIndex)。</p>
<p>ts 中使用装饰器需要将 tsconfig.json 配置文件中的 compilerOptions.experimentalDecorators 属性置为真，且 compilerOptions.target 属性至少为 “ES5”。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">classDecorator</span>&lt;<span class="title">T</span> <span class="title">extends</span> </span>&#123;<span class="keyword">new</span>(...args:any[]):&#123;&#125;&#125;&gt;(<span class="keyword">constructor</span>:T) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">constructor</span> </span>&#123;</span><br><span class="line">    newProperty = <span class="string">"new property"</span>;</span><br><span class="line">    hello = <span class="string">"override"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@classDecorator</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">  property = <span class="string">"property"</span>;</span><br><span class="line">  hello: string;</span><br><span class="line">  <span class="keyword">constructor</span>(m: string) &#123;</span><br><span class="line">    <span class="keyword">this</span>.hello = m;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法装饰器和参数装饰器</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"reflect-metadata"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> requiredMetadataKey = <span class="built_in">Symbol</span>(<span class="string">"required"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">required</span>(<span class="params">target: Object, propertyKey: string | symbol, parameterIndex: number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> existingRequiredParameters: number[] = <span class="built_in">Reflect</span>.getOwnMetadata(requiredMetadataKey, target, propertyKey) || [];</span><br><span class="line">  existingRequiredParameters.push(parameterIndex);</span><br><span class="line">  <span class="built_in">Reflect</span>.defineMetadata(requiredMetadataKey, existingRequiredParameters, target, propertyKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params">target: any, propertyName: string, descriptor: TypedPropertyDescriptor&lt;Function&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> method = descriptor.value;</span><br><span class="line">  descriptor.value = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> requiredParameters: number[] = <span class="built_in">Reflect</span>.getOwnMetadata(requiredMetadataKey, target, propertyName);</span><br><span class="line">    <span class="keyword">if</span> (requiredParameters) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> parameterIndex <span class="keyword">of</span> requiredParameters) &#123;</span><br><span class="line">        <span class="keyword">if</span> (parameterIndex &gt;= <span class="built_in">arguments</span>.length || <span class="built_in">arguments</span>[parameterIndex] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Missing required argument."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> method.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">  greeting: string;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(message: string) &#123;</span><br><span class="line">    <span class="keyword">this</span>.greeting = message;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @validate</span><br><span class="line">  greet(@required name: string) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello "</span> + name + <span class="string">", "</span> + <span class="keyword">this</span>.greeting;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>当一个对象实现了 Symbol.iterator 属性时，该对象就是可迭代的。内置类型如 Array, Map, Set, String, Int32Array, Uint32Array等都实现了各自的 Symbol.iterator 属性。for…of 语句基于调用对象上的 Symbol.iterator 方法，用于遍历值。for…of 遍历索引，可以操作任何对象。</p>
<h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><p>ts 支持三种 jsx 模式，preserve, react, react-native，这些模式只在代码生成阶段产生影响。preserve 模式下生成代码中会保留 .jsx，由后续的工具(如 Babel)转换输出，生成文件带有 jsx 扩展名；react 模式会生成 React.createElement 等代码，无需再作转换，生成文件扩展名为 .js；react-native 模式相当于 preserve，保留 jsx 代码，生成文件的扩展名为 .js。</p>
<p>ts 中，编写 jsx 代码，须使用 .tsx 文件扩展名。.tsx 文件禁用 <type>id 形式的类型断言，类型断言可以使用 id as Type。</type></p>
<h3 id="固有元素"><a href="#固有元素" class="headerlink" title="固有元素"></a>固有元素</h3><p>固有元素使用特殊的接口 JSX.IntrinsicElements 来查找。默认情况下，这个接口没有指定，不对固有元素进行类型检查。 若这个接口存在，那么固有元素的名字需在 JSX.IntrinsicElements 接口的属性里查找。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">declare namespace JSX &#123;</span><br><span class="line">  interface IntrinsicElements &#123;</span><br><span class="line">    foo: any;<span class="comment">// 校验属性通过 foo: &#123; bar?: boolean &#125;，相应元素可写成 &lt;foo bar /&gt;;</span></span><br><span class="line">    <span class="comment">// [elemName: string]: any; 字符串索引</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;foo /&gt;;<span class="comment">// 正确</span></span><br><span class="line">&lt;bar /&gt;;<span class="comment">// 错误</span></span><br></pre></td></tr></table></figure>
<h3 id="无状态组件"><a href="#无状态组件" class="headerlink" title="无状态组件"></a>无状态组件</h3><p>无状态组件为普通函数，类型检查同函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface ClickableProps &#123;</span><br><span class="line">  children: JSX.Element[] | JSX.Element</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface HomeProps extends ClickableProps &#123;</span><br><span class="line">  home: JSX.Element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface SideProps extends ClickableProps &#123;</span><br><span class="line">  side: JSX.Element | string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MainButton</span>(<span class="params">prop: HomeProps</span>): <span class="title">JSX</span>.<span class="title">Element</span>;</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">MainButton</span>(<span class="params">prop: SideProps</span>): <span class="title">JSX</span>.<span class="title">Element</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">declare namespace JSX &#123;</span><br><span class="line">  interface ElementAttributesProperty &#123;</span><br><span class="line">    props; <span class="comment">// 指定用来使用的属性名</span></span><br><span class="line">  &#125;</span><br><span class="line">  interface ElementChildrenAttribute &#123;</span><br><span class="line">    children: &#123;&#125;;  <span class="comment">// 指定 children</span></span><br><span class="line">  &#125;</span><br><span class="line">  interface ElementClass &#123;<span class="comment">// 用于校验元素类型</span></span><br><span class="line">    render: any;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> </span>&#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    foo?: string;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyFactoryFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">render</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;MyComponent foo=<span class="string">"bar"</span> /&gt;; <span class="comment">// 正确</span></span><br><span class="line">&lt;MyFactoryFunction /&gt;; <span class="comment">// 正确</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotAValidComponent</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NotAValidFactoryFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;NotAValidComponent /&gt;; <span class="comment">// 错误</span></span><br><span class="line">&lt;NotAValidFactoryFunction /&gt;; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure>
<h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><ol>
<li>类型推论???</li>
<li>类型兼容性???</li>
<li>高级类型中的类型保护???</li>
<li>模块按需加载，在 ts 中加载其他模块系统的模块??? 外部模块??? 模块 + 声明合并</li>
<li>tsconfig.json 配置文件???</li>
<li>装饰器中的元数据，reflect-metadata库???</li>
<li>三斜线指令???</li>
<li>编写声明文件 .d.ts???</li>
</ol>
]]></content>
      <categories>
        <category>frontend</category>
        <category>js</category>
      </categories>
      <tags>
        <tag>carrier</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>flow使用指南</title>
    <url>/2018/02/24/frontend/js/flow%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>flow 是 facebook 推出的 js 代码类型检查工具。</p>
<p>flow 可借助 babel 编译，添加 babel-preset-flow 即可；babel-preset-react 包含 babel-preset-flow。或者借助安装 flow-bin 启动类型检查，flow-remove-types 移除类型标记。</p>
<p>通过在脚本前添加 // @flow 或 /<em> @flow </em>/ 将文件标注为需要类型校验的，否则将会跳过 flow 校验（除非执行 flow check –all 命令校验所有文件）。</p>
<h2 id="类型标注-Type-Annotations"><a href="#类型标注-Type-Annotations" class="headerlink" title="类型标注/Type Annotations"></a>类型标注/Type Annotations</h2><h3 id="基础类型-Primitive-Types"><a href="#基础类型-Primitive-Types" class="headerlink" title="基础类型/Primitive Types"></a>基础类型/Primitive Types</h3><p>flow 支持校验的基础数据类型包含 boolean, string, number, null, undefined（在 flow 中，使用 void 标注）。es6 的 symbol 类型尚不支持。</p>
<p>boolean, string, number 字面量使用小写形式标注类型；包装对象如 new Number(10) 使用大写形式标注类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params">x: number, y: string, z: boolean</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">method(<span class="number">3.14</span>, <span class="string">"hello"</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @flow</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params">x: Number, y: String, z: Boolean</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">method(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">42</span>), <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"world"</span>), <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>));</span><br></pre></td></tr></table></figure>
<h3 id="字面量类型-Literal-Types"><a href="#字面量类型-Literal-Types" class="headerlink" title="字面量类型/Literal Types"></a>字面量类型/Literal Types</h3><p>flow 允许使用字面量作为类型标注，约定仅接受该字面量，如 value: 2 将仅接受数值 2，其他报错。</p>
<h3 id="混合类型-Mixed-Types、任意类型-Any-types"><a href="#混合类型-Mixed-Types、任意类型-Any-types" class="headerlink" title="混合类型/Mixed Types、任意类型/Any types"></a>混合类型/Mixed Types、任意类型/Any types</h3><p>使用 mixed 标注可接受任意类型数据，但在使用时需显示校验类型。</p>
<p>使用 any 标注可接受任意类型数据，且在使用时也跳过校验。若作为对象，其下的所有属性均采用 any 类型形式。需要避免使用 any 类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringify</span>(<span class="params">value: mixed</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// $ExpectError</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">""</span> + value; <span class="comment">// Error!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stringify(<span class="string">"foo"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @flow</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringify</span>(<span class="params">value: mixed</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span> + value; <span class="comment">// Works!</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stringify(<span class="string">"foo"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="数组-Array-Types"><a href="#数组-Array-Types" class="headerlink" title="数组/Array Types"></a>数组/Array Types</h3><p>数组通过 Array<type> 或 Type[] 标注，元素的类型必须一致，但可以是 undefined 或 null，如 Array<number> 或 number[]。</number></type></p>
<h3 id="元祖-Tuple-Types"><a href="#元祖-Tuple-Types" class="headerlink" title="元祖/Tuple Types"></a>元祖/Tuple Types</h3><p>元祖通过 [type, type, type] 形式标注，即元素的类型单独标注，且元素不能增删，因此不能使用 push, pop 等数组原型方法，但可以使用 join 等方法，不同长度的元祖不能相互赋值，元祖和数组之间也不能相互赋值，如 [number, boolean, void]，该元祖标识可接受赋值如 [1, true]。</p>
<h3 id="函数-Function-Types"><a href="#函数-Function-Types" class="headerlink" title="函数/Function Types"></a>函数/Function Types</h3><p>flow 可标注函数入参和返回值，如 function concat(a: string, b: string): string { return a + b; }。</p>
<p>可选参数通过 ‘?’ 后缀标注，如 function acceptsOptionalString(value?: string) { }，参数可以是 undefined。</p>
<p>默认参数可使用如下形式 function method(value: string = “default”) { /<em> … </em>/ }，参数可以是 undefined，但不能为 null。</p>
<p>解构参数通过数组类型标注，如 function method(…args: Array<number>) { }。</number></p>
<p>函数类型校验或者通过添加设定入参返回值标注，或者通过添加设定 Funtion 标注，如 function method(func: () =&gt; mixed) { } 或 function method(func: Function) { }。</p>
<h3 id="对象-Object-Types"><a href="#对象-Object-Types" class="headerlink" title="对象/Object Types"></a>对象/Object Types</h3><p>对象通过 { propname: Type } 形式标注，如 var obj2: { foo: number, bar: boolean, baz: string, } = { foo: 1, bar: true, baz: ‘three’, }。</p>
<p>可选属性通过 ‘?’ 后缀标注，如 { propertyName?: string }，propertyName 属性可以是 undefined。</p>
<h3 id="类-Class-Types"><a href="#类-Class-Types" class="headerlink" title="类/Class Types"></a>类/Class Types</h3><p>类本身可作为类型标识。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myInstance: MyClass = <span class="keyword">new</span> MyClass();</span><br></pre></td></tr></table></figure>
<p>在类中，方法标识同函数，属性在使用前必须先标识。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  prop: number;</span><br><span class="line">  method(): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.prop = <span class="number">42</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类支持泛型标识。将泛型标识的类作为标识时，必须为所有泛型传递参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>&lt;<span class="title">A</span>, <span class="title">B</span>, <span class="title">C</span>&gt; </span>&#123;</span><br><span class="line">  property: A;</span><br><span class="line">  method(val: B): C &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @flow</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>&lt;<span class="title">A</span>, <span class="title">B</span>, <span class="title">C</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(arg1: A, arg2: B, arg3: C) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> val: MyClass&lt;number, boolean, string&gt; = <span class="keyword">new</span> MyClass(<span class="number">1</span>, <span class="literal">true</span>, <span class="string">'three'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="接口-Interface-Types"><a href="#接口-Interface-Types" class="headerlink" title="接口/Interface Types"></a>接口/Interface Types</h3><h4 id="接口作为类型标识"><a href="#接口作为类型标识" class="headerlink" title="接口作为类型标识"></a>接口作为类型标识</h4><p>接口可作为类型校验标识（结构类型校验/Structural typing，非名义类型校验/Nominal typing ）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line">interface Serializable &#123;</span><br><span class="line">  serialize(): string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  serialize() &#123; <span class="keyword">return</span> <span class="string">'[Foo]'</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line">  serialize() &#123; <span class="keyword">return</span> <span class="string">'[Bar]'</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo: Serializable = <span class="keyword">new</span> Foo(); <span class="comment">// Works!</span></span><br><span class="line"><span class="keyword">const</span> bar: Serializable = <span class="keyword">new</span> Bar(); <span class="comment">// Works!</span></span><br></pre></td></tr></table></figure>
<p>接口类型通过 ‘+’, ‘-‘ 符号设置只读、只写属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当接口作为类型标识</span></span><br><span class="line">interface MyInterface &#123;</span><br><span class="line">  +readOnly: number | string;</span><br><span class="line">  -writeOnly: number | string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> value: MyInterface = &#123; </span><br><span class="line">  readOnly: <span class="number">3</span>,<span class="comment">// 可读，不可写</span></span><br><span class="line">  writeOnly: number | string<span class="comment">// 可写，不可读</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="接口作为类实现标准"><a href="#接口作为类实现标准" class="headerlink" title="接口作为类实现标准"></a>接口作为类实现标准</h4><p>接口用于类实现/implements，一个类可以实现多个接口。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface MyInterface &#123;</span><br><span class="line">  method(value: string): number;</span><br><span class="line">  property?: string;</span><br><span class="line">  [key: string]: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用泛型</span></span><br><span class="line">interface MyInterface&lt;A, B, C&gt; &#123;</span><br><span class="line">  foo: A;</span><br><span class="line">  bar: B;</span><br><span class="line">  baz: C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="泛型-Generic-Types"><a href="#泛型-Generic-Types" class="headerlink" title="泛型/Generic Types"></a>泛型/Generic Types</h3><p>泛型用于在运行时注入特定的类型。以类型标识的变量使用接口中未声明的属性时，须先作校验属性是否存在。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数中使用泛型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类使用泛型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  prop: T;</span><br><span class="line">  <span class="keyword">constructor</span>(param: T) &#123; &#125;</span><br><span class="line">  method(): T &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型别名使用泛型</span></span><br><span class="line">type TypeAlias&lt;T&gt; = &#123;</span><br><span class="line">  key: T</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口使用泛型</span></span><br><span class="line">interface Interface&lt;T&gt; &#123;</span><br><span class="line">  prop: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @flow</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logFoo</span>&lt;<span class="title">T</span>: </span>&#123; foo: string &#125;&gt;(obj: T): T &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(obj.foo); <span class="comment">// Works!</span></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logFoo(&#123; <span class="attr">foo</span>: <span class="string">'foo'</span>, <span class="attr">bar</span>: <span class="string">'bar'</span> &#125;);  <span class="comment">// Works!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @flow</span></span><br><span class="line">type Item&lt;T: number = <span class="number">1</span>&gt; = &#123;</span><br><span class="line">  prop: T,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo: Item&lt;&gt; = &#123; <span class="attr">prop</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> bar: Item&lt;<span class="number">2</span>&gt; = &#123; <span class="attr">prop</span>: <span class="number">2</span> &#125;;</span><br></pre></td></tr></table></figure>
<h3 id="可能的类型-Maybe-types"><a href="#可能的类型-Maybe-types" class="headerlink" title="可能的类型/Maybe types"></a>可能的类型/Maybe types</h3><p>可能的类型通过 ‘?’ 前缀标注，如 ?string，其值可以是 null 或 undefined。</p>
<h3 id="联合类型-Union-Types"><a href="#联合类型-Union-Types" class="headerlink" title="联合类型/Union Types"></a>联合类型/Union Types</h3><p>联合类型使用 ype1 | Type2 | … | TypeN 标注，被标识数据应满足其中一个类型校验。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 联合类型在处理响应的情景中使用，'| ... |'用于避免 success, error 属性冲突</span></span><br><span class="line"><span class="comment">// @flow</span></span><br><span class="line">type Success = &#123;| success: <span class="literal">true</span>, <span class="attr">value</span>: boolean |&#125;;</span><br><span class="line">type Failed  = &#123;| error: <span class="literal">true</span>, <span class="attr">message</span>: string |&#125;;</span><br><span class="line"></span><br><span class="line">type Response = Success | Failed;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleResponse</span>(<span class="params">response: Response</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (response.success) &#123;</span><br><span class="line">    <span class="keyword">var</span> value: boolean = response.value; <span class="comment">// Works!</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> error: string = response.error; <span class="comment">// Works!</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="交叉类型-Intersection-Types"><a href="#交叉类型-Intersection-Types" class="headerlink" title="交叉类型/Intersection Types"></a>交叉类型/Intersection Types</h3><p>交叉类型使用 Type1 &amp; Type2 &amp; … &amp; TypeN 标识，被标识数据应满足所有类型校验，需要由开发者避免类型冲突。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line">type A = &#123; <span class="attr">a</span>: number &#125;;</span><br><span class="line">type B = &#123; <span class="attr">b</span>: boolean &#125;;</span><br><span class="line">type C = &#123; <span class="attr">c</span>: string &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params">value: A &amp; B &amp; C</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">method(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;); <span class="comment">// Error!</span></span><br><span class="line">method(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="literal">true</span> &#125;); <span class="comment">// Error!</span></span><br><span class="line">method(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="literal">true</span>, <span class="attr">c</span>: <span class="string">'three'</span> &#125;); <span class="comment">// Works!</span></span><br></pre></td></tr></table></figure>
<h3 id="类型别名-Type-Aliases"><a href="#类型别名-Type-Aliases" class="headerlink" title="类型别名/Type Aliases"></a>类型别名/Type Aliases</h3><p>为常用的类型设置别名，采用如右形式语法 type Alias = Type。设置别名后，方便复用该类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">type NumberAlias = number;</span><br><span class="line">type ObjectAlias = &#123;</span><br><span class="line">  property: string,</span><br><span class="line">  method(): number,</span><br><span class="line">&#125;;</span><br><span class="line">type UnionAlias = <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span>;</span><br><span class="line">type AliasAlias = ObjectAlias;</span><br><span class="line">type GenericsObjectAlias&lt;A, B, C&gt; = &#123;</span><br><span class="line">  property: A,</span><br><span class="line">  method(val: B): C,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> val: ObjectAlias = &#123; <span class="comment">/* ... */</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params">val: ObjectAlias</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123; <span class="keyword">constructor</span>(val: ObjectAlias) &#123; <span class="comment">/* ... */</span> &#125; &#125;</span><br><span class="line"><span class="keyword">var</span> myObject: GenericsObjectAlias&lt;number, boolean, string&gt; = &#123;</span><br><span class="line">  property: <span class="number">1</span>,</span><br><span class="line">  method(val: boolean): string &#123; <span class="keyword">return</span> <span class="string">''</span>; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="不透明的类型别名-Opaque-Type-Aliases"><a href="#不透明的类型别名-Opaque-Type-Aliases" class="headerlink" title="不透明的类型别名/Opaque Type Aliases"></a>不透明的类型别名/Opaque Type Aliases</h4><p>不透明的类型别名不允许在定义该类型别名的文件外使用其基础类型，如 opaque type Alias = Type; 或 opaque type Alias: SuperType = Type 用于约定父类型，Type 必须是 SuperType的子类型，且在声明文件外使用该父类型校验。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例 1</span></span><br><span class="line"><span class="comment">// exports.js</span></span><br><span class="line"><span class="keyword">export</span> opaque type NumberAlias = number;</span><br><span class="line"></span><br><span class="line"><span class="comment">// imports.js</span></span><br><span class="line"><span class="keyword">import</span> type &#123;NumberAlias&#125; <span class="keyword">from</span> <span class="string">'./exports'</span>;</span><br><span class="line"></span><br><span class="line">(<span class="number">0</span>: NumberAlias) <span class="comment">// Error: 0 is not a NumberAlias!</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params">x: NumberAlias</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x; <span class="comment">// Error: x is not a number!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例 2</span></span><br><span class="line"><span class="comment">// exports.js</span></span><br><span class="line"><span class="keyword">export</span> opaque type ID: string = string;</span><br><span class="line"></span><br><span class="line"><span class="comment">// imports.js</span></span><br><span class="line"><span class="keyword">import</span> type &#123;ID&#125; <span class="keyword">from</span> <span class="string">'./exports'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatID</span>(<span class="params">x: ID</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"ID: "</span> + x; <span class="comment">// Ok! IDs are strings.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toID</span>(<span class="params">x: string</span>): <span class="title">ID</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x; <span class="comment">// Error: strings are not IDs.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例 3 - 泛型</span></span><br><span class="line"><span class="comment">// @flow</span></span><br><span class="line">opaque type MyObject&lt;A, B, C&gt;: &#123; <span class="attr">foo</span>: A, <span class="attr">bar</span>: B &#125; = &#123;</span><br><span class="line">  foo: A,</span><br><span class="line">  bar: B,</span><br><span class="line">  baz: C,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> val: MyObject&lt;number, boolean, string&gt; = &#123;</span><br><span class="line">  foo: <span class="number">1</span>,</span><br><span class="line">  bar: <span class="literal">true</span>,</span><br><span class="line">  baz: <span class="string">'three'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例 4 - 使用声明</span></span><br><span class="line">declare opaque type Foo;</span><br><span class="line">declare opaque type PositiveNumber: number;</span><br></pre></td></tr></table></figure>
<h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>typeof 操作符返回 flow 的数据类型，可能是开发者设置的类型标识。对基本类型，typeof 操作符返回名义类型；对类，typeof 操作符返回结构类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">let</span> num2: <span class="keyword">typeof</span> num1 = <span class="number">3.14</span>;     <span class="comment">// Works!</span></span><br><span class="line"><span class="keyword">let</span> num3: <span class="keyword">typeof</span> num1 = <span class="string">'world'</span>;  <span class="comment">// Error!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bool1 = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> bool2: <span class="keyword">typeof</span> bool1 = <span class="literal">false</span>;  <span class="comment">// Works!</span></span><br><span class="line"><span class="keyword">let</span> bool3: <span class="keyword">typeof</span> bool1 = <span class="number">42</span>;     <span class="comment">// Error!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">'hello'</span>;</span><br><span class="line"><span class="keyword">let</span> str2: <span class="keyword">typeof</span> str1 = <span class="string">'world'</span>; <span class="comment">// Works!</span></span><br><span class="line"><span class="keyword">let</span> str3: <span class="keyword">typeof</span> str1 = <span class="literal">false</span>;   <span class="comment">// Error!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @flow</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  method(val: number) &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YourClass</span> </span>&#123;</span><br><span class="line">  method(val: number) &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test1: <span class="keyword">typeof</span> MyClass = YourClass; <span class="comment">// Error!</span></span><br><span class="line"><span class="keyword">let</span> test1: <span class="keyword">typeof</span> MyClass = MyClass;   <span class="comment">// Works!</span></span><br></pre></td></tr></table></figure>
<h3 id="类型断言-Type-Casting-Expressions"><a href="#类型断言-Type-Casting-Expressions" class="headerlink" title="类型断言/Type Casting Expressions"></a>类型断言/Type Casting Expressions</h3><p>类型断言可使用 (value: Type) 语法，flow 尝试将 value 转换为 Type 类型，且不作类型校验。</p>
<p>flow 中只允许相关类型转换，由低级到高级，即 42 能转换到 number，不能转换到 string，number 类型不能转换为 42。通过 any 关键字可以将 42 从数值型转换到字符串型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line"><span class="keyword">let</span> value = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">(value: number); <span class="comment">// Works!</span></span><br><span class="line">(value: string); <span class="comment">// Error!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newValue = ((value: any): string);</span><br><span class="line"></span><br><span class="line">(newValue: number); <span class="comment">// Error!</span></span><br><span class="line">(newValue: string); <span class="comment">// Works!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @flow</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneObject</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> clone = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    clone[key] = obj[key];</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ((clone: any): <span class="keyword">typeof</span> obj); <span class="comment">// &lt;&lt;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clone = cloneObject(&#123;</span><br><span class="line">  foo: <span class="number">1</span>,</span><br><span class="line">  bar: <span class="literal">true</span>,</span><br><span class="line">  baz: <span class="string">'three'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">(clone.foo: <span class="number">1</span>);       <span class="comment">// Works!</span></span><br><span class="line">(clone.bar: <span class="literal">true</span>);    <span class="comment">// Works!</span></span><br><span class="line">(clone.baz: <span class="string">'three'</span>); <span class="comment">// Works!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @flow</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cloneObject</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  (obj: &#123; [key: string]: mixed &#125;); <span class="comment">// &lt;&lt;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> clone = &#123;&#125;;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> ((clone: any): <span class="keyword">typeof</span> obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clone = cloneObject(&#123;</span><br><span class="line">  foo: <span class="number">1</span>,</span><br><span class="line">  bar: <span class="literal">true</span>,</span><br><span class="line">  baz: <span class="string">'three'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">(clone.foo: <span class="number">1</span>);       <span class="comment">// Works!</span></span><br><span class="line">(clone.bar: <span class="literal">true</span>);    <span class="comment">// Works!</span></span><br><span class="line">(clone.baz: <span class="string">'three'</span>); <span class="comment">// Works!</span></span><br></pre></td></tr></table></figure>
<h3 id="工具类型-Utility-Types"><a href="#工具类型-Utility-Types" class="headerlink" title="工具类型/Utility Types"></a>工具类型/Utility Types</h3><h4 id="Keys"><a href="#Keys" class="headerlink" title="$Keys"></a>$Keys<t></t></h4><p>$Keys<t> 以对象或类型的属性构建联合类型。</t></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line"><span class="keyword">const</span> countries = &#123;</span><br><span class="line">  US: <span class="string">"United States"</span>,</span><br><span class="line">  IT: <span class="string">"Italy"</span>,</span><br><span class="line">  FR: <span class="string">"France"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">type Country = $Keys&lt;<span class="keyword">typeof</span> countries&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> italy: Country = <span class="string">'IT'</span>;</span><br><span class="line"><span class="keyword">const</span> nope: Country = <span class="string">'nope'</span>; <span class="comment">// 'nope' is not a Country</span></span><br></pre></td></tr></table></figure>
<h4 id="Values"><a href="#Values" class="headerlink" title="$Values"></a>$Values<t></t></h4><p>$Values<t> 以对象或类型的值构建联合类型。</t></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line">type Props = &#123;</span><br><span class="line">  name: string,</span><br><span class="line">  age: number,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The following two types are equivalent:</span></span><br><span class="line">type PropValues = string | number;</span><br><span class="line">type Prop$Values = $Values&lt;Props&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name: Prop$Values = <span class="string">'Jon'</span>;  <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">const</span> age: Prop$Values = <span class="number">42</span>;  <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">const</span> fn: Prop$Values = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;  <span class="comment">// Error!</span></span><br></pre></td></tr></table></figure>
<h4 id="ReadOnly"><a href="#ReadOnly" class="headerlink" title="$ReadOnly"></a>$ReadOnly<t></t></h4><p>$ReadOnly<t> 用于将对象或类型的属性转化为只读属性。</t></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The following two types are equivalent:</span></span><br><span class="line">type ReadOnlyObj = &#123;</span><br><span class="line">  +key: any,  <span class="comment">// read-only field, marked by the `+` annotation</span></span><br><span class="line">&#125;;</span><br><span class="line">type ReadOnlyObj = $ReadOnly&lt;&#123;</span><br><span class="line">  key: any,</span><br><span class="line">&#125;&gt;;</span><br></pre></td></tr></table></figure>
<h4 id="Exact"><a href="#Exact" class="headerlink" title="$Exact"></a>$Exact<t></t></h4><p>$Exact&lt;{name: string}&gt; 语法和 {| name: string |} 等价，用于避免对象属性冲突。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line">type ExactUser = $Exact&lt;&#123;<span class="attr">name</span>: string&#125;&gt;;</span><br><span class="line">type ExactUserShorthand = &#123;| name: string |&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user2 = &#123;<span class="attr">name</span>: <span class="string">'John Wilkes Booth'</span>&#125;;</span><br><span class="line"><span class="comment">// These will both be satisfied because they are equivalent</span></span><br><span class="line">(user2: ExactUser);</span><br><span class="line">(user2: ExactUserShorthand);</span><br></pre></td></tr></table></figure>
<h4 id="Diff-lt-A-B-gt"><a href="#Diff-lt-A-B-gt" class="headerlink" title="$Diff&lt;A, B&gt;"></a>$Diff&lt;A, B&gt;</h4><p>$Diff&lt;A, B&gt; 语法中，待校验数据须包含 A 仅有的属性，能包含 B 有的属性，且 B 中不能有 A 没有的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line">type Props = &#123; <span class="attr">name</span>: string, <span class="attr">age</span>: number &#125;;</span><br><span class="line">type DefaultProps = &#123; <span class="attr">age</span>: number &#125;;</span><br><span class="line">type RequiredProps = $Diff&lt;Props, DefaultProps&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setProps</span>(<span class="params">props: RequiredProps</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setProps(&#123; <span class="attr">name</span>: <span class="string">'foo'</span> &#125;);</span><br><span class="line">setProps(&#123; <span class="attr">name</span>: <span class="string">'foo'</span>, <span class="attr">age</span>: <span class="number">42</span>, <span class="attr">baz</span>: <span class="literal">false</span> &#125;); <span class="comment">// you can pass extra props too</span></span><br><span class="line">setProps(&#123; <span class="attr">age</span>: <span class="number">42</span> &#125;); <span class="comment">// error, name is required</span></span><br></pre></td></tr></table></figure>
<h4 id="Rest-lt-A-B-gt"><a href="#Rest-lt-A-B-gt" class="headerlink" title="$Rest&lt;A, B&gt;"></a>$Rest&lt;A, B&gt;</h4><p>$Rest&lt;A, B&gt; 语法中，待校验数据只能包含 A 仅有的属性，不能包含 B 有的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line">type Props = &#123; <span class="attr">name</span>: string, <span class="attr">age</span>: number &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> props: Props = &#123;<span class="attr">name</span>: <span class="string">'Jon'</span>, <span class="attr">age</span>: <span class="number">42</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> &#123;age, ...otherProps&#125; = props;</span><br><span class="line">(otherProps: $Rest&lt;Props, &#123;|age: number|&#125;&gt;);</span><br><span class="line">otherProps.age;  <span class="comment">// Error</span></span><br></pre></td></tr></table></figure>
<h4 id="PropertyType-lt-T-k-gt"><a href="#PropertyType-lt-T-k-gt" class="headerlink" title="$PropertyType&lt;T, k&gt;"></a>$PropertyType&lt;T, k&gt;</h4><p>$PropertyType&lt;T, k&gt; 语法用于获取特定属性的类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tooltip</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    text: string,</span><br><span class="line">    onMouseOver: <span class="function">(<span class="params">&#123;x: number, y: number&#125;</span>) =&gt;</span> <span class="keyword">void</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> someProps: $PropertyType&lt;Tooltip, <span class="string">'props'</span>&gt; = &#123;</span><br><span class="line">  text: <span class="string">'foo'</span>,</span><br><span class="line">  onMouseOver: <span class="function">(<span class="params">data: &#123;x: number, y: number&#125;</span>) =&gt;</span> <span class="literal">undefined</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> otherProps: $PropertyType&lt;Tooltip, <span class="string">'props'</span>&gt; = &#123;</span><br><span class="line">  text: <span class="string">'foo'</span></span><br><span class="line">  <span class="comment">// Missing the `onMouseOver` definition</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="ElementType-lt-T-k-gt"><a href="#ElementType-lt-T-k-gt" class="headerlink" title="$ElementType&lt;T, k&gt;"></a>$ElementType&lt;T, k&gt;</h4><p>$ElementType&lt;T, k&gt; 语法用于获取特定元素的类型，包含数组项、元祖项、对象属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Using objects:</span></span><br><span class="line">type Obj = &#123;</span><br><span class="line">  name: string,</span><br><span class="line">  age: number,</span><br><span class="line">&#125;</span><br><span class="line">(<span class="string">'Jon'</span>: $ElementType&lt;Obj, <span class="string">'name'</span>&gt;);</span><br><span class="line">(<span class="number">42</span>: $ElementType&lt;Obj, <span class="string">'age'</span>&gt;);</span><br><span class="line">(<span class="literal">true</span>: $ElementType&lt;Obj, <span class="string">'name'</span>&gt;); <span class="comment">// Nope, `name` is not a boolean</span></span><br><span class="line">(<span class="literal">true</span>: $ElementType&lt;Obj, <span class="string">'other'</span>&gt;); <span class="comment">// Nope, property `other` is not in Obj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Using tuples:</span></span><br><span class="line">type Tuple = [boolean, string];</span><br><span class="line">(<span class="literal">true</span>: $ElementType&lt;Tuple, <span class="number">0</span>&gt;);</span><br><span class="line">(<span class="string">'foo'</span>: $ElementType&lt;Tuple, <span class="number">1</span>&gt;);</span><br><span class="line">(<span class="string">'bar'</span>: $ElementType&lt;Tuple, <span class="number">2</span>&gt;); <span class="comment">// Nope, can't access position 2</span></span><br></pre></td></tr></table></figure>
<h4 id="ObjMap-lt-T-F-gt"><a href="#ObjMap-lt-T-F-gt" class="headerlink" title="$ObjMap&lt;T, F&gt;"></a>$ObjMap&lt;T, F&gt;</h4><p>$ObjMap&lt;T, F&gt; 遍历 T 对象或类型，以函数 F 重新构建属性类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let's write a function type that takes a `() =&gt; V` and returns a `V` (its return type)</span></span><br><span class="line">type ExtractReturnType = <span class="xml"><span class="tag">&lt;<span class="name">V</span>&gt;</span>(() =&gt; V) =&gt; V</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line">function run&lt;A, O: &#123;[key: string]: () =&gt; A&#125;&gt;(o: O): $ObjMap&lt;O, ExtractReturnType&gt; &#123;</span><br><span class="line">  return Object.keys(o).reduce((acc, k) =&gt; Object.assign(acc, &#123; [k]: o[k]() &#125;), &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const o = &#123;</span><br><span class="line">  a: () =&gt; true,</span><br><span class="line">  b: () =&gt; 'foo'</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">(run(o).a: boolean); // Ok</span><br><span class="line">(run(o).b: string);  // Ok</span><br><span class="line">// $ExpectError</span><br><span class="line">(run(o).b: boolean); // Nope, b is a string</span><br><span class="line">// $ExpectError</span><br><span class="line">run(o).c;</span><br></pre></td></tr></table></figure>
<h4 id="TupleMap-lt-T-F-gt"><a href="#TupleMap-lt-T-F-gt" class="headerlink" title="$TupleMap&lt;T, F&gt;"></a>$TupleMap&lt;T, F&gt;</h4><p>$TupleMap&lt;T, F&gt; 遍历 T 元祖或类型，以函数 F 重新构建元祖项。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line">type ExtractReturnType = <span class="xml"><span class="tag">&lt;<span class="name">V</span>&gt;</span>(() =&gt; V) =&gt; V</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line">function run&lt;A, I: Array&lt;() =&gt; A&gt;&gt;(iter: I): $TupleMap&lt;I, ExtractReturnType&gt; &#123;</span><br><span class="line">  return iter.map(fn =&gt; fn());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const arr = [() =&gt; 'foo', () =&gt; 'bar'];</span><br><span class="line">(run(arr)[0]: string); // OK</span><br><span class="line">(run(arr)[1]: string); // OK</span><br><span class="line">(run(arr)[1]: boolean); // Error</span><br></pre></td></tr></table></figure>
<h4 id="Call"><a href="#Call" class="headerlink" title="$Call"></a>$Call<f></f></h4><p>$Call<f> 调用 F 函数，函数返回值用于校验类型，参数在 F 后添加。</f></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line"><span class="comment">// Takes an object type, returns the type of its `prop` key</span></span><br><span class="line">type ExtractPropType = <span class="xml"><span class="tag">&lt;<span class="name">T</span>&gt;</span>(&#123;prop: T&#125;) =&gt; T;</span></span><br><span class="line"><span class="xml">type Obj = &#123;prop: number&#125;;</span></span><br><span class="line">type PropType = $Call&lt;ExtractPropType, Obj&gt;;  // Call `ExtractPropType` with `Obj` as an argument</span><br><span class="line">type Nope = $Call&lt;ExtractPropType, &#123;nope: number&#125;&gt;;  // Error: argument doesn't match `Obj`.</span><br><span class="line"></span><br><span class="line">(5: PropType); // OK</span><br><span class="line">(true: PropType);  // Error: PropType is a number</span><br><span class="line">(5: Nope);  // Error</span><br></pre></td></tr></table></figure>
<h4 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class<t></t></h4><p>Class<t> 指用类 T 校验类型。</t></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendedStore</span> <span class="keyword">extends</span> <span class="title">Store</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeStore</span>(<span class="params">storeClass: Class&lt;Store&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> storeClass();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(makeStore(Store): Store);</span><br><span class="line">(makeStore(ExtendedStore): Store);</span><br><span class="line">(makeStore(Model): Model); <span class="comment">// error</span></span><br><span class="line">(makeStore(ExtendedStore): Model); <span class="comment">// Flow infers the return type</span></span><br></pre></td></tr></table></figure>
<h4 id><a href="#" class="headerlink" title="*"></a>*</h4><ul>
<li>用于以占位符形式指明存在类型/Existential Type。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeParamStore</span>&lt;<span class="title">T</span>&gt;(<span class="params">storeClass: Class&lt;ParamStore&lt;T&gt;&gt;, data: T</span>): * </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> storeClass(data);</span><br><span class="line">&#125;</span><br><span class="line">(makeParamStore(ParamStore, <span class="number">1</span>): ParamStore&lt;number&gt;);</span><br><span class="line">(makeParamStore(ParamStore, <span class="number">1</span>): ParamStore&lt;boolean&gt;); <span class="comment">// failed because of the second parameter</span></span><br></pre></td></tr></table></figure>
<h3 id="模块-Module-Types"><a href="#模块-Module-Types" class="headerlink" title="模块/Module Types"></a>模块/Module Types</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> type MyObject = &#123; <span class="comment">/* ... */</span> &#125;;</span><br><span class="line"><span class="keyword">export</span> interface MyInterface &#123; <span class="comment">/* ... */</span> &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123; <span class="comment">/* ... */</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @flow</span></span><br><span class="line"><span class="keyword">import</span> type Foo, &#123;MyObject, MyInterface&#125; <span class="keyword">from</span> <span class="string">'./exports'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">typeof</span> &#123;MyClass&#125; <span class="keyword">from</span> <span class="string">'./exports'</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>frontend</category>
        <category>js</category>
      </categories>
      <tags>
        <tag>carrier</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Pro Git 笔记</title>
    <url>/2018/02/21/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Pro%20Git%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>git 版本管理通过 SHA-1 哈希算法为工作区的文件生成快照实现，存放于本地暂存区或版本库中（.git 目录下保存所有快照信息）。hash 算法基于文件内容和目录结构，git 保存的信息都通过 hash 值(SHA-1 哈希算法校验和/SHA-1 checksum)进行索引。修改工作区/working tree 的文件后(modified)，通过 git add 命令提交到暂存区/staging range(staged)，再通过 git commit 命令提交到版本库/git directory(commited)；若文件未变更，将沿用原有的快照。因此本地多版本管理不需要远程交互。</p>
<p>当文件提交到暂存区时(stage)，git 会为每个文件计算校验和/checksum，在 git 仓库中保存 blob 对象以引用文件快照，校验和将保存到暂存区中。当提交到版本库时(commit)，git 会计算目录的校验和并构建树对象(blod 文件对象将以索引形式存储在树对象中)，随后创建提交对象，该提交对象包含作者名、电邮、message、指向上述树对象的指针、指向之前提交版本的指针。git 仓库可理解为存储系列提交对象的单链表结构(以哈希算法的校验和值作为索引)。在多分支开发的特殊情况下，提交对象会转变为树形结构(单链表可视为只有主干的树)，即多个提交对象的 parent 指针可以指向同一个提交对象父节点，提交历史产生分叉。在提交对象模型的基础上，git 分支就是指向某个提交对象的移动指针(通过校验和指向提交对象，文件形式存储)，其提交历史来自于提交对象模型，形成单链表结构。多分支管理、及单分支的回滚和提交动作均衍生于树结构的提交对象模型，分支仅承担着指向改变的任务；创建新分支即是创建一个指向当前提交对象的指针；提交时，创建新的提交对象，并改变当前分支的指向。在 git 中，HEAD 指针用于指向当前工作的分支，通过改变 HEAD 指针的指向即为切换分支操作。需要说明的是，当切换回较旧的分支时，不只改变了 HEAD 指针的指向，同时也使工作目录变更为该分支指向的提交对象，即资源快照。多分支开发时，新的提交对象将作为提交对象模型的叶子节点，这一过程也可以通过 HEAD 指针感知当前的提交对象属于哪个分支。因此在 git 中，分支不是多次提交记录的集合，而是在抽象所有提交记录为单一的模型后、衍伸而来的理念。遵照这样的设计，master 分支和其他分支拥有相同的特征，只是 master 分支会在 git 仓库初始化时被创建。</p>
<p>在 git 中，HEAD 指针指向版本库，INDEX 指针指向暂存区，版本库和暂存区都存储在 .git 文件夹中。因此，git add 命令将工作区内容复制到暂存区/INDEX。git commit 将暂存区内容复制到版本库/HEAD。git status 比较工作区、暂存区、版本库内容是否相同，若工作区和暂存区内容不相同，提示 not staged，需要通过 git add 暂存；若暂存区和版本库内容不同，提示 not committed，需要通过 git commit 提交。执行 git checkout, git clone 命令时，先将 HEAD 指针指向切换的分支，再将版本库内容复制到暂存区，再将暂存区内容复制到工作区。</p>
<p>git 提供了 git reset <checksum> 命令，执行该命令，不仅改变 HEAD 指针的指向，同时将工作分支指向 checksum 提交对象上。如果 HEAD 指向 master 分支，运行 git reset 9e5e64a 将会使 master 指向 9e5e64a，将撤销 9e5e64a 之后的提交，也可以用于重置 9e5e64a 之后的提交；git reset 命令默认将暂存区内容也替换为 9e5e64a 指向的提交对象，这和显式执行 git reset –mixed 命令相同。git reset –soft 命令只将版本库中内容替换为指定的提交对象。git reset –hard 命令可同时将版本库、暂存区和工作区内容替换为指定的提交对象。使用 git reset <filepath> 或 git reset <checksum> <filepath> 命令将目标从提交对象转向 filepath 路径指定的文件或目录，操作是从指定的提交对象中获取内容，复制到暂存区。</filepath></checksum></filepath></checksum></p>
<p>在 git checkout 命令执行过程中，会比较工作区和暂存区的差别，并尝试合并，这是 git reset 命令所没有的操作。当执行 git checkout <filepath> 命令时，该命令不仅会影响暂存区，同时会尝试合并工作区，这也是 git reset 命令所没有的操作。</filepath></p>
<p>合并/merge 分支时，会向上遍历文档对象模型，寻找共同的祖先节点作为合并基础。若待合并分支的提交/commit 动作在当前工作分支(work-in-progress branch)之后产生，当前分支将采用快进/fast-forward 方式修改，即将当前分支指向待合并分支的提交对象，指针右移。合并分叉分支时，即待合并的两个分支为同时开发，将获取这两个分支的提交对象，以及他们共同祖先节点的提交对象作为合并基础，作三方合并(three-way merge)，最终将构建出新的提交对象(该提交对象有两个父节点，使文档对象模型由树结构转变为合流结构)。若两个分叉分支同时对同一块区域做更改，git 不会自动合并，将产生一个合并冲突(merge conflict)，并阻止 git 的后续执行流程，如构建新的提交对象等，git 还会为冲突文件注入标准的冲突解决标记(standard conflict-resolution markers)。通过 git status 命令可查看冲突文件。冲突解决标记中，以 &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD 起始部分为当前工作分支内容，以 &gt;&gt;&gt;&gt;&gt;&gt;&gt; branchname 结束部分为待合并分支内容，中间以 =======。解决冲突后，需要依序提交到暂存区和版本库中，将产生一条合并记录，可能包含冲突解决记录。合并分支可使用 git mergetool 命令，启用图形化合并工具，参看 Git Branching。</p>
<p>git merge 合并发生冲突时，暂存区/stages 下缓存着共同祖先版本/stage-0，当前工作版本/stage-1，待合并的版本/stage-2。通过 git show :1|2|3:<conflictfilename> &gt; fileName 可以以拷贝形式导出冲突的共同祖先文件等。其中，:1|2|3:<conflictfilename> 为各冲突文件 bolb 对象相关 SHA-1 值的简写形式，:1:<conflictfilename> 为祖先冲突文件，:2:<conflictfilename> 为工作分支文件，:3:<conflictfilename> 为待合并文件。导出三份拷贝文件后，手工修复冲突，可使用 git merge-file 命令合并冲突文件，使用 git diff 命令可比较冲突结果与待比较文件的差异，git clean 命令用于清理为合并拷贝出来的文件。</conflictfilename></conflictfilename></conflictfilename></conflictfilename></conflictfilename></p>
<p>另外，在合并发生冲突时，使用 git checkout –conflict=diff3 命令可以查看不止于当前工作分支的冲突文件和待合并的冲突文件，还包含共同祖先的冲突文件。默认只查看当前工作分支的冲突文件和待合并的冲突文件，即 git checkout –conflict=merge 命令。使用 git config –global merge.conflictstyle diff3 命令，将全局的合并方案改成 diff3。git checkout –ours 合并时使用当前工作分支文件内容；git checkout –theirs 合并时使用待合并分支文件内容。git 在合并过程中，会将合并成功的文件提交到暂存区，因此 git diff 命令可以查看冲突文件；解决冲突后，仍可使用 git diff 或 git log –cc -p -1 命令查看解决冲突后的文件。</p>
<p>若想撤销文件合并，可使用 git reset –hard HEAD~ 命令将合并取消，提交记录返回到合并前；或者使用 git revert -m 1 basebranch 命令撤销合并，将提交对象撤回到 basebranch 分支内容。需要注意的是，git revert -m 1 basebranch 命令将无法合并待合并分支起始的提交内容，针对这一问题，可使用 git revert <checksum> 撤销还原。<br>参看 Git Tools。</checksum></p>
<p>远程引用(remote references)是对远程仓库中分支、标签等的引用或指针。更恰当的说，引用内容即为远程分支中的提交对象模型，单链表形式。远程跟踪分支(remote-tracking branches)将远程分支的引用保存在本地，不受用户影响，git fetch|pull|push 操作时更新引用，使本地 shortname/branchname 指向远程服务器的同名分支。远程引用采用 shortname/branchname 形式命名分支。当 git clone 命令执行时，将在本地创建 origin/master 分支和 master 分支，两者均指向相同的提交对象模型。当用户在 master 分支开发并提交时，另一用户将自己的代码 push 到远程 master 分支上，本地 origin/master 的指向将不作改变；假使在这时候执行 git fetch 命令，将抓取远程仓库新添加的提交对象，本地 origin/master 也将右移、指向另一用户创建的提交对象上，提交对象模型转化为树形结构。</p>
<p>变基/rebase 是 git 中除了 merge 以外整合两个分支的另一种方式。当提交历史呈分叉状态，可以将其中一个分叉的提交记录基于合并基础、提取为更新补丁，再将其合并到另一个分叉中，这个过程就是变基。变基命令在提取为补丁的分支上执行行，因此需要切换到该分支如 patch 分支，然后执行 git rebase basebaranch 命令，提取补丁并以该补丁产生新的提交对象(patch 分支指向该提交对象)，此时分叉的提交历史将转变为单链表形式，而 basebaranch 分支的指向仍保持不变。切换到 basebaranch 分支，再执行 git merge patch 命令，可以将 basebaranch 分支的指针右移，指向 rebase 命令新创建的提交对象。经过上述步骤后，整个开叉分支的整合操作也就完成了，patch 分支的提交对象将被抹去，但 patch 分支仍然存在，需要手动删除。变基同合并比较，最大的优点即是使提交历史呈线性状态，而不是分叉、合流结构。在开源项目中贡献代码通常采用变基命令。使用 git rebase basebranch patch 命令执行变基操作时，可以不用将工作分支切换到 patch 上，即提取 patch 分支的修改补丁，基于修改补丁在 basebranch 分支上创建新的提交对象。执行 git rebase –onto basebranch patch1 patch2 命令，获取 patch2 分支不同于 patch1 分支的修改补丁，基于修改补丁再在 basebranch 分支上创建新的提交对象。</p>
<p>执行变基操作有一条原则，即不能在你的本地仓库执行变基操作。变基操作能改变本地仓库的提交历史，进而影响远程仓库的提交记录，但是对于协作者而言，在分支开叉时拉取编程变更，又在变基后拉取远程变更，他本地远程引用的提交记录中即会保留变基前的开叉，又会有变基后新增的提交对象。git 变基的实现原理是，在每次提交时，git 不只计算本次提交的校验和，还会计算本次修改内容的校验和 patch-id。通过 patch-id，git 能分辨出新增的本地修改。在本地分支上，使用 git rebase remote/branch 命令将本地修改变基到远程引用，同时本地的提交历史将转变为单链表结构，这能解决前述变基前后的操作同时提交到远程仓库的问题。</p>
<p>除了合并和变基以外，git 支持拣选/cherry-pick 操作，其意义以校验和获取某次提交补丁，再应用到当前工作分支上。因为操作时间的不同，通过拣选在当前分支创建的提交会重新计算校验和。具体命令如 git cherry-pick e43a6fd3e94888d76779ad79fb568ed180e5fcdf。其中，e43a6fd3e94888d76779ad79fb568ed180e5fcdf 为之前提交对象的校验和/checksum，作为提交对象的索引。</p>
<p>参考：<br><a href="https://git-scm.com/book/zh/v2/Git-分支-分支简介" target="_blank" rel="noopener">分支简介</a><br><a href="https://git-scm.com/book/zh/v2/Git-分支-分支的新建与合并" target="_blank" rel="noopener">分支的新建与合并</a><br><a href="https://git-scm.com/book/zh/v2/Git-分支-变基" target="_blank" rel="noopener">变基</a><br><a href="https://git-scm.com/book/zh/v2/Git-工具-重置揭密" target="_blank" rel="noopener">重置揭密</a></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>git 配置分为三类，系统级，用户级，和项目级；优先级从右到左。git config 命令中，–system 选项指定系统级，–global 选项指定用户级，两者均没有为项目级。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --list <span class="comment"># 查看配置</span></span><br><span class="line">git config user.name <span class="comment"># 查看用户配置</span></span><br><span class="line">git config --global user.name &lt;name&gt; <span class="comment"># 指定用户</span></span><br><span class="line">git config --global user.email &lt;email&gt; <span class="comment"># 指定邮箱</span></span><br><span class="line">git config --global core.editor emacs <span class="comment"># 指定编辑器，默认为系统自带编辑器，可选 vim, emacs, notepad++</span></span><br><span class="line">git config --global commit.template &lt;filepath&gt; <span class="comment"># 以 filepath 文件作为提交信息模板，打开编辑器时作为前缀</span></span><br><span class="line">git config --global core.pager <span class="string">''</span> <span class="comment"># 设置 git log|diff 命令的分页器，可选值 more, less。'' 空字符串为完整显示</span></span><br><span class="line">git config --global user.signingkey &lt;gpg-key-id&gt; <span class="comment"># 设置 GPG 签署密钥，影响 git tag -s &lt;tag-name&gt; 命令</span></span><br><span class="line">git config --global core.excludesfile &lt;filepath&gt; <span class="comment"># 设置忽略的文件</span></span><br><span class="line">git config --global help.autocorrect 1 <span class="comment"># 输入命令有误时，0.1s 后自动执行模糊匹配的命令</span></span><br><span class="line">git config --global credential.helper cache <span class="comment"># 将 https 推送需要的用户密码缓存在内存中，时效为几分钟</span></span><br><span class="line">git config --global color.ui <span class="literal">false</span> <span class="comment"># 禁用有彩色输出</span></span><br><span class="line">git config --global color.[diff|branch|interactive|status].meta <span class="string">"blue black bold"</span> <span class="comment"># 设置命令的颜色</span></span><br><span class="line">git config --global core.autocrlf <span class="literal">true</span> <span class="comment"># Windows 使用回车（CR）和换行（LF）两个字符来结束一行，而 Mac 和 Linux 只使用换行（LF）一个字符。core.autocrlf 设置为 true，提交时自动将回车和换行转换成换行，检出时将换行转换成回车和换行。core.autocrlf 设置为 input，提交时自动把回车和换行转换成换行，检出时不转换</span></span><br><span class="line">git config --global core.whitespace \</span><br><span class="line">  trailing-space,space-before-tab,indent-with-non-tab <span class="comment"># 空格检测。默认开启项 blank-at-eol，查找行尾的空格；blank-at-eof，盯住文件底部的空行；space-before-tab，警惕行头 tab 前面的空格。默认关闭项 indent-with-non-tab，揪出以空格而非 tab 开头的行（你可以用 tabwidth 选项控制它）；tab-in-indent，监视在行头表示缩进的 tab；cr-at-eol，告诉 Git 忽略行尾的回车。git diff 时将应用空格检测；git apply --whitespace=warn &lt;patch&gt; 应用补丁时检测空格；git apply --whitespace=fix &lt;patch&gt; 自动修复；git rebase --whitespace=fix 变基时自动修复</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 别名</span></span><br><span class="line">git config --global alias.co checkout <span class="comment"># git co 将等价于 git checkout</span></span><br><span class="line">git config --global alias.br branch</span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.st status</span><br><span class="line">git config --global alias.unstage <span class="string">'reset HEAD --'</span> <span class="comment"># git unstage 将等价于 git reset Head -- </span></span><br><span class="line">git config --global alias.last <span class="string">'log -1 HEAD'</span> <span class="comment"># git last 查看最后一次提交信息</span></span><br><span class="line">git config --global alias.visual <span class="string">'!npm'</span> <span class="comment"># git visual 将调用外部命令 npm</span></span><br><span class="line"></span><br><span class="line">git config --global pull.rebase <span class="literal">true</span> <span class="comment"># 更改 pull.rebase 的默认配置</span></span><br><span class="line">git config --global merge.conflictstyle diff3 <span class="comment"># 以 diff3 方式查看冲突文件，包含当前工作分支、待合并分支、共同祖先分支的冲突文件内容</span></span><br><span class="line"></span><br><span class="line">git config --system receive.fsckObjects <span class="literal">true</span> <span class="comment"># 推送生效前检验每个对象的有效性以及 SHA-1 检验和是否保持一致</span></span><br><span class="line">git config --system receive.denyNonFastForwards <span class="literal">true</span> <span class="comment"># 禁用强制更新 git push -f</span></span><br><span class="line">git config --system receive.denyDeletes <span class="literal">true</span> <span class="comment"># 避免删除远程分支后，再推送本地分支</span></span><br></pre></td></tr></table></figure>
<h3 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">help</span> config <span class="comment"># 打印 git config 命令的完整手册</span></span><br><span class="line">man git-confgi <span class="comment"># 同上</span></span><br><span class="line">git-config -h|--<span class="built_in">help</span> <span class="comment"># 简要帮助信息</span></span><br></pre></td></tr></table></figure>
<h3 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h3><ol>
<li>保存快照不吃磁盘空间吗？git 命令在运行时比较文件差异，如 add, commit？那执行效率如何提升？</li>
<li>数据库怎样存储历史版本数据？</li>
<li>游戏在用户端以补丁形式下载并更新，若代码使用 git 管理，怎样做到根据文件差异只做局部封信，而不是全量下载并更新？同样的，git pull 等命令怎样做到效率地只修改局部资源？</li>
<li>在多分支开发，又相继合并到 master 分支的情形下，提交对象链表会形成怎样的构造？根据提交时间形成单链表形式？</li>
<li>git reset 命令执行后，如何改变提交历史，新的提交对之前提交历史的影响？如重置第三次提交，新的提交会在第一次提交之后创建提交对象，还是在之前创建提交对象？</li>
<li>git checkout 命令可以针对某次提交对象，即可以执行 git checkout <checksum> 命令？</checksum></li>
</ol>
<h2 id="Git-Basics"><a href="#Git-Basics" class="headerlink" title="Git Basics"></a>Git Basics</h2><h3 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h3><p>创建 git 本地仓库，指定 git init 或 git clone <url> [projectName] 命令（projectName 用于指定本地目录名）。git clone 将拷贝远程仓库的所有版本及所有文件（当服务器磁盘损坏时，方便使用本地仓库的命令将远程仓库的资源回滚到拷贝前），创建 .git 目录，并检出最新分支。git clone 时，可使用 https 协议 或 git:// 起始的 SSH 协议。</url></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init <span class="comment"># 创建 git 本地仓库</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;url&gt; [projectName] <span class="comment"># 克隆远程仓库，指定远程仓库的简称默认为 origin，且本地 master 分支将跟踪/track 远程 master，可使用 git pull|push 命令</span></span><br></pre></td></tr></table></figure>
<h3 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h3><p>工作区的文件状态有两种，已追踪/tracked, 未追踪/untracked。暂存区的最新快照中包含某文件，该文件即被追踪；若不包含，该文件即未追踪。已追踪文件又分为三种状态，未变更/unmodified, 已变更/modified, 已提交到暂存区/staged。在切换分支时，git 会校验工作区的文件改动是否提交到版本库中，未提交，则阻止切换，用以防止丢失工作区的改动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status <span class="comment"># 获取文件状态</span></span><br><span class="line">git status -s|--short <span class="comment"># 文件状态扼要信息。?? 未追踪文件，A 新增文件提交到到暂存区，M 修改文件提交到暂存区，MM 暂存区和工作区文件状态</span></span><br><span class="line">git diff <span class="comment"># 工作区和暂存区文件差异，显示文件更新细节，包括添加的行、删除的行，合称为文件更新补丁/patch</span></span><br><span class="line">git diff --staged|--cached <span class="comment"># 暂存区和版本库文件差异</span></span><br><span class="line">git difftool <span class="comment"># 使用 Araxis, emerge, vimdiff 等软件以图形化或其他格式显示文件差异</span></span><br><span class="line">git difftool -tool-help <span class="comment"># 查看系统支持的 git diff 插件</span></span><br><span class="line">git add &lt;files&gt; <span class="comment"># 工作区文件提交到暂存区，将产生暂存区的历史快照/historical snapshort。参数为文件或目录路径</span></span><br><span class="line">git commit <span class="comment"># 暂存区快照提交版本去，需由命令行编辑器设置 message，# 起始内容将被忽略。命令行编辑器中默认以 # 添加 git status 输出内容。-v 选项可用于注入 git diff 完整信息</span></span><br><span class="line">git commit -m <span class="string">'message'</span> <span class="comment"># 设置 message 并提交</span></span><br><span class="line">git commit -a <span class="comment"># 直接将工作区中已追踪的文件提交到版本库，跳过暂存区</span></span><br><span class="line">git rm &lt;pattern&gt; <span class="comment"># 暂存区删除文件，工作区也作相应删除，需要提交到版本库。直接删除工作区中文件，不会影响暂存区</span></span><br><span class="line">git rm -f|--force &lt;pattern&gt; <span class="comment"># 修改后文件提交到暂存区，与版本库中文件有差异，需使用 -f 选项强制删除</span></span><br><span class="line">git rm --cached &lt;pattern&gt; <span class="comment"># 暂存区删除文件，但保留工作区文件，适用于未配置 .gitignore 的文件</span></span><br><span class="line">git mv file_from file_to <span class="comment"># 移动文件，可实现文件重命名。重命名时，等同于 mv file_from file_to; git rm file_from; git add file_to。git 没有显式追踪文件移动操作，通过执行的命令获知用户重命名行为</span></span><br></pre></td></tr></table></figure>
<h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>.gitignore 配置文件，即忽略文件列表。可设置多个 .gitignore 文件，当前文件所在目录自底向上获取 .gitignore 文件，作为优先级顺序。编写 .gitignore 文件可使用标准 glob 模式(shell 中简易正则，* 零或多个任意字符，** 任意中间目录，其余同正则)；空行或 ‘#’ 开头将被忽略；’/‘ 开头相对于工程目录；’/‘ 结尾匹配目录；’!’ 开头置否值。</p>
<h3 id="commit-历史记录"><a href="#commit-历史记录" class="headerlink" title="commit 历史记录"></a>commit 历史记录</h3><p>无论本地仓库，还是克隆下来的远程仓库，都可以使用 git log 命令查看提交记录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> <span class="comment"># 显示提交记录，反序排列，包含 SHA-1 哈希算法校验和(作为索引), 作者, 日期, message</span></span><br><span class="line">git <span class="built_in">log</span> -p|--patch <span class="comment"># 显示内容差异</span></span><br><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span> <span class="comment"># 显示每次更新的文件修改统计信息</span></span><br><span class="line">git <span class="built_in">log</span> --shortstat <span class="comment"># 只显示 --stat 中最后的行数修改添加移除统计</span></span><br><span class="line">git <span class="built_in">log</span> --name-only <span class="comment"># 仅在提交信息后显示已修改的文件清单</span></span><br><span class="line">git <span class="built_in">log</span> --name-status <span class="comment"># 显示新增、修改、删除的文件清单</span></span><br><span class="line">git <span class="built_in">log</span> --abbrev-commit <span class="comment"># 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符</span></span><br><span class="line">git <span class="built_in">log</span> --relative-date <span class="comment"># 使用较短的相对时间显示，如 '2 weeks ago'</span></span><br><span class="line">git <span class="built_in">log</span> --graph <span class="comment"># 显示 ASCII 图形表示的分支合并历史</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline <span class="comment"># 指定显示格式，--pretty 选项的可选值为 oneline, short, full, fuller, format。其中，oneline 以一行展示提交信息</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=format:<span class="string">"%h - %an, %ar : %s"</span> <span class="comment"># 指定输出信息的模板字符串，用于提取分析报告。占位符包含 %H 提交对象/commit的完整哈希字串, %h 提交对象的简短哈希字串, %T 树对象/tree的完整哈希字串, %t, %P 父对象/parent的完整哈希字串, %p, %an 作者, %ae 作者的邮箱, %ad 作者修订日期, %ar 作者的相对修订日期, %cn 提交者, %ce, %cd, %cr, %s 说明</span></span><br><span class="line">git <span class="built_in">log</span> --oneline <span class="comment"># --pretty=oneline --abbrev-commit 简写形式</span></span><br><span class="line">git <span class="built_in">log</span> -&lt;n&gt; <span class="comment"># -n 指定只显示最后两次提交记录，如 -2。通常不需要使用。因为 git log 显示采用分页形式，用户只能看到第一页</span></span><br><span class="line">git <span class="built_in">log</span> --since|--after=2.weeks <span class="comment"># --since 选项指定起始时间，可用相对时间或绝对时间，如 '2 years 1 day 3 minutes ago'</span></span><br><span class="line">git <span class="built_in">log</span> --until|--before=<span class="string">"2008-01-15"</span> <span class="comment"># 同上，指定结束时间</span></span><br><span class="line">git <span class="built_in">log</span> --author=authorname <span class="comment"># 过滤作者</span></span><br><span class="line">git <span class="built_in">log</span> --committer=committername <span class="comment"># 过滤提交者</span></span><br><span class="line">git <span class="built_in">log</span> --grep=messagekey <span class="comment"># 按 message 中关键字检索，与 --author 合用时为或匹配，添加 --all-match 选项强制匹配 grep 指定关键字</span></span><br><span class="line">git <span class="built_in">log</span> -S function_name <span class="comment"># 指定字符串检索更改相应字符串的提交记录</span></span><br><span class="line">git <span class="built_in">log</span> --no-merges <span class="comment"># 不显示 merge 记录</span></span><br><span class="line">git <span class="built_in">log</span> --filename <span class="comment"># 作为最后一个选项，检索更改相应文件或目录的提交记录</span></span><br></pre></td></tr></table></figure>
<h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><p>撤销操作不能回滚，容易引起数据丢失。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend <span class="comment"># 合并上一次提交记录，适用于文件漏提交等轻微改动场景。若暂存区文件未作更新，commit 快照将保持不变，只更改 message 或者连 message 也未作更改。只保留当前的提交记录；撤销上一次提交记录，即不会存在于提交记录中</span></span><br><span class="line">git reset HEAD &lt;filename&gt; <span class="comment"># 暂存区文件重置为提交前状态。执行 git status 命令，工作位已更改文件的状态为 unstaged。git reset 命令不加选项，只更改暂存区。git reset --hard 命令将可能导致工作区的当前进度全部丢失，相当危险</span></span><br><span class="line">git checkout -- &lt;file&gt; <span class="comment">#  使用暂存区的文件替换工作区的文件，即工作区文件回滚</span></span><br></pre></td></tr></table></figure>
<h3 id="远程协作"><a href="#远程协作" class="headerlink" title="远程协作"></a>远程协作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote <span class="comment"># 列出远程服务器的简称，默认为 origin</span></span><br><span class="line">git remote -v <span class="comment"># 列出远程服务器的简称和 url 列表，同一个项目可能指定了多个远程仓库。fetch, push 操作的服务器资源也可能不同，由远程仓库决定</span></span><br><span class="line">remote add &lt;shortname&gt; &lt;url&gt; <span class="comment"># 添加远程仓库</span></span><br><span class="line">git fetch &lt;shortname|url&gt; <span class="comment"># 抓取远程仓库资源，包含所有分支，并创建本地远程跟踪分支，却不会创建可修改、供开发的本地同名分支。只下载远程仓库资源，需手动 merge</span></span><br><span class="line">git pull <span class="comment"># 若本地分支跟踪远程分支，git pull 命令自动拉取远程仓库中指定的分支，并尝试 merge</span></span><br><span class="line">git pull &lt;remotename&gt; &lt;branchname&gt; <span class="comment"># 拉取远程分支资源，并尝试 merge。选项 remotename 指定远程仓库，branchname 指定分支</span></span><br><span class="line">git push <span class="comment"># 若本地分支跟踪远程分支，git push 将资源推送到远程仓库下的指定分支</span></span><br><span class="line">git push &lt;remotename&gt; &lt;branchname&gt; <span class="comment"># 推送资源到指定远程下的指定分支</span></span><br><span class="line">git remote show &lt;remotename&gt; <span class="comment"># 查看远程仓库 fetch|push 操作的 url，包含的分支，以及跟踪分支信息</span></span><br><span class="line">git remote rename shortname_before shortname_after <span class="comment"># 改写远程仓库的简称，同时改变分支名，如更新为 shortname_after/master</span></span><br><span class="line">git remote remove|rm &lt;remotename&gt; <span class="comment"># 本地移除某远程仓库，同时影响其下分支和配置，对远程仓库无影响</span></span><br></pre></td></tr></table></figure>
<h3 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h3><p>git 标签分为两种，轻量标签lightweight, 附注标签 annotated。轻量标签通过 git tag 不带选项创建，附注标签通过 git tag -a 创建。附注标签以对象形式存储在 git 数据库中，包含标签作者，电邮，日期，标签信息/message，并且可以使用 GPG 签名和验证。git tag 命令通常用来发布不再修改的版本(通过 git push <tagname> 命令)，且发布以后，不能再作修改，需要在本地创建新分支拉取标签资源，作适当修改后再发布。</tagname></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag <span class="comment"># 列出所有标签，以字母顺序罗列</span></span><br><span class="line">git tag -l|-list &lt;pattern&gt; <span class="comment"># 只罗列匹配的标签，如 git tag -l "v1.8.5*"。pattern 中若含有通配符，-l 选项不可缺失</span></span><br><span class="line">git tag &lt;tagname&gt; <span class="comment"># 创建轻量标签，git show &lt;tagname&gt; 时只显示 commit 信息</span></span><br><span class="line">git tag -a &lt;tagname&gt; -m <span class="string">"message"</span> <span class="comment"># 创建附注标签，git show &lt;tagname&gt; 时除显示 commit 信息外，还显示标签作者，电邮，日期，标签信息等</span></span><br><span class="line">git show &lt;tagname&gt; <span class="comment"># 查看标签信息及对应的提交信息</span></span><br><span class="line">git tag -a &lt;tagname&gt; &lt;checksum&gt; <span class="comment"># 提交后再打标签，选项 checksum 为 hash算法校验和，即快照的索引，可以只包含部分 hash 值</span></span><br><span class="line">git push origin &lt;tagname&gt; <span class="comment"># 将标签推送到远程共享服务器上</span></span><br><span class="line">git push --tags <span class="comment"># 将本地所有标签推送到服务器上</span></span><br><span class="line">git checkout &lt;tagname&gt; <span class="comment"># 检出标签，但不能真正检出标签，本地仓库会进入 "detached HEAD" 状态，提交将不从属于任何分支，只有 commit checksum 校验和能被 git 感知到</span></span><br><span class="line">git checkout -b &lt;branchnam&gt; &lt;tagname&gt; <span class="comment"># 在本地创建新分支，并拉取指定标签资源。修改后，重新创建标签并 push</span></span><br></pre></td></tr></table></figure>
<h3 id="疑问-1"><a href="#疑问-1" class="headerlink" title="疑问"></a>疑问</h3><ol>
<li>暂存区存在的意义？</li>
<li>强制删除的意义？</li>
<li>commit 提交记录以何种形式存储，才能实现快速检索？关于 git database？</li>
<li>本地版本库如何回滚？</li>
<li>git pull|push 只拉取或推送快照，还是所有历史记录？</li>
<li>git 远程服务器对版本管理的实现是否和本地相同，可否指定局域网中某台机器作为拉取资源的源头？</li>
<li>打标签只针对 commit 操作？且标签只针对不会再修改的版本？git push origin [tagname] 推送到共享服务器和 git push origin [branchname] 的差异？</li>
<li>切换分支时，为什么需要提交到版本库，而不是暂存库，这样就可以避免工作区的变更丢失了？</li>
</ol>
<h2 id="Git-Branching"><a href="#Git-Branching" class="headerlink" title="Git Branching"></a>Git Branching</h2><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><p>分支原理见 Getting Started。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline --decorate <span class="comment"># --decorate 选项用于查询各个分支及 HEAD 指针指向哪个提交对象</span></span><br><span class="line">git <span class="built_in">log</span> --oneline --decorate --graph --all <span class="comment"># 查看提交历史的分叉情况，各个分支及 HEAD 指针的指向</span></span><br><span class="line">git branch <span class="comment"># 查看所有分支，带 '*' 的为当前分支</span></span><br><span class="line">git branch -v <span class="comment"># 查看所有分支最后一次提交记录</span></span><br><span class="line">git branch --merged <span class="comment"># 查看已合并到当前分支的所有分支</span></span><br><span class="line">git branch --no-merged <span class="comment"># 查看未合并到当前分支的所有分支</span></span><br><span class="line">git branch --merged &lt;branchname&gt; <span class="comment"># 查看已合并到 branchname 分支的所有分支</span></span><br><span class="line">git branch --no-merged &lt;branchname&gt; <span class="comment"># 查看未合并到 branchname 分支的所有分支</span></span><br><span class="line">git branch &lt;branchname&gt; <span class="comment"># 创建分支，但不切换分支</span></span><br><span class="line">git branch -d &lt;branchname&gt; <span class="comment"># 删除分支，branchname 未合并到当前分支，将不予删除</span></span><br><span class="line">git branch -D &lt;branchname&gt; <span class="comment"># 强制删除分支</span></span><br><span class="line">git checkout &lt;branchname&gt; <span class="comment"># 切换分支，即改变 HEAD 指针指向。修改文件但未提交到版本库的，git 将阻止切换</span></span><br><span class="line">git checkout -b &lt;branchname&gt; <span class="comment"># 创建并切换分支</span></span><br><span class="line">git merge &lt;branchname&gt; <span class="comment"># 将 branchname 分支合并到当前分支</span></span><br><span class="line">git status <span class="comment"># 查看冲突文件</span></span><br><span class="line">git mergetool <span class="comment"># 使用图形化工具解决冲突，默认使用 opendiff 工具，可选用工具包含 opendiff, kdiff3, tkdiff, xxdiff, meld, tortoisemerge, gvimdiff, diffuse, diffmerge, ecmerge, p4merge, araxis, bc3, codecompare, vimdiff, emerge</span></span><br><span class="line">git mergetool --tool-help <span class="comment"># 合并工具帮助信息</span></span><br></pre></td></tr></table></figure>
<h3 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h3><p>推荐使用的本地开发工作流/workflow 有两种，长期分支模式(Long-Running Branches)，特性分支模式(Topic Branches)。当然，这只是一种参考。</p>
<p>长期分支模式根据稳定性创建分支，需要较高稳定性的分支创建在前，较低稳定性的创建在后，如 master 分支先于 develop 分支，develop 分支先于 topic 分支，合并时依序将 topic 分支合并到 develop 分支，develop 分支合并到 master 分支。适用于大型项目，作为分支创建的基础结构，在每个分支可以再次使用特性分支模式。</p>
<p>特性分支模式适用于开发者想法多变的场景，比如在 master 分支基础创建 hotfix 分支，接着创建 hotfix_v2，同时开发 hotfix, hotfix_v2 分支，最终又启用 hotfix 分支；与此同时，开发过程中 master 分支不只产生了新的提交，后续又创建了实现新想法的 idea 分支，最后将 hotfix_v2, idea 分支合并到 master 分支。</p>
<h3 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git ls-remote &lt;shortname&gt; <span class="comment"># 查看远程引用清单</span></span><br><span class="line">git remote show &lt;shortname&gt; <span class="comment"># 查看远程引用详细信息</span></span><br><span class="line">git push &lt;shortname&gt; &lt;branch&gt; <span class="comment"># 将当前分支的提交内容推送到远程 branch 分支，git 自动将分支名扩展为 refs/heads/branch:refs/heads/branch，意为将本地 branch 分支推送并更新远程 branch 分支</span></span><br><span class="line">git push shortname localebranch:remotebranch <span class="comment"># 推送本地 localebranch 分支，将其作为远程 remotebranch 分支</span></span><br><span class="line">git merge shortname/branchname <span class="comment"># 将远程跟踪分支 shortname/branchname 合并到当前分支，合并前须 git fetch</span></span><br><span class="line">git checkout -b localebranch shortname/remotebranch <span class="comment"># 通过远程跟踪分支创建本地分支，自动跟踪远程分支，可使用 git pull|push 简化拉取、提交操作；且可以在命令行中使用 @&#123;upstream&#125; 或 @&#123;u&#125; 代替 shortname/remotebranch</span></span><br><span class="line">git checkout --track shortname/remotebranch <span class="comment"># 上一条命令的简写形式，创建 remotebranch 同名分支</span></span><br><span class="line">git checkout remotebranch <span class="comment"># 上一条命令的简写形式，条件是本地未存在 remotebranch 同名分支，远程存在</span></span><br><span class="line">git branch -u|--<span class="built_in">set</span>-upstream-to shortname/remotebranch <span class="comment"># 当前分支切换跟踪远程 remotebranch 分支。-u 选项可用于 pull, push 命令</span></span><br><span class="line">git branch -vv <span class="comment"># 查看本地分支在跟踪哪个远程分支，以及ahead, behind, up to date等提交状态。这条命令基于最后一次 fetch 的数据，命令本身没有连接服务器</span></span><br><span class="line">git fetch &lt;shortname|url&gt; <span class="comment"># 抓取远程仓库资源，包含所有分支，并创建本地远程跟踪分支，却不会创建可修改、供开发的本地同名分支。只下载远程仓库资源，不会更改工作区内容，需手动 merge</span></span><br><span class="line">git pull <span class="comment"># git fetch, git merge 命令的结合，拉取数据并合并</span></span><br><span class="line">git push origin --delete remotebranch <span class="comment"># 删除远程分支</span></span><br></pre></td></tr></table></figure>
<h3 id="变基"><a href="#变基" class="headerlink" title="变基"></a>变基</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase &lt;basebranch&gt; <span class="comment"># 将当前分支以补丁形式在 basebranch 分支上创建新的提交对象。完成开叉分支的整合操作还需要在 basebranch 分支上 merge 当前分支</span></span><br><span class="line">git rebase &lt;basebranch&gt; &lt;topicbranch&gt; <span class="comment"># 同上，该命令不需要切换到 topicbranch 分支后执行</span></span><br><span class="line">git rebase --onto &lt;basebranch&gt; &lt;topicbranch1&gt; &lt;topicbranch2&gt; <span class="comment"># --onto 选项用于获取在 topicbranch2 分支内但不在 topicbranch1 内的文件修改补丁，并在 basebranch 分支上创建新的提交对象，即变基到 basebranch </span></span><br><span class="line">git rebase remote/branch <span class="comment"># 将本地修改变基到远程引用 remote/branch 分支上</span></span><br><span class="line">git pull --rebase remote/branch <span class="comment"># 等同 git fetch, get rebase remote/branch</span></span><br></pre></td></tr></table></figure>
<h2 id="Git-on-the-Server"><a href="#Git-on-the-Server" class="headerlink" title="Git on the Server"></a>Git on the Server</h2><h3 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h3><p>git 可以使用四种传输资料的协议：Local 本地协议，Http 协议，SSH 协议和 Git 协议。</p>
<p>Local 协议常见于协作者对同一个共享的文件系统(如一个挂载的 NFS)都有访问权限。git clone /opt/git/project.git 命令将采用硬链接或直接拷贝文件；git clone file:///opt/git/project.git 将触发用于网路传输资料的进程，传输效率较低；git remote add local_proj /opt/git/project.git 命令用于增加本地版本库。</p>
<p>Http 协议既支持像 git:// 协议一样设置匿名服务，也可以像 SSH 协议一样提供传输时的授权和加密。Git 协议，要么谁都可以克隆这个版本库，要么谁也不能。</p>
<h3 id="搭建-git-服务器"><a href="#搭建-git-服务器" class="headerlink" title="搭建 git 服务器"></a>搭建 git 服务器</h3><p>首先需要把现有 git 仓库导出为一个裸仓库，即不包含工作目录的仓库。这一过程通过 –bare 选项完成，具体命令为 git clone –bare my_project my_project.git。其次将裸仓库放在服务器上，若已在 git.example.com 搭好服务器，且需要在 /opt/git 目录下放置所有 git 仓库，通过执行 scp -r my_project.git <a href="mailto:user@git.example.com" target="_blank" rel="noopener">user@git.example.com</a>:/opt/git 复制裸仓库到 /opt/git 目录下。此时，对服务器 /opt/git 目录拥有可读权限的用户就可以通过 git clone <a href="mailto:user@git.example.com" target="_blank" rel="noopener">user@git.example.com</a>:/opt/git/my_project.git 克隆仓库。若在仓库中执行 git init –bare –shared 命令，可将仓库的权限设为可写(基于服务器文件系统权限)。连接服务器的权限通过服务器自有的 SSH 服务实现，创建访问账户也针对服务器，而不是 git 仓库。访问权限也可以在服务器创建 git 账户，然后将需要写权限的用户的 SSH 公钥加入 git 账户的 ~/.ssh/authorized_keys 文件中；或者让 SSH 服务器通过某个 LDAP 服务，或者其他已经设定好的集中授权机制，来进行授权。</p>
<p>生成 SSH 公钥通过以下步骤完成：通过 ssh-keygen 命令创建公钥(存放在 id_dsa.pub 文件中)和密钥(存放在 id_dsa 文件中)；将公钥复制到 git 账户的 ~/.ssh/authorized_keys 文件中(通过 git 服务器管理员完成，或自动化脚本实现)。</p>
<p>在服务器创建 git 账户时，将使所有获得授权的用户都能以系统用户 git 的身份登录服务器从而获得一个普通 shell，即能对服务器进行一定操作。若想对此加以限制，则需要修改 passwd 文件中(git 用户所对应)的 shell 值；或者通过 git 软件包自带的 git-shell 工具代替 bash 或 csh 作为用户的登录 shell，用户即不能通过登录 shell 执行非 git 命令(上述过程，通过 sudo chsh git 命令改变系统用户的登录 shell 实现)。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --bare my_project my_project.git <span class="comment"># 通过 --bare 选项创建裸仓库</span></span><br><span class="line">cp -Rf my_project/.git my_project.git <span class="comment"># 同上</span></span><br><span class="line">git init --bare <span class="comment"># 新疆一个空仓库</span></span><br><span class="line">git init --bare --shared <span class="comment"># 新疆一个空仓库，并将仓库的权限设为可写</span></span><br></pre></td></tr></table></figure>
<h3 id="疑问-2"><a href="#疑问-2" class="headerlink" title="疑问"></a>疑问</h3><ol>
<li>协议相关知识再梳理？</li>
<li>搭建 git 服务器过程再梳理，包含守护进程、git-http-backend 脚本在Apache 服务器上的使用、GitWeb 网页查看、GitLab 服务器等？</li>
</ol>
<h2 id="Distributed-Git"><a href="#Distributed-Git" class="headerlink" title="Distributed Git"></a>Distributed Git</h2><h3 id="分布式工作流"><a href="#分布式工作流" class="headerlink" title="分布式工作流"></a>分布式工作流</h3><p>分布式工作流有三种，包含集中式工作流、集成管理者工作流、司令官和副官工作流。一般项目采用集中式工作流，当 A 用户提交了代码后，B 用户再次提交前，先须拉取代码并合并，然后才能提交；否则会报提交失败。集成管理者工作流通常在 github 开源代码中采用，即作为开源代码的贡献者，先须 fork 该项目，创建一个自己的仓库，更新提交后，发送消息给开源代码的维护者，等待维护者合并贡献者的代码并提交。司令官和副官工作流见于 linux 开发项目，普通开发者完成开发后，基于司令官的 master 执行变基操作；副官再将普通开发者的分支合并到自己的 master 分支上；司令官合并所有副官的 master 分支并提交。</p>
<h3 id="提交准则"><a href="#提交准则" class="headerlink" title="提交准则"></a>提交准则</h3><ol>
<li>避免空白错误。</li>
<li>尝试让每一个提交成为一个逻辑上的独立变更集，即针对每个问题，独立提交一次。</li>
<li>完善提交信息，使用 vim 编辑提交信息，推荐使用 标题 + 空行 + 正文 形式。</li>
</ol>
<h3 id="贡献代码"><a href="#贡献代码" class="headerlink" title="贡献代码"></a>贡献代码</h3><h4 id="私有小型团队"><a href="#私有小型团队" class="headerlink" title="私有小型团队"></a>私有小型团队</h4><p>用户 A 创建特性分支 feature1 并作修改后，再将特性分支合并到 master 分支上。用户 B 创建了特性分支 feature2 并作修改后，若在此时，用户 B 想把 feature2 内容合并到 master 分支并作提交，那他需要在 master 分支上执行 git fetch; git merge origin/master; git merge feature2 命令，即合并本地特性分支和远程协作者提交内容后，才可以正式提交代码。这样的工作流程最常见于实际项目中。</p>
<h4 id="私有大型团队"><a href="#私有大型团队" class="headerlink" title="私有大型团队"></a>私有大型团队</h4><p>用户 A 和 B 在特性分支 feature1 上工作，用户 B 和 C 在特性分支 feature2 上工作。工作流程采用了整合-管理者工作流程，即独立小组的工作只能被特定的工程师整合，主仓库的 master 分支只能被那些工程师更新。当 feature1, feature2 开发并测试完成后，再由整合者将两个分支的内容合并到 master 分支上。对于 feature1, feature2 的开发工作流程，同小型私有团队，即提交前先要合并协作者上传到远端的代码。</p>
<h4 id="派生的公开项目"><a href="#派生的公开项目" class="headerlink" title="派生的公开项目"></a>派生的公开项目</h4><p>首先 clone 项目，然后在本地创建 feature1 分支(使 master 分支保持干净，避免维护者不采用你的代码时，需要回滚 master 分支到最初 clone 时的状态)，fork 仓库(即派生项目)后提交到远程自己的同名仓库中。通知开源项目的维护者拉取你的改动，这通常被称为拉取请求(pull request)，可通过执行 git request-pull origin/master feature 命令告知维护者改动是在你 fork 的仓库的 feature 分支上完成的。</p>
<h4 id="通过邮件的公开项目"><a href="#通过邮件的公开项目" class="headerlink" title="通过邮件的公开项目"></a>通过邮件的公开项目</h4><p>有几个历史悠久的、大型的项目会通过一个开发者的邮件列表接受补丁。使用 git format-patch 来生成可以邮寄到列表的 mbox 格式的文件 - 它将每一个提交转换为一封电子邮件，提交信息的第一行作为主题，剩余信息与提交引入的补丁作为正文。-M 选项用于告诉 Git 查找重命名。通过 git config 设置 imap 区块的 folder = “[Gmail]/Drafts”, host = imaps://imap.gmail.com, user = <a href="mailto:user@gmail.com" target="_blank" rel="noopener">user@gmail.com</a>, pass = p4ssw0rd, port = 993, sslverify = false 属性(如果 IMAP 服务器不使用 SSL，无需设置 port, sslverify 属性，host 的值会是 imap:// 而不是 imaps://)；再执行 git imap-send 可以将补丁序列放在特定 IMAP 服务器的 Drafts 文件夹。或者通过 git config 设置 sendemail 区块的 smtpencryption = tls, smtpserver = smtp.gmail.com, smtpuser = <a href="mailto:user@gmail.com" target="_blank" rel="noopener">user@gmail.com</a>, smtpserverport = 587 属性；再执行 git send-email 通过 SMTP 服务器发送补丁。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git diff --check <span class="comment"># 检查空白错误。空白错误是指行尾的空格、Tab 制表符，和行首空格后跟 Tab 制表符的行为</span></span><br><span class="line">git format-patch -M origin/master <span class="comment"># 生成 .patch 扩展名的补丁文件，可以编辑该文件，添加额外信息</span></span><br><span class="line">cat *.patch |git imap-send <span class="comment"># 通过 IMAP 发送正确格式化的补丁</span></span><br><span class="line">git send-email *.patch <span class="comment"># 通过 SMTP 服务器发送补丁</span></span><br></pre></td></tr></table></figure>
<h3 id="维护项目"><a href="#维护项目" class="headerlink" title="维护项目"></a>维护项目</h3><h4 id="应用补丁"><a href="#应用补丁" class="headerlink" title="应用补丁"></a>应用补丁</h4><p>若补丁通过 git diff 生成，使用 git apply 命令可在当前工作分支中应用文件补丁。应用补丁前，使用 git apply –check 命令可检查补丁是否可以顺利应用。</p>
<p>若补丁通过 format-patch 生成，使用 git am 命令可以提取出 mbox 文件中的实际变更并应用，且自动创建新的提交。</p>
<h4 id="合并工作流"><a href="#合并工作流" class="headerlink" title="合并工作流"></a>合并工作流</h4><p>合并工作流，可以将特性分支逐次合并到 master 分支上；或者保持 master 分支的稳定性，再创建 develop 长期分支，将特性分支合并 develop 分支，等 develop 分支稳定后，再合并到 master 分支上；或者在 master 之外创建 next, pu(proposed updates，用于新工作), maint(maintenance backports，用于维护性向后移植工作) 分支，安全的特性分支先合并入 next 分支，再合并到 master 分支上。</p>
<h4 id="拣选"><a href="#拣选" class="headerlink" title="拣选"></a>拣选</h4><p>执行 git cherry-pick，见原理。</p>
<h4 id="重用冲突解决方案-reuse-recorded-resolution"><a href="#重用冲突解决方案-reuse-recorded-resolution" class="headerlink" title="重用冲突解决方案/reuse recorded resolution"></a>重用冲突解决方案/reuse recorded resolution</h4><p>执行 git config –global rerere.enabled true 缓存冲突解决方案。执行 git rerere 命令将从缓存中查找相似的冲突，并应用对应的解决方案。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git apply *.patch <span class="comment"># 在当前分支中应用补丁</span></span><br><span class="line">git apply --check *.patch <span class="comment"># 检查补丁是否可被顺利应用</span></span><br><span class="line">git am *.patch <span class="comment"># 读取 mbox 文件实际变更并应用</span></span><br><span class="line">git am -3 *.patch <span class="comment"># -3 选项将使用三方合并应用补丁</span></span><br><span class="line">git am -3 -i mbox <span class="comment"># 使用交互模式应用多个补丁</span></span><br><span class="line">git am --resolved <span class="comment"># git am 报错后，手动解决冲突，执行下一个补丁的应用</span></span><br><span class="line">git am --skip <span class="comment"># 跳过当前补丁</span></span><br><span class="line">git am --abort <span class="comment"># 当前分支回退到应用补丁前状态，终止补丁应用</span></span><br><span class="line">git <span class="built_in">log</span> branch1 --not branch2 <span class="comment"># 找出仅属于 branch1 但不属于 branch2 的提交记录</span></span><br><span class="line">git diff branch <span class="comment"># 当前工作分支与 branch 分支比较差异</span></span><br><span class="line">git merge-base branch1 branch2 <span class="comment"># 找出 branch1 和 branch2 的共同祖先</span></span><br><span class="line">git diff branch1...branch2 <span class="comment"># 比较 branch1 的最新提交和两个分支的共同祖先之间的差异</span></span><br><span class="line">git cherry-pick &lt;checksum&gt; <span class="comment"># 以某个提交对象为基底在当前工作分支上创建新的提交对象，将重新计算校验和，如 git cherry-pick e43a6fd3e94888d76779ad79fb568ed180e5fcdf</span></span><br><span class="line">git config --global rerere.enabled <span class="literal">true</span> <span class="comment"># 开启冲突解决方案缓存</span></span><br><span class="line">git rerere <span class="comment"># 查找相似的冲突解决方案并应用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布</span></span><br><span class="line">git tag -s &lt;version&gt; -m <span class="string">'message'</span> <span class="comment"># 打标签</span></span><br><span class="line">gpg --list-keys <span class="comment"># 查找 GPG 公钥</span></span><br><span class="line">gpg -a --<span class="built_in">export</span> &lt;gpgkey&gt; | git <span class="built_in">hash</span>-object -w --stdin <span class="comment"># git hash-object 命令以 blob 对象形式在 git 中导入公钥，并返回该 blob 对象的 SHA-1 值。该 SHA-1 值可以用于发布标签，如 git tag -a &lt;tagname&gt; &lt;sha-1&gt;</span></span><br><span class="line">git show &lt;tagname&gt; | gpg --import <span class="comment"># 开发者获取并导入公钥，用于贡献代码</span></span><br><span class="line">git describe &lt;branch&gt; <span class="comment"># 生成构建号，包含最近的标签名、自该标签之后的提交数目和你所描述的提交的部分 SHA-1 值</span></span><br><span class="line">git archive master --prefix=<span class="string">'project/'</span> | gzip &gt; `git describe master`.tar.gz <span class="comment"># 创建 .tar.gz 压缩包</span></span><br><span class="line">git archive master --prefix=<span class="string">'project/'</span> --format=zip &gt; `git describe master`.zip <span class="comment"># 创建 .zip 压缩包</span></span><br><span class="line">git shortlog --no-merges master --not v1.0.1 <span class="comment"># 生成自 v1.0.1 版本发布以来所有提交的总结</span></span><br></pre></td></tr></table></figure>
<p>疑问：</p>
<ol>
<li>公共项目的发布问题？</li>
</ol>
<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p>github 钩子和服务订制、API，参见：<br><a href="https://git-scm.com/book/zh/v2/GitHub-脚本-GitHub" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2/GitHub-脚本-GitHub</a><br><a href="https://developer.github.com" target="_blank" rel="noopener">https://developer.github.com</a></p>
<h2 id="Git-Tools"><a href="#Git-Tools" class="headerlink" title="Git Tools"></a>Git Tools</h2><h3 id="选取提交记录"><a href="#选取提交记录" class="headerlink" title="选取提交记录"></a>选取提交记录</h3><p>根据提交对象的 SHA-1 值查看提交记录。引用日志只在本地生成，不能通过远程交互被协作者拷贝。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --abbrev-commit --pretty=oneline <span class="comment"># 获取简短且唯一的 SHA-1 值</span></span><br><span class="line">git show &lt;sha-1&gt;|&lt;branch&gt; <span class="comment"># 显示提交记录</span></span><br><span class="line">git rev-parse &lt;branch&gt; <span class="comment"># 获取最近一次提交的 SHA-1 值</span></span><br><span class="line">git reflog <span class="comment"># 查看引用日志，引用日志记录了最近几个月的 HEAD 和分支引用所指向的历史，包含提交对象的简短 SHA-1 值、HEAD 记录和提交信息</span></span><br><span class="line">git show HEAD@&#123;5&#125; <span class="comment"># 查看第五次提交记录</span></span><br><span class="line">git show &lt;branch&gt;@&#123;yesterday&#125; <span class="comment"># 查看 branch 分支昨天指向了哪个提交</span></span><br><span class="line">git show HEAD^ <span class="comment"># ^ 引用指上一次提交，HEAD^ 即上一次提交，HEAD^^ 即之前第二次提交</span></span><br><span class="line">git show &lt;sha-1&gt;^ <span class="comment"># 特定提交的上一次提交</span></span><br><span class="line">git show HEAD~ <span class="comment"># ~ 指父引用，~2 指之前第二次提交</span></span><br><span class="line">git show &lt;sha-1&gt;~num <span class="comment"># 特定提交前第 num 次提交</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> branch1..branch2 <span class="comment"># branch1..branch2 指在 branch2 分支中而不在 branch1 分支中的提交，branch2 留空，自动以 HEAD 填充，如 git log origin/master..HEAD 或 git log origin/master..。branch1..branch2可用于其他命令</span></span><br><span class="line">git <span class="built_in">log</span> refA refB ^refC <span class="comment"># 指定被 refA, refB 包含，但不被 refC 包含的提交记录</span></span><br><span class="line">git <span class="built_in">log</span> refA refB --not refC <span class="comment"># 同上</span></span><br><span class="line">git <span class="built_in">log</span> branch1...branch2 <span class="comment"># 选出不被两个分支同时包含的提交记录</span></span><br><span class="line">git <span class="built_in">log</span> --left-right branch1...branch2 <span class="comment"># 选出不被两个分支同时包含的提交记录，并显示提交对象属于 branch1 还是 branch2</span></span><br></pre></td></tr></table></figure>
<h3 id="交互式暂存"><a href="#交互式暂存" class="headerlink" title="交互式暂存"></a>交互式暂存</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add -i|--interactive <span class="comment"># --interactive 选项用于开启交互式暂存命令行，执行后左侧显示已暂存的，右侧显示未暂存的；根据提示命令面板执行后续操作，如 1/status 显示状态, 2/update 提交到暂存区, 3/revert 从暂存区撤回, 4/add untracked 提交未追踪文件到暂存区, 5/patch 暂存补丁，可将部分修改提交到暂存区, 6/diff 查看已暂存内容的区别</span></span><br><span class="line">git add -p|--patch <span class="comment"># 暂存部分文件</span></span><br><span class="line">git reset --patch <span class="comment"># 部分重置文件</span></span><br><span class="line">git checkout --patch <span class="comment"># 部分检出文件</span></span><br><span class="line">git stash save --patch <span class="comment"># 部分暂存文件</span></span><br></pre></td></tr></table></figure>
<h3 id="储藏"><a href="#储藏" class="headerlink" title="储藏"></a>储藏</h3><p>通过 git stash 命令可以将工作区的改动储藏起来，却不是提交到暂存区；再使用 git stash apply 应用之前的储藏(可以在另一个分支上应用储藏；且当前分支做过修改后，仍可以应用储藏，必要时需解决冲突)。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash <span class="comment"># 储藏工作区的改动，可用于切换分支前避免与远程代码的合并</span></span><br><span class="line">git stash save <span class="comment"># 同上</span></span><br><span class="line">git stash --keep-index <span class="comment"># 同上，--keep-index 选项将不储藏已使用 git add 暂存的内容</span></span><br><span class="line">git stash -u|--include-untracked <span class="comment"># 默认 git stash 不包含未追踪的文件，--include-untracked 选项将包含未追踪的文件</span></span><br><span class="line">git stash --patch <span class="comment"># 交互式地指引用户需要将那些改动储藏，那些改动保存在工作区</span></span><br><span class="line">git stash --all <span class="comment"># 移除修改，并储藏起来</span></span><br><span class="line">git stash list <span class="comment"># 查看所有储藏内容</span></span><br><span class="line">git stash apply <span class="comment"># 将储藏重新应用在工作分支上，默认为最近的储藏</span></span><br><span class="line">git stash apply stash@&#123;num&#125; <span class="comment"># 将第 num 次储藏应用在工作分支上，0 为最近的储藏</span></span><br><span class="line">git stash apply --index <span class="comment"># 应用储藏，同时应用暂存</span></span><br><span class="line">git stash branch &lt;branchname&gt; <span class="comment"># 创建一个新分支，检出储藏工作时所在的提交，重新在那应用工作，并扔掉储藏</span></span><br><span class="line">git stash drop stash@&#123;num&#125; <span class="comment"># 移除储藏</span></span><br><span class="line">git stash pop stash@&#123;num&#125; <span class="comment"># 应用并移除储藏</span></span><br></pre></td></tr></table></figure>
<h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git clean <span class="comment"># 从工作目录中移除未被追踪的文件</span></span><br><span class="line">git clean -f -d <span class="comment"># 强制移除工作目录中所有未追踪的文件以及空的子目录</span></span><br><span class="line">git clean -d -n <span class="comment"># 移除项预览</span></span><br><span class="line">git clean -n -d -x <span class="comment"># git clean 默认不移除 .gitignore 中匹配的文件，-x 选项将移除该类文件</span></span><br><span class="line">git clean -x -i|--interactive <span class="comment"># 交互式执行 clean 命令</span></span><br></pre></td></tr></table></figure>
<h3 id="签署标签"><a href="#签署标签" class="headerlink" title="签署标签"></a>签署标签</h3><p>参考：<a href="https://git-scm.com/book/zh/v2/Git-工具-签署工作" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2/Git-工具-签署工作</a></p>
<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git grep string/regexp <span class="comment"># 从提交历史或工作目录中查找匹配正则或字符串的内容，--and 选项用于设置更复杂字符串或正则匹配规则</span></span><br><span class="line">git grep string/regexp &lt;filepath&gt; &lt;version&gt; <span class="comment"># 指定文件或文件夹、版本号搜索</span></span><br><span class="line">git grep -n string/regexp <span class="comment"># 输出行号</span></span><br><span class="line">git grep -p string/regexp <span class="comment"># 查看匹配的行属于哪一个方法或函数</span></span><br><span class="line">git grep -count string/regexp <span class="comment"># 输出概要信息</span></span><br><span class="line">git grep --<span class="built_in">break</span> --heading string/regexp <span class="comment"># 使输出更易读</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志搜索</span></span><br><span class="line">git <span class="built_in">log</span> -string --oneline <span class="comment"># 从提交历史或 diff 内容中检索匹配字符串或正则的提交记录，-S 选项只查看新增和删除匹配内容的提交，-G 选项使用正则表达式检索</span></span><br><span class="line">git <span class="built_in">log</span> -L :string:filepath <span class="comment"># 行日志搜索，搜索特定文件中 string 变更的提交记录</span></span><br></pre></td></tr></table></figure>
<h3 id="重写历史"><a href="#重写历史" class="headerlink" title="重写历史"></a>重写历史</h3><p>git commit –amend 用于修改前一次提交。<br>git rebase -i 交互式修改多次提交记录，可拆分，可弃用，可合并，可重置等。须在本地环境中使用，提交到线上再调用变基，会使协作者变得不方便。<br>git filter-branch 使用脚本的方式改写大量提交记录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend <span class="comment"># 修改前一次提交记录，修改暂存区再执行该命令时可改变提交内容，否则只是改变提交信息</span></span><br><span class="line">git rebase -i HEAD~2^|HEAD~3 <span class="comment"># -i 选项开启交互式变基命令，将唤起编辑器，反序修改前三次提交，最后一次修改在前。因为之前的提交已提交，显示 p, pick 默认提交，修改为 r, reword 重写提交信息；e, edit 使用  git commit --amend 重置提交，可用于拆分提交；s, squash 将提交信息合并到之前执行 pick 命令的提交对象中，且将多次提交信息合并；f, fixup 同 squash，但丢弃提交信息，x, exec，唤起 shell 提交。弃用某次提交记录，可直接从 git rebase -i HEAD~2^|HEAD~3 显示的列表中删除</span></span><br><span class="line">git filter-branch --tree-filter <span class="string">'rm -f passwords.txt'</span> HEAD <span class="comment"># --tree-filter 选项在检出项目的每一个提交后运行指定的命令然后重新提交结果。--all 选项用于改写所有分支</span></span><br><span class="line">git filter-branch --subdirectory-filter trunk HEAD <span class="comment"># 让 trunk 子目录作为每一个提交的新的项目根目录</span></span><br><span class="line">git filter-branch --commit-filter <span class="string">'</span></span><br><span class="line"><span class="string">  if [ "$GIT_AUTHOR_EMAIL" = "schacon@localhost" ];</span></span><br><span class="line"><span class="string">  then</span></span><br><span class="line"><span class="string">    GIT_AUTHOR_NAME="Scott Chacon";</span></span><br><span class="line"><span class="string">    GIT_AUTHOR_EMAIL="schacon@example.com";</span></span><br><span class="line"><span class="string">    git commit-tree "$@";</span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    git commit-tree "$@";</span></span><br><span class="line"><span class="string">  fi'</span> HEAD <span class="comment"># 修改多个项目的提交邮箱，且重写每个提交的校验和，不只匹配邮箱地址的提交</span></span><br></pre></td></tr></table></figure>
<h3 id="重置揭密"><a href="#重置揭密" class="headerlink" title="重置揭密"></a>重置揭密</h3><p>参考原理。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cat-file -p HEAD <span class="comment"># 查看版本库当前提交信息</span></span><br><span class="line">git ls-tree -r HEAD <span class="comment"># 查看版本库中提交文件的 checksum 及其文件名</span></span><br><span class="line">git ls-files -s <span class="comment"># 查看暂存区中文件的 checksum 及其文件名</span></span><br><span class="line"></span><br><span class="line">git reset &lt;checksum&gt; <span class="comment"># 将版本库和暂存区内容替换为 checksum 指向的提交对象</span></span><br><span class="line">git reset --soft &lt;checksum&gt; <span class="comment"># 将版本库内容替换为 checksum 指向的提交对象</span></span><br><span class="line">git reset --mixed &lt;checksum&gt; <span class="comment"># 将版本库和暂存区内容替换为 checksum 指向的提交对象</span></span><br><span class="line">git reset --hard &lt;checksum&gt; <span class="comment"># 将版本库、暂存区和工作区内容替换为 checksum 指向的提交对象</span></span><br><span class="line">git reset &lt;filepath&gt; <span class="comment"># 从 HEAD 中获取 filepath 文件或目录，复制到暂存区</span></span><br><span class="line">git reset &lt;checksum&gt; &lt;filepath&gt; <span class="comment"># 从 checksum 中获取 filepath 文件或目录，复制到暂存区</span></span><br></pre></td></tr></table></figure>
<h3 id="高级合并"><a href="#高级合并" class="headerlink" title="高级合并"></a>高级合并</h3><p>合并前可以通过保存到临时分支或通过执行 git stash 命令储藏起来，避免合并对工作区的影响，使工作区内容丢失。</p>
<p>子树合并是项目某目录下包含一个子工程，同时 git 分支也包含一个从属于子工程的分支，从而引起子分支和子工程目录的合并操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge --abort <span class="comment"># 退出合并，工作区内容恢复到合并前</span></span><br><span class="line">git reset --hard HEAD <span class="comment"># 退出合并，将版本库、暂存区和工作区内容重置到合并前</span></span><br><span class="line">git merge -Xignore-space-change <span class="comment"># 忽略任意数量的已有空白的修改</span></span><br><span class="line">git merge -Xignore-space-change <span class="comment"># 忽略所有空白修改</span></span><br><span class="line">git show :1:&lt;conflictFileName&gt; &gt; commonFileName <span class="comment"># 拷贝并导出冲突的共同祖先文件</span></span><br><span class="line">git show :2:&lt;conflictFileName&gt; &gt; oursFileName <span class="comment"># 拷贝并导出冲突的工作目录文件</span></span><br><span class="line">git show :3:&lt;conflictFileName&gt; &gt; theirsFileName <span class="comment"># 拷贝并导出冲突的待合并文件</span></span><br><span class="line">git ls-files -u <span class="comment"># 查看冲突文件的完整 SHA-1 值</span></span><br><span class="line">git merge-file -p \</span><br><span class="line">  oursFileName commonFileName theirsFileName &gt; fileName <span class="comment"># oursFileName, commonFileName, theirsFileName 拷贝的冲突文件手工解决冲突后，合并冲突文件</span></span><br><span class="line">git diff --ours <span class="comment"># 查看合并结果和当前工作分支的差别，-b 选项用于移除空格比较，--base 选项查看比较文件两边是如何改动的</span></span><br><span class="line">git diff --theirs <span class="comment"># 查看合并结果和待合并分支的差别</span></span><br><span class="line">git clean -f <span class="comment"># 清理为合并拷贝的文件，如 commonFileName 等</span></span><br><span class="line">git checkout --conflict=diff3 <span class="comment"># 查看工作分支、待合并分支、共同祖先分支的冲突文件</span></span><br><span class="line">git checkout --conflict=merge <span class="comment"># 默认，查看工作分支、待合并分支的冲突文件</span></span><br><span class="line">git checkout --ours <span class="comment"># 合并时使用当前工作分支文件内容</span></span><br><span class="line">git checkout --theirs <span class="comment"># 合并时使用待合并分支文件内容</span></span><br><span class="line">git <span class="built_in">log</span> --oneline --left-right branch1...branch2 <span class="comment"># 查看合并文件的提交记录来源</span></span><br><span class="line">git <span class="built_in">log</span> --oneline --left-right --merge <span class="comment"># 查看合并过程中，有冲突文件的提交记录来源</span></span><br><span class="line">git diff <span class="comment"># 查看冲突文件或冲突结果</span></span><br><span class="line">git <span class="built_in">log</span> --cc -p -1 <span class="comment"># 查看冲突结果</span></span><br><span class="line">git reset --hard HEAD~ <span class="comment"># 撤销合并，将版本库撤回到合并前状态</span></span><br><span class="line">git revert -m 1 basebranch <span class="comment"># 撤销合并，将提交对象撤回到 basebranch 分支内容。-m 1 标记指出 “mainline” 需要被保留下来的父结点。此时将无法合并待合并分支的内容</span></span><br><span class="line">git revert &lt;checksum&gt; <span class="comment"># 撤销 git revert -m 1 basebranch 命令</span></span><br><span class="line">git merge -Xours &lt;branch&gt; <span class="comment"># 选用当前工作分支内容进行合并</span></span><br><span class="line">git merge -Theirs &lt;branch&gt; <span class="comment"># 选用待合并分支内容进行合并</span></span><br><span class="line">git merge-file --ours &lt;filepath&gt; <span class="comment"># 选用当前工作分支内容进行合并</span></span><br><span class="line">git merge-file --theirs &lt;filepath&gt; <span class="comment"># 选用待合并分支内容进行合并</span></span><br><span class="line">git merge -s ours &lt;branch&gt; <span class="comment"># 假合并，直接将当前工作分支内容作为合并结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子树合并</span></span><br><span class="line">git <span class="built_in">read</span>-tree --prefix=dirname/ -u sub_project_branch <span class="comment"># 将子工程分支的内容拷贝到 dirname 目录中</span></span><br><span class="line">git merge --squash -s recursive -Xsubtree=dirname sub_project_branch <span class="comment"># 将 sub_project_branch 分支内容合并到 dirname 目录中</span></span><br><span class="line">git diff-tree -p sub_project_branch <span class="comment"># 查看差异</span></span><br><span class="line">git diff-tree -p &lt;remote&gt;/&lt;branch&gt; <span class="comment"># 和远程引用相比较</span></span><br></pre></td></tr></table></figure>
<h3 id="rerere-命令"><a href="#rerere-命令" class="headerlink" title="rerere 命令"></a>rerere 命令</h3><p>通过 git config –global rerere.enabled true 命令开启 rerere 功能。rerere 记录冲突解决方案，自动解决冲突。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global rerere.enabled <span class="literal">true</span> <span class="comment"># 开启 rerere 功能</span></span><br><span class="line">git rerere status <span class="comment"># 查看合并前的状态</span></span><br><span class="line">git rerere diff <span class="comment"># 查看解决前后的文件内容差异。冲突解决后，可查看 git rerere 将要记录的内容</span></span><br><span class="line">git ls-files -u <span class="comment"># 查看各冲突文件 checksum</span></span><br></pre></td></tr></table></figure>
<h3 id="使用-git-调试"><a href="#使用-git-调试" class="headerlink" title="使用 git 调试"></a>使用 git 调试</h3><p>使用 git blame 命令可以查看文件内容的历次更改，适用在确知某方法会引起 bug 的场景，可查看该方法的改动细节。</p>
<p>使用 git bisect 命令可以定位哪次提交引起了异常。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git blame -L startLine,endLine filepath <span class="comment"># 查看 filepath 文件自 startLine 起始、到 endLine 行结束的变更记录。-L 选项用于限制行号。-C 选项会分析拷贝之后再重命名文件的原始出处</span></span><br><span class="line"></span><br><span class="line">git bisect start <span class="comment"># 启动二分查找</span></span><br><span class="line">git bisect bad <span class="comment"># 告知 git 当前提交有问题</span></span><br><span class="line">git bisect good &lt;checksum&gt; <span class="comment"># 告知 git 将 checksum 指向的提交对象标记为好的。由 git 告知用户在正常提交和错误提交之间有多少次提交，二次查找中间那次提交，通过 git bisect bad 或 git bisect good 标记好坏。git 会自动定位到提交中点，再由用户判断提交结果的好坏</span></span><br><span class="line">git bisect reset <span class="comment"># 重置 HEAD 指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过执行脚本定位 bug 来源。checksum1 是坏的提交，checksum2 是好的提交</span></span><br><span class="line">git bisect start &lt;checksum1&gt;|HEAD &lt;checksum2&gt;</span><br><span class="line">git bisect run filepath</span><br></pre></td></tr></table></figure>
<h3 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h3><p>子模块虽然在工程目录中创建了子目录，但是若不在该子目录中，git 并不会跟踪子模块的文件内容，而是将它看作该仓库中的一个特殊提交。子模块提交时标记为 160000 模式，意味着将一次提交记作一项目录记录，而非将它记录成一个子目录或者一个文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule add &lt;remoteurl&gt; &lt;dirname&gt; <span class="comment"># 克隆远程仓库，以远程仓库名创建文件夹，或者自定义文件夹。同时会添加 .gitmodules 文件，用于保存本地目录和远程仓库地址</span></span><br><span class="line">git config submodule.&lt;dirname&gt;.url &lt;url&gt; <span class="comment"># 重设远程仓库地址</span></span><br><span class="line">git diff --cached --submodule <span class="comment"># 查看子模块的文件差异</span></span><br><span class="line">git submodule init <span class="comment"># 子模块初始化</span></span><br><span class="line">git submodule update <span class="comment"># 获取远程仓库数据，并检出父项目中属于子模块的提交</span></span><br><span class="line">git <span class="built_in">clone</span> --recursive mainurl <span class="comment"># mainurl 为父项目的 url，同时更新子模块</span></span><br><span class="line">git submodule update --remote subproject <span class="comment"># 在父项目工作目录中进行更新，避免手动进入子模块抓取和合并</span></span><br><span class="line">git submodule update --remote --merge <span class="comment"># 合并</span></span><br><span class="line">git submodule update --remote --rebase <span class="comment"># 变基</span></span><br><span class="line">git submodule update --init <span class="comment"># 初始化拉取远程内容</span></span><br><span class="line">git <span class="built_in">log</span> -p --submodule <span class="comment"># 查看子模块的提交日志</span></span><br><span class="line">git push --recurse-submodules=check <span class="comment"># 推送时校验子项目有否提交</span></span><br><span class="line">git push --recurse-submodules=on-demand <span class="comment"># 推送子模块，或者子项目中执行 git push 命令</span></span><br><span class="line">git submodule foreach <span class="string">'git stash'</span> <span class="comment"># 在所有子模块中运行 git stash 命令</span></span><br><span class="line">git rm -r &lt;dirname&gt; <span class="comment"># 从暂存区移除子项目目录</span></span><br><span class="line">rm -Rf &lt;dirname&gt; <span class="comment"># 移除子项目目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子模块命令别名</span></span><br><span class="line">git config alias.sdiff <span class="string">'!'</span><span class="string">"git diff &amp;&amp; git submodule foreach 'git diff'"</span></span><br><span class="line">git config alias.spush <span class="string">'push --recurse-submodules=on-demand'</span></span><br><span class="line">git config alias.supdate <span class="string">'submodule update --remote --merge'</span></span><br></pre></td></tr></table></figure>
<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git bundle create bundlefilename HEAD &lt;branch&gt; <span class="comment"># 将 branch 分支所有提交数据打包到 bundlefilename 文件中</span></span><br><span class="line">git bundle create bundlefilename &lt;branch&gt; ^&lt;checksum&gt; <span class="comment"># 设定提交区间，并打包文件。提交区间可以用 ... 等符号操作</span></span><br><span class="line">git <span class="built_in">clone</span> bundlefilename dirname <span class="comment"># 将打包文件解压到 dirname 目录中</span></span><br><span class="line">git bundle verify bundlefilename <span class="comment"># 校验打包文件是不是合法的 Git 包</span></span><br><span class="line">git bundle list-heads bundlefilename <span class="comment"># 查看打包文件包含哪些提交对象和分支</span></span><br><span class="line">git fetch bundlefilename branch:<span class="built_in">local</span>-branch <span class="comment"># 将打包文件中的分支导入本地工程中</span></span><br></pre></td></tr></table></figure>
<h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><p>大型项目可分成一个短历史提交记录和一个长历史提交记录，短历史供新的开发者使用，后者给喜欢数据挖掘的人使用。制作短历史提交记录通过 git commit-tree 命令合并提交记录，再通过 git rebase 命令将必要的提交变基到刚创建的合并提交记录上，就可以制作短历史提交记录。执行 git replace 命令，可以查看长历史提交记录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch &lt;branch&gt; &lt;checksum&gt; <span class="comment"># 以提交对象 checksum 创建分支 branch</span></span><br><span class="line">git push remote localbranch:remotebranch <span class="comment"># 将本地 localbranch 分支推送到远程仓库 remote 下的 remotebranch 分支</span></span><br><span class="line">git commit-tree &lt;checksum&gt;^&#123;tree&#125; <span class="comment"># 将 checksum 提交对象及其前的提交合并为新的提交对象，返回新提交对象的 SHA-1 </span></span><br><span class="line">git rebase --onto checksum1 checksum2 <span class="comment"># 将 checksum2 后的提交变基到 checksum1 上，checksum1 后产生新的提交记录</span></span><br><span class="line">git replace checksum1 checksum2 <span class="comment"># 将 checksum1 及其前的提交记录替换为 checksum2 及其前的提交记录</span></span><br><span class="line">git cat-file -p &lt;checksum&gt; <span class="comment"># 查看 checksum 提交的提交树 SHA-1 值及其父提交</span></span><br></pre></td></tr></table></figure>
<h3 id="凭证存储"><a href="#凭证存储" class="headerlink" title="凭证存储"></a>凭证存储</h3><p>使用 SSH 连接远端，且设置了一个没有口令的密钥，这样就可以在不用输入用户名和密码的情况下安全连接远端。使用 HTTP 存储，每一个连接都需要输入用户名和密码。git 凭证机制默认不存储用户名和密码，’cache’ 模式内存中暂时存储用户名和密码，’store’ 模式将用户名和密码存储在磁盘中，mac 下 ‘osxkeychain’ 以加密方式将凭证缓存到系统用户的钥匙串，windows 下可借助 ‘winstore’ 工具以加密方式将凭证存储在磁盘中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper cache|store <span class="comment"># 设置凭证存储模式</span></span><br><span class="line">git config --global credential.helper store --file &lt;path&gt; <span class="comment"># 设置存储目录</span></span><br><span class="line">git config --global credential.helper cache --timeout &lt;seconds&gt; <span class="comment"># 设置过期时间</span></span><br><span class="line">git credential fill <span class="comment"># 交互式设置凭证，通过 protocol/协议, host/主机名 设置</span></span><br></pre></td></tr></table></figure>
<h3 id="疑问-3"><a href="#疑问-3" class="headerlink" title="疑问"></a>疑问</h3><ol>
<li>获取某个特定的提交对象后，可否对该提交对象进行操作？</li>
<li>关于签署标签？</li>
<li>关于 git filter-branch？</li>
<li>关于子模块？</li>
</ol>
<h2 id="Customizing-Git"><a href="#Customizing-Git" class="headerlink" title="Customizing Git"></a>Customizing Git</h2><h3 id="自定义合并、比较工具"><a href="#自定义合并、比较工具" class="headerlink" title="自定义合并、比较工具"></a>自定义合并、比较工具</h3><p>借助 Perforce 图形化合并工具（P4Merge）来合并文件和解决冲突。</p>
<ol>
<li>下载 P4Merge。</li>
<li><p>创建一个名为 extMerge 的脚本包装 merge 命令，让它把参数转发给 p4merge 二进制文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/local/bin/extMerge</span></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">/Applications/p4merge.app/Contents/MacOS/p4merge $*</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个名为 extDiff 的脚本包装 diff 命令，让它把参数转发给 p4merge 二进制文件。git 传递以下参数给 diff：path old-file old-hex old-mode new-file new-hex new-mode。实际仅需要 old-file 和 new-file 参数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /usr/local/bin/extDiff</span></span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">[ <span class="variable">$#</span> -eq 7 ] &amp;&amp; /usr/<span class="built_in">local</span>/bin/extMerge <span class="string">"<span class="variable">$2</span>"</span> <span class="string">"<span class="variable">$5</span>"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使 extMerge, extDiff 脚本拥有可执行权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/extMerge</span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/extDiff</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件，自定义合并和比较文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global merge.tool extMerge <span class="comment"># 通知 Git 该使用哪个合并工具</span></span><br><span class="line">git config --global mergetool.extMerge.cmd \</span><br><span class="line">  <span class="string">'extMerge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"'</span> <span class="comment"># 规定命令运行的方式</span></span><br><span class="line">git config --global mergetool.extMerge.trustExitCode <span class="literal">false</span> <span class="comment"># 通知 Git 程序的返回值是否表示合并操作成功</span></span><br><span class="line">git config --global diff.external extDiff <span class="comment"># 通知 Git 该用什么命令做比较</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 git diff <checksum1> <checksum2> 命令，将自动唤起 P4Merge 图形化工具。</checksum2></checksum1></p>
</li>
<li>使用 git mergetool 命令，将自动唤起 P4Merge 图形化工具。</li>
</ol>
<h3 id="git-属性"><a href="#git-属性" class="headerlink" title="git 属性"></a>git 属性</h3><p>通过 .gitattributes 文件或 .git/info/attributes 文件设置属性，可用于识别二进制文件、比较二进制文件。</p>
<h4 id="识别二进制文件"><a href="#识别二进制文件" class="headerlink" title="识别二进制文件"></a>识别二进制文件</h4><p>只需配置 .gitattributes 文件。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*.pbxproj binary <span class="comment"># 将 pbxproj 识别为二进制文件，git 将不会对其修改，如 CRLF 问题</span></span><br></pre></td></tr></table></figure></p>
<h4 id="比较-word-文件"><a href="#比较-word-文件" class="headerlink" title="比较 word 文件"></a>比较 word 文件</h4><p>比较二进制 Microsoft Word 文件步骤：</p>
<ol>
<li>下载 docx2txt。</li>
<li><p>编写可执行脚本，即 docx2txt 文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">docx2txt.pl <span class="variable">$1</span> -</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config diff.word.textconv docx2txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 .gitattributes 文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*.docx diff=word <span class="comment"># 使用 “word” 过滤器，即借助 docx2txt 程序将 Word 文档转为可读文本文件</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="比较图像文件"><a href="#比较图像文件" class="headerlink" title="比较图像文件"></a>比较图像文件</h4><p>在比较时对图像文件运用一个过滤器(如 exiftool)，提炼出 EXIF 信息——这是在大部分图像格式中都有记录的一种元数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'*.png diff=exif'</span> &gt;&gt; .gitattributes</span><br><span class="line">git config diff.exif.textconv exiftool</span><br></pre></td></tr></table></figure>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span>/ <span class="built_in">export</span>-ignore <span class="comment"># .gitattributes 文件中设置不必导出的文件或文件夹</span></span><br><span class="line">LAST_COMMIT <span class="built_in">export</span>-subst <span class="comment"># 设置 LAST_COMMIT 文件用于接受提交记录，git commit 提交后，执行 git archive 命令，将提交记录导出到 LAST_COMMIT 文件中。LAST_COMMIT 文件内容如 'Last commit date: $Format:%cd by %aN$'</span></span><br><span class="line">database.xml merge=ours <span class="comment"># 设置合并策略，采用工作目录中的文件</span></span><br></pre></td></tr></table></figure>
<h3 id="git-钩子"><a href="#git-钩子" class="headerlink" title="git 钩子"></a>git 钩子</h3><p>git 钩子放置在 .git/hooks 子目录中。git init 初始化项目时有示例，可以用 Ruby 或 Python 编程。</p>
<h4 id="客户端钩子"><a href="#客户端钩子" class="headerlink" title="客户端钩子"></a>客户端钩子</h4><p>克隆远程仓库时不被复制。</p>
<ol>
<li>pre-commit 钩子在键入提交信息前运行。使用 git commit –no-verify 来绕过这个环节。</li>
<li>prepare-commit-msg 钩子在启动提交信息编辑器之前，默认信息被创建之后运行。</li>
<li>commit-msg 钩子在编辑器退出后运行。</li>
<li>post-commit 钩子在整个提交过程完成后运行。</li>
<li>applypatch-msg 钩子在应用补丁之前运行，git am 命令执行。</li>
<li>pre-applypatch 钩子在应用补丁之后、产生提交之前运行，git am 命令执行。</li>
<li>post-applypatch 钩子在提交产生之后运行，git am 命令执行。</li>
<li>pre-rebase 钩子在变基之前运行。</li>
<li>post-rewrite 钩子被那些会替换提交记录的命令调用，比如 git commit –amend 和 git rebase 命令。</li>
<li>post-checkout 钩子在检出之后运行。</li>
<li>post-merge 钩子在合并之后运行。</li>
<li>pre-push 钩子在推送之前运行。</li>
<li>re-auto-gc 钩子会在垃圾回收开始之前被调用。git 的一些日常操作在运行时，偶尔会调用 git gc –auto 进行垃圾回收。</li>
</ol>
<h4 id="服务器端钩子"><a href="#服务器端钩子" class="headerlink" title="服务器端钩子"></a>服务器端钩子</h4><ol>
<li>pre-receive 钩子在推送过程运行，同时向多个分支推送的情形下也只触发一次。</li>
<li>update 钩子在推送过程运行，同时向多个分支推送的情形下触发多次。</li>
<li>post-receive 钩子在整个过程完结以后运行，可以用来更新其他系统服务或者通知用户。它的用途包括给某个邮件列表发信，通知持续集成（continous integration）的服务器，或者更新问题追踪系统（ticket-tracking system） —— 甚至可以通过分析提交信息来决定某个问题（ticket）是否应该被开启，修改或者关闭。</li>
</ol>
<h3 id="疑问-4"><a href="#疑问-4" class="headerlink" title="疑问"></a>疑问</h3><ol>
<li>文件检出和暂存时设置过滤器，参考<a href="https://git-scm.com/book/zh/v2/自定义-Git-Git-属性" target="_blank" rel="noopener">git 属性</a>？</li>
<li>使用钩子，参考<a href="https://git-scm.com/book/zh/v2/自定义-Git-使用强制策略的一个例子" target="_blank" rel="noopener">使用强制策略的一个例子</a></li>
</ol>
<h2 id="Git-Internals"><a href="#Git-Internals" class="headerlink" title="Git Internals"></a>Git Internals</h2><p>从根本上来讲 git 是一个内容寻址（content-addressable）文件系统，并在此之上提供了一个版本控制系统的用户界面。</p>
<p>.git 目录包含：description 文件仅供 GitWeb 程序使用；config 文件包含项目特有的配置选项；info 目录包含一个全局性排除文件；hooks 目录包含客户端或服务端的钩子脚本；objects 目录存储所有数据内容；refs 目录存储指向数据（分支）的提交对象的指针；HEAD 文件指示目前被检出的分支；index 文件保存暂存区信息。</p>
<h3 id="git-对象"><a href="#git-对象" class="headerlink" title="git 对象"></a>git 对象</h3><p>git 是一个内容寻址文件系统。这意味着，git 的核心部分是一个简单的键值对数据库（key-value data store）。 你可以向该数据库插入任意类型的内容，它会返回一个键值，通过该键值可以在任意时刻再次检索（retrieve）该内容。 通过底层命令 hash-object 可将任意数据保存于 .git 目录，并返回相应的键值。在 git 中，文件内容存储为数据对象/blob object，文件目录存储为树对象/tree object。一个树对象包含了一条或多条树对象记录（tree entry），每条记录含有一个指向数据对象或者子树对象的 SHA-1 指针，以及相应的模式、类型、文件名信息。</p>
<p>通常，Git 根据某一时刻暂存区所表示的状态创建并记录一个对应的树对象。所以创建树对象时，先须把文件写入暂存区，以此获得树对象的校验和。但是，树对象的校验和不便于记忆，即不便于获取该树对象。在 git 中，使用提交对象定位树对象，以及该树对象的创建时间，即通过提交对象的校验和获取或存储树对象。提交对象的格式为，先指定一个顶层树对象，代表当前项目快照；然后是作者/提交者信息（依据 user.name 和 user.email 配置来设定，外加一个时间戳）；留空一行，最后是提交注释。</p>
<p>运行 git add 和 git commit 命令时，git 所做的实质工作——将被改写的文件保存为数据对象，更新暂存区，记录树对象，最后创建一个指明了顶层树对象和父提交的提交对象。数据对象、树对象和提交对象最初均以单独文件的形式保存在 .git/objects 目录下（首先转换为带有如 “blob #{content.length}\0” 等头部信息的内存数据，其次计算校验和，最后再写入 .git/objects 目录下）。</p>
<p>在存储文件对象时，为避免同一文件的不同版本保存多份，git 使用包文件存储，即保存最新版本的完整数据，其他版本保存与最新版本的差异。使用 git gc 命令可执行打包过程；git verify-pack 命令查看打包的内容。自动打包过程发生在 push 命令触发或本地包含太多不同版本的文件，大约需要 7000 个以上的松散对象或超过 50 个的包文件才能让 git 启动一次真正的 gc 命令（可通过修改 gc.auto 与 gc.autopacklimit 的设置来改动这些数值）。打包后，.git/refs 目录将清空，相应创建 .git/packed-refs 目录；更新引用时，再相应创建 .git/refs 目录下文件；查找分支引用先从 .git/refs 目录找起，其次 .git/packed-refs 目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'test content'</span> | git <span class="built_in">hash</span>-object -w --stdin <span class="comment"># 写入数据。-w 选项指示 hash-object 命令存储数据对象；若不指定此选项，则该命令仅返回对应的键值； --stdin 选项则指示该命令从标准输入读取内容；若不指定此选项，则须在命令尾部给出待存储文件的路径。返回40位校验和，以前两位作为目录名，后38位作为文件名，存储在 .git/objects 目录中</span></span><br><span class="line">git <span class="built_in">hash</span>-object -w test.txt <span class="comment"># 写入数据</span></span><br><span class="line">git cat-file -p &lt;checksum&gt; <span class="comment"># 读取数据</span></span><br><span class="line">find .git/objects -<span class="built_in">type</span> f <span class="comment"># 查看 .git/objects 目录下文件列表</span></span><br><span class="line">git cat-file -p &lt;checksum&gt; &gt; &lt;filepath&gt; <span class="comment"># 将 .git/objects 目录下存储的某条数据导出到 filepath 文件中</span></span><br><span class="line">git cat-file -t &lt;checksum&gt; <span class="comment"># 查看 git 存储数据的对象类型，如返回 blob 或 tree</span></span><br><span class="line"></span><br><span class="line">git cat-file -p master^&#123;tree&#125; <span class="comment"># 查看树对象 master^&#123;tree&#125; 下的内容，可能包含 blob 或 tree 对象。master^&#123;tree&#125; 表示 master 分支上最新的提交所指向的树对象</span></span><br><span class="line">git cat-file -p &lt;checksum&gt; <span class="comment"># 查看树对象、提交对象下的内容，将获取最新版本的文件内容</span></span><br><span class="line">git update-index --add --cacheinfo 100644 \</span><br><span class="line">  83baae61804e65cc73a7201a7252750c76066a30 test.txt <span class="comment"># 通过 update-index 命令为 test.txt 文件创建暂存区，选项 --add 将文件存储到暂存区中；选项 --cacheinfo 将文件添加到 git 数据库，而非当前目录中；文件模式 100644 表示为普通文件，100755 为可执行文件，120000 为符号链接</span></span><br><span class="line">git update-index &lt;filepath&gt; <span class="comment"># 更新暂存区中文件</span></span><br><span class="line">git update-index --add &lt;filepath&gt; <span class="comment"># 添加暂存区中文件</span></span><br><span class="line">git write-tree <span class="comment"># 将暂存区内容写入树对象，返回树对象的 SHA-1 值</span></span><br><span class="line">git <span class="built_in">read</span>-tree &lt;checksum&gt; <span class="comment"># 将树对象读入暂存区</span></span><br><span class="line">git <span class="built_in">read</span>-tree --prefix=dirname &lt;checksum&gt; <span class="comment"># 将树对象读入暂存区，--prefix 选项将其作为子树存储在 dirname 目录下</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'first commit'</span> | git commit-tree &lt;checksum&gt; <span class="comment"># 以树对象 checksum 创建提交对象，返回提交对象的校验和。创建的提交对象可通过 git log 查看</span></span><br></pre></td></tr></table></figure>
<h3 id="git-引用"><a href="#git-引用" class="headerlink" title="git 引用"></a>git 引用</h3><p>git 通过 .git/refs 目录下的文件存储提交对象的引用，以分支形式分类存储，不同分支创建不同的文件，同一文件下包含该分支的提交记录历史。</p>
<p>HEAD 引用通过 .git/HEAD 文件存储，文件内容如 ref: refs/heads/master，指向其他分支引用。</p>
<p>标签对象（tag object）非常类似于一个提交对象——它包含标签创建者信息、日期、注释信息，以及一个指针。 主要的区别在于，标签对象通常指向一个提交对象，而不是一个树对象。它像是一个永不移动的分支引用——永远指向同一个提交对象，分支引用指向的提交对象可以改写。所以标签对象可用于发布。另外要注意的是，标签对象并非必须指向某个提交对象；你可以对任意类型的 Git 对象打标签。标签对象存储在 .git/refs/tags 目录中，以标签名作为文件名。</p>
<p>.git/refs/remotes 目录下保存远程引用。远程引用和分支引用的主要区别在于，远程引用是只读的。虽然可以 git checkout 到某个远程引用，但是 git 并不会将 HEAD 引用指向该远程引用。因此，永远不能通过 commit 命令来更新远程引用，而只能通过 push 命令更新。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git update-ref refs/heads/master 1a410efbd13591db07496601ebc7a059dd55cfe9 <span class="comment"># 在 master 分支中添加提交对象的校验和，比直接编辑文件更安全</span></span><br><span class="line">git symbolic-ref HEAD <span class="comment"># 查看 .git/HEAD 文件内容</span></span><br><span class="line">git symbolic-ref HEAD refs/heads/<span class="built_in">test</span> <span class="comment"># 修改 HEAD 引用的指向</span></span><br><span class="line">git update-ref refs/tags/v1.0 cac0cab538b970a37ea1e769cbbde608743bc96d <span class="comment"># 创建轻量标签</span></span><br><span class="line">git tag -a v1.1 1a410efbd13591db07496601ebc7a059dd55cfe9 -m <span class="string">'test tag'</span> <span class="comment"># -a 选项用于创建附注标签</span></span><br></pre></td></tr></table></figure>
<h3 id="引用规格"><a href="#引用规格" class="headerlink" title="引用规格"></a>引用规格</h3><p>引用规格/refspec 用于设定 fetch 命令的请求地址和拉取的分支，以小节形式存储在 .git/config 文件中。引用规格的格式由一个可选的 + 号和紧随其后的 <src>:<dst> 组成，其中 <src> 是一个模式（pattern），代表远程版本库中的引用；<dst> 是那些远程引用在本地所对应的位置。 + 号告诉 Git 即使在不能快进的情况下也要（强制）更新引用。</dst></src></dst></src></p>
<p>执行 git remote add origin <a href="https://github.com/schacon/simplegit-progit" target="_blank" rel="noopener">https://github.com/schacon/simplegit-progit</a> 命令，.git/config 文件将添加引用规格如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[remote <span class="string">"origin"</span>]</span><br><span class="line">	url = https://github.com/schacon/simplegit-progit</span><br><span class="line">	fetch = +refs/heads/*:refs/remotes/origin/* <span class="comment"># 当修改为 fetch = +refs/heads/master:refs/remotes/origin/master 时，将只抓取远程 master 分支（fetch 可以设置多个，以拉取不同分支的引用）；或者单次执行 git fetch origin master:refs/remotes/origin/mymaster 命令，将远程 master 分支拉到本地的 origin/mymaster 分支</span></span><br><span class="line">  <span class="comment"># push = refs/heads/master:refs/heads/qa/master 用于设置推送，或执行 git push origin master:refs/heads/qa/master 命令</span></span><br></pre></td></tr></table></figure></p>
<p>执行 git push origin :topic 命令可删除远程 topic 分支，因为 src 为空值，即代表删除。</p>
<h3 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h3><p>引用日志/reflog 记录每一次你改变 HEAD 时它的值。每一次提交或改变分支时，引用日志都会被更新。引用日志也可以通过 git update-ref 命令更新。git reflog 命令用于查看引用日志。引用日志存放在 .git/logs/ 目录中。</p>
<p>引用日志可用于找回丢失的提交，如 reset, rebase 命令导致丢失。通过 git branch <branch> <checksum> 命令创建新分支指向丢失的提交。</checksum></branch></p>
<p>当引用日志也同样丢失时，可以使用 git fsck –full 查看没有被引用的提交对象，即丢失的提交对象。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reflog <span class="comment"># 查看引用日志</span></span><br><span class="line">git <span class="built_in">log</span> -g <span class="comment"># 以标准日志格式查看引用日志</span></span><br><span class="line">git count-objects -v <span class="comment"># 查看内存占用，size-pack 指以 kb 为大小的包文件</span></span><br></pre></td></tr></table></figure>
<h3 id="疑问："><a href="#疑问：" class="headerlink" title="疑问："></a>疑问：</h3><ol>
<li>git 的远程交互机制，参考<a href="https://git-scm.com/book/zh/v2/Git-内部原理-传输协议" target="_blank" rel="noopener">传输协议</a></li>
<li>移除git 数据库中的历史文件，参考<a href="https://git-scm.com/book/zh/v2/Git-内部原理-维护与数据恢复" target="_blank" rel="noopener">维护与数据恢复</a></li>
<li>git 环境变量，参考<a href="https://git-scm.com/book/zh/v2/Git-内部原理-环境变量" target="_blank" rel="noopener">环境变量</a></li>
</ol>
<p>参考：<br><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2</a></p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>carrier</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>mocha使用指南</title>
    <url>/2018/02/13/frontend/guide/mocha%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>mocha 是一款可运行在 node 环境或浏览器上的测试框架。</p>
<p>mocha 本身没有实现断言库，可使用 chai, should.js, expect.js, better-assert, unexpected 等断言库或 node 内置的 assert 模块。断言库错误输出需有 actual, expected 属性。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="BDD"><a href="#BDD" class="headerlink" title="BDD"></a>BDD</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BDD 风格，describe/context, it/specify, before, after, beforeEach, afterEach</span></span><br><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line">describe(<span class="string">'Array'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">// 测试套件</span></span><br><span class="line">  describe(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    it(<span class="string">'should return -1 when the value is not present'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">// 测试单元</span></span><br><span class="line">      assert.equal([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].indexOf(<span class="number">4</span>), <span class="number">-1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="TDD"><a href="#TDD" class="headerlink" title="TDD"></a>TDD</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TDD 风格，suite, test, suiteSetup, suiteTeardown, setup, teardown</span></span><br><span class="line">suite(<span class="string">'Array'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setup(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  suite(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    test(<span class="string">'should return -1 when not present'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      assert.equal(<span class="number">-1</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].indexOf(<span class="number">4</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="EXPORTS"><a href="#EXPORTS" class="headerlink" title="EXPORTS"></a>EXPORTS</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// EXPORTS 风格，before, after, beforeEach, afterEach</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  before: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">'Array'</span>: &#123;<span class="comment">// 对象作为测试套件</span></span><br><span class="line">    <span class="string">'#indexOf()'</span>: &#123;</span><br><span class="line">      <span class="string">'should return -1 when not present'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">// 函数为测试单元</span></span><br><span class="line">        [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].indexOf(<span class="number">4</span>).should.equal(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="QUNIT"><a href="#QUNIT" class="headerlink" title="QUNIT"></a>QUNIT</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// QUNIT 风格，suite, test, before, after, beforeEach, afterEach</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ok</span>(<span class="params">expr, msg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!expr) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">suite(<span class="string">'Array'</span>);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'#length'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">  ok(arr.length == <span class="number">3</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">  ok(arr.indexOf(<span class="number">1</span>) == <span class="number">0</span>);</span><br><span class="line">  ok(arr.indexOf(<span class="number">2</span>) == <span class="number">1</span>);</span><br><span class="line">  ok(arr.indexOf(<span class="number">3</span>) == <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">suite(<span class="string">'String'</span>);</span><br><span class="line"></span><br><span class="line">test(<span class="string">'#length'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ok(<span class="string">'foo'</span>.length == <span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="REQUIRE"><a href="#REQUIRE" class="headerlink" title="REQUIRE"></a>REQUIRE</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// REQUIRE 风格，使用 require 注入</span></span><br><span class="line"><span class="keyword">var</span> testCase = <span class="built_in">require</span>(<span class="string">'mocha'</span>).describe;</span><br><span class="line"><span class="keyword">var</span> pre = <span class="built_in">require</span>(<span class="string">'mocha'</span>).before;</span><br><span class="line"><span class="keyword">var</span> assertions = <span class="built_in">require</span>(<span class="string">'mocha'</span>).it;</span><br><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'chai'</span>).assert;</span><br><span class="line"></span><br><span class="line">testCase(<span class="string">'Array'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  pre(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  testCase(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    assertions(<span class="string">'should return -1 when not present'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      assert.equal([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].indexOf(<span class="number">4</span>), <span class="number">-1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>mocha 后跟测试文件名（可使用通配符），或将测试脚本放在 test 目录里，执行 mocha 命令测试 test 目录下的测试脚本（默认只执行第一层）。浏览器端使用 mocha.setup 方法配置 mocha。</p>
<p>选项（可以将命令行参数放在 mocha.opts 文件里，也可以 mocha.opts 文件里指定测试目录）：</p>
<ul>
<li>-u, –ui <name> 测试脚本编码风格，可选值 bdd|tdd|qunit|exports。</name></li>
<li>–recursive 使用 mocha 测试 test 目录下所有文件。</li>
<li>-g, –grep <pattern> 只测试匹配正则的 it 。</pattern></li>
<li>-f, –fgrep <string> 只测试包含字符串的 it。</string></li>
<li>-i, –invert 反转 grep, fgrep 选项。</li>
<li>–bail, -b 有一个测试脚本未通过时，就停止测试。</li>
<li>-d, –debug 启动 debug 模式。</li>
<li>–debug-brk enable node’s debugger breaking on the first line???</li>
<li>-gc, –expose-gc expose gc extension???</li>
<li>–harmony&lt;_classes,_generators,…&gt; all node –harmony* flags are available???</li>
<li>–es_staging 启用所有 staged 特征???</li>
<li>-S, –sort 排序测试文件。</li>
<li>–compilers <ext>:<module>,… 指定测编译器，如 mocha –compilers js:babel-core/register。若需使用 Map、Set 等，须在测试脚本前 import ‘babel-polyfill’。</module></ext></li>
<li>-r, –require <name> 加载特定的模块，如 ‘babel-polyfill’。</name></li>
<li>–file <file> 测试时加载指定文件。</file></li>
<li>–globals <names> 以 ‘,’ 分割形式注入全局变量。</names></li>
<li>-A, –async-only 测试脚本只能使用异步编程，回调或 promise 形式。</li>
<li>-w, –watch 监视文件变动，自动运行测试脚本。</li>
<li>-t, –timeout <ms> 指定测试时的超时时间，默认为 2000 ms。</ms></li>
<li>-s, –slow <ms> 高亮显示超过指定时间的测试报告，默认为 75 ms。</ms></li>
<li>–check-leaks 检测全局变量泄漏。</li>
<li>–growl, -G 将报告显示在桌面。</li>
<li>-R, –reporter <name> 指定报告打印形式，默认是 spec 格式，可选值 tap, dot, nyan, mochawesome 网页报告（须先安装 npm install –dev mochawesome）。</name></li>
<li>-O, –reporter-options &lt;k=v,k2=v2,…&gt;，打印选项。</li>
<li>–reporters 显示所有报告格式。</li>
<li>-c, –colors 显示颜色。</li>
<li>-C, –no-colors 不显示颜色。</li>
<li>–full-trace 显示完整的堆栈信息。</li>
<li>生成规格文件，如 mocha –recursive -R markdown &gt; spec.md 或 mocha –recursive -R doc &gt; spec.html。<br>…</li>
</ul>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><ul>
<li>before，在测试用例之前执行</li>
<li>after，在测试用例之后执行</li>
<li>beforeEach，在每个单元测试前执行</li>
<li>afterEach，在每个单元测试后执行</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 钩子允许在 describe 外围，回调将在测试脚本之前或之后执行</span></span><br><span class="line">beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'before every test in every file'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'hooks'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 钩子函数以匿名函数使用，允许携带描述；命名函数不能</span></span><br><span class="line">  before(<span class="string">'some description'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// runs before all tests in this block</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 钩子支持同步或异步编程</span></span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>&#123;</span><br><span class="line">    db.clear(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> done(err);</span><br><span class="line">      db.save([tobi, loki, jane], done);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// test cases</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="异步测试"><a href="#异步测试" class="headerlink" title="异步测试"></a>异步测试</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 回调函数形式</span></span><br><span class="line">describe(<span class="string">'User'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  describe(<span class="string">'#save()'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    it(<span class="string">'should save without error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">done</span>) </span>&#123;<span class="comment">// done 只能执行一次，两次及以上会报错</span></span><br><span class="line">      <span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="string">'Luna'</span>);</span><br><span class="line">      user.save(done);<span class="comment">// done 能自动识别并处理 err 错误</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise 形式</span></span><br><span class="line">describe(<span class="string">'#find()'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'respond with matching records'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// db.find(&#123; type: 'User' &#125;) 返回 promise</span></span><br><span class="line">    <span class="keyword">return</span> db.find(&#123; <span class="attr">type</span>: <span class="string">'User'</span> &#125;).should.eventually.have.length(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// async 函数形式</span></span><br><span class="line">describe(<span class="string">'#find()'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'responds with matching records'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">await</span> db.find(&#123; <span class="attr">type</span>: <span class="string">'User'</span> &#125;);</span><br><span class="line">    users.should.have.length(<span class="number">3</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="延迟执行"><a href="#延迟执行" class="headerlink" title="延迟执行"></a>延迟执行</h3><p>命令行选项 –delay 用于延迟，相应测试脚本使用 setTimeout 包裹。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do some setup</span></span><br><span class="line"></span><br><span class="line">  describe(<span class="string">'my suite'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  run();</span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure>
<h3 id="搁置测试"><a href="#搁置测试" class="headerlink" title="搁置测试"></a>搁置测试</h3><p>使测试处于 pending 状态，仍然会打印报告。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">describe(<span class="string">'Array'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  describe(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// pending test below</span></span><br><span class="line">    it(<span class="string">'should return -1 when the value is not present'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="限制测试"><a href="#限制测试" class="headerlink" title="限制测试"></a>限制测试</h3><ul>
<li>describe, it 调用 only 方法将只运行指定测试脚本，添加的钩子仍会执行。</li>
<li>describe, it 调用 skip 方法将避免某些脚本的执行。skip 也可以在 mocha 运行过程中调用，或在钩子中调用，两者均使用 this.skip()。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// only 方法限制只执行某些测试脚本</span></span><br><span class="line">describe(<span class="string">'Array'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  describe.only(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    it.only(<span class="string">'should return -1 unless present'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// this test will be run</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'should return the index when present'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// this test will not be run</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// skip 方法跳过执行指定测试脚本</span></span><br><span class="line">describe(<span class="string">'Array'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  describe(<span class="string">'#indexOf()'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    it.skip(<span class="string">'should return -1 unless present'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// this test will not be run</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'should return the index when present'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// this test will be run</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// mocha 运行时 skip</span></span><br><span class="line">it(<span class="string">'should only test in the correct environment'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* check test environment */</span>) &#123;</span><br><span class="line">    <span class="comment">// make assertions</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.skip();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 钩子 skip</span></span><br><span class="line">before(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* check test environment */</span>) &#123;</span><br><span class="line">    <span class="comment">// setup code</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.skip();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><ul>
<li>retries(num)，指定重复执行测试脚本 num 次，不推荐在单元测试中使用。</li>
<li>slow(time)，高亮显示超过指定时间的测试报告，默认为 75 ms。</li>
<li>timeout(time)，设定超时时间，可在 describe, it 或钩子 中调用。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// retries</span></span><br><span class="line">describe(<span class="string">'retries'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Retry all tests in this suite up to 4 times</span></span><br><span class="line">  <span class="keyword">this</span>.retries(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    browser.get(<span class="string">'http://www.yahoo.com'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should succeed on the 3rd try'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Specify this test to only retry up to 2 times</span></span><br><span class="line">    <span class="keyword">this</span>.retries(<span class="number">2</span>);</span><br><span class="line">    expect($(<span class="string">'.foo'</span>).isDisplayed()).to.eventually.be.true;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// slow</span></span><br><span class="line">describe(<span class="string">'something slow'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.slow(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should take long enough for me to go make a sandwich'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// timeout</span></span><br><span class="line">describe(<span class="string">'a suite of tests'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.timeout(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should take less than 500ms'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">    setTimeout(done, <span class="number">300</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'should take less than 500ms as well'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">    setTimeout(done, <span class="number">250</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>frontend</category>
        <category>guide</category>
      </categories>
      <tags>
        <tag>carrier</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>chai使用指南</title>
    <url>/2018/02/12/frontend/guide/chai%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>chai 是一款辅助 TDD 测试驱动开发, BDD 行为驱动开发 的断言库。</p>
<p>有关 TDD 和 BDD，可参考：<br><a href="https://www.cnblogs.com/Leo_wl/p/4780678.html" target="_blank" rel="noopener">开发人员看测试之TDD和BDD</a><br><a href="http://blog.jobbole.com/110560/" target="_blank" rel="noopener">TDD 已死？让我们再聊聊 TDD</a><br><a href="http://blog.csdn.net/dc_726/article/details/49688379" target="_blank" rel="noopener">BDD敏捷开发入门与实战</a></p>
<p>chai 的 TDD 模块只包含 assert 一种， BDD 模块包含 except, should 两种。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li>chai.config.includeStack = false，错误输出中是否包含堆栈信息</li>
<li>chai.config.showDiff = true，是否显示 diff</li>
<li>chai.config.truncateThreshold = 40，错误输出中 actual, expexted 打印字符串上限???</li>
</ul>
<h2 id="api手册"><a href="#api手册" class="headerlink" title="api手册"></a>api手册</h2><h3 id="TDD测试"><a href="#TDD测试" class="headerlink" title="TDD测试"></a>TDD测试</h3><h4 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h4><p>类似 node 的同名模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> assert = <span class="built_in">require</span>(<span class="string">'chai'</span>).assert</span><br><span class="line">  , foo = <span class="string">'bar'</span></span><br><span class="line">  , beverages = &#123; <span class="attr">tea</span>: [ <span class="string">'chai'</span>, <span class="string">'matcha'</span>, <span class="string">'oolong'</span> ] &#125;;</span><br><span class="line"></span><br><span class="line">assert.typeOf(foo, <span class="string">'string'</span>); <span class="comment">// without optional message</span></span><br><span class="line">assert.typeOf(foo, <span class="string">'string'</span>, <span class="string">'foo is a string'</span>);</span><br><span class="line">assert.equal(foo, <span class="string">'bar'</span>, <span class="string">'foo equal `bar`'</span>);</span><br><span class="line">assert.lengthOf(foo, <span class="number">3</span>, <span class="string">'foo`s value has a length of 3'</span>);</span><br><span class="line">assert.lengthOf(beverages.tea, <span class="number">3</span>, <span class="string">'beverages has 3 types of tea'</span>);</span><br></pre></td></tr></table></figure>
<h4 id="apis"><a href="#apis" class="headerlink" title="apis"></a>apis</h4><ul>
<li>assert(expression, message)，参数 expression 为待测试的语句</li>
<li>.fail(actual, expected, [message], [operator])，operator 为操作（默认为 !=）</li>
<li>.ifError(object)，校验真值时抛出错误</li>
<li>.isOk/isNotOk/isTrue/isNotTrue/isFalse/isNotFalse/isNull/isNotNull/isNaN/isNotNaN/<br>isUndefined/isDefined/isFunction/isNotFunction/isObject/isNotObject/isArray/isNotArray/<br>isString/isNotString/isNumber/isNotNumber/isFinite/isBoolean/isNotBoolean(object, [message])</li>
<li>.exists/notExists(value, [message])，校验 value 不是 null 或 undefined</li>
<li>.typeOf/notTypeOf(value, type, [message]) 类型校验</li>
<li>.instanceOf/notInstanceOf(object, constructor, [message])</li>
<li>.match/notMatch(value, regexp, [message])</li>
<li>.equal/notEqual/strictEqual/notStrictEqual/deepEqual/notDeepEqual(actual, expected, [message])，’==’, ‘===’ 或 深度相等</li>
<li>.isAbove/isAtLeast/isBelow/isAtMost(valueToCheck, valueToBeAbove, [message])，以操作符 ‘&gt;’, ‘&gt;=’, ‘&lt;’, ‘&lt;=’ 校验</li>
<li>.operator(val1, operator, val2, [message])，’&gt;’, ‘&lt;’ 操作符校验</li>
<li>.closeTo(actual, expected, delta, [message])，actual 在 expected - delta, expected + delta 之间</li>
<li>.approximately(actual, expected, delta, [message])，同上</li>
<li>.changes/doesNotChange/increases/doesNotIncrease/decreases/<br>doesNotDecrease(function, object, property, [message])，校验函数执行时是否改变对象属性</li>
<li>.changesBy/changesButNotBy/ncreasesBy/increasesButNotBy/decreasesBy/<br>doesNotDecreaseBy/decreasesButNotBy(function, object, property, delta, [message])，校验属性数值改变 + delta</li>
<li>.lengthOf(object, length, [message])，校验字符串或数组的长度</li>
<li>.isExtensible/isNotExtensible/isSealed/isNotSealed/isFrozen/isNotFrozen(object)</li>
<li>.isEmpty/isNotEmpty(target)，校验对象、数组、字符串、Map、Set非空</li>
<li>.oneOf(inList, list, [message])</li>
<li>.include/notInclude/deepInclude/notDeepInclude/nestedInclude/notNestedInclude/<br>deepNestedInclude/notDeepNestedInclude/ownInclude/notOwnInclude/<br>deepOwnInclude/notDeepOwnInclude(haystack, needle, [message])，校验是否包含数组项，子字符串，或者对象属性的截取。deep 为深度匹配，nest 以分隔符 . 或者 [] 校验嵌套属性，own 校验是否自有属性</li>
<li>sameMembers/notSameMembers/sameDeepMembers/notSameDeepMembers/<br>sameOrderedMembers/notSameOrderedMembers/<br>sameDeepOrderedMembers/notSameDeepOrderedMembers(set1, set2, [message])，校验 set 是否有相同的成员。orderd 顺序相同</li>
<li>.includeMembers/notIncludeMembers/includeDeepMembers/notIncludeDeepMembers/<br>includeOrderedMembers/notIncludeOrderedMembers/<br>includeDeepOrderedMembers/notIncludeDeepOrderedMembers(superset, subset, [message])</li>
<li>.property/notProperty/nestedProperty/notNestedProperty(object, property, [message])</li>
<li>.propertyVal/notPropertyVal/deepPropertyVal/notDeepPropertyVal/<br>notNestedProperty/notNestedPropertyVal/<br>deepNestedPropertyVal/notDeepNestedPropertyVal(object, property, value, [message])</li>
<li>.hasAnyKeys/hasAllKeys/containsAllKeys/doesNotHaveAnyKeys/<br>doesNotHaveAllKeys/hasAnyDeepKeys/hasAllDeepKeys/<br>containsAllDeepKeys/doesNotHaveAnyDeepKeys/doesNotHaveAllDeepKeys(object, [keys], [message])</li>
<li>.throws/doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])，校验函数 fn 将抛出指定类型及文案的错误</li>
</ul>
<h3 id="TDD测试-except-should"><a href="#TDD测试-except-should" class="headerlink" title="TDD测试 - except, should"></a>TDD测试 - except, should</h3><h4 id="except"><a href="#except" class="headerlink" title="except"></a>except</h4><p>提供链式调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> expect = <span class="built_in">require</span>(<span class="string">'chai'</span>).expect</span><br><span class="line">  , foo = <span class="string">'bar'</span></span><br><span class="line">  , beverages = &#123; <span class="attr">tea</span>: [ <span class="string">'chai'</span>, <span class="string">'matcha'</span>, <span class="string">'oolong'</span> ] &#125;;</span><br><span class="line"></span><br><span class="line">expect(foo).to.be.a(<span class="string">'string'</span>);</span><br><span class="line">expect(foo).to.equal(<span class="string">'bar'</span>);</span><br><span class="line">expect(foo).to.have.lengthOf(<span class="number">3</span>);</span><br><span class="line">expect(beverages).to.have.property(<span class="string">'tea'</span>).with.lengthOf(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<h4 id="should"><a href="#should" class="headerlink" title="should"></a>should</h4><p>增强了 Object.property 功能，因此需先显示调用 chai.should 函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> should = <span class="built_in">require</span>(<span class="string">'chai'</span>).should() <span class="comment">//actually call the function</span></span><br><span class="line">  , foo = <span class="string">'bar'</span></span><br><span class="line">  , beverages = &#123; <span class="attr">tea</span>: [ <span class="string">'chai'</span>, <span class="string">'matcha'</span>, <span class="string">'oolong'</span> ] &#125;;</span><br><span class="line"></span><br><span class="line">foo.should.be.a(<span class="string">'string'</span>);</span><br><span class="line">foo.should.equal(<span class="string">'bar'</span>);</span><br><span class="line">foo.should.have.lengthOf(<span class="number">3</span>);</span><br><span class="line">beverages.should.have.property(<span class="string">'tea'</span>).with.lengthOf(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<h4 id="语言链修饰符"><a href="#语言链修饰符" class="headerlink" title="语言链修饰符"></a>语言链修饰符</h4><p>语言链修饰符用于增强代码的可读性，包含 to, be, been, isthat, and, has, have, with, at, of, same</p>
<h4 id="apis-1"><a href="#apis-1" class="headerlink" title="apis"></a>apis</h4><ul>
<li>not 将断言置否，即否值满足断言，如 expect(function () {}).to.not.throw();</li>
<li>deep 深比较，如 expect({a: 1}).to.deep.equal({a: 1});</li>
<li>nested 嵌套属性，以 . 或 [] 分割，如 expect({a: {b: [‘x’, ‘y’]}}).to.have.nested.property(‘a.b[1]’);</li>
<li>own 如 expect({a: 1}).to.have.own.property(‘a’);</li>
<li>ordered 顺序比较，如 expect([1, 2]).to.have.ordered.members([1, 2]).but.not.have.ordered.members([2, 1]);</li>
<li>any/all 如 expect({a: 1, b: 2}).to.not.have.any.keys(‘c’, ‘d’);</li>
<li>.a/an(type[, msg]) 如 expect({a: 1}).to.be.an(‘object’);</li>
<li>.include(val[, msg]) 如 expect(‘foobar’).to.include(‘foo’);</li>
<li>.ok/true/false/null/undefined/NaN/exist/empty/arguments/finite 如 expect(arguments).to.be.arguments;</li>
<li>.eql(obj[, msg]) 如 expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});</li>
<li>.above/least/below/most(n[, msg]) 如 expect(1).to.be.at.least(2);</li>
<li>.within(start, finish[, msg]) 如 expect(2).to.be.within(1, 3);</li>
<li>.instanceof(constructor[, msg]) 如 expect({a: 1}).to.not.be.an.instanceof(Array);</li>
<li>.property(name[, val[, msg]]) 如 expect({x: {a: 1}}).to.have.deep.property(‘x’, {a: 1});</li>
<li>.ownPropertyDescriptor(name[, descriptor[, msg]]) 如 expect({a: 1}).to.have.ownPropertyDescriptor(‘a’);</li>
<li>.lengthOf(n[, msg]) 如 expect([1, 2, 3]).to.have.lengthOf(3);</li>
<li>.match(re[, msg]) 如 expect(‘foobar’).to.match(/^foo/);</li>
<li>.string(str[, msg]) 包含子字符串，如 expect(‘foobar’).to.not.have.string(‘taco’);</li>
<li>.keys(key1[, key2[, …]]) 如 expect({a: 1, b: 2}).to.have.all.keys(‘a’, ‘b’);</li>
<li>.throw([errorLike], [errMsgMatcher], [msg]) 校验函数必须抛出错误，如 expect(badFn).to.throw();</li>
<li>.respondTo(method[, msg]) 校验对象是否有某方法，可以是继承的，如 expect(new Cat()).to.respondTo(‘meow’);</li>
<li>.itself 自有属性，如 expect(Cat).itself.to.respondTo(‘hiss’).but.not.respondTo(‘meow’);</li>
<li>.satisfy(matcher[, msg]) 校验是否匹配 matcher，如 expect(1).to.satisfy(function(num) { return num &gt; 0; });</li>
<li>.closeTo(expected, delta[, msg]) 校验值在 expected - delta ~ expected + delta 范围内，如 expect(1.5).to.be.closeTo(1, 0.5);</li>
<li>.members(set[, msg]) 如 expect([1, 2, 3]).to.have.members([2, 1, 3]);</li>
<li>.oneOf(list[, msg]) 如 expect(1).to.be.oneOf([1, 2, 3]);</li>
<li>.change(subject[, prop[, msg]]) 执行函数后，引起对象或其属性改变，如 expect(addDot).to.change(myObj, ‘dots’);</li>
<li>.increase(subject[, prop[, msg]]) 值增加</li>
<li>.decrease(subject[, prop[, msg]]) 值减少</li>
<li>.by(delta[, msg]) 如 expect(addTwo).to.increase(myObj, ‘val’).by(2);</li>
<li>.extensible/sealed/frozen 对象可扩展性</li>
<li>.fail(actual, expected, [message], [operator])，operator 为操作（默认为 !=）</li>
</ul>
]]></content>
      <categories>
        <category>frontend</category>
        <category>guide</category>
      </categories>
      <tags>
        <tag>carrier</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>Enzyme使用指南</title>
    <url>/2018/02/11/frontend/guide/Enzyme%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Enzyme 是一款 react 组件测试工具。</p>
<p>Enzyme 基于 <a href="https://github.com/cheeriojs/cheerio" target="_blank" rel="noopener">cheerio</a> 实现虚拟 dom 的查找和遍历；而 cheerio 号称为服务器端的 jquery 实现。</p>
<p>Enzyme 本身不实现测试和断言库，你可以选择使用 Mocha/chai, Jasmine, Jest 等测试或断言库。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol>
<li>安装 npm i –save-dev enzyme。</li>
<li>针对项目中使用的 react 版本，安装 enzyme-adapter-react-16, enzyme-adapter-react-15（15.5.0 版本起）, enzyme-adapter-react-15.4（15.0.0 ~ 15.4.x）, enzyme-adapter-react-14, enzyme-adapter-react-13 适配器。</li>
<li><p>配置 enzyme 以使用适配器。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Enzyme <span class="keyword">from</span> <span class="string">'enzyme'</span>;</span><br><span class="line"><span class="keyword">import</span> Adapter <span class="keyword">from</span> <span class="string">'enzyme-adapter-react-16'</span>;</span><br><span class="line"></span><br><span class="line">Enzyme.configure(&#123; <span class="attr">adapter</span>: <span class="keyword">new</span> Adapter() &#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写测试用例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; expect &#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; shallow &#125; <span class="keyword">from</span> <span class="string">'enzyme'</span>;</span><br><span class="line"><span class="keyword">import</span> sinon <span class="keyword">from</span> <span class="string">'sinon'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MyComponent <span class="keyword">from</span> <span class="string">'./MyComponent'</span>;</span><br><span class="line"><span class="keyword">import</span> Foo <span class="keyword">from</span> <span class="string">'./Foo'</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'&lt;MyComponent /&gt;'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'renders three &lt;Foo /&gt; components'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> wrapper = shallow(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span>);</span></span><br><span class="line"><span class="xml">    expect(wrapper.find(Foo)).to.have.length(3);</span></span><br><span class="line"><span class="xml">  &#125;);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  it('renders an `.icon-star`', () =&gt; &#123;</span></span><br><span class="line"><span class="xml">    const wrapper = shallow(<span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span>);</span></span><br><span class="line"><span class="xml">    expect(wrapper.find('.icon-star')).to.have.length(1);</span></span><br><span class="line"><span class="xml">  &#125;);</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  it('renders children when passed in', () =&gt; &#123;</span></span><br><span class="line"><span class="xml">    const wrapper = shallow((</span></span><br><span class="line">      &lt;MyComponent&gt;</span><br><span class="line">        &lt;div className="unique" /&gt;</span><br><span class="line">      &lt;/MyComponent&gt;</span><br><span class="line">    ));</span><br><span class="line">    expect(wrapper.contains(&lt;div className="unique" /&gt;)).to.equal(true);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it('simulates click events', () =&gt; &#123;</span><br><span class="line">    const onButtonClick = sinon.spy();</span><br><span class="line">    const wrapper = shallow(&lt;Foo onButtonClick=&#123;onButtonClick&#125; /&gt;);</span><br><span class="line">    wrapper.find('button').simulate('click');</span><br><span class="line">    expect(onButtonClick).to.have.property('callCount', 1);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="api-手册"><a href="#api-手册" class="headerlink" title="api 手册"></a>api 手册</h2><h3 id="渲染模式"><a href="#渲染模式" class="headerlink" title="渲染模式"></a>渲染模式</h3><ol>
<li>浅渲染：shallow(node[, options]) =&gt; ShallowWrapper。参数 node 为 ReactElement，options.context 传入组件的context，options.disableLifecycleMethods 生命周期方法是否有效。</li>
<li>完整渲染：mount(node[, options]) =&gt; ReactWrapper。options.context 传入组件的context，options.attachTo 生命周期方法是否有效。需要完整的 dom api，所以需要安装 <a href="https://github.com/jsdom/jsdom" target="_blank" rel="noopener">jsdom</a> 库。</li>
<li>静态渲染：render(node[, options]) =&gt; CheerioWrapper，渲染为 html，通过 cheerio 解析 html。</li>
</ol>
<h3 id="wrapper-api"><a href="#wrapper-api" class="headerlink" title="wrapper api"></a>wrapper api</h3><ol>
<li>.find(selector) =&gt; Wrapper</li>
<li>.findWhere(predicate) =&gt; Wrapper</li>
<li>.filter(selector) =&gt; Wrapper</li>
<li>.filterWhere(predicate) =&gt; Wrapper</li>
<li>.hostNodes() =&gt; Wrapper，事先存在于文档中 host 节点</li>
<li>.contains(nodeOrNodes) =&gt; Boolean</li>
<li>.containsMatchingElement(node) =&gt; Boolean</li>
<li>.containsAllMatchingElements(nodes) =&gt; Boolean</li>
<li>.containsAnyMatchingElements(nodes) =&gt; Boolean</li>
<li>.equals(node) =&gt; Boolean</li>
<li>.matchesElement(node) =&gt; Boolean</li>
<li>.hasClass(className) =&gt; Boolean</li>
<li>.is(selector) =&gt; Boolean</li>
<li>.exists() =&gt; Boolean</li>
<li>.isEmpty() =&gt; Boolean</li>
<li>.isEmptyRender() =&gt; Boolean</li>
<li>.not(selector) =&gt; Wrapper</li>
<li>.children() =&gt; Wrapper</li>
<li>.childAt(index) =&gt; Wrapper</li>
<li>.parents() =&gt; Wrapper</li>
<li>.parent() =&gt; Wrapper</li>
<li>.closest(selector) =&gt; Wrapper</li>
<li>.shallow([options]) =&gt; Wrapper，ShallowWrapper 独有</li>
<li>.render() =&gt; CheerioWrapper</li>
<li>.unmount() =&gt; Wrapper。ReactWrapper 独有 .mount() =&gt; Wrapper 方法</li>
<li>.text() =&gt; String</li>
<li>.html() =&gt; String</li>
<li>.get(index) =&gt; ReactElement</li>
<li>.getElement() =&gt; ReactElement。ReactWrapper 中为 .getNode() =&gt; ReactElement 方法</li>
<li>.getElements() =&gt; Array<reactelement>。ReactWrapper 中为 .getNodes() =&gt; Array<reactelement> 方法。ReactWrapper 独有 .getDOMNode() =&gt; DOMComponent 方法。</reactelement></reactelement></li>
<li>.at(index) =&gt; Wrapper</li>
<li>.first() =&gt; Wrapper</li>
<li>.last() =&gt; Wrapper</li>
<li>.state([key]) =&gt; Any</li>
<li>.context([key]) =&gt; Any</li>
<li>.props() =&gt; Object</li>
<li>.prop(key) =&gt; Any</li>
<li>.key() =&gt; String</li>
<li>.simulate(event[, data]) =&gt; Wrapper，模拟点击事件等</li>
<li>.setState(nextState) =&gt; Wrapper</li>
<li>.setProps(nextProps) =&gt; Wrapper</li>
<li>.setContext(context) =&gt; Wrapper</li>
<li>.instance() =&gt; ReactComponent</li>
<li>.update() =&gt; Wrapper，调用 forceUpdate 方法强制更新组件实例。调用实例方法后，需要调用 .update 强制刷新 props。</li>
<li>.debug() =&gt; String，.children 返回已渲染的节点，.children().debug() 返回渲染实际配置格式</li>
<li>.type() =&gt; String|Function|null</li>
<li>.name() =&gt; String</li>
<li>.forEach(fn) =&gt; Wrapper</li>
<li>.map(fn) =&gt; Array</li>
<li>.reduce(fn[, initialValue]) =&gt; Any</li>
<li>.reduceRight(fn[, initialValue]) =&gt; Any</li>
<li>.slice([begin[, end]]) =&gt; Wrapper</li>
<li>.tap(intercepter) =&gt; Self</li>
<li>.some(selector) =&gt; Boolean</li>
<li>.someWhere(predicate) =&gt; Boolean</li>
<li>.every(selector) =&gt; Boolean</li>
<li>.everyWhere(predicate) =&gt; Boolean</li>
<li>.dive([options]) =&gt; Wrapper，ShallowWrapper 独有</li>
<li>.ref(refName) =&gt; Wrapper，ReactWrapper 独有</li>
<li>.detach() =&gt; void，ReactWrapper 独有</li>
</ol>
]]></content>
      <categories>
        <category>frontend</category>
        <category>guide</category>
      </categories>
      <tags>
        <tag>carrier</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>storybook使用指南</title>
    <url>/2018/02/10/frontend/guide/storybook%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>storybook 在应用之外，为 UI 组件提供了独立的开发、调试环境。react-transition-group 类库的测试工作即通过 storybook 实现。</p>
<p>storybook 支持调试 react, vue, angular, react-native 组件。<a href="https://storybook.js.org/" target="_blank" rel="noopener">storybook官网</a></p>
<h2 id="操作指南"><a href="#操作指南" class="headerlink" title="操作指南"></a>操作指南</h2><ol>
<li>全局安装 @storybook/cli</li>
<li>项目目录安装依赖：react 项目为 @storybook/react，vue 项目为 @storybook/vue，angular 项目为 @storybook/angular。同时需要安装 babel-core。</li>
<li><p>package.json 添加</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">// -h 选项 指定以 127.0.0.1 作为主机</span><br><span class="line">// -p 选项 指定以 9001 作为端口号</span><br><span class="line">// -s 选项 指定 public 作为为静态文件目录</span><br><span class="line">// -c 选项 指定以 .storybook 作为配置目录</span><br><span class="line">// -o 选项 指定以 .out 作为打包文件目录</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"storybook"</span>: <span class="string">"start-storybook -h 127.0.0.1 -p 9001 -s ./public -c .storybook"</span>,</span><br><span class="line">    <span class="attr">"build:storybook"</span>: <span class="string">"build-storybook -s ./public -c .storybook -o .out"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建配置文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .storybook/config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; configure &#125; <span class="keyword">from</span> <span class="string">'@storybook/react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadStories</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'../stories/index.js'</span>);</span><br><span class="line">  <span class="comment">// You can require as many stories as you need.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">configure(loadStories, <span class="built_in">module</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 story。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// stories/index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; storiesOf &#125; <span class="keyword">from</span> <span class="string">'@storybook/react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; action &#125; <span class="keyword">from</span> <span class="string">'@storybook/addon-actions'</span>;</span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">'../components/Button'</span>;<span class="comment">// 来自于工程目录</span></span><br><span class="line"></span><br><span class="line">storiesOf(<span class="string">'Button'</span>, <span class="built_in">module</span>)</span><br><span class="line">  .add(<span class="string">'with text'</span>, () =&gt; (</span><br><span class="line">    &lt;Button onClick=&#123;action(<span class="string">'clicked'</span>)&#125;&gt;Hello Button&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">  ))</span></span><br><span class="line"><span class="regexp">  .add('with some emoji', () =&gt; (</span></span><br><span class="line"><span class="regexp">    &lt;Button onClick=&#123;action('clicked')&#125;&gt;😀 😎 👍 💯&lt;/</span>Button&gt;</span><br><span class="line">  ));</span><br></pre></td></tr></table></figure>
</li>
<li><p>npm run storybook，将在 9001 端口启动服务，Button 按钮下有 with text, with some emoji 两个 story。</p>
</li>
<li>npm run build:storybook，打包输出静态文件。通过 storybook-deployer 工具可以将静态文件发布到 github 上，或者通过 build-storybook 命令将文件打包到 docs 目录中，作为 github pages 的根目录。</li>
</ol>
<h3 id="贴示"><a href="#贴示" class="headerlink" title="贴示"></a>贴示</h3><ol>
<li><p>storybook 内部集成 webpack，通过 babel 编译 js，.babelrc 文件可替代 storybook 的默认配置；支持 css, json, 图片等静态文件的加载。<br>自定义 webpack 配置通过在 .storybook 目录中添加 webpack.config.js 实现，如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 除了 babel-loader 外，默认配置中的其余加载器全部停用</span></span><br><span class="line"><span class="comment">// 这种配置方式不能用于配置 babel-loader（第一个加载器）, entry, output</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">        loaders: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>, <span class="string">"sass-loader"</span>],</span><br><span class="line">        include: path.resolve(__dirname, <span class="string">'../'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="comment">// 这种配置方式不能用于替换 babel-loader（第一个加载器）, entry, output，所有已存在的插件</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">storybookBaseConfig, configType, defaultConfig</span>) =&gt;</span> &#123;</span><br><span class="line">  storybookBaseConfig.module.rules.push(&#123;</span><br><span class="line">    test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">    loaders: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>, <span class="string">"sass-loader"</span>],</span><br><span class="line">    include: path.resolve(__dirname, <span class="string">'../'</span>)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> storybookBaseConfig;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>html，head 头部添加标签。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// .storybook/preview-head.html 配置文件将如下标签注入到渲染导入组件的 iframe 中，不影响 storybook 主界面</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://use.typekit.net/xxxyyy.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">try</span>&#123; Typekit.load(); &#125; <span class="keyword">catch</span>(e)&#123; &#125;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// .storybook/preview-head.html 配置文件，将影响 storybook 主界面</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过访问 <a href="http://localhost:9009/iframe.html?selectedKind=Button&amp;selectedStory=with+text&amp;dataId=0" target="_blank" rel="noopener">http://localhost:9009/iframe.html?selectedKind=Button&amp;selectedStory=with+text&amp;dataId=0</a> 可以访问 Button 下的 with text 这个 story，浏览器显示将不带左边栏。</p>
</li>
</ol>
<h2 id="辅助测试"><a href="#辅助测试" class="headerlink" title="辅助测试"></a>辅助测试</h2><h3 id="Structural-Testing"><a href="#Structural-Testing" class="headerlink" title="Structural Testing"></a>Structural Testing</h3><p>Structural Testing 结构测试的目的是判断页面元素是否异常，缺失或增加等。</p>
<p>在 storybook 中，借助 <a href="https://facebook.github.io/jest/blog/2016/07/27/jest-14.html" target="_blank" rel="noopener">Jest’s snapshot testing</a> 实现结构测试。针对 react，Jest 将为虚拟 DOM 拍摄快照，将其转化为 json 数据，在下一次运行时比对两张快照是否有偏差。</p>
<p>具体步骤为：</p>
<ol>
<li>安装 @storybook/addon-storyshots 插件。</li>
<li><p>编写 storyshots.test.js 文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> initStoryshots <span class="keyword">from</span> <span class="string">'@storybook/addon-storyshots'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getStorybook() 函数获取所有 story</span></span><br><span class="line">initStoryshots(&#123; <span class="comment">/* configuration options */</span> &#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行 storyshots.test.js 脚本，可用于测试组件逻辑是否崩盘。</p>
</li>
</ol>
<p>参考文档：<a href="http://onetwo.ren/ReactStorybook%E7%9A%84%E5%90%84%E7%A7%8D%E6%95%85%E4%BA%8B/" target="_blank" rel="noopener">ReactStorybook 的各种故事</a></p>
<h3 id="interaction-testing"><a href="#interaction-testing" class="headerlink" title="interaction testing"></a>interaction testing</h3><p>关于 interaction testing 交互测试，可以通过模拟用户输入，在 <a href="https://github.com/airbnb/enzyme" target="_blank" rel="noopener">Enzyme</a> 测试框架 Jest, Mocha 实现。</p>
<p>在 storybook 中，交互测试可通过 <a href="https://github.com/mthuret/storybook-addon-specifications" target="_blank" rel="noopener">storybook-addon-specifications</a> 插件实现。</p>
<p>具体步骤为：</p>
<ol>
<li>安装 storybook-addon-specifications 插件。</li>
<li><p>编写 .storybook/addons.js 配置文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'storybook-addon-specifications/register'</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加测试文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; storiesOf &#125; <span class="keyword">from</span> <span class="string">'@kadira/storybook'</span></span><br><span class="line"><span class="keyword">import</span> &#123; specs, describe, it &#125; <span class="keyword">from</span> <span class="string">'storybook-addon-specifications'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;mount&#125; <span class="keyword">from</span> <span class="string">"enzyme"</span>;</span><br><span class="line"><span class="keyword">import</span> expect <span class="keyword">from</span> <span class="string">"expect"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stories = storiesOf(<span class="string">'Button'</span>, <span class="built_in">module</span>);</span><br><span class="line"></span><br><span class="line">stories.add(<span class="string">'Hello World'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> story =</span><br><span class="line">    &lt;button onClick=&#123;action(<span class="string">'Hello World'</span>)&#125;&gt;</span><br><span class="line">      Hello World</span><br><span class="line">    &lt;<span class="regexp">/button&gt;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ describe 首参必须与 story 名字相同</span></span><br><span class="line"><span class="regexp">  specs(() =&gt; describe('Hello World', function () &#123;</span></span><br><span class="line"><span class="regexp">    it('Should have the Hello World label', function () &#123;</span></span><br><span class="line"><span class="regexp">      let output = mount(story);</span></span><br><span class="line"><span class="regexp">      expect(output.text()).toContain('Hello World');</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &#125;));</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  return story;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><p>在 storybook 中，插件分为两类，装饰器 Decorator（通过封装 react 组件实现，如 storybook-router） 或 以面板形式注入的 Native Addon（如 addon-actions）。</p>
<ol>
<li><p>添加 .storybook/addons.js 配置文件用于向页面添加右下方插件面板。如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'@storybook/addon-actions/register'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'@storybook/addon-links/register'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'@storybook/addon-notes/register'</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写 stroy</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; storiesOf &#125; <span class="keyword">from</span> <span class="string">'@storybook/react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; action &#125; <span class="keyword">from</span> <span class="string">'@storybook/addon-actions'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; WithNotes &#125; <span class="keyword">from</span> <span class="string">'@storybook/addon-notes'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">'./Button'</span>;</span><br><span class="line"></span><br><span class="line">storiesOf(<span class="string">'Button'</span>, <span class="built_in">module</span>)</span><br><span class="line">  .add(<span class="string">'with some emoji'</span>, () =&gt; (</span><br><span class="line">    &lt;WithNotes notes=&#123;<span class="string">'Here we use some emoji as the Button text. Doesn&amp;apos;t it look nice?'</span>&#125;&gt;</span><br><span class="line">      &lt;Button onClick=&#123;action(<span class="string">'clicked'</span>)&#125;&gt;😀 😎 👍 💯&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>WithNotes&gt;</span><br><span class="line">  ));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用装饰器 1</span></span><br><span class="line"><span class="keyword">import</span> &#123; storiesOf &#125; <span class="keyword">from</span> <span class="string">'@storybook/react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; action &#125; <span class="keyword">from</span> <span class="string">'@storybook/addon-actions'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">'./button'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = &#123;</span><br><span class="line">  textAlign: <span class="string">'center'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> CenterDecorator = <span class="function">(<span class="params">storyFn</span>) =&gt;</span> (</span><br><span class="line">  &lt;div style=&#123;styles&#125;&gt;</span><br><span class="line">    &#123; storyFn() &#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">storiesOf('Button', module)</span></span><br><span class="line"><span class="regexp">  .addDecorator(CenterDecorator)</span></span><br><span class="line"><span class="regexp">  .add('with text', () =&gt; (</span></span><br><span class="line"><span class="regexp">    &lt;Button onClick=&#123;action('clicked')&#125;&gt;Hello Button&lt;/</span>Button&gt;</span><br><span class="line">  ))</span><br><span class="line">  .add(<span class="string">'with some emojies'</span>, () =&gt; (</span><br><span class="line">    &lt;Button onClick=&#123;action(<span class="string">'clicked'</span>)&#125;&gt;😀 😎 👍 💯&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">  ));</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 使用装饰器 2</span></span><br><span class="line"><span class="regexp">import &#123; storiesOf, addDecorator &#125; from '@storybook/</span>react<span class="string">';</span></span><br><span class="line"><span class="string">import &#123; action &#125; from '</span>@storybook/addon-actions<span class="string">';</span></span><br><span class="line"><span class="string">import &#123; linkTo &#125; from '</span>@storybook/addon-links<span class="string">';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import Button from '</span>./button<span class="string">';</span></span><br><span class="line"><span class="string">import Welcome from '</span>./welcome<span class="string">';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const styles = &#123;</span></span><br><span class="line"><span class="string">  textAlign: '</span>center<span class="string">',</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">const CenterDecorator = (storyFn) =&gt; (</span></span><br><span class="line"><span class="string">  &lt;div style=&#123;styles&#125;&gt;</span></span><br><span class="line"><span class="string">    &#123; storyFn() &#125;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">);</span></span><br><span class="line"><span class="string">addDecorator(CenterDecorator);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">storiesOf('</span>Welcome<span class="string">', module)</span></span><br><span class="line"><span class="string">  .add('</span>to Storybook<span class="string">', () =&gt; (</span></span><br><span class="line"><span class="string">    &lt;Welcome showApp=&#123;linkTo('</span>Button<span class="string">')&#125;/&gt;</span></span><br><span class="line"><span class="string">  ));</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">storiesOf('</span>Button<span class="string">', module)</span></span><br><span class="line"><span class="string">  .add('</span><span class="keyword">with</span> text<span class="string">', () =&gt; (</span></span><br><span class="line"><span class="string">    &lt;Button onClick=&#123;action('</span>clicked<span class="string">')&#125;&gt;Hello Button&lt;/Button&gt;</span></span><br><span class="line"><span class="string">  ))</span></span><br><span class="line"><span class="string">  .add('</span><span class="keyword">with</span> some emojies<span class="string">', () =&gt; (</span></span><br><span class="line"><span class="string">    &lt;Button onClick=&#123;action('</span>clicked<span class="string">')&#125;&gt;😀 😎 👍 💯&lt;/Button&gt;</span></span><br><span class="line"><span class="string">  ));</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="插件清单"><a href="#插件清单" class="headerlink" title="插件清单"></a>插件清单</h3><ol>
<li><a href="https://github.com/storybooks/storybook/tree/master/addons/storyshots" target="_blank" rel="noopener">Storyshots</a>: 快照测试。</li>
<li><a href="https://github.com/mthuret/storybook-addon-specifications" target="_blank" rel="noopener">Specs</a>: 交互测试。</li>
<li><a href="https://github.com/storybooks/storybook/tree/master/addons/notes" target="_blank" rel="noopener">Notes</a>: 在 story 中添加备注。</li>
<li><a href="https://github.com/storybooks/storybook/tree/master/addons/info" target="_blank" rel="noopener">Info</a>: 用于创建 css 框架手册。</li>
<li><a href="https://github.com/tuchk4/storybook-readme" target="_blank" rel="noopener">Readme</a>: 将 markdown 导入为 story。</li>
<li><a href="https://github.com/storybooks/storybook/tree/master/addons/actions" target="_blank" rel="noopener">actions</a>: 显示事件的 event 对象。</li>
<li><a href="https://github.com/truffls/storybook-addon-intl" target="_blank" rel="noopener">Intl</a>: 添加 locales 面板，用于切换语言。</li>
<li><a href="https://github.com/Sambego/storybook-state" target="_blank" rel="noopener">State</a>: 添加 state 面板，展示或更新 state，重绘视图。</li>
<li><a href="https://github.com/evgenykochetkov/react-storybook-addon-props-combinations" target="_blank" rel="noopener">Props Combinations</a>: 配置可能有的props，一次性绘出多个组件作对比。</li>
<li><a href="https://github.com/storybooks/storybook/tree/master/addons/knobs" target="_blank" rel="noopener">Knobs</a>: 页面上变更 props 重绘视图。</li>
<li><a href="https://github.com/storybooks/storybook/tree/master/addons/links" target="_blank" rel="noopener">Links</a>: 通过 linkTo 函数或 LinkTo 组件链接多个 story，支持点击跳转。</li>
<li><a href="https://github.com/gvaldambrini/storybook-router" target="_blank" rel="noopener">Story-router</a>: 装饰器，支持 storybook 使用 react-router 等路由组件。</li>
<li><a href="https://github.com/storybook-eol/addon-backgrounds" target="_blank" rel="noopener">Backgrounds</a>: 切换背景图或背景颜色。</li>
<li><a href="https://github.com/joscha/storybook-addon-i18n-tools" target="_blank" rel="noopener">i18n tools</a>: 切换文字对齐方式，左对齐或右对齐。</li>
<li><a href="https://github.com/react-theming/storybook-addon-material-ui" target="_blank" rel="noopener">Material-UI</a>: 添加并切换自定义主题。</li>
<li><a href="https://github.com/philcockfield/storybook-host" target="_blank" rel="noopener">Host</a>: 装饰器，在页面上以盒模式展示组件。</li>
<li><a href="https://github.com/Checkfront/react-storybook-addon-chapters" target="_blank" rel="noopener">Chapters</a>: 在同一个 story 中以章节形式展示多个组件。</li>
<li><a href="https://github.com/storybooks/storybook/tree/master/addons/options" target="_blank" rel="noopener">Options</a>: 调整 storybook 页面外观，切换为全屏等。</li>
<li><a href="https://github.com/storybooks/storybook-addon-console" target="_blank" rel="noopener">Console</a>: 将浏览器控制台 console 信息输出到 storybook log 面板。</li>
<li><a href="https://github.com/storybooks/addon-jsx" target="_blank" rel="noopener">JSX preview</a>: 展示及拷贝 JSX 代码。</li>
<li><a href="https://github.com/buildit/storybook-addon-versions" target="_blank" rel="noopener">Versions</a>: 添加版本号，查看各版本的变化。</li>
<li><a href="https://github.com/abhiaiyer91/apollo-storybook-decorator" target="_blank" rel="noopener">Apollo</a>: 添加 Apollo client，模拟 GraphQL 查询。</li>
<li><a href="https://github.com/tsuyoshiwada/storybook-chrome-screenshot" target="_blank" rel="noopener">Screenshot</a>: 保存网页截图。</li>
<li><a href="https://storybook.js.org/addons/addon-gallery/" target="_blank" rel="noopener">Styles</a>: storybook 预览界面添加自定义样式。</li>
<li><a href="https://github.com/hharnisc/storybook-addon-figma" target="_blank" rel="noopener">Figma</a>: 添加 Figma 设计面板。</li>
</ol>
]]></content>
      <categories>
        <category>frontend</category>
        <category>guide</category>
      </categories>
      <tags>
        <tag>carrier</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析react-transition-group源码</title>
    <url>/2018/02/07/frontend/library/%E6%B5%85%E6%9E%90react-transition-group%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<h2 id="react-transition-group-1-版本回顾"><a href="#react-transition-group-1-版本回顾" class="headerlink" title="react-transition-group 1 版本回顾"></a>react-transition-group 1 版本回顾</h2><p>react-transition-group 1 版本在子组件创建、删除过程通过添加 class 控制 css 动效。</p>
<p>介于 css transition 动效在元素添加到页面过程就会执行，因此这个过程无需调控动效的执行。而当有元素被移除时，我们需要容器组件驻留被删除的子组件，等到动效执行完成后，才实际删除该子组件。</p>
<p>针对这一问题，react-transition-group 提供了 TransitionGroup 容器组件。其 state.children 属性为实际待绘制的组件，当组件更新时，通过比对 state.children, props.children，就可以获知新增了哪些组件、移除了哪些组件（用户配置的子组件通过 key 键存储成映射结构）。当子组件被移除时，触发 performLeave 方法，以调用子组件的 componentWillLeave 方法添加样式类、执行动效；再通过 componentWillLeave 方法的回调函数，更新 TransitionGroup 容器的 state.children，触发子组件的实际移除行为。</p>
<p>当采用上述逻辑处理子组件的移除动效时，为着处理逻辑的统一，react-transition-group 针对 componentDidMount 或 componentDidUpdate 时创建的子组件也采用相同的处理逻辑。子组件的钩子函数 componentWillAppear, componentDidAppear, componentWillEnter, componentDidEnter, componentWillLeave, componentDidLeave 将分别得到执行。当独立使用  TransitionGroup 容器时，我们可以借助这些钩子函数操控节点的样式以触发 css 动效，或者组织 js 动效，或者实现懒加载等等。</p>
<p>在 TransitionGroup 容器的基础上，CSSTransitionGroupChild 组件用于装饰子组件，在 componentWillAppear 等钩子函数添加样式类以执行 css 动效，通过 setTimeout 或 transitionEnd 事件更新 TransitionGroup 容器的 state.children 属性。CSSTransitionGroup 组件用于将 props 配置上提，而不是通过 CSSTransitionGroupChild 给每个子组件外加一个壳子。</p>
<h2 id="react-transition-group-2-版本"><a href="#react-transition-group-2-版本" class="headerlink" title="react-transition-group 2 版本"></a>react-transition-group 2 版本</h2><h3 id="Transition"><a href="#Transition" class="headerlink" title="Transition"></a>Transition</h3><p>相比于 1 版本通过判断子组件的有无添加动效，react-transition-group 2 版本可通过向子组件传递状态值（props.children 以函数形式配置；若为ReactElement，则无任何作用）控制子组件的创建和删除过程，这一点和 react-motion 类库相仿。关于 react-motion，笔者将在后续文章中加以分析。</p>
<p>上述思路的简单实现是通过容器组件向子组件传递 props.status，用于判断动效是在执行中 transitionExcute，还是执行完成 transitionEnd。若执行完成，将触发移除组件的操作。为此，react-transition-group 2 提供了 Transition 容器组件，props.status 状态分别在子组件创建和移除阶段添置了两个值，合计四种状态，即 ENTERING, ENTERED, EXITING, EXITED 。ENTERING, ENTERED 状态针对新创建的子组件，EXITING, EXITED 状态针对待移除的子组件。Transition 组件内部实现的主要业务逻辑就是协调 ENTERING 到 ENTERED，EXITING 到 EXITED 状态的自动变更。对于不需要动效的场景，状态将直接置为 ENTERED, EXITED；在 Transition 组件中，作为动效开关的是 props.appear, props.enter, props.exit 属性。</p>
<p>除此之外，有必要区分组件在创建过程 onEnter 还是在移除过程 onExit，以便于控制组件的挂载状态。然而 onEnter, onExit 两个状态值不适用于动效结束时仍保留组件的场景。为此，Transition 组件使用 props.in 属性表示组件的显示状态，结合 props.unmountOnExit 属性即表示在动效执行完成后，不必移除组件。子组件不能通过获得的 status 值控制自身的挂载状态，Transition 容器通过将 status 置为 UNMOUNTED，并在其 render 方法中输出 null，以控制子组件的显隐。这样的设计也满足了对子组件挂载时机的微调。像 1 版本中那样，通常情况下，子组件往往而在。不同的是，在组件初始化时通过将 props.mountOnEnter 属性置为真值，且 props.in 为否值，子组件将不在视图显示；当更新组件时，props.in 属性首次切换为真值时，才将 status 置为 EXITED，以便在实际视图中创建子组件，从而启动动效。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props, context) &#123;</span><br><span class="line">  <span class="keyword">super</span>(props, context);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> parentGroup = context.transitionGroup;</span><br><span class="line">  <span class="comment">// In the context of a TransitionGroup all enters are really appears</span></span><br><span class="line">  <span class="keyword">let</span> appear = parentGroup &amp;&amp; !parentGroup.isMounting ?</span><br><span class="line">    props.enter :</span><br><span class="line">    props.appear;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> initialStatus;</span><br><span class="line">  <span class="keyword">this</span>.nextStatus = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (props.in) &#123;<span class="comment">// in 为真值，创建并显示组件</span></span><br><span class="line">    <span class="keyword">if</span> (appear) &#123;<span class="comment">// appear 为真值，执行动效</span></span><br><span class="line">      initialStatus = EXITED;<span class="comment">// updateStatus 方法中满足 initialStatus 非 null 校验，以执行 performEnter 方法</span></span><br><span class="line">      <span class="keyword">this</span>.nextStatus = ENTERING;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">// appear 为否值，不执行动效</span></span><br><span class="line">      initialStatus = ENTERED;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// mountOnEnter 为真值，意味着延迟挂载；unmountOnExit 为否值的情形，主要为着避过 updateStatus 中对 &#123; state: EXITED &#125; 的处理逻辑，即动效执行结束后移除组件</span></span><br><span class="line">    <span class="keyword">if</span> (props.unmountOnExit || props.mountOnEnter) &#123;</span><br><span class="line">      initialStatus = UNMOUNTED;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 悬空</span></span><br><span class="line">      initialStatus = EXITED;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.state = &#123; <span class="attr">status</span>: initialStatus &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.nextCallback = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidMount() &#123;</span><br><span class="line">  <span class="keyword">this</span>.updateStatus(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; status &#125; = <span class="keyword">this</span>.pendingState || <span class="keyword">this</span>.state;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (nextProps.in) &#123;</span><br><span class="line">    <span class="comment">// 子组件已被移除或初始化未被挂载，status 置为 EXITED，便于添加子组件</span></span><br><span class="line">    <span class="keyword">if</span> (status === UNMOUNTED) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">status</span>: EXITED &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 子组件尚未在视图中，执行显示动效</span></span><br><span class="line">    <span class="keyword">if</span> (status !== ENTERING &amp;&amp; status !== ENTERED) &#123;</span><br><span class="line">      <span class="keyword">this</span>.nextStatus = ENTERING;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 子组件已在视图中，执行移除动效</span></span><br><span class="line">    <span class="keyword">if</span> (status === ENTERING || status === ENTERED) &#123;</span><br><span class="line">      <span class="keyword">this</span>.nextStatus = EXITING;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidUpdate() &#123;</span><br><span class="line">  <span class="keyword">this</span>.updateStatus();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">updateStatus(mounting = <span class="literal">false</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> nextStatus = <span class="keyword">this</span>.nextStatus;<span class="comment">// 只有两种可能，ENTERING 或 EXITING</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (nextStatus !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.nextStatus = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.cancelNextCallback();</span><br><span class="line">    <span class="keyword">const</span> node = ReactDOM.findDOMNode(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nextStatus === ENTERING) &#123;</span><br><span class="line">      <span class="keyword">this</span>.performEnter(node, mounting);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.performExit(node);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="comment">// 动效执行完成后 state 置为 EXITED 时，且 unmountOnExit 为真，移除子组件</span></span><br><span class="line">    <span class="keyword">this</span>.props.unmountOnExit &amp;&amp;</span><br><span class="line">    <span class="keyword">this</span>.state.status === EXITED</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">status</span>: UNMOUNTED &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（当初始化时，props.in 置为否值，子组件将不予渲染或渲染后无动效；当更新时置为否值，子组件已在视图中，执行 performExit 方法，好启动 exit 动效。）</p>
<p>上述代码中，performEnter, performExit 方法用于操控容器组件在 props.timeout 时间后自动从 ENTERING 切换到 ENTERED 状态，或者从 EXITING 切换到 EXITED 状态。这两个方法均调用了 safeSetState 方法，该方法的意义是设置 pendingState 属性，以避免动效的多次执行；以及通过调用 onTransitionEnd 方法执行变更 status 的逻辑。onTransitionEnd 方法的延迟机制通过监听 transitionEnd 事件（借助于 props.addEventLinstener 配置）或者使用 setTimeout 执行回调实现，变更 status 状态的回调通过 setNextCallback 方法免于多次执行。</p>
<p>Transition 容器在根据 props.in, props.appear, props.enter, props.exit, props.mountOnEnter, props.unmountOnExit 属性自动处理 status 状态的同时，还设置了多个在适当时机执行的钩子函数，包含 props.onEnter, props.onEntering, props.onEntered, props.onExit, props.onExiting, props.onExited 配置项。</p>
<h3 id="CSSTransition"><a href="#CSSTransition" class="headerlink" title="CSSTransition"></a>CSSTransition</h3><p>在 react-transition-group 2 版本内部，props.onEnter 等钩子在实现 CSSTransition 组件时极有意义。因为 Transition 容器传给 props.children 函数的 status 只包含 enter, exit 相关状态，没有 appear 状态。而 onEnter, onEntering, onEntered 钩子的次参即为是否在 appear 状态中（通过 context.transitionGroup.isMounting 或 mounting 获知），CSSTransition 组件即在此基础上实现，通过钩子更新 props.children 对应节点的 class（依次由 <em>-appear, </em>-appear-active, <em>-enter, </em>-enter-active, <em>-enter-done, </em>-exit, <em>-exit-active, </em>-exit-done 变更，* 通过 props.classNames 设置，该属性也设置为对象）。与 1 版本相同，2 版本在类名变更的同时，访问了 node.scrollTop 促使浏览器重绘；也可以在 props.children 中执行 onEnter 等方法阻止 js 动效或懒加载等逻辑。CSSTransition 组件同样向上抛出 props.onEnter, props.onEntering, props.onEntered, props.onExit, props.onExiting, props.onExited 钩子。</p>
<h3 id="TransitionGroup"><a href="#TransitionGroup" class="headerlink" title="TransitionGroup"></a>TransitionGroup</h3><p>TransitionGroup 的处理逻辑和 1 版本相同，即通过 state.children 控制待渲染的元素，以实现 exit 动效执行时仍驻留子组件的场景。不同的是，1 版本会用 CSSTransitionGroupChild 包装子组件，2 版本需要用户传入 Transition 组件作为 TransitionGroup 的子组件。当然，因为 2 版本中，Transition 组件动效执行时机和组件渲染状态的弱关联，促使 TransitionGroup 容器的 componentWillReceiveProps 方法中更新 state.children 的逻辑也不一样。</p>
<p>TransitionGroup 的一般适用场景为当子组件添加时，执行 enter 动效；当子组件移除时，执行 exit 动效。在这样的场景中，子组件的渲染状态不受 TransitionGroup 控制，也即 TransitionGroup 容器对子组件的 props.in 属性的调控必须与子组件的渲染状态向匹配。在 TransitionGroup 容器初始化阶段，传入子组件的 props.in 属性必然为真值，因为在这阶段，子组件都会得到渲染。在更新阶段，当子组件移除时，通过设置 props.in 为否值，触发 exit 动效；当子组件 exit 动效执行阶段，子组件又被添加，通过设置 props.in 为真值，使 enter, exit 动效得以执行；当子组件 exit 动效执行完成、且组件已移除后，处理逻辑同 exit 动效执行阶段；当子组件维持原样，传入子组件的 props.in 属性维持原值，props.oEnter, props.onExit 属性则同步为子组件最新的 props 值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props, context) &#123;</span><br><span class="line">  <span class="keyword">super</span>(props, context);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Initial children should all be entering, dependent on appear</span></span><br><span class="line">  <span class="keyword">this</span>.state = &#123;</span><br><span class="line">    children: getChildMapping(props.children, child =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> cloneElement(child, &#123;</span><br><span class="line">        onExited: <span class="keyword">this</span>.handleExited.bind(<span class="keyword">this</span>, child),</span><br><span class="line">        <span class="keyword">in</span>: <span class="literal">true</span>,</span><br><span class="line">        appear: <span class="keyword">this</span>.getProp(child, <span class="string">'appear'</span>),</span><br><span class="line">        enter: <span class="keyword">this</span>.getProp(child, <span class="string">'enter'</span>),</span><br><span class="line">        exit: <span class="keyword">this</span>.getProp(child, <span class="string">'exit'</span>),</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;),</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">  <span class="keyword">let</span> prevChildMapping = <span class="keyword">this</span>.state.children;</span><br><span class="line">  <span class="keyword">let</span> nextChildMapping = getChildMapping(nextProps.children);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> children = mergeChildMappings(prevChildMapping, nextChildMapping);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.keys(children).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> child = children[key]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isValidElement(child)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> hasPrev = key <span class="keyword">in</span> prevChildMapping;</span><br><span class="line">    <span class="keyword">const</span> hasNext = key <span class="keyword">in</span> nextChildMapping;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> prevChild = prevChildMapping[key];</span><br><span class="line">    <span class="comment">// child 在移除过程中</span></span><br><span class="line">    <span class="keyword">const</span> isLeaving = isValidElement(prevChild) &amp;&amp; !prevChild.props.in;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// child 新添加或者移除动效尚未执行完成，执行 enter 动效</span></span><br><span class="line">    <span class="keyword">if</span> (hasNext &amp;&amp; (!hasPrev || isLeaving)) &#123;</span><br><span class="line">      <span class="comment">// console.log('entering', key)</span></span><br><span class="line">      children[key] = cloneElement(child, &#123;</span><br><span class="line">        onExited: <span class="keyword">this</span>.handleExited.bind(<span class="keyword">this</span>, child),</span><br><span class="line">        <span class="keyword">in</span>: <span class="literal">true</span>,</span><br><span class="line">        exit: <span class="keyword">this</span>.getProp(child, <span class="string">'exit'</span>, nextProps),</span><br><span class="line">        enter: <span class="keyword">this</span>.getProp(child, <span class="string">'enter'</span>, nextProps),</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 组件已移除，执行 exit 动效</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!hasNext &amp;&amp; hasPrev &amp;&amp; !isLeaving) &#123;</span><br><span class="line">      <span class="comment">// console.log('leaving', key)</span></span><br><span class="line">      children[key] = cloneElement(child, &#123; <span class="attr">in</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 组件动效特性未作改变，保留原值</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (hasNext &amp;&amp; hasPrev &amp;&amp; isValidElement(prevChild)) &#123;</span><br><span class="line">      <span class="comment">// console.log('unchanged', key)</span></span><br><span class="line">      children[key] = cloneElement(child, &#123;</span><br><span class="line">        onExited: <span class="keyword">this</span>.handleExited.bind(<span class="keyword">this</span>, child),</span><br><span class="line">        <span class="keyword">in</span>: prevChild.props.in,</span><br><span class="line">        exit: <span class="keyword">this</span>.getProp(child, <span class="string">'exit'</span>, nextProps),</span><br><span class="line">        enter: <span class="keyword">this</span>.getProp(child, <span class="string">'enter'</span>, nextProps),</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.setState(&#123; children &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>handleExited 方法用于当子组件 exit 动效执行完成且移除后，更新 TransitionGroup 容器的 state.children 属性，附带调用原始传入子组件的 props.onExited 方法（实际传入子组件的 props.onExited 方法被改写为 handleExited 方法）。</p>
<p>在变更 state.children 的处理逻辑之外，TransitionGroup 向外提供 props.appear, props.enter, props.exit, props.component, props.childFactory 配置项。props.appear, props.enter, props.exit 为当子组件元素没有同名 props 属性时，使用 TransitionGroup 容器的 props 属性；props.component 为外层包裹元素（适配 react 中 props.children 不能置为数组的特性，react 16 可能不需要）；props.childFactory 用于装饰子元素。</p>
<p>2 版本没有提供 CSSTransitionGroup 组件，因为在 TransitionGroup 组件下挂载 CSSTransition 组件即能实现与 1 版本中 CSSTransitionGroup 相同的效果，通过调整节点的 class 实现动效。在这里，CSSTransition 组件作为特殊的 Transition 组件。除此而外，Transition, CSSTransition 组件都向外暴露 props.onEnter, props.onEntering, props.onEntered, props.onExit, props.onExiting, props.onExited 配置钩子，因此相较于 1 版本中通过 CSSTransitionGroup 自应用的 CSSTransitionGroupChild 组件，2 版本能对 css 动效实现更细微的控制。</p>
<p>此外，TransitionGroup 组件会通过 context 属性向 Transition 子组件传递 transitionGroup 属性，以使 Transition 子组件能够感知动效处于 appear 阶段还是 enter 阶段。Transition 组件又通过 getChildContext 方法，将其子孙组件的 transitionGroup 属性置为 null，其意义时，当父 Transition 嵌套子 Transition 时，子 Transition 不至于尝试通过 context.transitionGroup 属性判断动效在 appear 阶段还是 enter 阶段。</p>
<h3 id="ReplaceTransition"><a href="#ReplaceTransition" class="headerlink" title="ReplaceTransition"></a>ReplaceTransition</h3><p>2 版本中，ReplaceTransition 用于通过控制 props.in 切换显示两个子组件中的一个。因此实际使用过程中，需要有容器包裹，通过容器更新传入 ReplaceTransition 组件中的props.in；循环切换需要在容器中设置定时器（循环切换过程中，不支持其中任意一个子组件 exit 动效，适用场景相对较小）。ReplaceTransition 组价向外提供 props.onEnter, props.onEntering, props.onEntered, props.onExit, props.onExiting, props.onExited 等配置属性，前三个为第一个子组件 enter 动效相关钩子，后三个为第二个子组件 enter 动效相关钩子。其 ReplaceTransition 组价支持在 enter 发生过程中调用子组件的 props.onEnter, props.onEntering, props.onEntered, props.onExit, props.onExiting, props.onExited，前三个钩子为第一个子组件独有，后三个为第二个子组件独有。源码不作赘述。</p>
<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>无论 1 版本的核心模块 TransitionGroup，还是 2 版本的核心模块 Transition，都通过容器管理子组件的动效执行过程。1 版本切入的视角在于通过判断子组件从列表中创建、移除的过程，触发调用子组件的 componentWillAppear 等方法，以管理动效。对于 css 动效，1 版本又通过包含特定 componentWillAppear 等实例方法的 CSSTransitionGroupChild 包装用户实际开发的子组件，从而对接上 TransitionGroup 容器，使子组件中的动效得到管理。2 版本在处理上更为细致，独立对待用户开发的动效组件，而不是视为列表形式。2 版本通过 Transition 容器将子组件可能包含的 enter, exit 动效抽象为 state.status，并传入子组件，由子组件自身通过 status 启用特定的动效；并且同样提供了以钩子方式（props.onEnter 等配置方法）管理动效的实现，2 版本自身的 CSSTransition 组件即通过钩子调节添加到节点上的 class。若说 1 版本还滞留于子组件从列表中移入移出的视点，2 版本的观察角度则从列表中脱离，实打实地介入了子组件动效执行周期的管理，will - excute - did，并向下注入执行状态。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>library</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>react-components</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack插件指南</title>
    <url>/2018/02/06/frontend/%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack/webpack%E6%8F%92%E4%BB%B6%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="HotModuleReplacementPlugin"><a href="#HotModuleReplacementPlugin" class="headerlink" title="HotModuleReplacementPlugin"></a>HotModuleReplacementPlugin</h2><p>内置为 webpack.HotModuleReplacementPlugin，热替换插件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.HotModuleReplacementPlugin(&#123;</span><br><span class="line">  multiStep: boolean,<span class="comment">// 设置为 true 时，插件会分成两步构建文件。首先编译热加载 chunks，之后再编译剩余的通常的资源</span></span><br><span class="line">  fullBuildTimeout: number,<span class="comment">// 当 multiStep 启用时，表示两步构建之间的延时</span></span><br><span class="line">  requestTimeout: number<span class="comment">// 下载 manifest 的延时</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="DllPlugin-DLLReferencePlugin"><a href="#DllPlugin-DLLReferencePlugin" class="headerlink" title="DllPlugin, DLLReferencePlugin"></a>DllPlugin, DLLReferencePlugin</h2><p>内置为 webpack.DllPlugin, webpack.DllReferencePlugin，用于提升编译速度。</p>
<p>DllPlugin 插件会生成一个 manifest.json 文件，该文件包含了从 require 和 import 的 request 到模块 id 的映射，用于让 DLLReferencePlugin 映射到相关的依赖上去。通过引用 manifest.json 文件来把依赖的名称映射到模块的 id 上，之后再在需要的时候通过内置的 <strong>webpack_require</strong> 函数来 require 他们。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.vendor.config.js</span></span><br><span class="line"><span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">  context: __dirname,<span class="comment">// manifest 文件中请求的上下文(context)(默认值为 webpack 的上下文(context))</span></span><br><span class="line">  name: <span class="string">"[name]_[hash]"</span>,<span class="comment">// 暴露出的 DLL 的函数名</span></span><br><span class="line">  path: path.join(__dirname, <span class="string">"manifest.json"</span>),<span class="comment">// manifest.json 文件的绝对路径</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.app.config.js</span></span><br><span class="line"><span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">  context: __dirname,<span class="comment">// 绝对路径， manifest.json (或者是内容属性)中请求的上下文</span></span><br><span class="line">  manifest: <span class="built_in">require</span>(<span class="string">"./manifest.json"</span>),<span class="comment">// 包含 content 和 name 的对象</span></span><br><span class="line">  content: <span class="built_in">require</span>(<span class="string">"./manifest.json"</span>).content,<span class="comment">// 请求到模块 id 的映射 (默认值为 manifest.content)</span></span><br><span class="line">  name: manifest.name,<span class="comment">// dll 脚本的名称 (默认值为 manifest.name)</span></span><br><span class="line">  scope: <span class="literal">undefined</span>,<span class="comment">// 开启作用域模块，如 scope = "xyz"， dll 中的名为 abc 的文件可通过 require("xyz/abc") 加载。默认为映射模式，即通过 require("abc") 加载。且 dll 文件不会被打包到 bundle 中</span></span><br><span class="line">  sourceType: <span class="string">"commonsjs2"</span><span class="comment">// dll 如何向外提供全局函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="DefinePlugin"><a href="#DefinePlugin" class="headerlink" title="DefinePlugin"></a>DefinePlugin</h2><p>内置为 webpack.DefinePlugin，定义全局变量。使用场景如，由变量区分开发环境或生产环境，开发环境打印日志，生产环境不打印。变量的值将被转换为字符串，且以文本替换的形式传入代码中，所以需要包裹单双引号或使用 JSON.stringify，如 ‘“production”‘, JSON.stringify(‘production’)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">  PRODUCTION: <span class="built_in">JSON</span>.stringify(<span class="literal">true</span>),<span class="comment">// 以文本形式传入 true</span></span><br><span class="line">  VERSION: <span class="built_in">JSON</span>.stringify(<span class="string">"5fa3b9"</span>),</span><br><span class="line">  BROWSER_SUPPORTS_HTML5: <span class="literal">true</span>,</span><br><span class="line">  TWO: <span class="string">"1+1"</span>,</span><br><span class="line">  <span class="string">"typeof window"</span>: <span class="built_in">JSON</span>.stringify(<span class="string">"object"</span>),<span class="comment">// 替换 typeof window 文本</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 功能标记</span></span><br><span class="line">  <span class="string">'NICE_FEATURE'</span>: <span class="built_in">JSON</span>.stringify(<span class="literal">true</span>),</span><br><span class="line">  <span class="string">'EXPERIMENTAL_FEATURE'</span>: <span class="built_in">JSON</span>.stringify(<span class="literal">false</span>),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 服务 Url</span></span><br><span class="line">  <span class="string">'SERVICE_URL'</span>: <span class="built_in">JSON</span>.stringify(<span class="string">"http://dev.example.com"</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="EnvironmentPlugin"><a href="#EnvironmentPlugin" class="headerlink" title="EnvironmentPlugin"></a>EnvironmentPlugin</h2><p>内置为 webpack.EnvironmentPlugin，使用 DefinePlugin 快捷设置 process.env 环境变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">等同于 new webpack.DefinePlugin(&#123;</span></span><br><span class="line"><span class="comment">  'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),</span></span><br><span class="line"><span class="comment">  'process.env.DEBUG': JSON.stringify(process.env.DEBUG)</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">new</span> webpack.EnvironmentPlugin([<span class="string">'NODE_ENV'</span>, <span class="string">'DEBUG'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用默认值</span></span><br><span class="line"><span class="keyword">new</span> webpack.EnvironmentPlugin(&#123;</span><br><span class="line">  NODE_ENV: <span class="string">'development'</span>, <span class="comment">// 除非有定义 process.env.NODE_ENV，否则就使用 'development'</span></span><br><span class="line">  DEBUG: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="ProvidePlugin"><a href="#ProvidePlugin" class="headerlink" title="ProvidePlugin"></a>ProvidePlugin</h2><p>内置为 webpack.ProvidePlugin，当某变量没有赋值时，自动 import 或 require 相应的模块，并导出其中的方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自动加载 jquery</span></span><br><span class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">  $: <span class="string">'jquery'</span>,</span><br><span class="line">  jQuery: <span class="string">'jquery'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注入 lodash.map 方法</span></span><br><span class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">  _map: [<span class="string">'lodash'</span>, <span class="string">'map'</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="CommonsChunkPlugin"><a href="#CommonsChunkPlugin" class="headerlink" title="CommonsChunkPlugin"></a>CommonsChunkPlugin</h2><p>内置为 webpack.optimize.CommonsChunkPlugin，提取公共代码，结合 entry 属性使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    vendor: [<span class="string">"jquery"</span>, <span class="string">"other-lib"</span>],</span><br><span class="line">    app: <span class="string">"./entry"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: string|string[],<span class="comment">// 字符串或数组，若设为已经存在的打包文件 chunk 名称，将把该 chunk 提取到公共文件中。如果该选项被忽略，同时 `options.async` 或者 `options.children` 被设置，所有的 chunk 都会被使用，否则 `options.filename` 会用于作为 chunk 名</span></span><br><span class="line">      filename: string,<span class="comment">// 公共文件名模板，使用和 output.filename 相同的占位符。不设置，将保留原 chunk 的名称</span></span><br><span class="line">      minChunks: number|<span class="literal">Infinity</span>|<span class="function">(<span class="params"><span class="built_in">module</span>, count</span>) =&gt;</span> boolean,<span class="comment">// 生成公共文件前，需要传入的 chunk 数量。设为 Infinity，会马上生成 公共chunk，但里面没有模块。默认是 chunk 的数量</span></span><br><span class="line">      chunks: string[],<span class="comment">// 选择 chunk 的来源。如果被忽略，所有的入口 chunk 都会被选择</span></span><br><span class="line">      children: boolean,<span class="comment">// 如果设置为 true，入口 chunk 的依赖都会被并入公共文件中，以避免 chunk 的依赖包含重复代码</span></span><br><span class="line">      <span class="keyword">async</span>: boolean|string,<span class="comment">// 如果设置为 true，与上面相同，入口 chunk 的依赖被并入公共文件中，且使用异步加载</span></span><br><span class="line">      minSize: number<span class="comment">// 在 公共chunk 被创建立之前，所有公共模块的最少大小</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口 chunk 依赖路径中包含 "somelib" 字样的脚本，这些脚本将被视为一个 chunk，chunk 的 keyname 是 "my-single-lib-chunk"，最终打包到 "my-single-lib-chunk.js" 中</span></span><br><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">  name: <span class="string">"vendor"</span>,</span><br><span class="line">  minChunks: ffunction(<span class="built_in">module</span>, count) &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.resource &amp;&amp; (<span class="regexp">/somelib/</span>).test(<span class="built_in">module</span>.resource) &amp;&amp; count === <span class="number">3</span>; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 避免提取 css, scss 文件，且公共文件只能在 node_modules 下</span></span><br><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">  name: <span class="string">"vendor"</span>,</span><br><span class="line">  minChunks: <span class="function"><span class="keyword">function</span> (<span class="params">module</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">module</span>.resource &amp;&amp; (<span class="regexp">/^.*\.(css|scss)$/</span>).test(<span class="built_in">module</span>.resource)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.context &amp;&amp; <span class="built_in">module</span>.context.indexOf(<span class="string">"node_modules"</span>) !== <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 webpack 注入页面的脚本提取到公共文件，文件名 "manifest" 不能和入口 chunk 重名</span></span><br><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">  name: <span class="string">"manifest"</span>,</span><br><span class="line">  minChunks: <span class="literal">Infinity</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">[</span><br><span class="line">  <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">    name: <span class="string">"vendor"</span>,</span><br><span class="line">    minChunks: <span class="function"><span class="keyword">function</span>(<span class="params">module</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">module</span>.context &amp;&amp; <span class="built_in">module</span>.context.indexOf(<span class="string">"node_modules"</span>) !== <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">    name: <span class="string">"manifest"</span>,</span><br><span class="line">    minChunks: <span class="literal">Infinity</span></span><br><span class="line">  &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="SourceMapDevToolPlugin"><a href="#SourceMapDevToolPlugin" class="headerlink" title="SourceMapDevToolPlugin"></a>SourceMapDevToolPlugin</h2><p>内置为 webpack.SourceMapDevToolPlugin，对 webpackConfig.devtool 添加的 SourceMap 予以更细粒度的控制。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.SourceMapDevToolPlugin(&#123;</span><br><span class="line">  test,<span class="comment">// 指定资源，test 默认是 .js 和 .css 文件</span></span><br><span class="line">  include,</span><br><span class="line">  exclude,</span><br><span class="line">  filename: <span class="string">'[name].js.map'</span>,<span class="comment">// SourceMap 的输出文件名。如果没有提供值，则 source map 是内联的</span></span><br><span class="line">  append,<span class="comment">// 追加到原始资源。通常以 #sourceMappingURL 注释。[url] 替换为 source map 文件的 URL。false 禁止追加</span></span><br><span class="line">  moduleFilenameTemplate,<span class="comment">// SourceMap 的输出文件名模板</span></span><br><span class="line">  fallbackModuleFilenameTemplate,<span class="comment">// SourceMap 的输出文件名后备方案</span></span><br><span class="line">  <span class="built_in">module</span>: <span class="literal">true</span>,<span class="comment">// 为 false 时， loader 不再生成 source map，并且转换过的代码被用作源码</span></span><br><span class="line">  columns: <span class="literal">true</span>,<span class="comment">//  为 false 时，source map 中的列映射(column mapping)被忽略，并且使用更快速的 source map 实现</span></span><br><span class="line">  lineToLine: &#123;<span class="comment">// 匹配的模块使用简单快速的行到行 source map</span></span><br><span class="line">    test,</span><br><span class="line">    include,</span><br><span class="line">    exclude</span><br><span class="line">  &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="MinChunkSizePlugin"><a href="#MinChunkSizePlugin" class="headerlink" title="MinChunkSizePlugin"></a>MinChunkSizePlugin</h2><p>内置为 webpack.optimize.MinChunkSizePlugin，通过合并小于 minChunkSize 大小的 chunk，将 chunk 体积保持在指定大小限制以上。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.optimize.MinChunkSizePlugin(&#123;</span><br><span class="line">  minChunkSize: <span class="number">10000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="BannerPlugin"><a href="#BannerPlugin" class="headerlink" title="BannerPlugin"></a>BannerPlugin</h2><p>内置为 webpack.BannerPlugin，为每个 chunk 文件头部添加 banner。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.BannerPlugin(banner)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">new</span> webpack.BannerPlugin(&#123;</span><br><span class="line">  banner: <span class="string">"hash:[hash], chunkhash:[chunkhash], name:[name], filebase:[filebase], query:[query], file:[file]"</span>,</span><br><span class="line">  raw: <span class="literal">false</span>,<span class="comment">// 如果值为 true，将直出，不作为注释</span></span><br><span class="line">  entryOnly: <span class="literal">false</span>,<span class="comment">// 如果值为 true，将只在入口 chunks 文件中添加</span></span><br><span class="line">  test: <span class="literal">null</span>,</span><br><span class="line">  include: <span class="literal">null</span>,</span><br><span class="line">  exclude: <span class="literal">null</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="IgnorePlugin"><a href="#IgnorePlugin" class="headerlink" title="IgnorePlugin"></a>IgnorePlugin</h2><p>内置为 webpack.IgnorePlugin，打包时避过指定资源。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.IgnorePlugin(</span><br><span class="line">  requestRegExp,<span class="comment">// 测试资源请求路径的正则表达式</span></span><br><span class="line">  [contextRegExp]<span class="comment">// (可选) 测试资源上下文(目录)的正则表达式</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例，moment 类库中 locale 资源将不予打包</span></span><br><span class="line"><span class="keyword">new</span> webpack.IgnorePlugin(<span class="regexp">/^\.\/locale$/</span>, /moment$/)</span><br></pre></td></tr></table></figure>
<h2 id="NormalModuleReplacementPlugin"><a href="#NormalModuleReplacementPlugin" class="headerlink" title="NormalModuleReplacementPlugin"></a>NormalModuleReplacementPlugin</h2><p>内置为 webpack.NormalModuleReplacementPlugin，替换指定资源，适用场景为生产环境下的某配置文件比开发环境的配置文件有更高优先级。高级用法是指定环境变量，通过环境变量指定待加载的资源。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生产环境修改 webpack.config.js，加载 './config.production.js' 文件；开发环境不使用 NormalModuleReplacementPlugin 插件，加载 'some/path/config.development.js' 文件</span></span><br><span class="line"><span class="keyword">new</span> webpack.NormalModuleReplacementPlugin(</span><br><span class="line">  /some\/path\/config\.development\.js/,</span><br><span class="line">  <span class="string">'./config.production.js'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高级用法，通过环境变量加载文件，开发环境默认加载带 VERSION_A 字样文件；生产环境设 env.APP_TARGET = 'VERSION_B'，加载 VERSION_B 文件</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">env</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> appTarget = env.APP_TARGET || <span class="string">'VERSION_A'</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> webpack.NormalModuleReplacementPlugin(<span class="regexp">/(.*)-APP_TARGET(\.*)/</span>, <span class="function"><span class="keyword">function</span>(<span class="params">resource</span>) </span>&#123;</span><br><span class="line">        resource.request = resource.request.replace(<span class="regexp">/-APP_TARGET/</span>, <span class="string">`-<span class="subst">$&#123;appTarget&#125;</span>`</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ContextReplacementPlugin"><a href="#ContextReplacementPlugin" class="headerlink" title="ContextReplacementPlugin"></a>ContextReplacementPlugin</h2><p>内置为 webpack.ContextReplacementPlugin，替换 webpack 文件查找规则。在 webpack 中，当 require(‘./locale/‘ + name + ‘.json’)，webpack 将查找目录 (‘./locale/‘) 下符合正则表达式 (/^.*.json$/)的文件，由于 name 在编译时(compile time)还是未知的，webpack 会将每个文件都作为模块引入到 bundle 中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.ContextReplacementPlugin，替换(</span><br><span class="line">  resourceRegExp: <span class="built_in">RegExp</span>,<span class="comment">// 如果资源（或目录）符合 resourceRegExp 正则表达式，插件会替换默认资源为 newContentResource</span></span><br><span class="line">  newContentResource?: string,<span class="comment">// 如果 newContentResource 为相对路径，会相对于前一匹配资源路径去解析</span></span><br><span class="line">  newContentRecursive?: boolean,<span class="comment">// 是否使用递归查找</span></span><br><span class="line">  newContentRegExp?: <span class="built_in">RegExp</span>,<span class="comment">// 用于筛选新上下文里的资源</span></span><br><span class="line">  newContentCallback?: <span class="function"><span class="params">data</span> =&gt;</span> <span class="keyword">void</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">new</span> webpack.ContextReplacementPlugin(<span class="regexp">/moment[\/\\]locale$/</span>, /de|fr|hu/)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> webpack.ContextReplacementPlugin，替换(</span><br><span class="line">  resourceRegExp: <span class="built_in">RegExp</span>,</span><br><span class="line">  newContentCallback?: <span class="function"><span class="params">data</span> =&gt;</span> <span class="keyword">void</span><span class="comment">// 首参为为上下文模块工厂(ContextModuleFactory)的 data 对象，需要覆写该对象的 request 属性</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">new</span> webpack.ContextReplacementPlugin(<span class="regexp">/^\.\/locale$/</span>, (context) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/\/moment\//</span>.test(context.context)) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">  <span class="built_in">Object</span>.assign(context, &#123;</span><br><span class="line">    regExp: <span class="regexp">/^\.\/\w+/</span>,</span><br><span class="line">    request: <span class="string">'../../locale'</span>, <span class="comment">// 相对路径</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">new</span> webpack.ContextReplacementPlugin(</span><br><span class="line">  resourceRegExp: <span class="built_in">RegExp</span>,</span><br><span class="line">  newContentResource: string,</span><br><span class="line">  newContentCreateContextMap: object <span class="comment">// 将运行时请求(runtime-request)映射到编译时请求(compile-time request)</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">new</span> ContextReplacementPlugin(<span class="regexp">/selector/</span>, <span class="string">'./folder'</span>, &#123;</span><br><span class="line">  <span class="string">'./request'</span>: <span class="string">'./request'</span>,</span><br><span class="line">  <span class="string">'./other-request'</span>: <span class="string">'./new-request'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h2><p>html-webpack-plugin 插件，创建 html 文件，自动加载打包资源。</p>
<p>注入 html 模板的变量包含，htmlWebpackPlugin = { files, options }, webpack, webpackConfig。</p>
<p>支持的事件包含，html-webpack-plugin-before-html-generation, html-webpack-plugin-before-html-processing, html-webpack-plugin-alter-asset-tags, html-webpack-plugin-after-html-processing, html-webpack-plugin-after-emit, 同步事件 tml-webpack-plugin-alter-chunks。在自定义插件中使用。</p>
<p>参考文档：<a href="https://github.com/jantimon/html-webpack-plugin" target="_blank" rel="noopener">https://github.com/jantimon/html-webpack-plugin</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">  title: <span class="string">''</span>,<span class="comment">// 注入 html 的 title</span></span><br><span class="line">  filename: <span class="string">'index.html'</span>,<span class="comment">// 影响加载资源的位置</span></span><br><span class="line">  template: <span class="string">''</span>,<span class="comment">// html, ejs, jade 模板的路径</span></span><br><span class="line">  inject: <span class="literal">true</span> | <span class="string">'head'</span> | <span class="string">'body'</span> | <span class="literal">false</span>,<span class="comment">// 静态资源注入位置，默认在 body 底层</span></span><br><span class="line">  favicon: <span class="string">''</span>,<span class="comment">// 图标路径</span></span><br><span class="line">  minify: &#123;&#125;,<span class="comment">// 传递给 html-minifier 的选项，用于优化输出</span></span><br><span class="line">  hash: <span class="literal">true</span> | <span class="literal">false</span>,<span class="comment">// 设为真时，js, css 资源名将加上 hash 值，用于刷新缓存</span></span><br><span class="line">  cache: <span class="literal">true</span>,<span class="comment">// 设为真时，只有文件变更时，才重新请求</span></span><br><span class="line">  showErrors: <span class="literal">true</span>,<span class="comment">// 显示错误</span></span><br><span class="line">  chunks: [],<span class="comment">// 添加 chunk，如用于单元测试的脚本</span></span><br><span class="line">  chunksSortMode: <span class="string">'auto'</span>,<span class="comment">// chunk 排序方式，可选值 'none' | 'auto' | 'dependency' |'manual' | &#123;function&#125; </span></span><br><span class="line">  excludeChunks: [],<span class="comment">// 避免引用某些 chunk</span></span><br><span class="line">  xhtml: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="UglifyjsWebpackPlugin"><a href="#UglifyjsWebpackPlugin" class="headerlink" title="UglifyjsWebpackPlugin"></a>UglifyjsWebpackPlugin</h2><p>uglifyjs-webpack-plugin 插件，压缩 js 脚本。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> UglifyJSPlugin(&#123;</span><br><span class="line">  test,<span class="comment">// 定位资源</span></span><br><span class="line">  include,</span><br><span class="line">  exclude,</span><br><span class="line">  parallel: <span class="literal">false</span>,<span class="comment">// 使用多进程并行运行和文件缓存来提高构建速度，如 &#123; cache: true, workers: 2 &#125;，parallel.workers 为 cpu 核数</span></span><br><span class="line">  sourceMap: <span class="literal">false</span>,<span class="comment">// 生成 source map，会减慢编译的速度。cheap-source-map 选项不适用于此插件</span></span><br><span class="line">  uglifyOptions: &#123;<span class="comment">// 压缩选项，供 uglifyJs 使用</span></span><br><span class="line">    ie8: <span class="literal">false</span>,<span class="comment">// 支持 ie8</span></span><br><span class="line">    ecma: <span class="number">8</span>,<span class="comment">// es 语法版本号，可选项 5, 6, 7, 8，影响 parse, compress, output 选项</span></span><br><span class="line">    parse: &#123;&#125;,<span class="comment">// parse 选项</span></span><br><span class="line">    mangle: &#123;&#125;,<span class="comment">// 名称矫正??? </span></span><br><span class="line">    output: &#123;<span class="comment">// 默认最佳压缩</span></span><br><span class="line">      comments: <span class="literal">false</span>,</span><br><span class="line">      beautify: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    compress: &#123;&#125;,<span class="comment">// parse 选项</span></span><br><span class="line">    warnings: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  extractComments: <span class="literal">true</span>,<span class="comment">// 函数，提取注释</span></span><br><span class="line">  warningsFilter: <span class="literal">undefined</span><span class="comment">// 过滤警告，如 source =&gt; Boolean</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="ExtractTextWebpackPlugin"><a href="#ExtractTextWebpackPlugin" class="headerlink" title="ExtractTextWebpackPlugin"></a>ExtractTextWebpackPlugin</h2><p>extract-text-webpack-plugin 插件，提取 css 文件。</p>
<p>ExtractTextPlugin.extract 在已经存在的 loader 中，创建一个提取 css 的 loader。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> ExtractTextWebpackPlugin(filename | &#123; </span><br><span class="line">  id: string,<span class="comment">// 此插件实例的唯一 ident（仅限高级用途，默认情况下自动生成）</span></span><br><span class="line">  filename: string,<span class="comment">// 生成文件的文件名，占位符包含 [name], [id], [contenthash]。ExtractTextPlugin 对 每个入口 chunk 都生成一个对应的文件</span></span><br><span class="line">  allChunks: <span class="literal">false</span>,<span class="comment">// 默认情况下，从入口 chunk 提取 css。当使用 CommonsChunkPlugin，且使用 ExtractTextPlugin.extract 在公共 chunk 中有提取 css 时，allChunks 须置为真</span></span><br><span class="line">  disable: <span class="literal">false</span>,<span class="comment">// 禁用插件</span></span><br><span class="line">  ignoreOrder: <span class="literal">false</span>,<span class="comment">// 禁用检查</span></span><br><span class="line">  threshold: <span class="number">0</span>,<span class="comment">// 大于该值的文件将被压缩</span></span><br><span class="line">  minRatio: <span class="number">0.8</span>,<span class="comment">// 压缩比大于该值的将被压缩</span></span><br><span class="line">  deleteOriginalAssets: <span class="literal">false</span><span class="comment">// 是否删除原始资源</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ExtractTextPlugin.extract</span></span><br><span class="line">ExtractTextPlugin.extract(&#123;</span><br><span class="line">  loader: <span class="string">'[name]-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    use: [<span class="string">'css-loader'</span>, <span class="string">'sass-loader'</span>],<span class="comment">// 提取 css 文件，使用这些 loader 获得 css 模块</span></span><br><span class="line">    fallback: <span class="string">'style-loader'</span>,<span class="comment">// css 模块已取得，尚未提取前应用</span></span><br><span class="line">    publicPath: <span class="comment">// 重写此 loader 的 publicPath 配置</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> extractCSS = <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'stylesheets/[name]-one.css'</span>);</span><br><span class="line"><span class="keyword">const</span> extractLESS = <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'stylesheets/[name]-two.css'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: extractCSS.extract([ <span class="string">'css-loader'</span>, <span class="string">'postcss-loader'</span> ])</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/i</span>,</span><br><span class="line">        use: extractLESS.extract([ <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span> ])</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    extractCSS,</span><br><span class="line">    extractLESS</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="NpmInstallWebpackPlugin"><a href="#NpmInstallWebpackPlugin" class="headerlink" title="NpmInstallWebpackPlugin"></a>NpmInstallWebpackPlugin</h2><p>npm-install-webpack-plugin 插件，加载缺失的依赖。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> NpmInstallPlugin(&#123;</span><br><span class="line">  dev: <span class="literal">false</span>,<span class="comment">// 使用 --save 或者 --save-dev</span></span><br><span class="line">  peerDependencies: <span class="literal">true</span>,<span class="comment">// 安装缺少的 peerDependencies</span></span><br><span class="line">  quiet: <span class="literal">false</span>,<span class="comment">// 减少控制台日志记录的数量</span></span><br><span class="line">  npm: <span class="string">'tnpm'</span><span class="comment">// 包加载方式，默认 'npm'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="I18nWebpackPlugin"><a href="#I18nWebpackPlugin" class="headerlink" title="I18nWebpackPlugin"></a>I18nWebpackPlugin</h2><p>i18n-webpack-plugin 插件，国际化???</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> I18nWebpackPlugin(&#123;</span><br><span class="line">  functionName: <span class="string">'__'</span>,<span class="comment">// 函数名</span></span><br><span class="line">  failOnMissing: <span class="literal">false</span>,<span class="comment">// 找不到映射文件时给予警告</span></span><br><span class="line">  hideMessage: <span class="literal">false</span><span class="comment">// 隐藏警告/错误信息</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="BabiliWebpackPlugin"><a href="#BabiliWebpackPlugin" class="headerlink" title="BabiliWebpackPlugin"></a>BabiliWebpackPlugin</h2><p>babili-webpack-plugin 插件，使用 babel-minify 根据浏览器是否支持 es5 最新特性，优化压缩代码。也可以在 babel-loader 配置中使用 babel-preset-minify 。比起 babel-loader 配置，babili-webpack-plugin 插件能优化全文件，包含不通过 babel-loader 加载的文件，即 node_modules 下的文件，以及由 webpack 生成的文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> BabiliPlugin(</span><br><span class="line">  babiliOptions = &#123; </span><br><span class="line">    plugins:[], </span><br><span class="line">    presets:[] </span><br><span class="line">  &#125;, </span><br><span class="line">  overrides = &#123;</span><br><span class="line">    test: <span class="regexp">/\.js($|\?)/i</span>,<span class="comment">// 待包含的文件</span></span><br><span class="line">    comments: <span class="regexp">/@preserve|@licen(s|c)e/</span>,<span class="comment">// 置为 false，将移除注释</span></span><br><span class="line">    sourceMap: webpackConfig.devtool,</span><br><span class="line">    parserOpts: &#123;&#125;,</span><br><span class="line">    babel: <span class="built_in">require</span>(<span class="string">"babel-core"</span>),<span class="comment">// 用于替代 babel-core</span></span><br><span class="line">    babili: <span class="built_in">require</span>(<span class="string">'babel-preset-minify'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="CompressionWebpackPlugin"><a href="#CompressionWebpackPlugin" class="headerlink" title="CompressionWebpackPlugin"></a>CompressionWebpackPlugin</h2><p>compression-webpack-plugin 插件，压缩静态资源。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> CompressionWebpackPlugin(&#123; </span><br><span class="line">  test: <span class="string">'.'</span>, </span><br><span class="line">  include: <span class="literal">undefined</span>,</span><br><span class="line">  exclude: <span class="literal">undefined</span>,</span><br><span class="line">  cache: <span class="literal">false</span>,<span class="comment">// 开启文件缓存</span></span><br><span class="line">  asset: [path].gz[query],<span class="comment">// 目标资源名称。[file] 会被替换成原始资源，[path] 会被替换成原始资源的路径，[query] 会被替换成查询字符串</span></span><br><span class="line">  filename: <span class="literal">false</span>,<span class="comment">// 函数，如 (asset) =&gt; asset</span></span><br><span class="line">  algorithm: <span class="string">'gzip'</span>,<span class="comment">// 压缩算法或算法名，如 (buffer, cb) =&gt; cb(buffer)</span></span><br><span class="line">  threshold: <span class="number">0</span>,<span class="comment">// 大于该值的文件将被压缩</span></span><br><span class="line">  minRatio: <span class="number">0.8</span>,<span class="comment">// 压缩比大于该值的将被压缩</span></span><br><span class="line">  deleteOriginalAssets: <span class="literal">false</span><span class="comment">// 是否删除原始资源</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="ZopfliWebpackPlugin"><a href="#ZopfliWebpackPlugin" class="headerlink" title="ZopfliWebpackPlugin"></a>ZopfliWebpackPlugin</h2><p>zopfli-webpack-plugin 插件，压缩资源。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> ZopfliWebpackPlugin(&#123; </span><br><span class="line">  asset: [path].gz[query],<span class="comment">// 目标资源名称。[file] 会被替换成原始资源，[path] 会被替换成原始资源的路径，[query] 会被替换成查询字符串</span></span><br><span class="line">  filename: <span class="literal">false</span>,<span class="comment">// 函数，如 (asset) =&gt; asset</span></span><br><span class="line">  algorithm: <span class="string">'gzip'</span>,<span class="comment">// 压缩算法或算法名，如 (buffer, cb) =&gt; cb(buffer)</span></span><br><span class="line">  threshold: <span class="number">0</span>,<span class="comment">// 大于该值的文件将被压缩</span></span><br><span class="line">  minRatio: <span class="number">0.8</span>,<span class="comment">// 压缩比大于该值的将被压缩</span></span><br><span class="line">  deleteOriginalAssets: <span class="literal">false</span><span class="comment">// 是否删除原始资源</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="ComponentWebpackPlugin"><a href="#ComponentWebpackPlugin" class="headerlink" title="ComponentWebpackPlugin"></a>ComponentWebpackPlugin</h2><p>不详。。。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>carrier</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack加载器指南</title>
    <url>/2018/02/04/frontend/%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack/webpack%E5%8A%A0%E8%BD%BD%E5%99%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>加载器在 webpack 编译前预处理文件，链式调用多个加载器。</p>
<h2 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h2><p>babel-loader将 es6 降级为 es5。</p>
<p>参考文档：</p>
<p><a href="https://www.cnblogs.com/tugenhua0707/p/7863616.html" target="_blank" rel="noopener">Babel是如何编译JS代码的及理解抽象语法树(AST)</a></p>
<h3 id="options-选项"><a href="#options-选项" class="headerlink" title="options 选项"></a>options 选项</h3><p>参考文档：</p>
<p><a href="https://babeljs.cn/docs/usage/api/" target="_blank" rel="noopener">babel options</a>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认配置</span></span><br><span class="line">&#123;</span><br><span class="line">  plugins:[],<span class="comment">//	需要加载和使用的插件列表</span></span><br><span class="line">  presets: [],<span class="comment">//	需要加载和使用的 presets (一组插件) 列表</span></span><br><span class="line">  generatorOpts: &#123;&#125;,<span class="comment">// 包含要传递给 babel 代码生成器(babel-generator)的选项对象</span></span><br><span class="line">  parserOpts:&#123;&#125;,<span class="comment">// 需要传递给 babel 解析器，babylon 的选项对象</span></span><br><span class="line">  only: <span class="literal">null</span>,<span class="comment">// 待编译的文件，正则，字符串或数组形式</span></span><br><span class="line">  ignore: <span class="literal">null</span>,<span class="comment">// 无需编译的文件</span></span><br><span class="line">  minified: <span class="literal">false</span>,<span class="comment">// 保证输出最小化(不输出代码块最后一个分号，输出文字为字符串而不是转义字符串，安全情况下 new 后的 () 会被去除)</span></span><br><span class="line">  babelrc: <span class="literal">true</span>,<span class="comment">// 指定是否使用 .babelrc 和 babelignore 配置文件，命令行使用 --no-babelrc 代替</span></span><br><span class="line">  extends: <span class="literal">null</span>,<span class="comment">// 扩展 .babelrc 文件的路径</span></span><br><span class="line">  sourceType:	<span class="string">"module"</span>,<span class="comment">//	设置 babel 解析代码的模式。可以设置为 “script” 或 “module” </span></span><br><span class="line">  sourceRoot:	(moduleRoot),<span class="comment">//	所有 source 都是相对于 root 的</span></span><br><span class="line">  retainLines: <span class="literal">false</span>,<span class="comment">// 保留行号。这将导致代码变得很古怪，适用于不能使用 source map 的场景</span></span><br><span class="line">  sourceMaps: <span class="literal">false</span>,<span class="comment">//	如果为 true ，添加一个 map 属性在输出的返回值中。如果设置为 "inline" ，带有 sourceMappingURL 指令的注释被添加到返回代码的底部。如果设置为 "both" ，则会返回 map 属性并追加 source map 注释。命令行使用 --source-maps</span></span><br><span class="line">  sourceMapTarget: (filenameRelative),<span class="comment">//	在返回 souremap 时设置 file</span></span><br><span class="line">  inputSourceMap: <span class="literal">null</span>,<span class="comment">// 输出的 source map 将基于该 source map 对象</span></span><br><span class="line">  sourceFileName: (filenameRelative),<span class="comment">// 在返回的 source map 上设置 sources[0]</span></span><br><span class="line">  auxiliaryCommentAfter: <span class="literal">null</span>,<span class="comment">// 在所有非用户编写代码后添加注释</span></span><br><span class="line">  auxiliaryCommentBefore: <span class="literal">null</span>,<span class="comment">// 在所有非用户编写代码前添加注释</span></span><br><span class="line">  commets: <span class="literal">true</span>,<span class="comment">// 是否在生成的代码中添加注释</span></span><br><span class="line">  shouldPrintComment: <span class="literal">null</span>,<span class="comment">// 是否需要输出注释。具体调用为 shouldPrintComment(commentContents)。将覆盖 commets 选项</span></span><br><span class="line">  compact: <span class="string">'auto'</span>,<span class="comment">// 是否包含多余的空格符和换行符，当输入大于 500KB 时，compact 属性自动设置为真值</span></span><br><span class="line">  ast: <span class="literal">true</span><span class="comment">// 是否在返回对象包含 ast 抽象语法树 abstract syntax tree</span></span><br><span class="line">  code: <span class="literal">true</span>,<span class="comment">// 是否启用代码生成选项</span></span><br><span class="line">  env: &#123;&#125;,<span class="comment">// 配置给不同环境的选项。环境配置的优先级依次为 BABEL_ENV, NODE_ENV，默认'development'环境。env 配置如 &#123; env: &#123; 'product': /* options */ &#125; &#125;</span></span><br><span class="line">  filename: <span class="string">'unknown'</span>,<span class="comment">// 在错误信息是使用的文件名等</span></span><br><span class="line">  filenameRelative: (filename),<span class="comment">//	相对于 sourceRoot 的文件名</span></span><br><span class="line">  moduleId: <span class="literal">null</span>,<span class="comment">// 指定模块 ID 的自定义名称</span></span><br><span class="line">  moduleIds: <span class="literal">false</span>,<span class="comment">// 是否为模块指定明确的 ID。默认情况下，所有模块都是匿名的(不适用于 common 模块)</span></span><br><span class="line">  moduleRoot: (sourceRoot),<span class="comment">// AMD 模块格式化程序的可选前缀，可以被预先添加到模块定义的文件名当中</span></span><br><span class="line">  getModuleId: <span class="literal">null</span>,<span class="comment">// 指定回调函数 getModuleId(moduleName) 生成模块 ID。返回false，意味模块 ID 已被使用</span></span><br><span class="line">  highlightCode: <span class="literal">true</span>,<span class="comment">// ANSI 错误语法高亮显示</span></span><br><span class="line">  resolveModuleSource: <span class="literal">null</span>,<span class="comment">// 解析模块入口，例如 import "SOURCE"; 引入自定义值。具体调用为 resolveModuleSource(source, filename)</span></span><br><span class="line">  wrapPluginVisitorMethod: <span class="literal">null</span>,<span class="comment">// 可用于包装访问者模式的可选回调。注意: 这对于自我检查这样的事是有必要的，并且不需要实现任何方法。具体调用为 wrapPluginVisitorMethod(pluginAlias, visitorType, callback)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="plugins-presets-插件"><a href="#plugins-presets-插件" class="headerlink" title="plugins presets 插件"></a>plugins presets 插件</h3><p>参考文档：</p>
<p><a href="https://babeljs.cn/docs/plugins/" target="_blank" rel="noopener">babel plugins</a>。</p>
<p>plugins 为编译时调用的插件，presets 为官方封装的插件集合。编译时，plugin 运行在 preset 前，plugin 顺序执行，preset 反序执行。配置时，’babel-plugin-‘, ‘babel-preset-‘ 前缀可以忽略，babel 将自动拼接，并在 node_modules 目录中查找。当 babel 插件不在工程目录中时，可以通过插件的绝对路径加以配置，如 “plugins”: [“./node_modules/asdf/plugin”]。插件选项配置通过将插件名称和选项对象放置在同一个数组中实现。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">// 执行顺序为 "transform-decorators-legacy", "transform-class-properties"</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    <span class="string">"transform-decorators-legacy"</span>,</span><br><span class="line">    <span class="string">"transform-class-properties"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 执行顺序为 "stage-2", "react", "es2015"</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    <span class="string">"es2015"</span>,</span><br><span class="line">    <span class="string">"react"</span>,</span><br><span class="line">    <span class="string">"stage-2"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 配置选项</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    [<span class="string">"transform-async-to-module-method"</span>, &#123;</span><br><span class="line">      <span class="attr">"module"</span>: <span class="string">"bluebird"</span>,</span><br><span class="line">      <span class="attr">"method"</span>: <span class="string">"coroutine"</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="presets-官方插件集合"><a href="#presets-官方插件集合" class="headerlink" title="presets 官方插件集合"></a>presets 官方插件集合</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  // env 包含es2015, es2016, es2017 及最新版本</span><br><span class="line">  // 参考文档：[](https://babeljs.cn/docs/plugins/preset-env/)</span><br><span class="line">  [<span class="string">"babel-preset-env"</span>,&#123;</span><br><span class="line">    "targets": &#123;&#125;,// 设定适配环境，如 &#123; node: "6.10" &#125;。支持的环境有 browsers, chrome, opera, edge, firefox, safari, ie, ios, android, node, electron。浏览器端清单 https://github.com/ai/browserslist，如 &#123; "chrome": 52, "browsers": ["last 2 versions", "safari 7"] &#125;。uglify 属性设置为 true，uglify-js 压缩脚本时已编译为 es5 语法</span><br><span class="line">    "spec": false,// 是否允许插件启用 "spec" 转换，更符合规范，编译较慢</span><br><span class="line">    "loose": false,// 是否允许插件启用 "loose" 转换</span><br><span class="line">    "modules": "commonjs",// 将es6模块语法转换为另一个模块类型。可选值为 "amd" | "umd" | "systemjs" | "commonjs" | false。false 将不会转换任何模块</span><br><span class="line">    "include": [],// 包含的插件。include 与 exclude 选项仅仅适用于 preset 中包含的插件。可配置为 ["transform-es2015-arrow-functions", "es6.map"]。"es6.map" 为 [Built-ins](https://github.com/babel/babel-preset-env/blob/master/data/built-in-features.js)</span><br><span class="line">    "exclude": [],// 移除的插件</span><br><span class="line">    "useBuiltIns": false// 是否在 env 中引入 babel-ployfill，以避免在模块中调用 import "babel-polyfill"。npm &gt; 3，babel 6</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  [<span class="string">"babel-preset-es2015"</span>,&#123;</span><br><span class="line">    <span class="attr">"loose"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"spec"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"modules"</span>: <span class="string">"commonjs"</span></span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  ["babel-preset-es2016",&#123; &#125;],</span><br><span class="line"></span><br><span class="line">  ["babel-preset-es2017",&#123; &#125;],</span><br><span class="line"></span><br><span class="line">  ["babel-preset-react",&#123; &#125;],</span><br><span class="line"></span><br><span class="line">  ["babel-preset-flow",&#123; &#125;],</span><br><span class="line"></span><br><span class="line">  // stage 3 候选：完成规范和浏览器初步实现。Stage 4 将到下一年度发行</span><br><span class="line">  ["babel-preset-stage-3",&#123; &#125;],</span><br><span class="line"></span><br><span class="line">  // stage 2  初稿: 完成初步规范。包含 preset-stage-3 所有插件</span><br><span class="line">  ["babel-preset-stage-2",&#123; &#125;],</span><br><span class="line"></span><br><span class="line">  // stage 1  提案: 初步尝试。包含 preset-stage-2, preset-stage-3 所有插件</span><br><span class="line">  ["babel-preset-stage-1",&#123; &#125;],</span><br><span class="line"></span><br><span class="line">  // stage 0  稻草人: 只是一个想法。包含 preset-stage-1, preset-stage-2, preset-stage-3 所有插件</span><br><span class="line">  ["babel-preset-stage-0",&#123; &#125;],</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h4 id="plugin-插件"><a href="#plugin-插件" class="headerlink" title="plugin 插件"></a>plugin 插件</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  // es3</span><br><span class="line">  [<span class="string">"babel-plugin-transform-es3-property-literals"</span>,&#123; &#125;],// 定义对象属性时包裹上双引号</span><br><span class="line">  [<span class="string">"babel-plugin-transform-es3-member-expression-literals"</span>,&#123; &#125;],// 使用对象属性时包裹上双引号</span><br><span class="line"></span><br><span class="line">  // es5</span><br><span class="line">  [<span class="string">"abel-plugin-transform-es5-property-mutators"</span>,&#123; &#125;],// 对象访问器属性 get, set 方法</span><br><span class="line"></span><br><span class="line">  // es2015</span><br><span class="line">  [<span class="string">"check-es2015-constants"</span>,&#123; &#125;],// 常量只读检查</span><br><span class="line">  [<span class="string">"transform-es2015-block-scoped-functions"</span>,&#123; &#125;],// 在块中声明的函数只在块中可用</span><br><span class="line">  ["transform-es2015-block-scoping",&#123;// let 块级作用域</span><br><span class="line">    "throwIfClosureRequired": false// for() 语句中定义的 let 在 &#123;&#125; 中使用，是否直接报错</span><br><span class="line">  &#125;],</span><br><span class="line">  [<span class="string">"transform-es2015-arrow-functions"</span>,&#123; </span><br><span class="line">    <span class="attr">"spec"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;],// 箭头函数转换</span><br><span class="line">  ["transform-es2015-classes",&#123;// 类转换</span><br><span class="line">    "loose": false// loose 模式下，原型方法可枚举，且不能在子类中重复定义</span><br><span class="line">  &#125;],</span><br><span class="line">  ["transform-es2015-computed-properties",&#123; &#125;],// 对象计算属性转换，如 [x + 'foo'] 属性</span><br><span class="line">  ["transform-es2015-destructuring",&#123; &#125;],// 解构</span><br><span class="line">  ["transform-es2015-duplicate-keys",&#123; &#125;],// 将同名属性转换为计算属性，再由 transform-es2015-computed-properties 插件处理</span><br><span class="line">  ["transform-es2015-for-of",&#123; &#125;],// for of 语法</span><br><span class="line">  ["transform-es2015-function-name",&#123; &#125;],// function.name</span><br><span class="line">  ["transform-es2015-literals",&#123; &#125;],// 二进制、八进制整数，unicode 字面量</span><br><span class="line">  ["transform-es2015-modules-commonjs",&#123; &#125;],// 转换成 commonjs 模块。使用 babel-plugin-add-module-exports 插件，避免使用 require("your-module").default 调用模块，可直接使用 require("your-module")</span><br><span class="line">  ["transform-es2015-object-super",&#123; &#125;],// super 父类转换???</span><br><span class="line">  ["transform-es2015-parameters",&#123; &#125;],// 解构函数参数，设置默认值，...arr支持。默认使用 let 处理参数，需要配合使用 transform-es2015-block-scoping 插件</span><br><span class="line">  ["transform-es2015-shorthand-properties",&#123; &#125;],// 允许 &#123; a &#125; 方式赋值对象，转换为 &#123; a: a &#125;</span><br><span class="line">  ["transform-es2015-spread",&#123;// ...a</span><br><span class="line">    "loose": false</span><br><span class="line">  &#125;],</span><br><span class="line">  ["transform-es2015-sticky-regex",&#123; &#125;],// 正则表达式转换为正则构造函数形式</span><br><span class="line">  [<span class="string">"transform-es2015-template-literals"</span>,&#123; </span><br><span class="line">    "loose": false,// 设置为true时，模板字符串对象不会被 frozen</span><br><span class="line">    "spec": false// 是否用 String 函数包裹模板字符串内变量</span><br><span class="line">  &#125;],// 模板字符串</span><br><span class="line">  ["transform-es2015-typeof-symbol",&#123; &#125;],// typeof Symbol() === "symbol" 语法支持</span><br><span class="line">  ["transform-es2015-unicode-regex",&#123; &#125;],// unicode 正则???</span><br><span class="line">  ["transform-regenerator",&#123;// 生成器函数，页面需要引入 babel-ployfill 或 regenerator-runtime 运行时脚本。使用 async 函数，需要添加 syntax-async-functions 插件</span><br><span class="line">    "asyncGenerators": true,</span><br><span class="line">    "generators": true,</span><br><span class="line">    "async": true</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  // es2016</span><br><span class="line">  ["transform-exponentiation-operator",&#123; &#125;],// ** 求幂</span><br><span class="line"></span><br><span class="line">  // es2017</span><br><span class="line">  ["syntax-trailing-function-commas",&#123; &#125;],// 函数参数后加','，添加参数时只有一行改变，方便git diff</span><br><span class="line">  ["transform-async-to-generator",&#123; &#125;],// 将 acync 函数转化为生成器函数</span><br><span class="line"></span><br><span class="line">  // react 包含 preset-flow, babel-plugin-syntax-jsx, babel-plugin-transform-react-jsx, babel-plugin-transform-react-display-name</span><br><span class="line">  // preset-flow 包含 transform-flow-strip-types 插件，其余均为插件</span><br><span class="line">  ["transform-flow-strip-types",&#123; &#125;],// 移除 flow 类型，但不作类型校验，类型校验需要使用 flow 或另外的插件。如 function foo(one: any, two: number, three?): string &#123;&#125; 将转换为 function foo(one, two, three) &#123;&#125;</span><br><span class="line">  ["babel-plugin-syntax-jsx",&#123; &#125;],// 解析 JSX</span><br><span class="line">  ["babel-plugin-transform-react-jsx",&#123; &#125;],// 将 JSX 转换为 react 函数</span><br><span class="line">  ["babel-plugin-transform-react-display-name",&#123; &#125;],// 调用 React.createClass 或 createReactClass 函数时自动添加 displayName，如 var bar = createReactClass(&#123;&#125;) 将转换为 var bar = createReactClass(&#123; displayName: "bar" &#125;)</span><br><span class="line"></span><br><span class="line">  // flow</span><br><span class="line">  ["transform-flow-strip-types",&#123; &#125;],// react preset 包含</span><br><span class="line"></span><br><span class="line">  // stage 3</span><br><span class="line">  ["transform-object-rest-spread",&#123; &#125;],// ...a 语法支持</span><br><span class="line">  ["transform-async-generator-functions",&#123; &#125;],// async 函数转换为生成器函数</span><br><span class="line"></span><br><span class="line">  // stage 2</span><br><span class="line">  ["syntax-dynamic-import",&#123; &#125;],// import() 支持变量</span><br><span class="line">  ["transform-class-properties",&#123; &#125;],// 类静态属性，实例属性、方法等</span><br><span class="line"></span><br><span class="line">  // stage 1</span><br><span class="line">  ["transform-class-constructor-call",&#123; &#125;],// 类作为普通函数使用</span><br><span class="line">  ["transform-export-extensions",&#123; &#125;],// export * as ns from 'mod'; export v from 'mod'; 语法支持</span><br><span class="line"></span><br><span class="line">  // stage 0</span><br><span class="line">  ["transform-do-expressions",&#123; &#125;],// do &#123;&#125; 语法支持，构造块级作用域，最终执行语句作为返回值</span><br><span class="line">  ["transform-function-bind",&#123; &#125;],// obj::func 转换为 func.bind(obj)；::obj.func 转换为 obj.func.bind(obj)；obj::func(val) 转换为 func.call(obj, val)；::obj.func(val) 转换为 obj.func.call(obj, val)</span><br><span class="line">  </span><br><span class="line">  // 模块</span><br><span class="line">  ["es2015-modules-amd",&#123; &#125;],// 将模块导出为 amd 模块</span><br><span class="line">  ["es2015-modules-commonjs",&#123;// 将模块导出为 commonjs 模块</span><br><span class="line">    "loose": false,// loose 模式下，import, export 可在全局使用；非 loose 模式下，只能在外层使用。非 loose 模式下，通过 defineProperty 语句注入不可枚举的 __esModule 属性；loose 模式下，通过赋值注入 __esModule 属性</span><br><span class="line">    "strict": false,// strict 属性置为真，将阻止导出 __esModule 属性</span><br><span class="line">    "noInterop": false// 加载模块时，是否不使用 function _interopRequireDefault(obj) &#123; return obj &amp;&amp; obj.__esModule ? obj : &#123; default: obj &#125;; &#125;，适用于不需要 default 属性的场景</span><br><span class="line">  &#125;],</span><br><span class="line">  ["es2015-modules-systemjs",&#123;// 将模块导出为 SystemJS 模块</span><br><span class="line">    "systemGlobal": "SystemJS"</span><br><span class="line">  &#125;],</span><br><span class="line">  ["es2015-modules-umd",&#123;// 依据 define, exports 变量有无，分别导出 amd, commonjs 等模块</span><br><span class="line">     "globals": &#123;&#125;,// 用于设置导出变量名，如 "globals": &#123; "es6-promise": "Promise" &#125;</span><br><span class="line">     "exactGlobals": true// 规范化注入的全局变量???</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  // 实验阶段</span><br><span class="line">  ["async-generator-functions",&#123; &#125;],// stage 3 包含</span><br><span class="line">  ["transform-async-to-module-method",&#123; &#125;],// 将 async 函数转换为 Bluebird coroutine</span><br><span class="line">  ["class-properties",&#123; &#125;],// stage 2 包含</span><br><span class="line">  ["transform-decorators-legacy",&#123; &#125;],// 装饰器，babel 7 包含在 stage 0 中。平常开发时，需要通过 plugins 配置注入</span><br><span class="line">  ["do-expressions",&#123; &#125;],// stage 0 包含</span><br><span class="line">  ["export-extensions",&#123; &#125;],// stage 1 包含</span><br><span class="line">  ["function-bind",&#123; &#125;],// stage 0 包含</span><br><span class="line">  ["object-rest-spread",&#123; &#125;],// stage 3 包含</span><br><span class="line"></span><br><span class="line">  // Minification</span><br><span class="line">  ["transform-inline-environment-variables",&#123;// 将环境变量以字符串形式注入模块</span><br><span class="line">    "include": [],// 注入的环境变量，如 "include": [ "NODE_ENV" ]</span><br><span class="line">    "exclude": []// 移除的环境变量</span><br><span class="line">  &#125;],</span><br><span class="line">  ["transform-inline-consecutive-adds",&#123; &#125;],// 将对象属性的赋值和数组 push 方法调用过程移入声明中，前提赋值和 push 紧跟在声明后</span><br><span class="line">  ["member-expression-literals",&#123;&#125;],// 对象属性名含关键字，以计算属性 [''] 表示；不含，采用 . 分割形式</span><br><span class="line">  ["transform-minify-booleans",&#123;&#125;],// 以 !0 代替 true，!1 代替 false</span><br><span class="line">  ["minify-dead-code-elimination",&#123;// 精简无用代码</span><br><span class="line">    "keepFnName": true,// 防止插件删除函数名</span><br><span class="line">    "keepFnArgs": true,// 防止插件删除函数参数</span><br><span class="line">    "keepClassName": true,// 防止插件删除类名</span><br><span class="line">  &#125;],</span><br><span class="line">  ["minify-flip-comparisons",&#123;&#125;],// 精简翻转输出，基于重复的内容进行压缩算法优化，例如 gzip。bar !== null 转换为 null !== bar</span><br><span class="line">  ["minify-guarded-expressions",&#123;&#125;],// 精简守护表达式，针对 &amp;&amp;, ||，0 &amp;&amp; new Foo() 转换为 0</span><br><span class="line">  ["minify-infinity",&#123;&#125;],// 精简无穷大，Infinity 转换为 1/0</span><br><span class="line">  ["minify-mangle-names",&#123;&#125;],// 根据作用域精简一次性使用的变量名</span><br><span class="line">  ["minify-numeric-literals",&#123;&#125;],// 通过科学计数法精简数值字面量</span><br><span class="line">  ["minify-replace",&#123;// 用给定节点替换变量</span><br><span class="line">    "identifierName": null,// 待替换的变量名，如 __DEV__</span><br><span class="line">    "replacement": &#123;&#125;// 替换规则，如 &#123; type: "numericLiteral", value: 0, &#125;，效果是将 __DEV__ 转换为 0</span><br><span class="line">  &#125;],</span><br><span class="line">  ["minify-simplify",&#123;&#125;],// 简化，if (x) a(); 将转换为 x &amp;&amp; a()，Number(foo) 将转换为 +foo</span><br><span class="line">  ["minify-type-constructors",&#123;// 将构造函数转化为字面量，不推荐在 IE8 中使用</span><br><span class="line">    "array": true,// 是否启用 Array 构造函数</span><br><span class="line">    "boolean": true,// 是否启用 Boolean 构造函数</span><br><span class="line">    "number": true,// 是否启用 Number 构造函数</span><br><span class="line">    "object": true,// 是否启用 Object 构造函数</span><br><span class="line">    "string": true// 是否启用 String 构造函数</span><br><span class="line">  &#125;],</span><br><span class="line">  ["transform-node-env-inline",&#123;&#125;],// 将 process.env.NODE_ENV === "development"; 转换为 true | false</span><br><span class="line">  ["transform-property-literals",&#123;&#125;],// 对非关键字属性取出双引号</span><br><span class="line">  ["transform-regexp-constructors",&#123;&#125;],// 正则构造函数转换为正则表达式</span><br><span class="line">  ["transform-remove-console",&#123;&#125;],// 移除console</span><br><span class="line">  ["transform-remove-debugger",&#123;&#125;],// 移除debugger</span><br><span class="line">  ["simplify-comparison-operators",&#123;&#125;],// 当比较类型相同时，将 ===, !== 转换为 ==, !=</span><br><span class="line">  ["transform-undefined-to-void",&#123;&#125;],// 将 undefined 转换为 void 0</span><br><span class="line"></span><br><span class="line">  // react</span><br><span class="line">  ["transform-react-constant-elements",&#123;&#125;],// 将常量元素(作为返回值)提取到最外层，如 const Hr = () =&gt; &#123; return &lt;hr className="hr" /&gt;; &#125;; 将转换为 const _ref = &lt;hr className="hr" /&gt;; const Hr = () =&gt; &#123; return _ref; &#125;; 若元素包含 ...props 或 ref 属性，将不予转换</span><br><span class="line">  ["transform-react-display-name",&#123;&#125;],// react preset 包含</span><br><span class="line">  ["transform-react-inline-elements",&#123;&#125;],// 将 React.createElement 转换为 babelHelpers.jsx，如 &lt;Baz foo="bar" key="1"&gt;&lt;/Baz&gt;; 将转换为 babelHelpers.jsx(Baz, &#123; foo: "bar" &#125;, "1"); 若元素包含 ...props 或 ref 属性，将不予转换</span><br><span class="line">  ["transform-react-jsx",&#123;&#125;],// react preset 包含</span><br><span class="line">  ["transform-react-jsx-compat",&#123;&#125;],// 将 JSX 转换为 React Pre-0.12 函数，如 var profile = &lt;div&gt;&lt;img src="avatar.png" class="profile" /&gt;&lt;/div&gt;; 将转换为 var profile = React.DOM.div(null, React.DOM.img(&#123; src: "avatar.png", "class": "profile" &#125;) );</span><br><span class="line">  ["transform-react-jsx-self",&#123;&#125;],// JSX 元素中添加 __self 属性为 this，以便于 react 运行时报错</span><br><span class="line">  ["transform-react-jsx-source",&#123;&#125;],// JSX 元素中添加 __source 属性为 &#123; fileName: 'this/file.js', lineNumber: 10 &#125; 等，以便于 react 运行时报错</span><br><span class="line"></span><br><span class="line">  // 其他</span><br><span class="line">  ["transform-eval",&#123;&#125;],// eval("(() =&gt; 'foo')"); 将转换为 eval("(function () &#123; return 'foo'; &#125;)");</span><br><span class="line">  ["transform-flow-comments",&#123;&#125;],// 将 flow 类型说明转换为注释???</span><br><span class="line">  ["transform-flow-strip-types",&#123;&#125;],// react, flow preset 包含</span><br><span class="line">  ["transform-jscript",&#123;&#125;],// 将函数表达式通过自调用匿名函数赋值</span><br><span class="line">  ["transform-object-assign",&#123;&#125;],// 将 Object.assign 函数转换为 ... 语句，不适用于 const &#123; assign &#125; = Object场景</span><br><span class="line">  ["transform-object-set-prototype-of-to-assign",&#123;&#125;],// 将 Object.setPrototypeOf 转换为 ... 语句</span><br><span class="line">  ["transform-proto-to-assign",&#123;&#125;],// 对象 __proto__ 赋值转换为 ... 语句</span><br><span class="line">  ["transform-regenerator",&#123;&#125;],// es2015 包含</span><br><span class="line">  ["transform-runtime",&#123;// 无需通过污染全局对象调用最新的 api，模块需要注入 babel-runtime。参考文档：[tranform-runtime](https://babeljs.cn/docs/plugins/transform-runtime/)</span><br><span class="line">    "helpers": true,// 是否内置 classCallCheck, extends 等。模块为 babel-runtime/helpers</span><br><span class="line">    "polyfill": true,// 是否内置 Promise, Set, Map, Symbol 等。模块为 babel-runtime/core-js</span><br><span class="line">    "regenerator": true,// 是否内置生成器函数，async 函数。模块为 babel-runtime/regenerator</span><br><span class="line">    "moduleName": "babel-runtime"// 改变模块名，import 相应作改变</span><br><span class="line">  &#125;],// JSX 元素中添加 __self 属性为 this，以便于 react 运行时报错</span><br><span class="line">  ["transform-strict-mode",&#123;&#125;],// 转换为严格模式</span><br><span class="line">  ["external-helpers",&#123;&#125;],// 将 babel 中的 helpers 通过 babel-cli 导出为独立文件，然后在页面直接加载</span><br><span class="line"></span><br><span class="line">  // ant-design</span><br><span class="line">  [<span class="string">"babel-plugin-import"</span>,&#123;</span><br><span class="line">    <span class="attr">"libraryName"</span>: <span class="string">"antd"</span>,</span><br><span class="line">    <span class="attr">"style"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;],</span><br><span class="line">  [<span class="string">"babel-plugin-import"</span>,&#123;</span><br><span class="line">    <span class="attr">"libraryName"</span>: <span class="string">"antd-mobile"</span>,</span><br><span class="line">    <span class="attr">"style"</span>: <span class="string">"css"</span></span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="awesome-typescript-loader"><a href="#awesome-typescript-loader" class="headerlink" title="awesome-typescript-loader"></a>awesome-typescript-loader</h2><p>编译 typescript。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">      loader: <span class="string">'awesome-typescript-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        silent: <span class="literal">false</span>,<span class="comment">// 是否打印日志</span></span><br><span class="line">        compiler: <span class="string">'typescript'</span>,<span class="comment">// 选择编译器</span></span><br><span class="line">        useTranspileModule: <span class="literal">false</span>,<span class="comment">// 启用 transpileModule 模式???</span></span><br><span class="line">        instance: <span class="string">'at-loader'</span>,<span class="comment">// 使用多个编译器???</span></span><br><span class="line">        configFileName: <span class="string">'tsconfig.json'</span>,<span class="comment">// 配置文件名</span></span><br><span class="line">        transpileOnly: <span class="literal">false</span>,<span class="comment">// 置为真，跳过类型校验</span></span><br><span class="line">        errorsAsWarnings: <span class="literal">false</span>,<span class="comment">// 以警告方式对待错误</span></span><br><span class="line">        forceIsolatedModules: <span class="literal">false</span>,<span class="comment">// 模块不能包含依赖</span></span><br><span class="line">        ignoreDiagnostics: [],<span class="comment">// 跳过错误，如 [8014] 将跳过 stage-1 错误</span></span><br><span class="line">        useBabel: <span class="literal">false</span>,<span class="comment">// 使用 babel-loader</span></span><br><span class="line">        babelOptions: &#123;&#125;,<span class="comment">// 配置 babel-loader 选项</span></span><br><span class="line">        babelCore: <span class="literal">undefined</span>,<span class="comment">// @babel/core 路径。@babel/core 不在 node_modules 中需要配置；babel 7 需要配置为 "@babel/core"</span></span><br><span class="line">        useCache: <span class="literal">false</span>,<span class="comment">// 使用缓存，提升速度，供 babel-loader 使用</span></span><br><span class="line">        usePrecompiledFiles: <span class="literal">false</span>,<span class="comment">// 启用预编译文件</span></span><br><span class="line">        cacheDirectory: <span class="string">'.awcache'</span>,<span class="comment">// 缓存目录</span></span><br><span class="line">        reportFiles: []<span class="comment">// 诊断报道???，如 [ "src/**/*.&#123;ts,tsx&#125;" ]</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="vue-loader"><a href="#vue-loader" class="headerlink" title="vue-loader"></a>vue-loader</h2><p>编译 vue 组件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.vue?$/</span>,</span><br><span class="line">      loader: <span class="string">'awesome-typescript-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        loaders: &#123;<span class="comment">// 组件各部分加载器</span></span><br><span class="line">          js: <span class="string">'babel-loader!eslint-loader'</span>,</span><br><span class="line">          template: <span class="string">'html-loader'</span>,</span><br><span class="line">          css: <span class="string">'style-loader!css-loader!less-loader'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        preLoaders: &#123;&#125;,<span class="comment">// 在 loaders 之前处理</span></span><br><span class="line">        postLoaders: &#123;&#125;,</span><br><span class="line">        postcss: [],<span class="comment">// 指定要应用于 .vue 文件中 CSS 的自定义 PostCSS 插件。在 11.0.0+ 版本中，推荐使用 PostCSS 配置文件代替。也可使用对象配置，如 &#123; plugins: [...],  options: &#123; parser: 'sugarss' &#125;, config: &#123; path: path.resolve('./src') &#125;, useConfigFile: false &#125;，config.path 指定加载 PostCSS 配置文件的路径或目录，config.ctx 指定为 PostCSS 插件提供的上下文，useConfigFile 是否禁用配置文件</span></span><br><span class="line">        cssSourceMap: <span class="literal">false</span>,<span class="comment">// 是否开启 CSS 的 source maps，关闭可提升编译速度，避免 css-loader 的 some relative path related bugs。webpack 配置中没有 devtool 的情况下自动设置为 false</span></span><br><span class="line">        esModule: <span class="literal">false</span>,<span class="comment">// 是否导出兼容 esModule 的代码。默认导出 commonjs 格式，像 module.exports = ....。esModule 为真时，导出 exports.__esModule = true; exports = ...，适用于与 Babel 以外的 transpiler 互操作，比如 TypeScript</span></span><br><span class="line">        preserveWhitespace: <span class="literal">true</span>,<span class="comment">// 置为否值，模版中 HTML 标签之间的空格将会被忽略</span></span><br><span class="line">        compilerModules: [],<span class="comment">// 为 vue-template-compiler 配置 modules 选项</span></span><br><span class="line">        compilerDirectives: [],<span class="comment">// 为 vue-template-compiler 配置 directives 选项</span></span><br><span class="line">        transformToRequire: &#123; <span class="attr">img</span>: <span class="string">'src'</span>, <span class="attr">image</span>: <span class="string">'xlink:href'</span> &#125;,<span class="comment">// 在模版编译过程中，编译器可以将某些属性，如 src 路径，转换为 require 调用。供 html-loader 使用</span></span><br><span class="line">        buble: &#123;&#125;,<span class="comment">// 配置 buble-loader 的选项 (如果存在)，并且 buble 编译传递模板渲染函数???</span></span><br><span class="line">        extractCSS: <span class="literal">true</span>,<span class="comment">// 使用 extract-text-webpack-plugin 自动提取 CSS。值可以为真，或 ExtractTextPlugin 插件的一个实例</span></span><br><span class="line">        optimizeSSR: <span class="literal">false</span><span class="comment">// 渲染函数将会把返回的 vdom 树的一部分编译为字符串，适用于服务器端渲染</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="style-loader"><a href="#style-loader" class="headerlink" title="style-loader"></a>style-loader</h2><p>配合 css-loader 一起使用。style-loader 用于将样式以 style 标签注入到页面中，同时 import 时将生成类名的 hash 值(标识符)对象；style-loader/url 模块将以 link 注入到页面中。style-loader/useable 模块将延迟注入页面，直到 import style from ‘./file.css’; style.use();// =style.ref() 中 use, ref 方法被调用时，才注入到页面中。当调用unuse, unref 方法时，将从页面上删除。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123; </span><br><span class="line">            loader: <span class="string">"style-loader"</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              base: <span class="literal">true</span>,<span class="comment">// 设置模块 ID 基础，生成 ID 大于该值。当使用 DllPlugin 编译 css 时，用于避免多个编译结果的 ID 冲突，实现是 多个编译配置设置不同的 ID 范围值</span></span><br><span class="line">              attrs: &#123;&#125;,<span class="comment">// 添加自定义属性到注入页面的 style, link 标签中</span></span><br><span class="line">              transform: <span class="literal">false</span>,<span class="comment">// 转换/条件加载 CSS，通过传递转换/条件函数。用于载入页面前修改 css，函数返回 false 将不会加载 css 。配置如 css =&gt; css.replace('.classNameA', '.classNameB')。transform 也可配置为脚本的路径</span></span><br><span class="line">              insertAt: <span class="string">"bottom"</span>,<span class="comment">// 在给定位置插入 style 节点，可选值 "bottom", "top"</span></span><br><span class="line">              insertInto: <span class="string">"&lt;head&gt;"</span>,<span class="comment">// 在给定标签处插入 style 节点，值可以是 css 选择器，或 ShadowRoot???</span></span><br><span class="line">              singleton: <span class="literal">true</span>,<span class="comment">// 重用 style 标签插入 css 脚本，否则每个样式文件插入一个 style 标签</span></span><br><span class="line">              sourceMap: <span class="literal">false</span>,<span class="comment">// 是否启用 SourceMap，css 脚本将生成 Blob，相对路径将无法正常工作。解决方法是设置 publicPath 属性或将 convertToAbsoluteUrls 置为真???</span></span><br><span class="line">              convertToAbsoluteUrls: <span class="literal">false</span><span class="comment">// 启用 SourceMap 后，将相对 url 转换为绝对 url</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">"css-loader"</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.url\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">"style-loader/url"</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">"css-loader"</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.useable\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"style-loader/useable"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">"css-loader"</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h2><p>用于解析 css 脚本中的 @import, url() 语句，附加的资源文件调用 import, require 加载并解析。import, url() 语句解析时，根据 webpack 配置将调用对应的 file-loader, url-loader 加载器。因此 css-loader 基于 file-loader, url-loader 加载器。</p>
<p>可以直接将 css-loader 的结果作为字符串使用，例如 Angular 的组件样式???。如果有 SourceMap，它们也将包含在字符串结果中。</p>
<p>对使用 extract-text-webpack-plugin 预渲染的场景，应使用 css-loader/locals，而不是 style-loader!css-loader。它不会嵌入 CSS，但只导出标识符映射；由 extract-text-webpack-plugin 提取 css 后，再通过 link 标签嵌入页面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 'css-loader' 导入资源转化为字符串，由开发者在页面中添加 link 标签后使用</span></span><br><span class="line">&#123;</span><br><span class="line">   test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">   use: [</span><br><span class="line">     <span class="string">'to-string-loader'</span>,</span><br><span class="line">     <span class="string">'css-loader'</span></span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">const</span> css = <span class="built_in">require</span>(<span class="string">'./test.css'</span>).toString();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">&#123;</span><br><span class="line">   test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">   use: [</span><br><span class="line">     <span class="string">'file-loader?name=[name].[ext]'</span></span><br><span class="line">     <span class="string">'handlebars-loader'</span>, <span class="comment">// handlebars loader expects raw resource string</span></span><br><span class="line">     <span class="string">'extract-loader'</span>,<span class="comment">// 将 html, css 提取为纯粹的字符串，通过 handlebars 处理，由 file 注入页面</span></span><br><span class="line">     &#123;</span><br><span class="line">       loader: <span class="string">'css-loader'</span>,</span><br><span class="line">       options: &#123;</span><br><span class="line">         root: <span class="string">"/"</span>,<span class="comment">// 以 / 开头的 URL 默认不会被转译，设置 root 为 "."，将 /image.png 转换为 ./image.png</span></span><br><span class="line">         url: <span class="literal">true</span>,<span class="comment">// 是否编译 css 文件中 url() 语句</span></span><br><span class="line">         alias: &#123;&#125;,<span class="comment">// 别名，便于 import 导入</span></span><br><span class="line">         <span class="keyword">import</span>: <span class="literal">true</span>,<span class="comment">// 是否编译 css 文件中 @import 语句</span></span><br><span class="line">         modules: <span class="literal">false</span>,<span class="comment">// 是否启用 css-modules</span></span><br><span class="line">         minimize: <span class="literal">false</span>,<span class="comment">// 是否启用压缩，压缩通过 cssnano 实现。[cssnano 文档](http://cssnano.co/guides/)</span></span><br><span class="line">         sourceMap: <span class="literal">false</span>,<span class="comment">// 是否启用SourceMap</span></span><br><span class="line">         camelCase: <span class="literal">false</span>,<span class="comment">// 以驼峰化式类名导出类名。可选值有 true 类名将被驼峰化，'dashes' 只有破折号被驼峰化，'only' 类名将被驼峰化，初始类名从映射中移除，'dashesOnly' 只有破折号被驼峰化，初始类名从映射中移除</span></span><br><span class="line">         importLoaders: <span class="number">0</span>,<span class="comment">// 在 css-loader 前应用的加载器数量。css-loader 前有 postcss-loader 时，设置为 1；css-loader 前有 postcss-loader, sass-loader，设置为 2</span></span><br><span class="line">         localIdentName: [hash:base64],<span class="comment">// 配置生成的标识符，import style from 'a.css' 加载时，作为style 属性的值，如 '[path][name]__[local]--[hash:base64:5]'</span></span><br><span class="line">         getLocalIdent: <span class="literal">false</span>,<span class="comment">// 指定生成标识符的函数，如 (context, localIdentName, localName, options) =&gt; &#123; return 'whatever_random_class_name' &#125;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">const</span> css = <span class="built_in">require</span>(<span class="string">'./test.css'</span>).toString();</span><br></pre></td></tr></table></figure>
<h3 id="css-modules"><a href="#css-modules" class="headerlink" title="css-modules"></a>css-modules</h3><p>启用启用 css-modules 时，会产生局部作用域 CSS，使用 :global(…) 或 :global 设置为全局作用域，类名将不会转换为标识符；使用 :local(…) 或 :locale 设置为局部，类名将转换为标识符。局部作用域的类名建议使用驼峰式书写。</p>
<p>样式属性中可使用 composes 属性，用于向一个类注入另一个类(该类可以是另一个 css 文件中的类)的样式。一个类下，composes 属性可设置多个。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// :local 为局部作用域，类名将转换为标识符，import 加载时生成映射形式；:global为全局作用域，类名保持不变</span><br><span class="line"><span class="selector-pseudo">:local(.className)</span> &#123;</span><br><span class="line">  <span class="attribute">composes</span>: edit hightlight from <span class="string">'./edit.css'</span>;</span><br><span class="line">  <span class="attribute">composes</span>: button from <span class="string">'module/button.css'</span>;</span><br><span class="line">  <span class="attribute">composes</span>: classFromThisModule;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:local(.subClass)</span> &#123;</span><br><span class="line">  <span class="attribute">composes</span>: className;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:local</span> <span class="selector-class">.className</span> <span class="selector-class">.subClass</span> <span class="selector-pseudo">:global(.global-class-name)</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br></pre></td></tr></table></figure>
<h2 id="postcss-loader"><a href="#postcss-loader" class="headerlink" title="postcss-loader"></a>postcss-loader</h2><p>对 css 文件自动拼接浏览器兼容性前缀等。参考文档：<a href="https://github.com/postcss/postcss-loader。" target="_blank" rel="noopener">https://github.com/postcss/postcss-loader。</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.style.js$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        <span class="string">'style-loader'</span>,</span><br><span class="line">        &#123; <span class="attr">loader</span>: <span class="string">'css-loader'</span>, <span class="attr">options</span>: &#123; <span class="attr">importLoaders</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">        &#123; </span><br><span class="line">          loader: <span class="string">'postcss-loader'</span>, </span><br><span class="line">          options: &#123; </span><br><span class="line">            parser: <span class="literal">undefined</span>,<span class="comment">// 设置 PostCSS 解析器，可选值 'sugarss'，可配置为函数</span></span><br><span class="line">            syntax: <span class="literal">undefined</span>,<span class="comment">// 设置 PostCSS 语法解析器，可选值 'sugarss'，可配置为函数</span></span><br><span class="line">            stringifier: <span class="literal">undefined</span>,<span class="comment">// 设置 PostCSS 字符串化，可选值 'midas'，可配置为函数</span></span><br><span class="line">            exec: <span class="literal">true</span>,<span class="comment">// 将 css-in-js 编译为 css</span></span><br><span class="line">            config: &#123;</span><br><span class="line">              path: <span class="literal">undefined</span>,<span class="comment">// postcss.config.js 文件路径，默认自动从 css 文件目录向上查找</span></span><br><span class="line">              ctx: &#123;<span class="comment">// postcss 配置的上下文，传入 postcss.config.js</span></span><br><span class="line">                env: <span class="string">'development'</span>,<span class="comment">// process.env.NODE_ENV</span></span><br><span class="line">                file: loader.resourcePath,<span class="comment">// 包含 extname扩展名, dirname目录名, basename文件名</span></span><br><span class="line">                options: &#123;&#125;<span class="comment">// 选项</span></span><br><span class="line">                ...<span class="comment">// 其余参数</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            plugins: [],<span class="comment">// 可配置为函数形式，如(loader) =&gt; [ require('postcss-import')(&#123; root: loader.resourcePath &#125;), require('postcss-cssnext')(), require('autoprefixer')(), require('cssnano')() ]</span></span><br><span class="line">            sourceMap: <span class="literal">false</span><span class="comment">// 是否启用 SourceMap，可选值 true, "inline"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line"></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// postcss.config.js 依旧生成 postcss-loader 选项</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">&#123; file, options, env &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">  parser: file.extname === <span class="string">'.sss'</span> ? <span class="string">'sugarss'</span> : <span class="literal">false</span>,</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    <span class="string">'postcss-import'</span>: &#123; <span class="attr">root</span>: file.dirname &#125;,</span><br><span class="line">    <span class="string">'postcss-cssnext'</span>: options.cssnext ? options.cssnext : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">'autoprefixer'</span>: env == <span class="string">'production'</span> ? options.autoprefixer : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">'cssnano'</span>: env === <span class="string">'production'</span> ? options.cssnano : <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// style.js</span></span><br><span class="line"><span class="keyword">import</span> colors <span class="keyword">from</span> <span class="string">'./styles/colors'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="string">'.menu'</span>: &#123;</span><br><span class="line">      color: colors.main,</span><br><span class="line">      height: <span class="number">25</span>,</span><br><span class="line">      <span class="string">'&amp;_link'</span>: &#123;</span><br><span class="line">      color: <span class="string">'white'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="less-loader"><a href="#less-loader" class="headerlink" title="less-loader"></a>less-loader</h2><p>将 less 文件编译成 css 文件。less 插件会作为 less-loader 的 peerDependency，因此安装 less-loader 的时候会自动安装 less 插件。</p>
<p>less-loader 4 起，查询文件可通过 webpack resolver 或 less 内置的 resolver。less-loader 应用一个 Less 插件，并且将所有查询参数传递给 webpack resolver。需要从 node_modules 导入 less 模块时，只要加一个 ~ 前缀，如 @import “~bootstrap/less/bootstrap”; 。使用 webpack resolver，可以引入任何导出 less 的文件，如 “js-to-less-loader” 导出的文件，与此同时，需要使用 issuer 属性约定请求资源的脚本文件名，如 issuer: /.less$/。</p>
<p>当 options 配置 paths 属性时，将使用 less 内置的 resolver 去查询文件。paths 属性以数组形式配置绝对路径。</p>
<p>options 配置参考 <a href="http://lesscss.org/usage/#command-line-usage-options" target="_blank" rel="noopener">less options</a>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [&#123;</span><br><span class="line">    test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">    use: [&#123;</span><br><span class="line">      loader: <span class="string">"style-loader"</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      loader: <span class="string">"css-loader"</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      loader: <span class="string">"less-loader"</span>, </span><br><span class="line">      options: &#123;</span><br><span class="line">        strictMath: <span class="literal">false</span>,<span class="comment">// 是否直接输出数学计算值</span></span><br><span class="line">        strictUnits: <span class="literal">false</span>,<span class="comment">// 是否支持 1px * 2px 运算，单位通过猜测获得</span></span><br><span class="line">        globalVar: &#123;&#125;,<span class="comment">// 全局变量</span></span><br><span class="line">        modifyVar: &#123;&#125;,<span class="comment">// 在 less 文件可改变的变量</span></span><br><span class="line">        paths: [],<span class="comment">// less 文件查找路径，如 [ path.resolve(__dirname, "node_modules") ]</span></span><br><span class="line">        plugins: [],<span class="comment">// 设置插件，如 [ new CleanCSSPlugin(&#123; advanced: true &#125;) ]</span></span><br><span class="line">        sourceMap: <span class="literal">false</span><span class="comment">// 是否启用 SourceMap，可选值 true, "inline"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      issuer: <span class="regexp">/\.less$/</span>,</span><br><span class="line">      use: [&#123;</span><br><span class="line">        loader: <span class="string">"js-to-less-loader"</span></span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="sass-loader"><a href="#sass-loader" class="headerlink" title="sass-loader"></a>sass-loader</h2><p>将 scss 文件编译成 css 文件。node-sass 插件会作为 sass-loader 的 peerDependency，因此安装 sass-loader 的时候会自动安装 node-sass 插件。</p>
<p>options 配置参考 <a href="http://lesscss.org/usage/#command-line-usage-options" target="_blank" rel="noopener">node-sass</a>。</p>
<p>sass-loader 中，url(…) 语法将相对于网站的根目录查找(没有 css-loader)，或相对 scss 文件查找(有 css-loader)。有 css-loader 场景，可通过 resolve-url-loader 加载器获得相对 scss 文件的 url。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">      use: [&#123;</span><br><span class="line">        loader: <span class="string">"style-loader"</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        loader: <span class="string">"css-loader"</span></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        loader: <span class="string">"sass-loader"</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          includePaths: [],<span class="comment">// 文件路径，如 ["absolute/path/a", "absolute/path/b"]</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="dynamic-css-loader"><a href="#dynamic-css-loader" class="headerlink" title="dynamic-css-loader"></a>dynamic-css-loader</h2><p>对 css 文件中的 import 语句，采用动态加载的方式。结合 extract-text-webpack-plugin, file-loader, extract-loader 使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/.../</span>,</span><br><span class="line">  use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">    use: [ ... ],</span><br><span class="line">    fallback: [</span><br><span class="line">      <span class="string">'dynamic-css-loader'</span>,</span><br><span class="line">      <span class="string">'file-loader'</span>,</span><br><span class="line">      <span class="string">'extract-loader'</span>,</span><br><span class="line">    ],</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h2 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h2><p>支持 import, require 加载文件，返回文件的 url。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'file-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            name: [hash].[ext],<span class="comment">// 文件名，模板字符串，支持占位符 ext 扩展名，name 文件名，path 相对于 context 的路径，hash 哈希值，N 当前文件名按照查询参数 regExp 匹配后获得到第 N 个匹配结果，等</span></span><br><span class="line">            context: <span class="keyword">this</span>.options.context,<span class="comment">// 文件查找的基本路径，默认为 webpack 配置项的 context</span></span><br><span class="line">            publicPath: __webpack_public_path__,<span class="comment">// 文件的 public path，默认为 webpack 配置项的 publicPath</span></span><br><span class="line">            outputPath: <span class="literal">undefined</span>,<span class="comment">// 文件导出目录</span></span><br><span class="line">            useRelativePath: <span class="literal">false</span>,<span class="comment">// 设置为真值时，生成 url 相对于 context</span></span><br><span class="line">            emitFile: <span class="literal">true</span><span class="comment">// 为真值时处理文件，为否值只获取 url</span></span><br><span class="line">          &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h2><p>基本功能同 file-loader，但当文件不大时，以 DataUrl 形式嵌入 html 页面中，避免请求服务器资源。DataUrl 主要实现为，将图片编码为 base64，存储在 url 中，并冠以 mime-type。base64 编码的数据体积通常是原数据的体积 4/3，且不会被浏览器缓存。缓存问题可通过 css 背景图片解决，图片资源嵌入 url(…) 语句，随 css 文件一同缓存在浏览器端。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="literal">undefined</span>,<span class="comment">// 文件大于 limit 值，使用 file-loader 加载；小于，使用 url-loader，如 limit: 8192</span></span><br><span class="line">              mimetype: <span class="string">"extname"</span>,<span class="comment">// 设置文件的 mime-type，默认通过扩展名获取</span></span><br><span class="line">              prefix: <span class="literal">false</span><span class="comment">// 提供给 file-loader 使用</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="html-loader"><a href="#html-loader" class="headerlink" title="html-loader"></a>html-loader</h2><p>处理 html 文件中的图片链接 img:src 等属性，需要结合 url-loader, file-loader 使用。</p>
<p>html-loader 只作字符处理，如 ‘Text <img src="image.png"><img src="~bootstrap-img"> Text’ 将转换为 ‘module.exports = “Text &lt;img src=\“” + require(“./image.png”) + “\“&gt;&lt;img src=\“” + require(“bootstrap-img”) + “\“&gt; Text”;’</p>
<p>因此，若要导出 html 页面，需要配合 file-loader, extract-loader 使用。extract-loader 将 js 转换为 html，file-loader 输出 html 文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// html-loader 加载器选项，也可以设置在 webpackConfig 的 htmlLoader, otherHtmlLoaderConfig 属性中，加载时指定 config，如 html-loader?config=otherHtmlLoaderConfig</span></span><br><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(html)$/</span>,</span><br><span class="line">  use: &#123;</span><br><span class="line">    loader: <span class="string">'html-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      attrs: [<span class="string">'img:src'</span>],<span class="comment">// 待处理的标签，如 ':data-src'。设置为 false，禁用对标签属性的处理。设置为 'img:src'，url-loader, file-loader 导出的链接赋值给 src 属性；设置为 ':data-src'，url-loader, file-loader 导出的链接赋值给 data-src 属性</span></span><br><span class="line">      minimize: <span class="literal">false</span>,<span class="comment">// 最小化输出</span></span><br><span class="line">      removeComments: <span class="literal">false</span>,<span class="comment">// 最小化选项</span></span><br><span class="line">      removeCommentsFromCDATA: <span class="literal">false</span>,</span><br><span class="line">      removeCDATASectionsFromCDATA: <span class="literal">false</span>,</span><br><span class="line">      collapseWhitespace: <span class="literal">false</span>,</span><br><span class="line">      conservativeCollapse: <span class="literal">false</span>,</span><br><span class="line">      removeAttributeQuotes: <span class="literal">false</span>,</span><br><span class="line">      useShortDoctype: <span class="literal">false</span>,</span><br><span class="line">      keepClosingSlash: <span class="literal">false</span>,</span><br><span class="line">      minifyJS: <span class="literal">false</span>,</span><br><span class="line">      minifyCSS: <span class="literal">false</span>,</span><br><span class="line">      removeScriptTypeAttributes: <span class="literal">false</span>,</span><br><span class="line">      removeStyleTypeAttributes: <span class="literal">false</span>,</span><br><span class="line">      root: <span class="literal">false</span>,<span class="comment">// 设置为 true 时，&lt;img src="/image.jpg"&gt; 中 src 属性将自动拼接网站根目录</span></span><br><span class="line">      interpolate: <span class="literal">false</span>,<span class="comment">// 设置为 true 时，自动转换 es6 模板字符串 $&#123;&#125;；设置为 'require'，只能在模板内使用 require。如 &lt;#list list as list&gt;&lt;a href="$&#123;list.href!&#125;" /&gt;$&#123;list.name&#125;&lt;/a&gt;&lt;/#list&gt;</span></span><br><span class="line">      exportAsDefault: <span class="literal">false</span>,<span class="comment">// 以 es5 格式导出 exports.default = "Hello world"; 默认导出格式为 module.exports = "Hello world";</span></span><br><span class="line">      exportAsEs6Default: <span class="literal">false</span>,<span class="comment">// 以 es6 格式导出 export default "Hello world";</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="raw-loader"><a href="#raw-loader" class="headerlink" title="raw-loader"></a>raw-loader</h2><p>将文件导入为字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.txt$/</span>,</span><br><span class="line">  loader: <span class="string">'raw-loader'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="i18n-loader"><a href="#i18n-loader" class="headerlink" title="i18n-loader"></a>i18n-loader</h2><p>将所有语言包加载到一个对象中，并根据 window.navigator.userLanguage 或 window.navigator.language 区分语言包。i18n/choose 模块用于选择正确的语言包，i18n/concat 模块将拼接所有合适的地区，i18n/merge 将所有语言包合并到对象中，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> locale = <span class="built_in">require</span>(<span class="string">"./colors.i18.json"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待准备就绪，在一个 web 项目中所有地区只需要一次</span></span><br><span class="line"><span class="comment">// 因为所有地区的语言被合并到一个块中</span></span><br><span class="line">locale(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(locale);<span class="comment">// 打印语言包</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.i18$/</span>,</span><br><span class="line">  use: [&#123;</span><br><span class="line">    loader: <span class="string">'i18n-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      locales: [],<span class="comment">// 将所有语言包打包到一个对象中，如 [ "de", "de-de", "fr" ]，同时开启同步加载模式</span></span><br><span class="line">      bundleTogether: <span class="literal">false</span><span class="comment">// 是否禁止所有语言包打包在一起</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    loader: <span class="string">'json-loader'</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="json-loader"><a href="#json-loader" class="headerlink" title="json-loader"></a>json-loader</h2><p>webpack 2 起，将自动导入json。若使用不同的扩展名，仍可使用 json-loader 导入 json 数据。</p>
<h2 id="json5-loader"><a href="#json5-loader" class="headerlink" title="json5-loader"></a>json5-loader</h2><p>用于导入 json5 文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.json5$/</span>,</span><br><span class="line">  loader: <span class="string">'json5-loader'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="svg-inline-loader"><a href="#svg-inline-loader" class="headerlink" title="svg-inline-loader"></a>svg-inline-loader</h2><p>用于导入 svg。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.svg$/</span>,</span><br><span class="line">  use: [&#123;</span><br><span class="line">    loader: <span class="string">'svg-inline-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      removeTags: <span class="literal">false</span>,<span class="comment">// 删除指定的标签和它的子元素，布尔型</span></span><br><span class="line">      removingTags: [],<span class="comment">// 待删除的标签，需要 removeTags 属性置为真，如 ['title', 'desc', 'defs', 'style']</span></span><br><span class="line">      warnTags: [],<span class="comment">// 警告标签</span></span><br><span class="line">      removeSVGTagAttrs: <span class="literal">true</span>,<span class="comment">// 是否删除 &lt;svg /&gt; 的 width 和 height 属性</span></span><br><span class="line">      removingTagAttrs: [],<span class="comment">// 删除内部的 &lt;svg /&gt;的属性</span></span><br><span class="line">      warnTagAttrs: [],<span class="comment">// 在console发出关于内部 &lt;svg /&gt; 属性的警告</span></span><br><span class="line">      classPrefix: <span class="literal">false</span>,<span class="comment">// svg 标签 class 添加前缀，避免命名冲突，可选值 true 或 字符串</span></span><br><span class="line">      idPrefix: <span class="literal">false</span><span class="comment">// svg 标签 id 添加前缀，避免命名冲突，可选值 true 或 字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="null-loader"><a href="#null-loader" class="headerlink" title="null-loader"></a>null-loader</h2><p>使打包文件不包含部分类库额外引入的依赖。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: path.resolve(__dirname, <span class="string">'node_modules/library/polyfill.js'</span>),</span><br><span class="line">  loader: <span class="string">'null-loader'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="bundle-loader"><a href="#bundle-loader" class="headerlink" title="bundle-loader"></a>bundle-loader</h2><p>通过 require.ensure 方法实现文件的异步加载，设置回调对文件作处理，回调可设置多个。当文件加载完成后，执行回调；当回调在文件加载完成后添加，立即执行回调。为了同其他脚本作区分，配置时 test 属性可设置为 /.bundle.js$/。效果如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> load <span class="keyword">from</span> <span class="string">'test.bundle.js'</span>;</span><br><span class="line"></span><br><span class="line">load(<span class="function"><span class="params">file</span> =&gt;</span> &#123;&#125;);<span class="comment">// 首次调用文件后加载回调</span></span><br></pre></td></tr></table></figure>
<h2 id="coffee-loader"><a href="#coffee-loader" class="headerlink" title="coffee-loader"></a>coffee-loader</h2><p>编译 CoffeeScript。选项包含 literate = false 编译在 Markdown 中书写的 CoffeeScript 脚本，sourceMap = false 是否启用 source-map，transpile = false 配置 babel-preset 及 babel-plugin。</p>
<h2 id="coffee-redux-loader"><a href="#coffee-redux-loader" class="headerlink" title="coffee-redux-loader"></a>coffee-redux-loader</h2><p>编译 CoffeeScript。终极版???</p>
<h2 id="jshint-loader"><a href="#jshint-loader" class="headerlink" title="jshint-loader"></a>jshint-loader</h2><p>jshint 语法检查。jshint-loader 选项配置参考：<a href="http://jshint.com/docs/options/。" target="_blank" rel="noopener">http://jshint.com/docs/options/。</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      enforce: <span class="string">"pre"</span>, <span class="comment">// 预先加载 jshint loader</span></span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      use: [&#123;</span><br><span class="line">        loader: <span class="string">"jshint-loader"</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          camelcase: <span class="literal">true</span>,</span><br><span class="line">          emitErrors: <span class="literal">false</span>,<span class="comment">// jshint 默认显示警告类信息，emitErrors设为 true 将置为错误类信息</span></span><br><span class="line">          failOnHint: <span class="literal">false</span>,<span class="comment">// 设置为真值时，jshint 报错将打断 webpack 函数</span></span><br><span class="line">          reporter: <span class="function"><span class="keyword">function</span>(<span class="params">errors</span>) </span>&#123; &#125;<span class="comment">// 自定义报告函数，errors 为数组形式 [&#123; id, code, reason, evidence, line, character, scope &#125;]; 其中，reason 为错误消息，evidence 为错误编码，scope 为消息作用域。函数中，调用 this.emitWarning(...) 或 this.emitError(...) 显示消息。由 webpack 提供上下文 this</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="mocha-loader"><a href="#mocha-loader" class="headerlink" title="mocha-loader"></a>mocha-loader</h2><p>加载时运行 mocha 测试。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  rules: [&#123;</span><br><span class="line">    test: <span class="regexp">/test\.js$/</span>,</span><br><span class="line">    use: <span class="string">'mocha-loader'</span>,</span><br><span class="line">    exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="istanbul-instrumenter-loader"><a href="#istanbul-instrumenter-loader" class="headerlink" title="istanbul-instrumenter-loader"></a>istanbul-instrumenter-loader</h2><p>加载时运行 karam 测试。</p>
<p>参考文档：<br><a href="https://github.com/webpack-contrib/karma-webpack" target="_blank" rel="noopener">karma-webpack</a><br><a href="https://github.com/mattlewis92/karma-coverage-istanbul-reporter" target="_blank" rel="noopener">karma-coverage-istanbul-reporter</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$|\.jsx$/</span>,</span><br><span class="line">  use: &#123;</span><br><span class="line">    loader: <span class="string">'istanbul-instrumenter-loader'</span>,</span><br><span class="line">    options: &#123; </span><br><span class="line">      debug: <span class="literal">false</span>,<span class="comment">// 开启 debug 模式</span></span><br><span class="line">      compact: <span class="literal">true</span>,<span class="comment">// 生成压缩后代码</span></span><br><span class="line">      autoWrap: <span class="literal">false</span>,<span class="comment">// 函数外是否允许返回语句</span></span><br><span class="line">      esModules: <span class="literal">false</span>,<span class="comment">// ES2015 书写代码</span></span><br><span class="line">      coverageVariable: <span class="string">'__coverage__'</span>,<span class="comment">// 全局覆盖率变量名</span></span><br><span class="line">      preserveComments: <span class="literal">false</span>,<span class="comment">// 输出中保留注释</span></span><br><span class="line">      produceSourceMap: <span class="literal">false</span>,<span class="comment">// 生成 source-map</span></span><br><span class="line">      sourceMapUrlCallback: <span class="literal">null</span><span class="comment">// source-map url 查询后的回调</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  enforce: <span class="string">'post'</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules|\.spec\.js$/</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="coverjs-loader"><a href="#coverjs-loader" class="headerlink" title="coverjs-loader"></a>coverjs-loader</h2><p>用于测试???</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// cover-my-client-tests.js</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./my-client-tests"</span>);</span><br><span class="line"></span><br><span class="line">after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">"cover-loader"</span>).reportHtml();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="exports-loader"><a href="#exports-loader" class="headerlink" title="exports-loader"></a>exports-loader</h2><p>exports 插入属性，或者赋值 module.exports。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"exports-loader?file,parse=helpers.parse!./file.js"</span>);</span><br><span class="line"><span class="comment">// adds below code to the file's source:</span></span><br><span class="line"><span class="comment">//  exports["file"] = file;</span></span><br><span class="line"><span class="comment">//  exports["parse"] = helpers.parse;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"exports-loader?file!./file.js"</span>);</span><br><span class="line"><span class="comment">// adds below code to the file's source:</span></span><br><span class="line"><span class="comment">//  module.exports = file;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"exports-loader?[name]!./file.js"</span>);</span><br><span class="line"><span class="comment">// adds below code to the file's source:</span></span><br><span class="line"><span class="comment">//  module.exports = file;</span></span><br></pre></td></tr></table></figure>
<h2 id="expose-loader"><a href="#expose-loader" class="headerlink" title="expose-loader"></a>expose-loader</h2><p>暴露全局变量，注入到 global 对象中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"expose-loader?$!jquery"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [&#123;</span><br><span class="line">    test: <span class="built_in">require</span>.resolve(<span class="string">'jquery'</span>),</span><br><span class="line">    use: [&#123;</span><br><span class="line">      loader: <span class="string">'expose-loader'</span>,</span><br><span class="line">      options: <span class="string">'jQuery'</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      loader: <span class="string">'expose-loader'</span>,</span><br><span class="line">      options: <span class="string">'$'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="imports-loader"><a href="#imports-loader" class="headerlink" title="imports-loader"></a>imports-loader</h2><p>自动为文件注入局部变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [&#123;</span><br><span class="line">    test: <span class="regexp">/test\/.js/</span></span><br><span class="line">    use: [&#123;</span><br><span class="line">      loader: <span class="string">'imports-loader'</span>,</span><br><span class="line">      options: &#123;&#125;<span class="comment">// 注入变量，如 &#123; angular: true &#125; 将注入 angular 类库；&#123; $: 'jquery' &#125; 将注入 jquery；&#123; config: '&gt;&#123; size: 50 &#125;' &#125; 将赋值 config = &#123; size: 50 &#125; 等</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="gzip-loader"><a href="#gzip-loader" class="headerlink" title="gzip-loader"></a>gzip-loader</h2><p>加载 gzip 压缩资源。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.gz$/</span>,</span><br><span class="line">        enforce: <span class="string">'pre'</span>,</span><br><span class="line">        use: <span class="string">'gzip-loader'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="yaml-frontmatter-loader"><a href="#yaml-frontmatter-loader" class="headerlink" title="yaml-frontmatter-loader"></a>yaml-frontmatter-loader</h2><p>将 yaml 转化为 json。</p>
<h2 id="react-proxy-loader"><a href="#react-proxy-loader" class="headerlink" title="react-proxy-loader"></a>react-proxy-loader</h2><p>通过 require.ensure 按需加载文件组件。组件实例 mixins 属性注入代理组件 require(‘react-proxy-loader!./a.js’).Mixin，在当前组件中调用loadComponent 即可获取 a.js 导出的组件，a.js 文件尚未加载完成，调用开发者配置的 renderUnavailable 方法进行渲染。或者，直接将 require(‘react-proxy-loader!./a.js’) 作为组件使用，a.js 文件尚未加载完成，render 方法返回 null。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Component = <span class="built_in">require</span>(<span class="string">"react-proxy-loader!./Component"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ComponentProxyMixin = <span class="built_in">require</span>(<span class="string">"react-proxy-loader!./Component"</span>).Mixin;</span><br><span class="line"><span class="keyword">var</span> ComponentProxy = React.createClass(&#123;</span><br><span class="line">	mixins: [ComponentProxyMixin],</span><br><span class="line">	renderUnavailable: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="script-loader"><a href="#script-loader" class="headerlink" title="script-loader"></a>script-loader</h2><p>在全局上下文中执行一次 js 脚本，加载时即执行。</p>
<h2 id="source-map-loader"><a href="#source-map-loader" class="headerlink" title="source-map-loader"></a>source-map-loader</h2><p>从 js 入口文件中提取 source-map 文件(该文件的内容由 webpackConfig devtool 配置项限定)。可设置 include, exclude 选项。</p>
<h2 id="cache-loader"><a href="#cache-loader" class="headerlink" title="cache-loader"></a>cache-loader</h2><p>在性能开销较大的 loader 前加载 cache-loader，可以将编译结果缓存到磁盘中，如 babel-loader 前。options 有 cacheDirectory 缓存目录，默认为 path.resolve(‘.cache-loader’)。</p>
<h2 id="worker-loader"><a href="#worker-loader" class="headerlink" title="worker-loader"></a>worker-loader</h2><p>将 js 转化为 webworker，父子线程间通信???</p>
<p>webworker 参考文档：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API。" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API。</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file.js</span></span><br><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">foo</span>: <span class="string">'foo'</span>&#125;</span><br><span class="line"></span><br><span class="line">_.has(o, <span class="string">'foo'</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数据发送到父线程(parent thread)</span></span><br><span class="line">self.postMessage(&#123;<span class="attr">foo</span>: <span class="string">'foo'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应来自父线程(parent thread)的消息</span></span><br><span class="line">self.addEventListener(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123; <span class="built_in">console</span>.log(event); &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">var</span> MyWorker = <span class="built_in">require</span>(<span class="string">"worker-loader!./file.js"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> MyWorker();</span><br><span class="line">worker.postMessage(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;);</span><br><span class="line">worker.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;...&#125;;</span><br><span class="line">worker.addEventListener(<span class="string">"message"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;...&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="multi-loader"><a href="#multi-loader" class="headerlink" title="multi-loader"></a>multi-loader</h2><p>控制多个加载器。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> multi = <span class="built_in">require</span>(<span class="string">"multi-loader"</span>);</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      loader: multi(<span class="comment">// multi 参数中 loader 顺序执行，即先解析 css，再以字符串输出</span></span><br><span class="line">        <span class="string">"style-loader!css-loader!autoprefixer-loader"</span>,</span><br><span class="line">        <span class="string">"raw-loader"</span></span><br><span class="line">      )</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="thread-loader"><a href="#thread-loader" class="headerlink" title="thread-loader"></a>thread-loader</h2><p>作为前置 loader，将使之后的 loader 运行在独立的线程池中。但这些后置的 loader 不能产生新的文件，不能使用定制的 loader API，无法获取 webpack 的选项设置???</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">"thread-loader"</span>,</span><br><span class="line">      options: &#123;<span class="comment">// 有同样配置的 loader 会共享一个 worker 池(worker pool)</span></span><br><span class="line">        workers: <span class="number">2</span>,<span class="comment">// 产生的 worker 的数量，默认是 cpu 的核心数</span></span><br><span class="line">        workerParallelJobs: <span class="number">50</span>,<span class="comment">// 一个 worker 进程中并行执行工作的数量，默认为 20</span></span><br><span class="line">        workerNodeArgs: [<span class="string">'--max-old-space-size'</span>, <span class="string">'1024'</span>],<span class="comment">// 额外的 node.js 参数</span></span><br><span class="line">        poolTimeout: <span class="number">2000</span>,<span class="comment">// 闲置时定时删除 worker 进程，默认为 500ms。可以设置为无穷大， 这样在监视模式(--watch)下可以保持 worker 持续存在</span></span><br><span class="line">        poolParallelJobs: <span class="number">50</span>,<span class="comment">// 池(pool)分配给 worker 的工作数量，默认为 200。降低这个数值会降低总体的效率，但是会提升工作分布更均一</span></span><br><span class="line">        name: <span class="string">"my-pool"</span><span class="comment">// 池(pool)的名称，可以修改名称来创建其余选项都一样的池(pool)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"expensive-loader"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预热 worker 池(worker pool)来防止启动 worker 时的高延时。这会启动池(pool)内最大数量的 worker 并把指定的模块载入 node.js 的模块缓存中</span></span><br><span class="line"><span class="keyword">const</span> threadLoader = <span class="built_in">require</span>(<span class="string">'thread-loader'</span>);</span><br><span class="line">threadLoader.warmup(options, [</span><br><span class="line">  <span class="string">'babel-loader'</span>,</span><br><span class="line">  <span class="string">'babel-preset-es2015'</span>,</span><br><span class="line">  <span class="string">'sass-loader'</span>,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<h2 id="transform-loader"><a href="#transform-loader" class="headerlink" title="transform-loader"></a>transform-loader</h2><p>应用 browserify transforms???</p>
<p>browserify transforms 参考文档：<a href="https://github.com/browserify/browserify/wiki/list-of-transforms" target="_blank" rel="noopener">https://github.com/browserify/browserify/wiki/list-of-transforms</a></p>
<h2 id="val-loader"><a href="#val-loader" class="headerlink" title="val-loader"></a>val-loader</h2><p>根据输入加载不同文件，交由下一个中间件???</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ask = <span class="built_in">require</span>(<span class="string">'./ask.js'</span>);</span><br><span class="line"><span class="keyword">const</span> generateResult = <span class="built_in">require</span>(<span class="string">'./generateResult.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findAnswer</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ask(options.question)</span><br><span class="line">    .then(generateResult)</span><br><span class="line">    .then(<span class="function"><span class="params">result</span> =&gt;</span> (&#123;</span><br><span class="line">      code: result.code,</span><br><span class="line">      sourceMap: result.sourceMap,</span><br><span class="line">      ast: result.abstractSyntaxTree,<span class="comment">// 下一个 loader 使用相同的 ast，可以提升编译速度</span></span><br><span class="line">      dependencies: [<span class="comment">// 默认为 []，需要监听这些文件的变更</span></span><br><span class="line">        <span class="built_in">require</span>.resolve(<span class="string">'./ask.js'</span>),</span><br><span class="line">        <span class="built_in">require</span>.resolve(<span class="string">'./generateResult.js'</span>)</span><br><span class="line">      ],.</span><br><span class="line">      cacheable: <span class="literal">true</span><span class="comment">// 依赖没有变更时，使用缓存</span></span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = findAnswer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="built_in">require</span>.resolve(<span class="string">'path/to/findAnswer.js'</span>),</span><br><span class="line">      use: [&#123;</span><br><span class="line">        loader: <span class="string">'val-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          question: <span class="string">'What is the meaning of life?'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>frontend</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>carrier</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析webpack-merge源码</title>
    <url>/2018/02/03/frontend/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E6%B5%85%E6%9E%90webpack-merge%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<h2 id="merge方法"><a href="#merge方法" class="headerlink" title="merge方法"></a>merge方法</h2><p>webpack-merge 类库的 merge 方法基于 lodash 类库的 mergeWith 方法实现。</p>
<p>mergeWith 方法用于遍历数组项或对象属性，通过尾参 customizer 定制化数据处理函数，获得新的数组项或对象属性。customizer 函数的参数为 (objValue, srcValue, key, object, source, stack)。</p>
<p>webpack-merge 通过 join-arrays 模块导出的 joinArrays 函数将用户配置项 { customizeArray, customizeObject } 对象构建为 customizer 函数生成器。customizer 函数的处理逻辑为：当 objValue, srcValue 为函数时，该函数的返回值由 customizer 函数再次处理。当 objValue, srcValue 为数组时，通过 customizeArray 函数处理，参数为（objValue, srcValue, key）；若 customizeArray 函数未定义，合并数组项。当 objValue, srcValue 为对象时，通过 customizeObject 函数处理，若无返回值或 customizeObject 函数未定义，构建新的key值，调用 joinArrays 函数将 { customizeArray, customizeObject } 配置项转化成内层数据处理函数，并对 objValue, srcValue 的子孙属性深度处理。除此而外，深拷贝 source 或者将 source 作为返回值。特别的，当 customizeArray, customizeObject 函数均未作配置时，customizer 函数作深拷贝处理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">joinArrays</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  customizeArray,</span></span></span><br><span class="line"><span class="function"><span class="params">  customizeObject,</span></span></span><br><span class="line"><span class="function"><span class="params">  key</span></span></span><br><span class="line"><span class="function"><span class="params">&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">_joinArrays</span>(<span class="params">a, b, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> newKey = key ? <span class="string">`<span class="subst">$&#123;key&#125;</span>.<span class="subst">$&#123;k&#125;</span>`</span> : k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isFunction(a) &amp;&amp; isFunction(b)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> _joinArrays(a(...args), b(...args), k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isArray(a) &amp;&amp; isArray(b)) &#123;</span><br><span class="line">      <span class="keyword">const</span> customResult = customizeArray &amp;&amp; customizeArray(a, b, newKey);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> customResult || [...a, ...b];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isPlainObject(a) &amp;&amp; isPlainObject(b)) &#123;</span><br><span class="line">      <span class="keyword">const</span> customResult = customizeObject &amp;&amp; customizeObject(a, b, newKey);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 第二层以同样的逻辑处理，如 'module.rules'等</span></span><br><span class="line">      <span class="keyword">return</span> customResult || mergeWith(&#123;&#125;, a, b, joinArrays(&#123;</span><br><span class="line">        customizeArray,</span><br><span class="line">        customizeObject,</span><br><span class="line">        key: newKey</span><br><span class="line">      &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isPlainObject(b)) &#123;</span><br><span class="line">      <span class="keyword">return</span> cloneDeep(b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在此基础上，webpack-merge 实现了 merge 方法。该方法支持单参数，通过接受{ customizeArray, customizeObject } 对象，返回值用于对数据（格式可以是数组，或多参数）做处理；也支持多参数，数据处理模式即为深拷贝。</p>
<h2 id="multiple-方法"><a href="#multiple-方法" class="headerlink" title="multiple 方法"></a>multiple 方法</h2><p>multiple 方法在 merge 方法的基础上构建，首先通过 merge 方法将配置数据复合为一，然后通过 lodash.values 方法以数组形式返回复合对象各属性的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> baseConfig = &#123;</span><br><span class="line">    server: &#123;</span><br><span class="line">      target: <span class="string">'node'</span>,</span><br><span class="line">      output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'lib.node.js'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    client: &#123;</span><br><span class="line">      output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'lib.js'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// specialized configuration</span></span><br><span class="line"><span class="keyword">var</span> production = &#123;</span><br><span class="line">    client: &#123;</span><br><span class="line">      output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'[name].[hash].js'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">[&#123;</span><br><span class="line">  target: <span class="string">'node'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'lib.node.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,&#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'[name].[hash].js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>
<h2 id="unique-方法"><a href="#unique-方法" class="headerlink" title="unique 方法"></a>unique 方法</h2><p>unique 方法通过 lodash 类库的 differenceWith 方法实现。differenceWith 方法接受参数为 (array, values, comparator)，通过遍历 array 数组项，并调用 comparator 函数将数组项和 values 数组比较，将返回否值的数组项构建成新的数组。unique 方法用于构建 customizeArray 配置函数，且其接受参数为 (key, uniques, getter)，key 即属性名，uniques, getter 参数用于构建 differenceWith 方法中的参数 comparator。若getter返回值已存在 uniques 中，comparator 返回真值；否则返回否值，即该数组项拷贝到新数组中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// unique 方法源码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeUnique</span>(<span class="params">key, uniques, getter = a =&gt; a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">a, b, k</span>) =&gt;</span> (</span><br><span class="line">    k === key &amp;&amp; [</span><br><span class="line">      ...a,</span><br><span class="line">      ...differenceWith(</span><br><span class="line">        b, a, item =&gt; uniques.indexOf(getter(item)) &gt;= <span class="number">0</span></span><br><span class="line">      )</span><br><span class="line">    ]</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// unique 方法使用</span></span><br><span class="line"><span class="comment">// 需要注意的是，若首个 plugins 中没有 HotModuleReplacementPlugin 构造函数</span></span><br><span class="line"><span class="comment">// 第二个 plugins 中的HotModuleReplacementPlugin 也不会拷贝到新数组中</span></span><br><span class="line"><span class="keyword">const</span> output = merge(&#123;</span><br><span class="line">  customizeArray: merge.unique(</span><br><span class="line">    <span class="string">'plugins'</span>,</span><br><span class="line">    [<span class="string">'HotModuleReplacementPlugin'</span>],</span><br><span class="line">    plugin =&gt; plugin.constructor &amp;&amp; plugin.constructor.name</span><br><span class="line">  )</span><br><span class="line">&#125;)(&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="strategy-方法"><a href="#strategy-方法" class="headerlink" title="strategy 方法"></a>strategy 方法</h2><p>strategy 方法在 merge 方法基础上实现，通过配置项 rules 构建 { customizeArray, customizeObject } 对象，最终生成 customizer 数据处理函数。rules 以对象形式配置，定义了数据处理策略，其中，’prepend’ 为反向深拷贝，’replace’ 替换，默认为 ‘append’ 即正向深拷贝。与 merge 方法相同，rules 可以设置深度嵌套属性的处理规则，如 ‘module.rules’: ‘prepend’。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mergeStrategy = <span class="function">(<span class="params">rules = &#123;&#125;</span>) =&gt;</span> merge(&#123;</span><br><span class="line">  customizeArray: customizeArray(rules),</span><br><span class="line">  customizeObject: customizeObject(rules)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">customizeArray</span>(<span class="params">rules</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">a, b, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (rules[key]) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'prepend'</span>:</span><br><span class="line">        <span class="keyword">return</span> [...b, ...a];</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'replace'</span>:</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">      <span class="keyword">default</span>: <span class="comment">// append</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">customizeObject</span>(<span class="params">rules</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">a, b, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (rules[key]) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'prepend'</span>:</span><br><span class="line">        <span class="keyword">return</span> mergeWith(&#123;&#125;, b, a, joinArrays());</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'replace'</span>:</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">      <span class="keyword">default</span>: <span class="comment">// append</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="smart-方法"><a href="#smart-方法" class="headerlink" title="smart 方法"></a>smart 方法</h2><p>smart 方法为处理 module.rules 配置项而设计。首先提取 module.rules 数组，交由 lodash 模块的 unionWith 方法处理。unionWith 方法接受参数为 (…array, compator)，comparator(arrVal, othVal) 函数返回 false 时保留两个数组项，返回真值只保留 arrVal。特别的，comparator 执行过程中，可对引用对象 arrVal 进行再度插值操作，使其具有 othVal 的特性。为此，webpack-merge 类库构造了 uniteRules 函数对 module.rules 数组项进行处理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mergeSmart = merge(&#123;</span><br><span class="line">  customizeArray: <span class="function">(<span class="params">a, b, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isRule(key.split(<span class="string">'.'</span>).slice(<span class="number">-1</span>)[<span class="number">0</span>])) &#123;</span><br><span class="line">      <span class="keyword">return</span> unionWith(a, b, uniteRules.bind(<span class="literal">null</span>, &#123;&#125;, key));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>uniteRules 函数接受参数为 {rules, key, newRule, rule}，其中 rules 用于配置 module.rules 合并策略，如 { rules.use: ‘prepend’ | ‘append’ | ‘replace’ }，key 即 ‘rules’，newRule, rule 为待合并的两个加载器配置项。uniteRules 函数的处理逻辑为：首先比较 newRule, rule 的 test, include, exclude, enforce, query 查询字符串，是否跳过合并；其次，将 newRule.loader 配置项赋给rule，作为返回值，因为无论 ‘prepend’ | ‘append’ | ‘replace’ 策略，都将返回 newRule.loader；其次将 rule.loader 转换为 [{ loader }]数组，同时newRule.use, rule.use 也转换为 [{ loader }] 数组，该数组同名 loader 将会被合并。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniteRules</span>(<span class="params">rules, key, newRule, rule</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">String</span>(rule.test) !== <span class="built_in">String</span>(newRule.test)</span><br><span class="line">      || ((newRule.enforce || rule.enforce) &amp;&amp; rule.enforce !== newRule.enforce)</span><br><span class="line">      || (newRule.include &amp;&amp; !isSameValue(rule.include, newRule.include))</span><br><span class="line">      || (newRule.exclude &amp;&amp; !isSameValue(rule.exclude, newRule.exclude))) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!rule.test &amp;&amp; !rule.include &amp;&amp; !rule.exclude</span><br><span class="line">      &amp;&amp; (rule.loader &amp;&amp; rule.loader.split(<span class="string">'?'</span>)[<span class="number">0</span>]) !== (newRule.loader &amp;&amp; newRule.loader.split(<span class="string">'?'</span>)[<span class="number">0</span>])) &#123;</span><br><span class="line">    <span class="comment">// Don't merge the rule if there isn't any identifying fields and the loaders don't match</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((rule.include || rule.exclude) &amp;&amp; (!newRule.include &amp;&amp; !newRule.exclude)) &#123;</span><br><span class="line">    <span class="comment">// Don't merge child without include/exclude to parent that has either</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// newRule.loader should always override</span></span><br><span class="line">  <span class="keyword">if</span> (newRule.loader) &#123;</span><br><span class="line">    <span class="keyword">const</span> optionsKey = newRule.options ? <span class="string">'options'</span> : newRule.query &amp;&amp; <span class="string">'query'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> rule.use;</span><br><span class="line">    <span class="keyword">delete</span> rule.loaders;</span><br><span class="line">    rule.loader = newRule.loader;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (optionsKey) &#123;</span><br><span class="line">      rule[optionsKey] = newRule[optionsKey];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((rule.use || rule.loaders || rule.loader) &amp;&amp; (newRule.use || newRule.loaders)) &#123;</span><br><span class="line">    <span class="keyword">const</span> expandEntry = <span class="function"><span class="params">loader</span> =&gt;</span> (</span><br><span class="line">      <span class="keyword">typeof</span> loader === <span class="string">'string'</span> ? &#123; loader &#125; : loader</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// this is only here to avoid breaking existing tests</span></span><br><span class="line">    <span class="keyword">const</span> unwrapEntry = <span class="function"><span class="params">entry</span> =&gt;</span> (</span><br><span class="line">      !entry.options &amp;&amp; !entry.query ? entry.loader : entry</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> entries;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 &#123; loader &#125; 转化成 [&#123; loader, option?, query? &#125;]数组</span></span><br><span class="line">    <span class="keyword">if</span> (rule.loader) &#123;</span><br><span class="line">      <span class="keyword">const</span> optionsKey = rule.options ? <span class="string">'options'</span> : rule.query &amp;&amp; <span class="string">'query'</span>;</span><br><span class="line">      entries = [&#123; <span class="attr">loader</span>: rule.loader &#125;];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (optionsKey) &#123;</span><br><span class="line">        entries[<span class="number">0</span>][optionsKey] = rule[optionsKey];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">delete</span> rule.loader;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (optionsKey) &#123;</span><br><span class="line">        <span class="keyword">delete</span> rule[optionsKey];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// rule.use, rule.loaders 数组项若为字符串，转化为 &#123; loader &#125; 对象</span></span><br><span class="line">      entries = [].concat(rule.use || rule.loaders).map(expandEntry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> newEntries = [].concat(newRule.use || newRule.loaders).map(expandEntry);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> loadersKey = rule.use || newRule.use ? <span class="string">'use'</span> : <span class="string">'loaders'</span>;</span><br><span class="line">    <span class="keyword">const</span> resolvedKey = <span class="string">`<span class="subst">$&#123;key&#125;</span>.<span class="subst">$&#123;loadersKey&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (rules[resolvedKey]) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'prepend'</span>:</span><br><span class="line">        rule[loadersKey] = [</span><br><span class="line">          ...differenceWith(newEntries, entries, uniteEntries),</span><br><span class="line">          ...entries</span><br><span class="line">        ].map(unwrapEntry);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'replace'</span>:</span><br><span class="line">        rule[loadersKey] = newRule.use || newRule.loaders;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        rule[loadersKey] = unionWith(</span><br><span class="line">          <span class="comment">// Remove existing entries so that we can respect the order of the new</span></span><br><span class="line">          <span class="comment">// entries</span></span><br><span class="line">          differenceWith(entries, newEntries, isEqual),</span><br><span class="line">          newEntries,</span><br><span class="line">          uniteEntries</span><br><span class="line">        ).map(unwrapEntry);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (newRule.include) &#123;</span><br><span class="line">    rule.include = newRule.include;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (newRule.exclude) &#123;</span><br><span class="line">    rule.exclude = newRule.exclude;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniteEntries</span>(<span class="params">newEntry, entry</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> loaderNameRe = <span class="regexp">/^([^?]+)/ig</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [loaderName] = entry.loader.match(loaderNameRe);</span><br><span class="line">  <span class="keyword">const</span> [newLoaderName] = newEntry.loader.match(loaderNameRe);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (loaderName !== newLoaderName) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Replace query values with newer ones</span></span><br><span class="line">  mergeWith(entry, newEntry);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="smartStrategy-方法"><a href="#smartStrategy-方法" class="headerlink" title="smartStrategy 方法"></a>smartStrategy 方法</h2><p>smartStrategy 方法不同于 smart 方法只处理 module.rules 配置项，smartStrategy 方法对整个 webpack 配置进行处理。其中，对 module.rules 配置项，smartStrategy 方法处理逻辑雷同 smart 方法，其他配置项则同 strategy 方法。针对 module.rules 配置项，合并规则 rules 须配置为 { ‘module.rules’: ‘prepend’ | ‘replace’ | ‘append’, ‘module.rules.use’: ‘prepend’ | ‘replace’ | ‘append’ } 形式。’module.rules’ 属性设定 module.rules 合并策略，’module.rules.use’ 属性设定 rule.use 合并策略。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mergeSmartStrategy = <span class="function">(<span class="params">rules = &#123;&#125;</span>) =&gt;</span> merge(&#123;</span><br><span class="line">  customizeArray: <span class="function">(<span class="params">a, b, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> topKey = key.split(<span class="string">'.'</span>).slice(<span class="number">-1</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isRule(topKey)) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (rules[key]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'prepend'</span>:</span><br><span class="line">          <span class="keyword">return</span> [</span><br><span class="line">            ...differenceWith(b, a, (newRule, seenRule) =&gt; (</span><br><span class="line">              uniteRules(rules, key, newRule, seenRule, <span class="string">'prepend'</span>))</span><br><span class="line">            ),</span><br><span class="line">            ...a</span><br><span class="line">          ];</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'replace'</span>:</span><br><span class="line">          <span class="keyword">return</span> b;</span><br><span class="line">        <span class="keyword">default</span>: <span class="comment">// append</span></span><br><span class="line">          <span class="keyword">return</span> unionWith(a, b, uniteRules.bind(<span class="literal">null</span>, rules, key));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> customizeArray(rules)(a, b, key);</span><br><span class="line">  &#125;,</span><br><span class="line">  customizeObject: customizeObject(rules)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>备注：webpack-merge类库主要应用于webpack配置，对于roadhog等类库需要注入babelPlugins、babelPresets配置的，稍显鞭长莫及。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://lodash.com/docs" target="_blank" rel="noopener">lodash官方文档</a></p>
<p><a href="https://github.com/survivejs/webpack-merge" target="_blank" rel="noopener">webpack-merge仓库</a></p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>前端工程化</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack配置指南</title>
    <url>/2018/02/01/frontend/%E5%B7%A5%E7%A8%8B%E5%8C%96/webpack/webpack%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="3-10-0"><a href="#3-10-0" class="headerlink" title="3.10.0"></a>3.10.0</h2><p>参考文档：<br><a href="https://webpack.js.org/configuration/" target="_blank" rel="noopener">webpack 3.10.0 官方文档</a><br><a href="http://www.css88.com/doc/webpack" target="_blank" rel="noopener">webpack 3.5.5 中文文档</a></p>
<h3 id="content-上下文"><a href="#content-上下文" class="headerlink" title="content 上下文"></a>content 上下文</h3><p>配置用于定位入口文件、loader的绝对路径，默认为工程目录。在基于webpack开发的打包工具中，content属性可设置为该类库的目录路径，以便于查找该类库加载的loader，入口文件采用绝对路径的方式引入。</p>
<pre><code>context: path.resolve(__dirname, &quot;app&quot;)
</code></pre><h3 id="entry-入口"><a href="#entry-入口" class="headerlink" title="entry 入口"></a>entry 入口</h3><p>配置入口文件，字符串、数组或对象形式（对象属性可以是数组形式）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串形式</span></span><br><span class="line">entry: <span class="string">'./src/app.js'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象形式</span></span><br><span class="line">entry: &#123;</span><br><span class="line">  home: <span class="string">"./home.js"</span>,</span><br><span class="line">  about: <span class="string">"./about.js"</span>,</span><br><span class="line">  contact: <span class="string">"./contact.js"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"></span><br><span class="line">entry: &#123;</span><br><span class="line">  app: <span class="string">'./src/app.js'</span>,</span><br><span class="line">  vendors: [ <span class="string">'react'</span>, <span class="string">'react-dom'</span>, <span class="string">'react-router'</span>, <span class="string">'redux'</span>, <span class="string">'react-redux'</span> ]<span class="comment">// 配置第三方库</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数形式，动态入口</span></span><br><span class="line">entry: <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'./demo'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">entry: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve([<span class="string">'./demo'</span>, <span class="string">'./demo2'</span>]))</span><br></pre></td></tr></table></figure>
<h3 id="output-输出"><a href="#output-输出" class="headerlink" title="output 输出"></a>output 输出</h3><h4 id="path"><a href="#path" class="headerlink" title="path"></a>path</h4><p>输出目录的绝对路径，如 path: path.resolve(__dirname, ‘/dist’)。</p>
<h4 id="pathinfo"><a href="#pathinfo" class="headerlink" title="pathinfo"></a>pathinfo</h4><p>打包文件是否添加包含模块的注释，默认为false。生产环境需置为false。</p>
<h4 id="publicPath"><a href="#publicPath" class="headerlink" title="publicPath"></a>publicPath</h4><p>浏览器端访问资源时的公开路径，作为前缀。绝对或相对路径形式，如 publicPath: ‘/assets/‘（相对服务器检索资源），页面访问资源为’/assets/spinner.gif’。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">publicPath: <span class="string">"https://cdn.example.com/assets/"</span>, <span class="comment">// CDN（总是 HTTPS 协议）</span></span><br><span class="line">publicPath: <span class="string">"//cdn.example.com/assets/"</span>, <span class="comment">// CDN (协议相同)</span></span><br><span class="line">publicPath: <span class="string">"/assets/"</span>, <span class="comment">// 相对于服务(server-relative)</span></span><br><span class="line">publicPath: <span class="string">"assets/"</span>, <span class="comment">// 相对于 HTML 页面</span></span><br><span class="line">publicPath: <span class="string">"../assets/"</span>, <span class="comment">// 相对于 HTML 页面</span></span><br><span class="line">publicPath: <span class="string">""</span>, <span class="comment">// 相对于 HTML 页面（目录相同）</span></span><br></pre></td></tr></table></figure>
<h4 id="filename"><a href="#filename" class="headerlink" title="filename"></a>filename</h4><p>输出文件名，如 filename: ‘bundle.js’ 或 ‘[name].js’。其中，name占位符会自动填充为待打包脚本的文件名。占位符包含 name 文件名，id 模块标识符，hash 模块标识符的hash值，chunkhash chunk内容的hash值，query 文件名?后面的字符串，下同。</p>
<h4 id="chunkFilename"><a href="#chunkFilename" class="headerlink" title="chunkFilename"></a>chunkFilename</h4><p>按需加载的非入口文件，包含require.ensure异步加载的脚本，如 chunkFilename: ‘[name].async.js’。</p>
<h4 id="chunkLoadTimeout"><a href="#chunkLoadTimeout" class="headerlink" title="chunkLoadTimeout"></a>chunkLoadTimeout</h4><p>访问按需加载资源的超时时间，默认为120000。</p>
<h4 id="jsonpFunction"><a href="#jsonpFunction" class="headerlink" title="jsonpFunction"></a>jsonpFunction</h4><p>按需加载资源的jsonp函数名，默认值为’webpackJsonp’。有多个编译过程需要修改，避免同名冲突。</p>
<h4 id="jsonpScriptType"><a href="#jsonpScriptType" class="headerlink" title="jsonpScriptType"></a>jsonpScriptType</h4><p>以jsonp形式按需加载资源时，注入页面的script节点的type值，默认为’text/Javascript’。可配置为’module’，即以es6语法形式加载脚本。</p>
<h4 id="crossOriginLoading"><a href="#crossOriginLoading" class="headerlink" title="crossOriginLoading"></a>crossOriginLoading</h4><p>启用jsonp跨域加载脚本，默认值为false，即不允许；可配置为’anonymous’（允许跨域，发送不带凭据的请求）或’use-credentials’（允许跨域，发送待凭据的请求）。</p>
<h4 id="library"><a href="#library" class="headerlink" title="library"></a>library</h4><p>开发类库时配置，配置为 libaryName 类库名。参考 <a href="http://www.css88.com/doc/webpack/guides/author-libraries/" target="_blank" rel="noopener">创建库 (Library)</a>。</p>
<h4 id="libraryTarget"><a href="#libraryTarget" class="headerlink" title="libraryTarget"></a>libraryTarget</h4><p>类库导出格式，默认值为’var’。可选值包含’var’（导出为变量），’this’（导出为this的属性），’commonjs’（导出为exports的属性，即node脚本的方法），’commonjs2’（通过module.exports导出，即node的一个模块），’amd’（requirejs模块化规范导出模块），’umd’（以AMD，CommonJS2 形式导出或者导出为 root 的属性）。</p>
<h4 id="libraryExport"><a href="#libraryExport" class="headerlink" title="libraryExport"></a>libraryExport</h4><p>配置导出的内容，默认值为 _entry_return_ ，即将完全导出模块。若配置为 _entry_return_.default ，只导出 default 属性。若配置为 _entry_return_.methodName ，只导出 methodName 方法。</p>
<h4 id="auxiliaryComment"><a href="#auxiliaryComment" class="headerlink" title="auxiliaryComment"></a>auxiliaryComment</h4><p>在导出类库时，用于在导出容器中添加注释，配合 library, libraryTarget 属性一起使用。如 auxiliaryComment: ‘Test Comment’。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">webpackUniversalModuleDefinition</span>(<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Test Comment</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> exports === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">'object'</span>)</span><br><span class="line">    <span class="built_in">module</span>.exports = factory(<span class="built_in">require</span>(<span class="string">"lodash"</span>));</span><br><span class="line">  <span class="comment">// Test Comment</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd)</span><br><span class="line">    define([<span class="string">"lodash"</span>], factory);</span><br><span class="line">  <span class="comment">// Test Comment</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> exports === <span class="string">'object'</span>)</span><br><span class="line">    exports[<span class="string">"someLibName"</span>] = factory(<span class="built_in">require</span>(<span class="string">"lodash"</span>));</span><br><span class="line">  <span class="comment">// Test Comment</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    root[<span class="string">"someLibName"</span>] = factory(root[<span class="string">"_"</span>]);</span><br><span class="line">&#125;)(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">__WEBPACK_EXTERNAL_MODULE_1__</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="umdNamedDefine"><a href="#umdNamedDefine" class="headerlink" title="umdNamedDefine"></a>umdNamedDefine</h4><p>当 libraryTarget 属性 配置为 ‘umd’ 时，设置 umdNamedDefine 为真，将对 UMD 构建过程中的 AMD 模块进行命名，否则就使用匿名的 define。</p>
<h4 id="sourceMapFilename"><a href="#sourceMapFilename" class="headerlink" title="sourceMapFilename"></a>sourceMapFilename</h4><p>source map文件名，默认值为’[file].map’。占位符除包含entry的所有占位符外，还包含 file 模块文件名，filebase 模块的basename，带扩展名。</p>
<h4 id="devtoolModuleFilenameTemplate"><a href="#devtoolModuleFilenameTemplate" class="headerlink" title="devtoolModuleFilenameTemplate"></a>devtoolModuleFilenameTemplate</h4><p>定义每个 source map 的 sources 数组项的名称，模板字符串或函数。模板占位符包含 absolute-resource-path 绝对路径文件名，id 模块标识符，hash 模块标识符的hash值，all-loaders 自动和显式的loader，参数取决于第一个loader的名称，loaders 显式的loader，参数取决于第一个loader的名称，resource 文件路径加首个loader的查询参数，resource-path 文件路径。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">devtoolModuleFilenameTemplate: <span class="string">"webpack:///[resource-path]?[loaders]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">devtoolModuleFilenameTemplate: <span class="function"><span class="params">info</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`webpack:///<span class="subst">$&#123;info.resourcePath&#125;</span>?<span class="subst">$&#123;info.loaders&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="devtoolFallbackModuleFilenameTemplate"><a href="#devtoolFallbackModuleFilenameTemplate" class="headerlink" title="devtoolFallbackModuleFilenameTemplate"></a>devtoolFallbackModuleFilenameTemplate</h4><p>使用devtoolModuleFilenameTemplate使多个模块产生相同的名称时，devtoolFallbackModuleFilenameTemplate属性是备用的解决方案，配置同上。</p>
<h4 id="hotUpdateChunkFilename"><a href="#hotUpdateChunkFilename" class="headerlink" title="hotUpdateChunkFilename"></a>hotUpdateChunkFilename</h4><p>配置热更新文件名，默认为’[id].[hash].hot-update.js’，没必要修改。</p>
<h4 id="hotUpdateFunction"><a href="#hotUpdateFunction" class="headerlink" title="hotUpdateFunction"></a>hotUpdateFunction</h4><p>热更新加载的jsonp函数名，默认为’webpackHotUpdate’，只在浏览器端使用。</p>
<h4 id="hotUpdateMainFilename"><a href="#hotUpdateMainFilename" class="headerlink" title="hotUpdateMainFilename"></a>hotUpdateMainFilename</h4><p>热更新的主文件名 ，默认值为’[hash].hot-update.json’，没必要修改。占位符只有 hash。</p>
<h4 id="hashDigest"><a href="#hashDigest" class="headerlink" title="hashDigest"></a>hashDigest</h4><p>生成 hash 时的编码方式，默认为 ‘hex’。</p>
<h4 id="hashDigestLength"><a href="#hashDigestLength" class="headerlink" title="hashDigestLength"></a>hashDigestLength</h4><p>散列摘要的前缀长度。</p>
<h4 id="hashFunction"><a href="#hashFunction" class="headerlink" title="hashFunction"></a>hashFunction</h4><p>散列算法。</p>
<h4 id="hashSalt"><a href="#hashSalt" class="headerlink" title="hashSalt"></a>hashSalt</h4><p>可选的加盐值。</p>
<h4 id="strictModuleExceptionHandling"><a href="#strictModuleExceptionHandling" class="headerlink" title="strictModuleExceptionHandling"></a>strictModuleExceptionHandling</h4><p>默认为否值。如为真值，模块报错后，再次引用，将重复报错，因此无需配置。</p>
<h4 id="sourcePrefix"><a href="#sourcePrefix" class="headerlink" title="sourcePrefix"></a>sourcePrefix</h4><p>配置打包文件每行的前缀，默认使用空字符串，没必要配置。</p>
<h3 id="module-模块"><a href="#module-模块" class="headerlink" title="module 模块"></a>module 模块</h3><h4 id="noParse"><a href="#noParse" class="headerlink" title="noParse"></a>noParse</h4><p>无需webpack解析的文件名，正则或函数形式，如 module.noParse: /jquery|lodash/ 或 module.noParse: function(content) { return /jquery|lodash/.test(content); }。</p>
<h4 id="rules"><a href="#rules" class="headerlink" title="rules"></a>rules</h4><p>用于配置加载器，如 module.rules: [{ test: /.ts$/, use: ‘ts-loader’ }]。</p>
<ul>
<li>rule.test，资源文件名须匹配的条件，可以是正则，或正则数组，或字符串，或函数（返回真值匹配），或对象（匹配所有属性），下同。与rule.resource属性相冲。</li>
<li>rule.include，资源文件所在目录。</li>
<li>rule.exclude，资源文件排除的目录。</li>
<li>rule.and，资源文件名须匹配所有条件。</li>
<li>rule.or，资源文件名须匹配其中一条条件。</li>
<li>rule.not，资源文件名须排除的条件。</li>
<li>rule.resourceQuery，加载文件时须匹配的查询字符串，如 rule.resourceQuery : /inline/，可使用 import Foo from ‘./foo.css?inline’。</li>
<li>rule.resource，资源文件匹配的规则，可以用rule.test, rule.include, rule.exclude替代配置。</li>
<li>rule.issuer，请求资源的脚本文件名。</li>
<li>rule.use，指定加载器，数组形式。加载器执行顺序为从右到左。</li>
<li>rule.use.loader，指定加载器，如 use: [ { loader: “style-loader “} ]，简写形式为use: [ “style-loader” ]。</li>
<li>rule.use.options | rule.use.query，传入loader的配置项，如 use: [{ loader: “css-loader”, options: { modules: true } }。</li>
<li><p>rule.parser，配置解析选项，约定模块可以使用的模块化加载语法，默认值为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">parser: &#123;</span><br><span class="line">  amd: <span class="literal">false</span>, <span class="comment">// 禁用 AMD</span></span><br><span class="line">  commonjs: <span class="literal">false</span>, <span class="comment">// 禁用 CommonJS</span></span><br><span class="line">  system: <span class="literal">false</span>, <span class="comment">// 禁用 SystemJS</span></span><br><span class="line">  harmony: <span class="literal">false</span>, <span class="comment">// 禁用 ES2015 Harmony import/export</span></span><br><span class="line">  requireInclude: <span class="literal">false</span>, <span class="comment">// 禁用 require.include</span></span><br><span class="line">  requireEnsure: <span class="literal">false</span>, <span class="comment">// 禁用 require.ensure</span></span><br><span class="line">  requireContext: <span class="literal">false</span>, <span class="comment">// 禁用 require.context</span></span><br><span class="line">  browserify: <span class="literal">false</span>, <span class="comment">// 禁用特殊处理的 browserify bundle</span></span><br><span class="line">  requireJs: <span class="literal">false</span>, <span class="comment">// 禁用 requirejs.*</span></span><br><span class="line">  node: <span class="literal">false</span>, <span class="comment">// 禁用 __dirname, __filename, module, require.extensions, require.main 等。</span></span><br><span class="line">  node: &#123;...&#125; <span class="comment">// 在模块级别(module level)上重新配置 [node](/configuration/node) 层(layer)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>rule.rules，配置嵌套规则。</p>
</li>
<li><p>rule.oneOf，以数组顺序优先选用嵌套规则，如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">use: [&#123;</span><br><span class="line">  test: <span class="regexp">/.css$/</span>,</span><br><span class="line">  oneOf: [</span><br><span class="line">    &#123;</span><br><span class="line">      resourceQuery: <span class="regexp">/inline/</span>, <span class="comment">// foo.css?inline</span></span><br><span class="line">      use: <span class="string">'url-loader'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      resourceQuery: <span class="regexp">/external/</span>, <span class="comment">// foo.css?external</span></span><br><span class="line">      use: <span class="string">'file-loader'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>
</li>
<li><p>rule.enforce，指定 loader 调用顺序，可选值为’pre’（前置）, ‘inline’（行内）, ‘normal’（普通）, ‘post’（后置），留空即为默认值’normal’。</p>
</li>
</ul>
<h3 id="resolve-解析"><a href="#resolve-解析" class="headerlink" title="resolve 解析"></a>resolve 解析</h3><h4 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h4><p>配置资源文件的别名，影响 webpack 查找资源的方式。</p>
<h4 id="enforceExtension"><a href="#enforceExtension" class="headerlink" title="enforceExtension"></a>enforceExtension</h4><p>是否允许加载无扩展名的文件，默认为 false。</p>
<h4 id="extensions"><a href="#extensions" class="headerlink" title="extensions"></a>extensions</h4><p>自动解析的文件扩展名，默认值为 extensions: [“.js”, “.json”]。</p>
<h4 id="mainFields"><a href="#mainFields" class="headerlink" title="mainFields"></a>mainFields</h4><p>决定类库导入的方式，默认值为 mainFields: [“browser”, “module”, “main”]，即优先以类库 package.json 文件中’browser’属性导入模块，其次’module’，其次’main’。</p>
<h4 id="mainFiles"><a href="#mainFiles" class="headerlink" title="mainFiles"></a>mainFiles</h4><p>解析目录时使用的文件名，默认值为 mainFiles: [“index”]。</p>
<h4 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h4><p>告诉 webpack 在哪个目录中查找模块，如 modules: [path.resolve(__dirname, “src”), “node_modules”]。</p>
<h4 id="unsafeCache"><a href="#unsafeCache" class="headerlink" title="unsafeCache"></a>unsafeCache</h4><p>指定需要缓存的模块，默认为 unsafeCache: true。unsafeCache: /src\/utilities/配置只缓存utilities模块。</p>
<h4 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h4><p>额外使用的解析插件列表，如 plugins: [new DirectoryNamedWebpackPlugin()]。</p>
<h4 id="cachePredicate"><a href="#cachePredicate" class="headerlink" title="cachePredicate"></a>cachePredicate</h4><p>指定异步加载脚本是否需要被缓存，函数形式，默认值为 cachePredicate: function() { return true }。</p>
<h4 id="resolveLoader"><a href="#resolveLoader" class="headerlink" title="resolveLoader"></a>resolveLoader</h4><p>指定 webpack 查找loader的方式，如resolveLoader: {  modules: [“node_modules”], extensions: [“.js”, “.json”], mainFields: [“loader”, “main”] }。</p>
<h4 id="moduleExtensions"><a href="#moduleExtensions" class="headerlink" title="moduleExtensions"></a>moduleExtensions</h4><p>rule.use配置loader时待添加的后缀。</p>
<h3 id="plugins-插件"><a href="#plugins-插件" class="headerlink" title="plugins 插件"></a>plugins 插件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="comment">// 导入非 webpack 默认自带插件</span></span><br><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">var</span> DashboardPlugin = <span class="built_in">require</span>(<span class="string">'webpack-dashboard/plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在配置中添加插件</span></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="comment">// 构建优化插件</span></span><br><span class="line">  <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;<span class="comment">// 提取公共资源</span></span><br><span class="line">    name: <span class="string">'vendor'</span>,</span><br><span class="line">    filename: <span class="string">'vendor-[hash].min.js'</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;<span class="comment">// 压缩代码</span></span><br><span class="line">    compress: &#123;</span><br><span class="line">      warnings: <span class="literal">false</span>,</span><br><span class="line">      drop_console: <span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> ExtractTextPlugin(&#123;<span class="comment">// 提取并压缩css</span></span><br><span class="line">    filename: <span class="string">'build.min.css'</span>,</span><br><span class="line">    allChunks: <span class="literal">true</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> webpack.IgnorePlugin(<span class="regexp">/^\.\/locale$/</span>, /moment$/),</span><br><span class="line">  <span class="comment">// 编译时(compile time)插件</span></span><br><span class="line">  <span class="keyword">new</span> webpack.DefinePlugin(&#123;<span class="comment">// 定义全局变量</span></span><br><span class="line">    <span class="string">'process.env.NODE_ENV'</span>: <span class="string">'"production"'</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// webpack-dev-server 强化插件</span></span><br><span class="line">  <span class="keyword">new</span> DashboardPlugin(),</span><br><span class="line">  <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="devServer-开发服务器"><a href="#devServer-开发服务器" class="headerlink" title="devServer 开发服务器"></a>devServer 开发服务器</h3><p>使用 webpack-dev-server 启动本地开发环境的服务器。由 webpack-dev-server 启动的服务，访问 /webpack-dev-server 路径可查看加载的资源。</p>
<h4 id="inline"><a href="#inline" class="headerlink" title="inline"></a>inline</h4><p>dev server 使用内联模式启动，将处理实时重载的脚本注入到打包文件中，开发者可在浏览器控制台查看构建信息。当配置为 inline: false 时，将启用 iframe 模式，处理实时重载的脚本将注入到 iframe 标签中。</p>
<h4 id="lazy"><a href="#lazy" class="headerlink" title="lazy"></a>lazy</h4><p>dev server 使用惰性模式，在请求资源时重新编译脚本，webpack 不会监听任何文件的变动。</p>
<h4 id="hot"><a href="#hot" class="headerlink" title="hot"></a>hot</h4><p>是否启用 webpack 模块热替换特性，可通过命令行 –hot 启动。</p>
<h4 id="hotOnly"><a href="#hotOnly" class="headerlink" title="hotOnly"></a>hotOnly</h4><p>启用热替换特性时，编译失败时，是否避免刷新页面，可通过命令行 –hot 启动。</p>
<h4 id="open"><a href="#open" class="headerlink" title="open"></a>open</h4><p>是否自动打开浏览器，可通过命令行 –open 配置。</p>
<h4 id="openPage"><a href="#openPage" class="headerlink" title="openPage"></a>openPage</h4><p>打开浏览器时指定页面，如 openPage: ‘/different/page’，可通过命令行 –open-page “/different/page” 配置。</p>
<h4 id="overlay"><a href="#overlay" class="headerlink" title="overlay"></a>overlay</h4><p>浏览器端显示构建失败和警告信息，配置为 overlay: true 只提示构建失败信息，overlay: { warnings: true, errors: true } 同时显示失败和警告信息。</p>
<h4 id="useLocalIp"><a href="#useLocalIp" class="headerlink" title="useLocalIp"></a>useLocalIp</h4><p>浏览器端以 ip 打开网页，可通过命令行 –useLocalIp 配置。</p>
<h4 id="historyApiFallback"><a href="#historyApiFallback" class="headerlink" title="historyApiFallback"></a>historyApiFallback</h4><p>通过 html5 histroy api 控制路由，设置为真值，404 错误页面将重定向到 index.html。rewrites 选项开启更细粒度的重定向；disableDotRule 选项用于在路径中使用’.’（常见于 Angular）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">historyApiFallback: &#123;</span><br><span class="line">  rewrites: [</span><br><span class="line">    &#123; <span class="attr">from</span>: <span class="regexp">/^\/$/</span>, <span class="attr">to</span>: <span class="string">'/views/landing.html'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">from</span>: <span class="regexp">/^\/subpage/</span>, <span class="attr">to</span>: <span class="string">'/views/subpage.html'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">from</span>: <span class="regexp">/./</span>, <span class="attr">to</span>: <span class="string">'/views/404.html'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h4><p>通过代理服务器转发请求。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">proxy: &#123;</span><br><span class="line">  <span class="string">"/api"</span>: &#123;</span><br><span class="line">    target: <span class="string">"http://localhost:3000"</span>,<span class="comment">// 代理服务器转发到的目标服务器地址</span></span><br><span class="line">    secure: <span class="literal">true</span>,<span class="comment">// 是否接受 https 服务，且使用无效证书的目标服务器</span></span><br><span class="line">    pathRewrite: &#123;<span class="string">"^/api"</span> : <span class="string">""</span>&#125;,<span class="comment">// 重写请求路径</span></span><br><span class="line">    bypass: <span class="function"><span class="keyword">function</span>(<span class="params">req, res, proxyOptions</span>) </span>&#123;<span class="comment">// 请求 html 页面资源时，跳过代理</span></span><br><span class="line">      <span class="keyword">if</span> (req.headers.accept.indexOf(<span class="string">"html"</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Skipping proxy for browser request."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/index.html"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">proxy: [&#123;<span class="comment">// 设置多个代理</span></span><br><span class="line">  context: [<span class="string">"/auth"</span>, <span class="string">"/api"</span>],</span><br><span class="line">  target: <span class="string">"http://localhost:3000"</span>,</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>
<h4 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h4><p>访问 dev server 服务器实例，添加钩子或中间件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setup(app)&#123;</span><br><span class="line">  app.get(<span class="string">'/some/path'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.json(&#123; <span class="attr">custom</span>: <span class="string">'response'</span> &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="quiet"><a href="#quiet" class="headerlink" title="quiet"></a>quiet</h4><p>配置为真值时，将隐藏构建信息，包含错误和警告提示。</p>
<h4 id="info"><a href="#info" class="headerlink" title="info"></a>info</h4><p>该配置项只能通过命令行配置，默认为true，是否输出日志，如 –info=false。</p>
<h4 id="noInfo"><a href="#noInfo" class="headerlink" title="noInfo"></a>noInfo</h4><p>是否隐藏构建信息，错误和警告除外。</p>
<h4 id="clientLogLevel"><a href="#clientLogLevel" class="headerlink" title="clientLogLevel"></a>clientLogLevel</h4><p>控制台打印日志级别，默认为 info。可选项 none, error, warning 或 info。</p>
<h4 id="color"><a href="#color" class="headerlink" title="color"></a>color</h4><p>是否带颜色输出日志，可通过命令行 –color 启动。</p>
<h4 id="stats"><a href="#stats" class="headerlink" title="stats"></a>stats</h4><p>细粒度控制台打印的信息，同 webapckConfig.stats。</p>
<h4 id="filename-1"><a href="#filename-1" class="headerlink" title="filename"></a>filename</h4><p>lazy 属性为true，惰性模式启动服务器时，配置 filename 可使资源被请求时才启动打包，如 filename: “bundle.js”。</p>
<h4 id="host"><a href="#host" class="headerlink" title="host"></a>host</h4><p>配置主机ip，如 host: “0.0.0.0”，可通过命令行 –host 0.0.0.0 配置。</p>
<h4 id="port"><a href="#port" class="headerlink" title="port"></a>port</h4><p>配置端口号，如 port: 8080，可通过命令行 –port 8080 配置。</p>
<h4 id="public"><a href="#public" class="headerlink" title="public"></a>public</h4><p>使用内联模式，且通过 ngnix 代理 dev server 时，设置 public 主机url，如public: “myapp.test:80”。可通过命令行 –public myapp.test:80 配置。</p>
<h4 id="publicPath-1"><a href="#publicPath-1" class="headerlink" title="publicPath"></a>publicPath</h4><p>浏览器端访问打包文件的路径，默认为’/‘，可配置为相对路径或完整url，如 publicPath: “<a href="http://localhost:8080/assets/&quot;，此时访问资源" target="_blank" rel="noopener">http://localhost:8080/assets/&quot;，此时访问资源</a> bundle.js 的地址为 <a href="http://localhost:8080/assets/bundle.js。" target="_blank" rel="noopener">http://localhost:8080/assets/bundle.js。</a></p>
<h4 id="contentBase"><a href="#contentBase" class="headerlink" title="contentBase"></a>contentBase</h4><p>指定服务器从哪里获取静态资源，默认为工程目录，可配置为字符串或数组，false表示禁用。publicPath 指定打包文件加载路径，优先级较高。可通过命令行 –content-base /path/to/content/dir 配置。</p>
<h4 id="watchContentBase"><a href="#watchContentBase" class="headerlink" title="watchContentBase"></a>watchContentBase</h4><p>监听 contentBase 静态资源改动，可通过命令行 –watch-content-base 配置。</p>
<h4 id="staticOptions"><a href="#staticOptions" class="headerlink" title="staticOptions"></a>staticOptions</h4><p>配置通过 contentBase 访问的静态资源选项，如 staticOptions: { redirect: false }。</p>
<h4 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h4><p>在所有响应中添加头部配置，如 headers: { “X-Custom-Foo”: “bar” }。</p>
<h4 id="disableHostCheck"><a href="#disableHostCheck" class="headerlink" title="disableHostCheck"></a>disableHostCheck</h4><p>是否禁用请求头 host 检查，可通过命令行 –disable-host-check 配置。</p>
<h4 id="allowedHosts"><a href="#allowedHosts" class="headerlink" title="allowedHosts"></a>allowedHosts</h4><p>allowedHosts配置将校验请求头中的 host 主机，匹配的予以访问权限，如 allowedHosts: [ ‘.host.com’, ‘host2.com’ ]，以’.’起始的配置项可以作为子域名。该配置项可以通过命令行 –allowed-hosts .host.com,host2.com 配置。</p>
<h4 id="bonjour"><a href="#bonjour" class="headerlink" title="bonjour"></a>bonjour</h4><p>是否通过零配置网络服务规范自动生成ip地址，可通过命令行 –bonjour 启动。</p>
<h4 id="compress"><a href="#compress" class="headerlink" title="compress"></a>compress</h4><p>服务是否通过 gzip 压缩，可通过命令行 –compress 启动。</p>
<h4 id="https"><a href="#https" class="headerlink" title="https"></a>https</h4><p>启动 https 服务，默认启动 http 服务。可通过命令行  –https –key /path/to/server.key –cert /path/to/server.crt –cacert /path/to/ca.pem 配置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">https: &#123;<span class="comment">// 配置自签名证书</span></span><br><span class="line">  key: fs.readFileSync(<span class="string">"/path/to/server.key"</span>),</span><br><span class="line">  cert: fs.readFileSync(<span class="string">"/path/to/server.crt"</span>),</span><br><span class="line">  ca: fs.readFileSync(<span class="string">"/path/to/ca.pem"</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h4><p>使用Unix socket通信，如 socket: ‘socket’，可通过命令行 –socket socket 配置。</p>
<h4 id="pfx"><a href="#pfx" class="headerlink" title="pfx"></a>pfx</h4><p>配置数字证书ssl pfx的路径，如 pfx: ‘/path/to/file.pfx’，可通过命令行 –pfx /path/to/file.pfx 配置。</p>
<h4 id="pfxPassphrase"><a href="#pfxPassphrase" class="headerlink" title="pfxPassphrase"></a>pfxPassphrase</h4><p>访问数字证书ssl pfx的密码，如 pfxPassphrase: ‘passphrase’，可通过命令行 –pfx-passphrase passphrase 配置。</p>
<h4 id="progress"><a href="#progress" class="headerlink" title="progress"></a>progress</h4><p>将运行进度输出到控制台，只能使用命令行 –progress 配置。</p>
<h4 id="stdin"><a href="#stdin" class="headerlink" title="stdin"></a>stdin</h4><p>标准输入停止时关闭 dev server，只能通过命令行 –stdin 配置。</p>
<h4 id="watchOptions"><a href="#watchOptions" class="headerlink" title="watchOptions"></a>watchOptions</h4><p>监听配置。</p>
<h3 id="devtool-开发工具"><a href="#devtool-开发工具" class="headerlink" title="devtool 开发工具"></a>devtool 开发工具</h3><p>devtool配置影响生成source map的方式，默认不配置，即不生成source map。打包脚本可通过SourceMap查找实际的报错行号。开发环境可配置为’cheap-module-eval-source-map’；生产环境可配置为’nosources-source-map’。</p>
<p>devtool配置性能：</p>
<img src="/2018/02/01/frontend/工程化/webpack/webpack配置指南/sourceMap.png">
<h3 id="target-构建目标"><a href="#target-构建目标" class="headerlink" title="target 构建目标"></a>target 构建目标</h3><p>指定构建目标，即打包文件适配的环境，字符串或函数。字符串可选值为 web 浏览器环境（默认值），node 类node环境，使用require加载文件，async-node 类node环境，使用fs和vm异步加载文件，electron-main 编译为Electron主进程，electron-renderer 编译为Electron渲染进程，node-webkit 编译为Webkit可用，使用jsonp加载，webworker 编译成WebWorker。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回undefined，避免使用插件构建；返回 'web'，指定 'web' 插件构建</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  target: <span class="function"><span class="params">()</span> =&gt;</span> <span class="literal">undefined</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定 'web' 插件构建</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  target: <span class="function">(<span class="params">compiler</span>) =&gt;</span> &#123;</span><br><span class="line">    compiler.apply(</span><br><span class="line">      <span class="keyword">new</span> webpack.JsonpTemplatePlugin(options.output),</span><br><span class="line">      <span class="keyword">new</span> webpack.LoaderTargetPlugin(<span class="string">"web"</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Watch-监听"><a href="#Watch-监听" class="headerlink" title="Watch 监听"></a>Watch 监听</h3><ul>
<li>watch 是否启用 Watch 模式监听文件改动，以重启编译过程。webpack 默认为 false，webpack-dev-server 和 webpack-dev-middleware 默认为 true。</li>
<li>watchOptions 定义 watch 监听模式的选项。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">watchOptions: &#123;</span><br><span class="line">  aggregateTimeout: <span class="number">300</span>,<span class="comment">// 以毫秒值为单位，该时间段内的文件改动将一次性影响 webpack 的编译过程，默认为 300</span></span><br><span class="line">  ignored: <span class="regexp">/node_modules/</span>,<span class="comment">// 避免监听某些文件的改动，节省内存开销，可以配置为 "files/**/*.js"</span></span><br><span class="line">  poll: <span class="number">1000</span><span class="comment">// 布尔值或数值，真值开启轮询，监听文件变动；数值时，以该时间间隔检查文件变动</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="externals-外部扩展"><a href="#externals-外部扩展" class="headerlink" title="externals 外部扩展"></a>externals 外部扩展</h3><p>用于将第三方类库打包到输出文件中，而是通过运行时由外部注入，如externals: { jquery: ‘jQuery’ }。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">externals: <span class="string">'jQuery'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line">externals: &#123;</span><br><span class="line">  subtract: [<span class="string">'./math'</span>, <span class="string">'subtract'</span>]<span class="comment">// './math' 模块下的子模块 subtract 由外部注入</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line">externals : &#123;</span><br><span class="line">  lodash : &#123;</span><br><span class="line">    commonjs: <span class="string">"lodash"</span>,<span class="comment">// commonjs 或 amd 模块系统下，通过 lodash 访问</span></span><br><span class="line">    amd: <span class="string">"lodash"</span>,</span><br><span class="line">    root: <span class="string">"_"</span> <span class="comment">// 全局变量下，通过 _ 访问</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line">externals: [</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">context, request, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^yourregex$/</span>.test(request))&#123;</span><br><span class="line">      <span class="keyword">return</span> callback(<span class="literal">null</span>, <span class="string">'commonjs '</span> + request);<span class="comment">// 'commonjs ' + request 由外部注入</span></span><br><span class="line">    &#125;</span><br><span class="line">    callback();</span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正则</span></span><br><span class="line">externals: <span class="regexp">/^(jquery|\$)$/i</span></span><br></pre></td></tr></table></figure>
<h3 id="node-注入node"><a href="#node-注入node" class="headerlink" title="node 注入node"></a>node 注入node</h3><p>全局注入 node 变量，提供类 node 环境的功能，由 NodeStuffPlugin 插件为’web’ 或 ‘webworker’ 环境提供ployfill。对象形式，属性的值可以是 true 提供plyfill，”mock” 提供mock，功能很少或没有，”empty” 供空对象，false 什么都不提供。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 默认值</span><br><span class="line">node: &#123;</span><br><span class="line">  console: false,</span><br><span class="line">  global: true,</span><br><span class="line">  process: true,</span><br><span class="line">  __filename: true,// 入口文件的文件名，相对于webpackConfig.context</span><br><span class="line">  __dirname: true,// 入口文件的目录名，相对于webpackConfig.context</span><br><span class="line">  Buffer: true,</span><br><span class="line">  setImmediate: true</span><br><span class="line"></span><br><span class="line">  // 更多选项，请查看“其他 Node.js 核心库”</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 其他</span><br><span class="line">node: &#123;</span><br><span class="line">  dns: &quot;mock&quot;,</span><br><span class="line">  fs: &quot;empty&quot;,</span><br><span class="line">  path: true,</span><br><span class="line">  url: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="performance-性能"><a href="#performance-性能" class="headerlink" title="performance 性能"></a>performance 性能</h3><h4 id="hints"><a href="#hints" class="headerlink" title="hints"></a>hints</h4><p>资源过大时，打开/关闭提示，默认为”warning”，可选值为 false | “error” | “warning”。开发环境推荐使用”warning”，生产环境推荐使用”error”。</p>
<h4 id="maxEntrypointSize"><a href="#maxEntrypointSize" class="headerlink" title="maxEntrypointSize"></a>maxEntrypointSize</h4><p>限制入口文件打包时的最大体积，默认为 250000 (bytes)。</p>
<h4 id="maxAssetSize"><a href="#maxAssetSize" class="headerlink" title="maxAssetSize"></a>maxAssetSize</h4><p>限制所有单个资源的最大体积，默认为 250000 (bytes)。</p>
<h4 id="assetFilter"><a href="#assetFilter" class="headerlink" title="assetFilter"></a>assetFilter</h4><p>配置需要计算最大体积以节省性能的文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">assetFilename</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !(<span class="regexp">/\.map$/</span>.test(assetFilename))</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他</span></span><br><span class="line">performance: &#123;</span><br><span class="line">  assetFilter: <span class="function"><span class="keyword">function</span>(<span class="params">assetFilename</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> assetFilename.endsWith(<span class="string">'.js'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="stats-统计"><a href="#stats-统计" class="headerlink" title="stats 统计"></a>stats 统计</h3><p>细粒度地控制输出日志，字符串或对象形式。字符串可选项包含”errors-only” 只包含错误，”minimal” 包含错误和新的编译信息，”none” 没有输出，”normal” 标准输出，”detailed” 详细输出，”verbose” 全部输出。也可配置为对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">stats: &#123;</span><br><span class="line">  <span class="comment">// 增加资源信息</span></span><br><span class="line">  assets: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 对资源按指定的项进行排序</span></span><br><span class="line">  assetsSort: <span class="string">"field"</span>,</span><br><span class="line">  <span class="comment">// 增加缓存了的（但没构建）模块的信息</span></span><br><span class="line">  cached: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// Show cached assets (setting this to `false` only shows emitted files)</span></span><br><span class="line">  cachedAssets: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 增加子级的信息</span></span><br><span class="line">  children: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 增加包信息（设置为 `false` 能允许较少的冗长输出）</span></span><br><span class="line">  chunks: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 将内置模块信息增加到包信息</span></span><br><span class="line">  chunkModules: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 增加包 和 包合并 的来源信息</span></span><br><span class="line">  chunkOrigins: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 对包按指定的项进行排序</span></span><br><span class="line">  chunksSort: <span class="string">"field"</span>,</span><br><span class="line">  <span class="comment">// 用于缩短请求的上下文目录</span></span><br><span class="line">  context: <span class="string">"../src/"</span>,</span><br><span class="line">  <span class="comment">// `webpack --colors` 等同于</span></span><br><span class="line">  colors: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// Display the distance from the entry point for each module</span></span><br><span class="line">  depth: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// Display the entry points with the corresponding bundles</span></span><br><span class="line">  entrypoints: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 增加错误信息</span></span><br><span class="line">  errors: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 增加错误的详细信息（就像解析日志一样）</span></span><br><span class="line">  errorDetails: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// Exclude assets from being displayed in stats</span></span><br><span class="line">  <span class="comment">// This can be done with a String, a RegExp, a Function getting the assets name</span></span><br><span class="line">  <span class="comment">// and returning a boolean or an Array of the above.</span></span><br><span class="line">  excludeAssets: <span class="string">"filter"</span> | <span class="regexp">/filter/</span> | <span class="function">(<span class="params">assetName</span>) =&gt;</span> ... return <span class="literal">true</span>|<span class="literal">false</span> |</span><br><span class="line">    [<span class="string">"filter"</span>] | [<span class="regexp">/filter/</span>] | [<span class="function">(<span class="params">assetName</span>) =&gt;</span> ... return <span class="literal">true</span>|<span class="literal">false</span>],</span><br><span class="line">  <span class="comment">// Exclude modules from being displayed in stats</span></span><br><span class="line">  <span class="comment">// This can be done with a String, a RegExp, a Function getting the modules source</span></span><br><span class="line">  <span class="comment">// and returning a boolean or an Array of the above.</span></span><br><span class="line">  excludeModules: <span class="string">"filter"</span> | <span class="regexp">/filter/</span> | <span class="function">(<span class="params">moduleSource</span>) =&gt;</span> ... return <span class="literal">true</span>|<span class="literal">false</span> |</span><br><span class="line">    [<span class="string">"filter"</span>] | [<span class="regexp">/filter/</span>] | [<span class="function">(<span class="params">moduleSource</span>) =&gt;</span> ... return <span class="literal">true</span>|<span class="literal">false</span>],</span><br><span class="line">  <span class="comment">// See excludeModules</span></span><br><span class="line">  exclude: <span class="string">"filter"</span> | <span class="regexp">/filter/</span> | <span class="function">(<span class="params">moduleSource</span>) =&gt;</span> ... return <span class="literal">true</span>|<span class="literal">false</span> |</span><br><span class="line">    [<span class="string">"filter"</span>] | [<span class="regexp">/filter/</span>] | [<span class="function">(<span class="params">moduleSource</span>) =&gt;</span> ... return <span class="literal">true</span>|<span class="literal">false</span>],</span><br><span class="line">  <span class="comment">// 增加编译的哈希值</span></span><br><span class="line">  hash: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// Set the maximum number of modules to be shown</span></span><br><span class="line">  maxModules: <span class="number">15</span>,</span><br><span class="line">  <span class="comment">// 增加内置的模块信息</span></span><br><span class="line">  modules: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 对模块按指定的项进行排序</span></span><br><span class="line">  modulesSort: <span class="string">"field"</span>,</span><br><span class="line">  <span class="comment">// Show dependencies and origin of warnings/errors (since webpack 2.5.0)</span></span><br><span class="line">  moduleTrace: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// Show performance hint when file size exceeds `performance.maxAssetSize`</span></span><br><span class="line">  performance: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// Show the exports of the modules</span></span><br><span class="line">  providedExports: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 增加 public path 的信息</span></span><br><span class="line">  publicPath: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 增加模块被引入的原因</span></span><br><span class="line">  reasons: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 增加模块的源码</span></span><br><span class="line">  source: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 增加时间信息</span></span><br><span class="line">  timings: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// Show which exports of a module are used</span></span><br><span class="line">  usedExports: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 增加 webpack 版本信息</span></span><br><span class="line">  version: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 增加提示</span></span><br><span class="line">  warnings: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// Filter warnings to be shown (since webpack 2.4.0),</span></span><br><span class="line">  <span class="comment">// can be a String, Regexp, a function getting the warning and returning a boolean</span></span><br><span class="line">  <span class="comment">// or an Array of a combination of the above. First match wins.</span></span><br><span class="line">  warningsFilter: <span class="string">"filter"</span> | <span class="regexp">/filter/</span> | [<span class="string">"filter"</span>, /filter/] | <span class="function">(<span class="params">warning</span>) =&gt;</span> ... return <span class="literal">true</span>|<span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>frontend</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>carrier</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析async-validator源码</title>
    <url>/2018/01/24/frontend/antd/%E6%B5%85%E6%9E%90async-validator%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<p>这篇文章旨在于分析async-validator数据校验模块(1.8.1版本)的实现。如果这篇文章也能给读者带去裨益，那是笔者的荣幸。</p>
<h2 id="基本校验"><a href="#基本校验" class="headerlink" title="基本校验"></a>基本校验</h2><p>在async-validator源码中，src/rule文件夹下各代码文件实现了最基础的数据校验能力，因此也可以被称为基础校验规则。</p>
<h3 id="类型校验"><a href="#类型校验" class="headerlink" title="类型校验"></a>类型校验</h3><p>要分析async-validator模块的实现，容笔者先从类型校验说起。</p>
<p>在async-validator模块中，单个校验器被定义为validator函数。该validator函数接受rule、value、callback、source、options作为参数。source、options这两个参数姑且按下不论。参数rule是以对象形式配置的校验规则，value是待校验的数据，callback是由开发者手动执行的回调函数。</p>
<p>容易猜想的是，在实现类型校验的过程中，async-validator模块采用了{ type: ‘array’ }的形式配置rule。其中type可接受的值包含’integer’, ‘float’, ‘array’, ‘regexp’, ‘object’, ‘method’, ‘email’, ‘number’, ‘date’, ‘url’, ‘hex’这几种类型。在其背后的实现机制中，async-validator模块没有采用switch语句在单一的函数中完成类型判断，而是通过types对象设定每种类型的校验方法，接着通过调用types<a href="value">type</a>方法实现类型校验，这样能使代码的结构变得清晰。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/rule/type.js</span></span><br><span class="line"><span class="keyword">const</span> types = &#123;</span><br><span class="line">  integer(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> types.number(value) &amp;&amp; <span class="built_in">parseInt</span>(value, <span class="number">10</span>) === value;</span><br><span class="line">  &#125;,</span><br><span class="line">  float(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> types.number(value) &amp;&amp; !types.integer(value);</span><br><span class="line">  &#125;,</span><br><span class="line">  array(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(value);</span><br><span class="line">  &#125;,</span><br><span class="line">  regexp(value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> !!<span class="keyword">new</span> <span class="built_in">RegExp</span>(value);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  date(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> value.getTime === <span class="string">'function'</span> &amp;&amp;</span><br><span class="line">      <span class="keyword">typeof</span> value.getMonth === <span class="string">'function'</span> &amp;&amp;</span><br><span class="line">      <span class="keyword">typeof</span> value.getYear === <span class="string">'function'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  number(value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(value)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> (value) === <span class="string">'number'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  object(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> (value) === <span class="string">'object'</span> &amp;&amp; !types.array(value);</span><br><span class="line">  &#125;,</span><br><span class="line">  method(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> (value) === <span class="string">'function'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  email(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> (value) === <span class="string">'string'</span> &amp;&amp; !!value.match(pattern.email) &amp;&amp; value.length &lt; <span class="number">255</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  url(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> (value) === <span class="string">'string'</span> &amp;&amp; !!value.match(pattern.url);</span><br><span class="line">  &#125;,</span><br><span class="line">  hex(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> (value) === <span class="string">'string'</span> &amp;&amp; !!value.match(pattern.hex);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>从上面的代码中，可以发现types并不包含’boolean’, ‘string’，那么是不是async-validator模块遗漏了这两种数据类型呢？不是的。async-validator通过if-else if语句校验了这两种数据类型（没有else语句，意味着不满足条件的视为校验通过）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/rule/type.js</span></span><br><span class="line"><span class="keyword">const</span> custom = [<span class="string">'integer'</span>, <span class="string">'float'</span>, <span class="string">'array'</span>, <span class="string">'regexp'</span>, <span class="string">'object'</span>,</span><br><span class="line">  <span class="string">'method'</span>, <span class="string">'email'</span>, <span class="string">'number'</span>, <span class="string">'date'</span>, <span class="string">'url'</span>, <span class="string">'hex'</span>];</span><br><span class="line"><span class="keyword">const</span> ruleType = rule.type;</span><br><span class="line"><span class="keyword">if</span> (custom.indexOf(ruleType) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!types[ruleType](value)) &#123;</span><br><span class="line">    errors.push(util.format(options.messages.types[ruleType], rule.fullField, rule.type));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// straight typeof check</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ruleType &amp;&amp; <span class="keyword">typeof</span> (value) !== rule.type) &#123;</span><br><span class="line">  errors.push(util.format(options.messages.types[ruleType], rule.fullField, rule.type));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>奇怪的是，在async-validator模块中，既然type的种类包含了’email’(邮箱), ‘url’(网址)，为什么没有包含’phone’(手机号)呢？或者，为什么async-validator模块不对开发者开放注册type的方法呢？那样开发者可以在types对象中添加方法，使得类型校验更为多样，不是吗？实际上，在async-validator模块的设计中，这个type只是单条校验规则，还不是校验器。作为不可变动的底层，它没有提供向types对象注入新类型的方法。关于可注册的校验器类型，将在下文予以分析。</p>
<h3 id="其他基本校验"><a href="#其他基本校验" class="headerlink" title="其他基本校验"></a>其他基本校验</h3><p>在async-validator模块中，其他基本校验包含’required’(非空校验), ‘whitespace’(空白字符校验), ‘range’(范围校验), ‘enum’(枚举校验), ‘pattern’(正则校验)。’required’, ‘whitespace’校验自不必多说，笔者将着重介绍’range’, ‘enum’, ‘pattern’校验。</p>
<p>关于’range’校验，其能力包含校验数值的大小、字符串或数组的长度，因此rule对象相应添加了min、max、len属性，其中len属性的优先级高于min、max属性。在async-validator源码的实现中，通过先将字符串和数组形式的value转换成待校验的value.length，再通过if语句协调len与min、max校验规则的优先级。具体可参详src/rule/range.js文件的源码。</p>
<p>关于’enum’校验，其能力为校验数据value是否某个枚举数组的一份子，相应rule对象添加了enum属性。若value在rule.enum中，则校验通过；否则校验失败。</p>
<p>关于’pattern’校验，其能力为校验数据value是否匹配正则字符串或正则表达式，相应rule对象添加了pattern属性。该pattern属性可配置为正则字符串或正则表达式。</p>
<p>介绍完了前述校验规则，笔者再度提问，为什么’range’校验中并不包含日期对象的起止时间校验，’enum’校验也不包含数组value尽在rule.enum配置数据中的校验？若说前一条会使’range’校验的实现过于复杂，后一条针对checkbox、select元素却较为常见。实际上，日期对象的range校验在date校验器中实现，笔者将在下文予以描述。</p>
<h2 id="校验器"><a href="#校验器" class="headerlink" title="校验器"></a>校验器</h2><h3 id="内置校验器"><a href="#内置校验器" class="headerlink" title="内置校验器"></a>内置校验器</h3><p>在async-validator源码中，src/validator文件夹下各代码文件将基础校验规则整合成单个校验器（字面上是单个校验器，实际是多个基础校验规则构成的组合校验器）。下面将予以简单的介绍，源码不再赘述。</p>
<p>array校验器校验rule为{ type: ‘array’, required: true, min: 1 }的数据value非空、且为数组类型、且长度匹配校验条件。required为false时，跳过非空校验，后同。</p>
<p>boolean校验器校验rule为{ type: ‘boolean’, required: true }的数据value非空、且为布尔类型。</p>
<p>date校验器校验rule为{ type: ‘date’, required: true, min: new Date(‘2017 12 10’).getTime() }的数据value非空、且为date日期对象，且该日期对象匹配起止时间校验。在date校验器的实现中，通过value.getTime()方法将其转化为毫秒数，然后再作range基础校验。</p>
<p>enum校验器校验rule为{ type: ‘enum’, required: true, enum: [‘male’, ‘female’] }的数据value非空，且其值为rule.enum中的一个。</p>
<p>float校验器校验rule为{ type: ‘float’, required: true, min: 1 }的数据value非空、且为浮点型数值、且长度匹配校验条件。</p>
<p>integer校验器校验rule为{ type: ‘integer’, required: true, min: 1 }的数据value非空、且为整型数值、且长度匹配校验条件。</p>
<p>method校验器校验rule为{ type: ‘method’, required: true }的数据value非空、且为函数。</p>
<p>number校验器校验rule为{ type: ‘number’, required: true, min: 1 }的数据value非空、且为数值、且长度匹配校验条件。</p>
<p>object校验器校验rule为{ type: ‘object’, required: true }的数据value非空、且为对象。</p>
<p>pattern校验器校验rule为{ pattern: /\s/, required: true }的数据value非空、且匹配正则表达式或正则字符串。</p>
<p>regexp校验器校验rule为{ type: ‘regexp’, required: true }的数据value非空、且为正则表达式或正则字符串。</p>
<p>required校验器校验rule为{ required: true }的数据value非空。</p>
<p>string校验器校验rule为{ type: ‘string’, pattern: /\s/, required: true, min: 1, whitespace: true }的数据value非空、且为字符串、且其长度匹配校验条件、且匹配正则表达式或正则字符串、且不是空字符串。</p>
<p>type校验器校验rule为{ type: ‘email | url | hex’, required: true }的数据value非空、且是’email’或’url’或’hex’中的一种。</p>
<h3 id="自定义校验"><a href="#自定义校验" class="headerlink" title="自定义校验"></a>自定义校验</h3><p>前述内置校验器无法满足丰富的业务需求，为此，在async-validator模块的实现中，可以通过配置rule = { validator: function(rule, value, callback, source, options){} }或rule = function(rule, value, callback, source, options){}的方式设置自定义校验器。</p>
<p>上文未提及到的是，错误文案可作为callback回调函数的参数传入。并且，该callback函数必须得到调用，其中的因由，将在下文予以描述。</p>
<p>与此同时，在自定义校验器函数中，可以通过首参获得开发者配置的rule对象，或者说，开发者可以通过rule向自定义校验器传入额外的参数。比如，在async-validator模块结合react使用的场景中，笔者在组件内部定义了一个validateId的方法，可以通过配置rule = { vaidator: this.validateId, ctx: this }的校验规则，从而在validateId方法的内部，通过rule.ctx就可以获得该组件实例。虽然，当需要访问组件实例时，常规的配置方式是{ validator: this.validateId.bind(this) }。这个例子旨在说明，跟随外部环境变动的数据可以通过rule对象传入自定义校验器函数内部，不必通过bind方法实现。</p>
<p>假使多个字段共用同一个自定义校验器时，要怎样才能区分当前的校验字段是哪一个呢？在async-validator源码的实现中，开发者配置的rule数据会添加field、fullField属性，其中field就是当前校验的字段名。fullField是当前校验字段的全名，这在深度校验的时候用到。</p>
<p>值得说明的是，参数source是整个待校验的数据，value也是source的一个属性。这样，async-validator模块就为开发者提供了关联校验的能力。假使有字段min、max需要校验，对min字段，需要校验其数值不大于max字段的值，开发者就可以通过source[max]属性获取到max字段的值，从而实现关联校验。</p>
<p>关于参数options，笔者将在后文予以分析。</p>
<h3 id="注册校验器"><a href="#注册校验器" class="headerlink" title="注册校验器"></a>注册校验器</h3><p>前文已经提到，async-validator模块并未提供注入基础校验规则的方法，相应的，它提供了注册单个校验器的能力。通过调用AsyncValidator.register(type, validator)静态方法，开发者即可以注册一个类型为type的validator校验器。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line">Schema.property = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  getType(rule) &#123;</span><br><span class="line">    <span class="keyword">if</span> (rule.type === <span class="literal">undefined</span> &amp;&amp; (rule.pattern <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>)) &#123;</span><br><span class="line">      rule.type = <span class="string">'pattern'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> (rule.validator) !== <span class="string">'function'</span> &amp;&amp;</span><br><span class="line">      (rule.type &amp;&amp; !validators.hasOwnProperty(rule.type))) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(format(<span class="string">'Unknown rule type %s'</span>, rule.type));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rule.type || <span class="string">'string'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  getValidationMethod(rule) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> rule.validator === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> rule.validator;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(rule);</span><br><span class="line">    <span class="keyword">const</span> messageIndex = keys.indexOf(<span class="string">'message'</span>);</span><br><span class="line">    <span class="keyword">if</span> (messageIndex !== <span class="number">-1</span>) &#123;</span><br><span class="line">      keys.splice(messageIndex, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (keys.length === <span class="number">1</span> &amp;&amp; keys[<span class="number">0</span>] === <span class="string">'required'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> validators.required;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> validators[<span class="keyword">this</span>.getType(rule)] || <span class="literal">false</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Schema.register = <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params">type, validator</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> validator !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Cannot register a validator by type, validator is not a function'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  validators[type] = validator;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>通过源码，我们也可以看到该校验器和内置校验器如array、boolean校验器平级。</p>
<p>因此我们也可以实现一个type类型为’remote’远程校验器。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remoteValidator</span> = (<span class="params">rule, value, callback, source, options</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; field, action, queryData = &#123;&#125;, format &#125; = rule;</span><br><span class="line">  <span class="keyword">if</span> ( !action )&#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">'action is required'</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> data = &#123;</span><br><span class="line">    ...queryData,</span><br><span class="line">    [field]: value</span><br><span class="line">  &#125;;</span><br><span class="line">  data = format &amp;&amp; <span class="keyword">typeof</span> format === <span class="string">'function'</span> ? format(data, source, options) : data;</span><br><span class="line"></span><br><span class="line">  fetch(action,queryData).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ( res.model === <span class="literal">true</span> ) callback();</span><br><span class="line">    <span class="keyword">else</span> callback(<span class="string">'error'</span>);</span><br><span class="line">  &#125;); </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如上的’remote’远程校验器用到了validator函数能够访问rule对象的能力。相应的rule对象也需要{ type: ‘remote’, action: url, queryData: {} }之类的数据格式。需要说明的是，format函数也可以通过async-validator模块内置的transform配置函数实现，该transform函数只接受value作为其参数，虽然完整的待校验数据source需要由外部注入transform函数体内。在async-validator模块中，rule对象中可配置的transform属性即提供了预制校验数据转化的能力。</p>
<h3 id="校验组合"><a href="#校验组合" class="headerlink" title="校验组合"></a>校验组合</h3><p>通常，单个校验器无法满足实际的开发需求，async-validator模块使用校验规则数组[ rule ]校验source数据的某个属性。因此在校验某个数据的时候，可以设置多个校验器如[{ type: ‘array’, required: true, min: 1 }, { validator: function(rule, value, callback){} }]。</p>
<h3 id="深度校验"><a href="#深度校验" class="headerlink" title="深度校验"></a>深度校验</h3><p>对于复杂的对象，async-validator模块提供了深度校验的能力。当rule.type为’object’或’object’时，通过设置rule.defaultField或rule.fields属性(其值为{ key: [rule] }结构)，async-validator模块将会以rule.defaultField与rule.fields合并对象作为校验规则，并校验source内的深层属性。特别的，rule.defaultField可以用来校验数据结构相同的数组项；rule.fields只作用于某个对象属性或某个数组项。该深层属性可以是数组或对象，通过for…in获得数组项或对象属性，并作相应校验。关于这一点，笔者也将在校验流程那一段落加以描述。</p>
<h2 id="校验流程"><a href="#校验流程" class="headerlink" title="校验流程"></a>校验流程</h2><p>整体校验流程为：</p>
<ol>
<li>创建Schema实例，let schema = new Schema(descriptor)，其中descriptor即校验规则rules；</li>
<li>调用schema.define(rules)方法，注册校验规则rules；</li>
<li>调用schema.validate(source, options, callback)方法，校验数据source。</li>
</ol>
<p>笔者将深入讨论第3步schema.validate方法的内部机理，即async-validator模块的校验过程。</p>
<p>在schema.validate方法，主要的工作流程为：</p>
<ol>
<li>参数转换。若options参数不存在，callback回调取次参。</li>
<li>检查校验规则是否存在。若不存在，执行callback回调。</li>
<li>设置内部回调complete函数，为callback回调传入参数errors = [{ field, message }]和参数fields = { [fieldName] }。</li>
<li>获取校验文案，并写入options.messages。</li>
<li>校验规则转换。将参数rules复合为series数组，其中，series数组的每一项为{ rule, value, source, field }形式。其中，value值由rule.transform(value)方法转换后获得；rule的数据格式为{ type, validator, fullField, field, … }诸如此类，rule.type通过schema.getType(rule)方法获得，rule.validator通过schema.getValidationMethod(rule)获得。</li>
<li>调用asyncMap(series, options, singleValidator, completeCallback)函数校验数据。其中，参数singleValidator接受用于执行单个校验器，并操控下一个校验器的执行；completeCallback为最终回调函数，用于执行内部回调complete函数。singleValidator函数接受参数data和doIt，data即遍历着的series数组项；doIt函数等同koa模块的next函数，用于执行下一个校验器或者最终回调。且，若校验为平行校验，doIt函数负责传递参数错误对象数组，由utils.js文件中的asyncParallelArray函数将所有校验器的错误对象数组构建成单一数组，供completeCallback回调处理。若校验为有序校验，且options.first为真值，doIt函数接收到参数错误对象数组、并交由utils.js文件中的asyncSerialArray函数处理的时候，将直接调用completeCallback回调，中断后续校验器的执行；当options.first为否值，对错误对象的处理与平行校验相同。<ul>
<li>通过rule.type、rule.fields、rule.defaultField判断是否深度校验。若是，内部变量deep置为真。</li>
<li>定义addFullfield函数，用于获取深度校验时嵌套对象属性的fullField。</li>
<li>定义单次校验后执行的回调函数cb。cb的实现机制中，包含将错误对象加工为[{ field, message }]数据格式；通过rule.defaultField、rule.fields构建深度校验Schema实例，并在该Schema实例的回调中启动后续校验器。</li>
<li>执行rule.validator(rule, value, cb, source, options)作校验。若返回Promise实例，cb将在该Promise实例的then方法中执行。</li>
</ul>
</li>
</ol>
<p>制作成简易的流程图为：</p>
<img src="/2018/01/24/frontend/antd/浅析async-validator源码/async-validator.png">
<h3 id="平行、有序校验逻辑再梳理"><a href="#平行、有序校验逻辑再梳理" class="headerlink" title="平行、有序校验逻辑再梳理"></a>平行、有序校验逻辑再梳理</h3><p>在async-validator源码中，平行、有序校验逻辑由util.js文件中asyncMap、asyncSerialArray、asyncParallelArray这三个函数支撑，其实现原理类似于async模块。其中，asyncParallelArray函数用于实现平行校验，在某个异步校验器执行过程中，平行调用下一个校验器；asyncSerialArray用于实现有序校验，在异步校验器执行完成后，再启用下一个校验器。</p>
<p>关于asyncParallelArray(arr, func, callback)函数，其工作流即遍历数组arr，对数组项分别调用func函数加以处理，并通过手动执行的次参收集错误对象或调用callback回调。当遍历完成时，callback回调将被执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/util.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncParallelArray</span>(<span class="params">arr, func, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> results = [];</span><br><span class="line">  <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> arrLength = arr.length;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">errors</span>) </span>&#123;</span><br><span class="line">    results.push.apply(results, errors);</span><br><span class="line">    total++;</span><br><span class="line">    <span class="keyword">if</span> (total === arrLength) &#123;</span><br><span class="line">      callback(results);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  arr.forEach(<span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</span><br><span class="line">    func(a, count);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于asyncSerialArray(arr, func, callback)函数，其工作流是在内部构建一个next函数，通过该next函数调用func，并将arr数组项及next函数本身作为func的参数，由此有序遍历arr。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/util.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncSerialArray</span>(<span class="params">arr, func, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> arrLength = arr.length;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">errors</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (errors &amp;&amp; errors.length) &#123;</span><br><span class="line">      callback(errors);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> original = index;</span><br><span class="line">    index = index + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (original &lt; arrLength) &#123;</span><br><span class="line">      func(arr[original], next);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callback([]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  next([]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于asyncMap函数，首先它判断options.first是否为真值，若为真值，调用asyncSerialArray处理series数组，当某一规则校验失败时，即终止校验，执行callback回调。若options.first为否值，构建next函数包装callback，目的是将所有校验器的失败文案合二为一，在传入callback回调中；再根据options.firstFields是否为真值，分别执行asyncSerialArray、asyncParallelArray函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/util.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncMap</span>(<span class="params">objArr, option, func, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (option.first) &#123;</span><br><span class="line">    <span class="keyword">const</span> flattenArr = flattenObjArr(objArr);</span><br><span class="line">    <span class="keyword">return</span> asyncSerialArray(flattenArr, func, callback);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> firstFields = option.firstFields || [];</span><br><span class="line">  <span class="keyword">if</span> (firstFields === <span class="literal">true</span>) &#123;</span><br><span class="line">    firstFields = <span class="built_in">Object</span>.keys(objArr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> objArrKeys = <span class="built_in">Object</span>.keys(objArr);</span><br><span class="line">  <span class="keyword">const</span> objArrLength = objArrKeys.length;</span><br><span class="line">  <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> results = [];</span><br><span class="line">  <span class="keyword">const</span> next = <span class="function">(<span class="params">errors</span>) =&gt;</span> &#123;</span><br><span class="line">    results.push.apply(results, errors);</span><br><span class="line">    total++;</span><br><span class="line">    <span class="keyword">if</span> (total === objArrLength) &#123;</span><br><span class="line">      callback(results);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  objArrKeys.forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> arr = objArr[key];</span><br><span class="line">    <span class="keyword">if</span> (firstFields.indexOf(key) !== <span class="number">-1</span>) &#123;</span><br><span class="line">      asyncSerialArray(arr, func, next);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      asyncParallelArray(arr, func, next);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="反思校验流程"><a href="#反思校验流程" class="headerlink" title="反思校验流程"></a>反思校验流程</h3><p>首先笔者需要介绍的是怎样在自定义校验器中应用promise。代码见下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">covertErrToPromise</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( err ) reject(err);</span><br><span class="line">    <span class="keyword">else</span> resolve();</span><br><span class="line">  &#125;));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ValidatorDecorator</span>(<span class="params">validator</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">rule, value, cb, source, options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = validator(rule, value, cb, source, options);</span><br><span class="line">    <span class="keyword">return</span> covertErrToPromise(result);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@ValidatorDecorator</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">customValidator</span>(<span class="params">rule, value, cb, source, options</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// ...validate </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>不得不说，async-validator模块有个缺点，即需要调用者自行构建Promise实例，而不能直接使用unjq-ajax、react-resource、fetch之类模块返回的Promise实例。与此同时，返回的Promise实例将阻塞后续的校验器。</p>
<p>因此笔者有个疑问，为什么async-validator模块在组织异步逻辑的时候，没有采用Promise的写法？</p>
<p>如果async-validator模块在实现中率先判断rule.validator的返回值是否为Promise实例（通过instanceof判断是否Promise实例，或者通过thenable之类的函数判断返回值是否包含then方法），对于同步校验校验器，将其转化为Promise实例，再将cb回调挂载到该Promise的then方法上；对于异步校验器，不作任何处理。这样可以简化自定义校验器的书写流程，校验通过返回错误文案，成功返回null或不返回；异步校验可以采用async函数书写，也不需要构建Promise实例。</p>
<p>在性能方面，仍旧参数options的first、firstFields属性判断是否该启用有序校验；默认使用平行校验。</p>
<h2 id="错误文案"><a href="#错误文案" class="headerlink" title="错误文案"></a>错误文案</h2><p>在async-validator模块中，错误文案通过Schema实例的messages方法添加。在内置或自定义校验器中，通过options参数的messages方法获得，再由util.js文件里的format函数格式化。介于async-validator模块不对外提供format方法，对于使用者注册的type校验器，需要自行构建format函数，手动格式化。</p>
<p>此外，async-validator模块不提供国际化的能力。因此，在切换语言时，需要使用者自行调用Schema实例的messages方法切换加载的语言包。关于async-validator模块的设计，完全可以为Schema实例添加一个setLanguage方法，用以切换语言，随后再调用messages添加当前项目实际需要的错误文案。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">schema.messages(&#123;</span><br><span class="line">  <span class="keyword">default</span>: <span class="string">'字段 %s 校验失败'</span>,</span><br><span class="line">  required: <span class="string">'%s 必填'</span>,</span><br><span class="line">  enum: <span class="string">'%s 必须是 %s 中的一个'</span>,</span><br><span class="line">  whitespace: <span class="string">'%s 不能为空'</span>,</span><br><span class="line">  date: &#123;</span><br><span class="line">    format: <span class="string">'%s 日期对象 %s 无效，当转换 %s时'</span>,</span><br><span class="line">    parse: <span class="string">'%s 日期对象不能被解析, %s 无效'</span>,</span><br><span class="line">    invalid: <span class="string">'%s 日期对象 %s 无效'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  types: &#123;</span><br><span class="line">    string: <span class="string">'%s 不是一个 %s'</span>,</span><br><span class="line">    method: <span class="string">'%s 不是一个 %s (function)'</span>,</span><br><span class="line">    array: <span class="string">'%s 不是一个 %s'</span>,</span><br><span class="line">    object: <span class="string">'%s 不是一个 %s'</span>,</span><br><span class="line">    number: <span class="string">'%s 不是一个 %s'</span>,</span><br><span class="line">    date: <span class="string">'%s 不是一个 %s'</span>,</span><br><span class="line">    boolean: <span class="string">'%s 不是一个 %s'</span>,</span><br><span class="line">    integer: <span class="string">'%s 不是一个 %s'</span>,</span><br><span class="line">    float: <span class="string">'%s 不是一个 %s'</span>,</span><br><span class="line">    regexp: <span class="string">'%s 不是一个有效的 %s'</span>,</span><br><span class="line">    email: <span class="string">'%s 不是一个有效的 %s'</span>,</span><br><span class="line">    url: <span class="string">'%s 不是一个有效的 %s'</span>,</span><br><span class="line">    hex: <span class="string">'%s 不是一个有效的 %s'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  string: &#123;</span><br><span class="line">    len: <span class="string">'字段 %s 须包含 %s 个字符'</span>,</span><br><span class="line">    min: <span class="string">'字段 %s 须大于 %s 个字符'</span>,</span><br><span class="line">    max: <span class="string">'字段 %s 须小于 %s 个字符'</span>,</span><br><span class="line">    range: <span class="string">'字段 %s 须小于 %s 到 %s 个字符'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  number: &#123;</span><br><span class="line">    len: <span class="string">'字段 %s 须等于 %s'</span>,</span><br><span class="line">    min: <span class="string">'字段 %s 须大于 %s'</span>,</span><br><span class="line">    max: <span class="string">'字段 %s 须小于 %s'</span>,</span><br><span class="line">    range: <span class="string">'字段 %s 须介于 %s 、 %s 之间'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  array: &#123;</span><br><span class="line">    len: <span class="string">'字段 %s 的长度须等于 %s'</span>,</span><br><span class="line">    min: <span class="string">'字段 %s 的长度须大于 %s'</span>,</span><br><span class="line">    max: <span class="string">'字段 %s 的长度须小于 %s'</span>,</span><br><span class="line">    range: <span class="string">'字段 %s 的长度须介于 %s 、 %s 之间'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  pattern: &#123;</span><br><span class="line">    mismatch: <span class="string">'字段 %s 的值 %s 不匹配正则 %s'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="async-validator在rc-form组件中的应用"><a href="#async-validator在rc-form组件中的应用" class="headerlink" title="async-validator在rc-form组件中的应用"></a>async-validator在rc-form组件中的应用</h3><p>rc-form组件是ant-design组件库中表单组件的底层实现。关于该表单组件的实现，笔者将在以后的文章中探讨。在这篇文章中，笔者只截取rc-form组件(2.1.6版本)对async-validator模块的使用。</p>
<p>在业务上，一则当表单元素失去焦点时需要校验该表单项，另一方面整张表单在提交时需要校验所有未隐藏的表单项。以上两点，rc-form组件都基于validateFieldsInternal方法创建新的AsyncValidator实例实现。参数action用于过滤校验条件，适用于第一种情形。参数options.force为真时，在事件过程中已被校验的表单项仍需再度校验；options.firstFields需要执行阻塞式校验的字段；其他属性同async-validator模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rc-form/src/createBaseField.js</span></span><br><span class="line">validateFieldsInternal(fields, &#123;</span><br><span class="line">  fieldNames,</span><br><span class="line">  action,</span><br><span class="line">  options = &#123;&#125;,</span><br><span class="line">&#125;, callback) &#123;</span><br><span class="line">  <span class="keyword">const</span> allRules = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> allValues = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> allFields = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> alreadyErrors = &#123;&#125;;</span><br><span class="line">  fields.forEach(<span class="function">(<span class="params">field</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> name = field.name;</span><br><span class="line">    <span class="comment">// 表单项在事件过程中已被校验，将不予再次校验</span></span><br><span class="line">    <span class="keyword">if</span> (options.force !== <span class="literal">true</span> &amp;&amp; field.dirty === <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (field.errors) &#123;</span><br><span class="line">        <span class="keyword">set</span>(alreadyErrors, name, &#123; errors: field.errors &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> fieldMeta = <span class="keyword">this</span>.fieldsStore.getFieldMeta(name);</span><br><span class="line">    <span class="keyword">const</span> newField = &#123;</span><br><span class="line">      ...field,</span><br><span class="line">    &#125;;</span><br><span class="line">    newField.errors = <span class="literal">undefined</span>;</span><br><span class="line">    newField.validating = <span class="literal">true</span>;</span><br><span class="line">    newField.dirty = <span class="literal">true</span>;</span><br><span class="line">    allRules[name] = <span class="keyword">this</span>.getRules(fieldMeta, action);</span><br><span class="line">    allValues[name] = newField.value;</span><br><span class="line">    allFields[name] = newField;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">this</span>.setFields(allFields);</span><br><span class="line">  <span class="comment">// in case normalize</span></span><br><span class="line">  <span class="built_in">Object</span>.keys(allValues).forEach(<span class="function">(<span class="params">f</span>) =&gt;</span> &#123;</span><br><span class="line">    allValues[f] = <span class="keyword">this</span>.fieldsStore.getFieldValue(f);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (callback &amp;&amp; isEmptyObject(allFields)) &#123;</span><br><span class="line">    callback(isEmptyObject(alreadyErrors) ? <span class="literal">null</span> : alreadyErrors,</span><br><span class="line">      <span class="keyword">this</span>.fieldsStore.getFieldsValue(fieldNames));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> validator = <span class="keyword">new</span> AsyncValidator(allRules);</span><br><span class="line">  <span class="keyword">if</span> (validateMessages) &#123;</span><br><span class="line">    validator.messages(validateMessages);</span><br><span class="line">  &#125;</span><br><span class="line">  validator.validate(allValues, options, (errors) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> errorsGroup = &#123;</span><br><span class="line">      ...alreadyErrors,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (errors &amp;&amp; errors.length) &#123;</span><br><span class="line">      errors.forEach(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> fieldName = e.field;</span><br><span class="line">        <span class="keyword">if</span> (!has(errorsGroup, fieldName)) &#123;</span><br><span class="line">          <span class="keyword">set</span>(errorsGroup, fieldName, &#123; errors: [] &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> fieldErrors = <span class="keyword">get</span>(errorsGroup, fieldName.concat('.errors'));</span><br><span class="line">        fieldErrors.push(e);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    const expired = [];</span><br><span class="line">    const nowAllFields = &#123;&#125;;</span><br><span class="line">    <span class="built_in">Object</span>.keys(allRules).forEach(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> fieldErrors = <span class="keyword">get</span>(errorsGroup, name);</span><br><span class="line">      const nowField = this.fieldsStore.getField(name);</span><br><span class="line">      // avoid concurrency problems</span><br><span class="line">      // 校验过程中数据变更，提醒需要再次校验</span><br><span class="line">      if (nowField.value !== allValues[name]) &#123;</span><br><span class="line">        expired.push(&#123;</span><br><span class="line">          name,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        nowField.errors = fieldErrors &amp;&amp; fieldErrors.errors;</span><br><span class="line">        nowField.value = allValues[name];</span><br><span class="line">        nowField.validating = <span class="literal">false</span>;</span><br><span class="line">        nowField.dirty = <span class="literal">false</span>;</span><br><span class="line">        nowAllFields[name] = nowField;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.setFields(nowAllFields);</span><br><span class="line">    <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">      <span class="keyword">if</span> (expired.length) &#123;</span><br><span class="line">        expired.forEach(<span class="function">(<span class="params">&#123; name &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> fieldErrors = [&#123;</span><br><span class="line">            message: <span class="string">`<span class="subst">$&#123;name&#125;</span> need to revalidate`</span>,</span><br><span class="line">            field: name,</span><br><span class="line">          &#125;];</span><br><span class="line">          <span class="keyword">set</span>(errorsGroup, name, &#123;</span><br><span class="line">            expired: <span class="literal">true</span>,</span><br><span class="line">            errors: fieldErrors,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      callback(isEmptyObject(errorsGroup) ? <span class="literal">null</span> : errorsGroup,</span><br><span class="line">        <span class="keyword">this</span>.fieldsStore.getFieldsValue(fieldNames));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">getRules(fieldMeta, action) &#123;</span><br><span class="line">  <span class="keyword">const</span> actionRules = fieldMeta.validate.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !action || item.trigger.indexOf(action) &gt;= <span class="number">0</span>;</span><br><span class="line">  &#125;).map(<span class="function">(<span class="params">item</span>) =&gt;</span> item.rules);</span><br><span class="line">  <span class="keyword">return</span> flattenArray(actionRules);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h4 id="表单项校验"><a href="#表单项校验" class="headerlink" title="表单项校验"></a>表单项校验</h4><p>针对第一点，rc-form组件的实现策略是通过getFieldProps方法生成传入表单元素的事件绑定函数props如{ onChange: () =&gt; {} }。绑定函数内部将调用validateFieldsInternal方法对当前的表单项进行校验。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rc-form/src/createBaseField.js</span></span><br><span class="line">getFieldProps(name, usersFieldOption = &#123;&#125;) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> validateRules = normalizeValidateRules(validate, rules, validateTrigger);</span><br><span class="line">  <span class="keyword">const</span> validateTriggers = getValidateTriggers(validateRules);</span><br><span class="line">  validateTriggers.forEach(<span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (inputProps[action]) <span class="keyword">return</span>;</span><br><span class="line">    inputProps[action] = <span class="keyword">this</span>.getCacheBind(name, action, <span class="keyword">this</span>.onCollectValidate);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> inputProps;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>其中，参数validate = [{ rules, trigger }]、rules、validateTrigger均为usersFieldOption的属性。validate可以设置多组校验规则的不同触发方式，如失去焦点(‘onBlur’)或数据改变(‘onChange’)。参数validateTrigger即usersFieldOption.rules校验规则的触发方式，默认为’onChange’。this.getCacheBind方法用于以this.cachedBind = { name: { action: () =&gt; {} } }缓存校验函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rc-form/src/createBaseField.js</span></span><br><span class="line">onCollectValidate(name_, action, ...args) &#123;</span><br><span class="line">  <span class="comment">// this.onCollectCommon方法用于执行onChange等副作用函数，并获取表单项的值</span></span><br><span class="line">  <span class="keyword">const</span> &#123; field, fieldMeta &#125; = <span class="keyword">this</span>.onCollectCommon(name_, action, args);</span><br><span class="line">  <span class="keyword">const</span> newField = &#123;</span><br><span class="line">    ...field,</span><br><span class="line">    dirty: <span class="literal">true</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">this</span>.validateFieldsInternal([newField], &#123;</span><br><span class="line">    action,</span><br><span class="line">    options: &#123;</span><br><span class="line">      firstFields: !!fieldMeta.validateFirst,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>可以看到，inputProps注入表单项的绑定函数this.onCollectValidate方法将调用this.validateFieldsInternal校验表单项。特别需要指明的是，fieldMeta为{ name, trigger, valuePropName, …usersFieldOption, validate }数据格式。其中，usersFieldOption.validateFirst决定当前校验字段是否执行阻塞式校验；usersFieldOption.getValueFromEvent用于将事件参数event等转化成表单项额值。usersFieldOption.onChange等方法当同名事件发生时将被调用。</p>
<h4 id="表单校验"><a href="#表单校验" class="headerlink" title="表单校验"></a>表单校验</h4><p>rc-form组件中，校验整张表单通过显式调用this.validateFields方法实现。在该方法内部，也将调用this.validateFieldsInternal校验所有表单项。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rc-form/src/createBaseField.js</span></span><br><span class="line">validateFields(ns, opt, cb) &#123;</span><br><span class="line">  <span class="comment">// getParams用于参数转化</span></span><br><span class="line">  <span class="keyword">const</span> &#123; names, callback, options &#125; = getParams(ns, opt, cb);</span><br><span class="line">  <span class="keyword">const</span> fieldNames = names ?</span><br><span class="line">    <span class="keyword">this</span>.fieldsStore.getValidFieldsFullName(names) :</span><br><span class="line">    <span class="keyword">this</span>.fieldsStore.getValidFieldsName();</span><br><span class="line">  <span class="keyword">const</span> fields = fieldNames</span><br><span class="line">    .filter(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> fieldMeta = <span class="keyword">this</span>.fieldsStore.getFieldMeta(name);</span><br><span class="line">      <span class="keyword">return</span> hasRules(fieldMeta.validate);</span><br><span class="line">    &#125;).map(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> field = <span class="keyword">this</span>.fieldsStore.getField(name);</span><br><span class="line">      field.value = <span class="keyword">this</span>.fieldsStore.getFieldValue(name);</span><br><span class="line">      <span class="keyword">return</span> field;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">if</span> (!fields.length) &#123;</span><br><span class="line">    <span class="keyword">if</span> (callback) &#123;</span><br><span class="line">      callback(<span class="literal">null</span>, <span class="keyword">this</span>.fieldsStore.getFieldsValue(fieldNames));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="string">'firstFields'</span> <span class="keyword">in</span> options)) &#123;</span><br><span class="line">    options.firstFields = fieldNames.filter(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> fieldMeta = <span class="keyword">this</span>.fieldsStore.getFieldMeta(name);</span><br><span class="line">      <span class="keyword">return</span> !!fieldMeta.validateFirst;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.validateFieldsInternal(fields, &#123;</span><br><span class="line">    fieldNames,</span><br><span class="line">    options,</span><br><span class="line">  &#125;, callback);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h3 id="后台校验"><a href="#后台校验" class="headerlink" title="后台校验"></a>后台校验</h3><p>笔者将探讨的是async-validator模块在koa框架中的使用。</p>
<p>因为AsyncValidator实例的validate方法采用回调的方式组织异步逻辑，所以需要将其转化为Promise实例，这个过程又可以通过在中间件中提供ctx.validate方法实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> asyncValidatorMiddleware = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx, next</span>)</span>&#123;</span><br><span class="line">  ctx.validate = <span class="function">(<span class="params">rules, values, opts</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> options = <span class="built_in">Object</span>.assign(opts);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> validator = <span class="keyword">new</span> AsyncValidator(rules);</span><br><span class="line">    <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      validator.validate(values, options, errs =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> ( errs )&#123;</span><br><span class="line">          resolve();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> msgs = errs.map(<span class="function"><span class="params">err</span>=&gt;</span>err.message).join(<span class="string">'; '</span>);</span><br><span class="line">          ctx.throw(<span class="number">400</span>, msgs);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  next();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="制作校验器图形界面"><a href="#制作校验器图形界面" class="headerlink" title="制作校验器图形界面"></a>制作校验器图形界面</h3><p>在本小节，笔者将结合实际的项目经验，概要地设计一个可订制校验规则的图形界面。</p>
<p>首先，我们需要一个面板预设单组校验器的校验模式，比如限制某字段必须介于1到10之间，我们就可以在这块面板中限定该字段的值只能为数值，且开启’range’范围校验；接着，在另一块面板配置实际的校验数据，如min = 1, max = 10，由此生成实际的校验规则。</p>
<p>在第一块面板中，预设的校验模式最终将会吐出{ validatorCode, validatorName, validatorDescription, validatorRules }形式的数据结构。其中validatorCode为校验器code，validatorName为校验器名称，validatorDesription为校验器描述，validatorRules = [ rule ]以数组形式存储各字段的校验规则。rule对象的数据结构譬如{ fieldCode, fieldName, fieldDecription, type, validateStrategy, renderType }。在rule对象中，fieldCode为校验字段code；fieldName为校验字段名称；fieldDecription为校验字段描述；type为类型，可选’number’, ‘string’, ‘date’, ‘enum’, ‘array’, ‘object’, ‘custom’（当type为’array’或’object’时，嵌套设置其下属数组项或属性的校验规则；当type为’custom’时，校验方式由程序约定，通过fieldCode查找）；validateStrategy为校验策略，当type为’string’时，可选的校验策略包含’regexp’（正则匹配）, ‘expired’（严格相等）, ‘url’等，余略；renderType为渲染形式，当type为’string’时，renderType自然为输入框形式，这意味着在第二块面板中需要渲染一个输入框以配置正则或期望值，余略。</p>
<p>关于校验类型type和校验策略validateStrategy、渲染形式renderType的关系，笔者用下图简要说明：</p>
<img src="/2018/01/24/frontend/antd/浅析async-validator源码/yuanxing1.png">
<p>特别的，枚举类型额外需要输入框，以配置枚举值key-value键值对。</p>
<p>第一块面板用原型图展示，即为：</p>
<img src="/2018/01/24/frontend/antd/浅析async-validator源码/yuanxing2.png">
<p>至于弹窗形式的单字段校验规则配置，笔者不再赘述。</p>
<p>需要说明的是，针对type类型为’array’或’object’类型的校验规则，因其配置繁琐，完全可以使用type = ‘custom’类型予以校验，通过validatorCode与fieldCode获取后台写死的校验器，这样既对用户透明，也不容易出错。</p>
<p>有了第一块面板，我们再设计第二块面板，即实际校验数据配置面板。这里我们引入校验组合的概念，即单个校验组合下可配置多个校验器，校验组合之间有序排列，逐个校验，其中一个出错，即为校验失败。至于校验器配置弹窗，其渲染方式完全由第一块面板填充的数据决定，如我们配置了validateRules = [{ fieldCode: ‘field1’, fieldName: ‘field1’, type: ‘string’, validateStragery: ‘expired’, renderType: ‘input’ }, { fieldCode: ‘field2’, fieldName: ‘field2’, type: ‘enum’, validateStragery: ‘multiple’, renderType: ‘select’ }]，校验器的配置弹窗即显示一个输入框和一个多选下拉框，前者用于决定第一个字段的期望值，后者用于决定第二个字段须为下拉框选中项中的一个。在这里，笔者只给出校验组合的原型图，至于校验器的配置弹窗，不再赘述。</p>
<p><img src="/Users/alfred/Desktop/浅析async-validator源码/imgs/3.png" alt></p>
<p>有了以上两块面板及其输入数据，我们就可以拼装实际的校验规则。笔者依然以前述的validatorRules为例，当用户配置了如下的校验组合，validatorCombinations = [[{ field1: ‘aaa’, field2: [‘1’, ‘2’, ‘3’] }]]。生成的实际校验器即为{ type: ‘expired’, expired: ‘aaa’ }及{ type: ‘enum’, enum: [‘1’, ‘2’, ‘3’] }。针对type值为’expired’的校验规则，预先需要在AsyncValidator构造函数中注册expiredValidator校验器如let expiredValidator = (val, rule) =&gt; { if ( val === rule.expired ) cb(); else cb(util.format(‘value %s is not valid, %s expired’, val, rule.expired)) }。</p>
<p>值得反思的是，以上的图形界面，并没有提供关联校验的能力。</p>
<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><h3 id="jquery-validate"><a href="#jquery-validate" class="headerlink" title="jquery-validate"></a>jquery-validate</h3><p>相比async-validator模块专司于数据校验，jquery-validate模块还承担着视图层的工作。因此数据在流入流出校验器时，都可能需要判断数据所属节点的标签名。在这里，笔者只概要地介绍该插件数据校验方面的流程。</p>
<h4 id="内置校验器-1"><a href="#内置校验器-1" class="headerlink" title="内置校验器"></a>内置校验器</h4><p>在jquery-validate模块源码中，校验方法注册在$.validator.prototype.methods（后文将用methods代替）属性中。校验方法的函数形式均为function(value, element, param)，参数value为待校验的值，element为待校验的元素，param为相应校验规则的值。校验方法又包含required非空检验，email校验，url校验，date校验，dateISO年-月-日校验，number数值（包含小数）校验，digits正整数校验，creditcard信用卡号校验，minlength最小长度校验，maxlength最大长度校验，rangelength长度范围校验，min最小值校验，max最大值校验，range范围校验，equalTo关联元素等值校验，remote远程校验。</p>
<p>挂载在元素上的校验规则通过let rules = { fieldName:{ required: true, min: 1 } }; $(“#form”).validate({ rules })形式设定。因此各校验方法获得的param参数也在于配置项rules.filedName对象，如methods.required校验方法获得的param为true，methods.min方法获得的param为1。特别的，在methods.required校验方法中，预先调用this.depend方法判断先决条件是否成立（前提是将required校验方法作为预先设置的最基础的校验器，其他校验方法都调用this.optional方法校验元素的值非空后，才进行特定的数据校验。该先决条件的成立与否都不影响校验显示结果），当param为字符串时，需要相应元素在页面中存在，这在联动显示隐藏的业务场景特别有用；当param为函数时，需要函数返回真值，这可用在关联校验等业务场景中；当param为布尔值时，无须判断先决条件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.validator.prototype.methods = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">  elementValue: <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> val,</span><br><span class="line">      $element = $(element),</span><br><span class="line">      type = element.type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">"radio"</span> || type === <span class="string">"checkbox"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.findByName(element.name).filter(<span class="string">":checked"</span>).val();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">"number"</span> &amp;&amp; <span class="keyword">typeof</span> element.validity !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> element.validity.badInput ? <span class="literal">false</span> : $element.val();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    val = $element.val();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">"string"</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> val.replace(<span class="regexp">/\r/g</span>, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  checkable: <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="regexp">/radio|checkbox/i</span>).test(element.type);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  getLength: <span class="function"><span class="keyword">function</span> (<span class="params">value, element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (element.nodeName.toLowerCase()) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"select"</span>:</span><br><span class="line">        <span class="keyword">return</span> $(<span class="string">"option:selected"</span>, element).length;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"input"</span>:</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.checkable(element)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.findByName(element.name).filter(<span class="string">":checked"</span>).length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value.length;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  depend: <span class="function"><span class="keyword">function</span> (<span class="params">param, element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.dependTypes[<span class="keyword">typeof</span> param] ? <span class="keyword">this</span>.dependTypes[<span class="keyword">typeof</span> param](param, element) : <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  dependTypes: &#123;</span><br><span class="line">    <span class="string">"boolean"</span>: <span class="function"><span class="keyword">function</span> (<span class="params">param</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> param;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"string"</span>: <span class="function"><span class="keyword">function</span> (<span class="params">param, element</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> !!$(param, element.form).length;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"function"</span>: <span class="function"><span class="keyword">function</span> (<span class="params">param, element</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> param(element);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  optional: <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> val = <span class="keyword">this</span>.elementValue(element);</span><br><span class="line">    <span class="keyword">return</span> !$.validator.methods.required.call(<span class="keyword">this</span>, val, element) &amp;&amp; <span class="string">"dependency-mismatch"</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// &#123;required:true&#125;、&#123;required:function()&#123;return $(anotherEle).val()&lt;12&#125;&#125;依赖条件  </span></span><br><span class="line">    required: <span class="function"><span class="keyword">function</span>(<span class="params">value, element, param</span>) </span>&#123; </span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.depend(param, element)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"dependency-mismatch"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (element.nodeName.toLowerCase() === <span class="string">"select"</span>) &#123;</span><br><span class="line">        <span class="comment">// could be an array for select-multiple or a string, both are fine this way  </span></span><br><span class="line">        <span class="keyword">var</span> val = $(element).val();</span><br><span class="line">        <span class="keyword">return</span> val &amp;&amp; val.length &gt; <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.checkable(element)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getLength(value, element) &gt; <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> value.length &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    email: <span class="function"><span class="keyword">function</span>(<span class="params">value, element</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || <span class="regexp">/^[a-zA-Z0-9.!#$%&amp;'*+\/=?^_`&#123;|&#125;~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]&#123;0,61&#125;[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]&#123;0,61&#125;[a-zA-Z0-9])?)*$/</span>.test(value);</span><br><span class="line">    &#125;,</span><br><span class="line">    url: <span class="function"><span class="keyword">function</span>(<span class="params">value, element</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || <span class="regexp">/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d&#123;1,3&#125;)&#123;3&#125;)(?!(?:169\.254|192\.168)(?:\.\d&#123;1,3&#125;)&#123;2&#125;)(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d&#123;1,3&#125;)&#123;2&#125;)(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d&#123;1,2&#125;|2[0-4]\d|25[0-5]))&#123;2&#125;(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]&#123;2,&#125;)).?)(?::\d&#123;2,5&#125;)?(?:[/?#]\S*)?$/i</span>.test(value);</span><br><span class="line">    &#125;,</span><br><span class="line">    date: <span class="function"><span class="keyword">function</span>(<span class="params">value, element</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || !<span class="regexp">/Invalid|NaN/</span>.test(<span class="keyword">new</span> <span class="built_in">Date</span>(value).toString());</span><br><span class="line">    &#125;,</span><br><span class="line">    dateISO: <span class="function"><span class="keyword">function</span>(<span class="params">value, element</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || <span class="regexp">/^\d&#123;4&#125;[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/</span>.test(value);</span><br><span class="line">    &#125;,</span><br><span class="line">    number: <span class="function"><span class="keyword">function</span>(<span class="params">value, element</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || <span class="regexp">/^(?:-?\d+|-?\d&#123;1,3&#125;(?:,\d&#123;3&#125;)+)?(?:\.\d+)?$/</span>.test(value);</span><br><span class="line">    &#125;,</span><br><span class="line">    digits: <span class="function"><span class="keyword">function</span>(<span class="params">value, element</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || <span class="regexp">/^\d+$/</span>.test(value);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// http://jqueryvalidation.org/creditcard-method/  </span></span><br><span class="line">    <span class="comment">// based on http://en.wikipedia.org/wiki/Luhn_algorithm  </span></span><br><span class="line">    creditcard: <span class="function"><span class="keyword">function</span>(<span class="params">value, element</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.optional(element)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"dependency-mismatch"</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="regexp">/[^0-9 \-]+/</span>.test(value)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> nCheck = <span class="number">0</span>,</span><br><span class="line">        nDigit = <span class="number">0</span>,</span><br><span class="line">        bEven = <span class="literal">false</span>,</span><br><span class="line">        n, cDigit;</span><br><span class="line"></span><br><span class="line">      value = value.replace(<span class="regexp">/\D/g</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// http://developer.ean.com/general_info/Valid_Credit_Card_Types  </span></span><br><span class="line">      <span class="keyword">if</span> (value.length &lt; <span class="number">13</span> || value.length &gt; <span class="number">19</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (n = value.length - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) &#123;</span><br><span class="line">        cDigit = value.charAt(n);</span><br><span class="line">        nDigit = <span class="built_in">parseInt</span>(cDigit, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (bEven) &#123;</span><br><span class="line">          <span class="keyword">if</span> ((nDigit *= <span class="number">2</span>) &gt; <span class="number">9</span>) &#123;</span><br><span class="line">            nDigit -= <span class="number">9</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nCheck += nDigit;</span><br><span class="line">        bEven = !bEven;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> (nCheck % <span class="number">10</span>) === <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    minlength: <span class="function"><span class="keyword">function</span>(<span class="params">value, element, param</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> length = $.isArray(value) ? value.length : <span class="keyword">this</span>.getLength(value, element);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || length &gt;= param;</span><br><span class="line">    &#125;,</span><br><span class="line">    maxlength: <span class="function"><span class="keyword">function</span>(<span class="params">value, element, param</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> length = $.isArray(value) ? value.length : <span class="keyword">this</span>.getLength(value, element);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || length &lt;= param;</span><br><span class="line">    &#125;,</span><br><span class="line">    rangelength: <span class="function"><span class="keyword">function</span>(<span class="params">value, element, param</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> length = $.isArray(value) ? value.length : <span class="keyword">this</span>.getLength(value, element);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || (length &gt;= param[<span class="number">0</span>] &amp;&amp; length &lt;= param[<span class="number">1</span>]);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    min: <span class="function"><span class="keyword">function</span>(<span class="params">value, element, param</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || value &gt;= param;</span><br><span class="line">    &#125;,</span><br><span class="line">    max: <span class="function"><span class="keyword">function</span>(<span class="params">value, element, param</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || value &lt;= param;</span><br><span class="line">    &#125;,</span><br><span class="line">    range: <span class="function"><span class="keyword">function</span>(<span class="params">value, element, param</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || (value &gt;= param[<span class="number">0</span>] &amp;&amp; value &lt;= param[<span class="number">1</span>]);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    equalTo: <span class="function"><span class="keyword">function</span>(<span class="params">value, element, param</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// bind to the blur event of the target in order to revalidate whenever the target field is updated  </span></span><br><span class="line">      <span class="comment">// TODO find a way to bind the event just once, avoiding the unbind-rebind overhead  </span></span><br><span class="line">      <span class="keyword">var</span> target = $(param);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.settings.onfocusout) &#123;</span><br><span class="line">        target.off(<span class="string">".validate-equalTo"</span>).on(<span class="string">"blur.validate-equalTo"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          $(element).valid();<span class="comment">// 执行验证  </span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> value === target.val();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="远程校验"><a href="#远程校验" class="headerlink" title="远程校验"></a>远程校验</h4><p>关于methods.remote远程校验。与async-validadtor模块不同的是，首先async-validadtor模块并没有提供远程校验方法，其次async-validadtor模块有异步流程控制，jquery-validate模块没有，而是通过远程校验起始时自增1、结束时自减1的标识符this.pendingRequest，以及远程校验中元素的集合this.pending来感知远程校验的状态，随后才能提交表单。</p>
<p>在jquery-validate模块中，远程校验的校验规则配置形式为rule = { remote: url }或rule = { url, …params }。参数url为请求地址，其余参数params以深拷贝的形式改变$.ajax方法的参数，可以包含data属性改变请求数据（默认值为表单项name值和表单项数据组成的键值对），success改变成功时的回调函数。默认的成功回调success中，当响应为真值，即为校验成功；为否值，即为校验失败。改写这个成功回调，需要调用者对jquery-validate模块的机制比较理解。</p>
<p>在性能方面，jquery-validate模块会在校验元素的’data-previousValue’属性中缓存上次的校验数据及结果。当元素的当前值和缓存数据相同时，直接使用缓存中的校验结果。为避免同一个校验元素连续发送多次请求，jquery-validate模块通过扩展$.ajax实现，当有新一轮请求时，将前一轮请求abort终结掉。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.validator.prototype = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  previousValue: <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $.data(element, <span class="string">"previousValue"</span>) || $.data(element, <span class="string">"previousValue"</span>, &#123;</span><br><span class="line">      old: <span class="literal">null</span>,</span><br><span class="line">      valid: <span class="literal">true</span>,</span><br><span class="line">      message: <span class="keyword">this</span>.defaultMessage(element, <span class="string">"remote"</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  startRequest: <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.pending[element.name]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.pendingRequest++;</span><br><span class="line">      <span class="keyword">this</span>.pending[element.name] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  stopRequest: <span class="function"><span class="keyword">function</span> (<span class="params">element, valid</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.pendingRequest--;</span><br><span class="line">    <span class="comment">// sometimes synchronization fails, make sure pendingRequest is never &lt; 0  </span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.pendingRequest &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.pendingRequest = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.pending[element.name];</span><br><span class="line">    <span class="keyword">if</span> (valid &amp;&amp; <span class="keyword">this</span>.pendingRequest === <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.formSubmitted &amp;&amp; <span class="keyword">this</span>.form()) &#123;</span><br><span class="line">      $(<span class="keyword">this</span>.currentForm).submit();</span><br><span class="line">      <span class="keyword">this</span>.formSubmitted = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!valid &amp;&amp; <span class="keyword">this</span>.pendingRequest === <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.formSubmitted) &#123;</span><br><span class="line">      $(<span class="keyword">this</span>.currentForm).triggerHandler(<span class="string">"invalid-form"</span>, [<span class="keyword">this</span>]);</span><br><span class="line">      <span class="keyword">this</span>.formSubmitted = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://jqueryvalidation.org/remote-method/</span></span><br><span class="line">$.validator.prototype.methods.remote = <span class="function"><span class="keyword">function</span>(<span class="params">value, element, param</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.optional(element)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"dependency-mismatch"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> previous = <span class="keyword">this</span>.previousValue(element),<span class="comment">// 获取上一次的验证结果、值。提示文本  </span></span><br><span class="line">    validator, data;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.settings.messages[element.name]) &#123;</span><br><span class="line">    <span class="keyword">this</span>.settings.messages[element.name] = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  previous.originalMessage = <span class="keyword">this</span>.settings.messages[element.name].remote;</span><br><span class="line">  <span class="keyword">this</span>.settings.messages[element.name].remote = previous.message;</span><br><span class="line"></span><br><span class="line">  param = <span class="keyword">typeof</span> param === <span class="string">"string"</span> &amp;&amp; &#123; <span class="attr">url</span>: param &#125; || param;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当前验证与上一次情形相同，返回前一次验证结果  </span></span><br><span class="line">  <span class="keyword">if</span> (previous.old === value) &#123;</span><br><span class="line">    <span class="keyword">return</span> previous.valid;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  previous.old = value;</span><br><span class="line">  validator = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">this</span>.startRequest(element);</span><br><span class="line">  data = &#123;&#125;;</span><br><span class="line">  data[element.name] = value;</span><br><span class="line">  $.ajax($.extend(<span class="literal">true</span>, &#123;</span><br><span class="line">    mode: <span class="string">"abort"</span>,</span><br><span class="line">    port: <span class="string">"validate"</span> + element.name,<span class="comment">// port和元素name相关，发送ajax后pendingRequests[port]标记为有值，阻止同一个元素发送两次ajax  </span></span><br><span class="line">    dataType: <span class="string">"json"</span>,</span><br><span class="line">    data: data, </span><br><span class="line">    context: validator.currentForm,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> valid = response === <span class="literal">true</span> || response === <span class="string">"true"</span>,</span><br><span class="line">        errors, message, submitted;</span><br><span class="line"></span><br><span class="line">      validator.settings.messages[element.name].remote = previous.originalMessage;</span><br><span class="line">      <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">        submitted = validator.formSubmitted;</span><br><span class="line">        validator.prepareElement(element);</span><br><span class="line">        validator.formSubmitted = submitted;</span><br><span class="line">        validator.successList.push(element);</span><br><span class="line">        <span class="keyword">delete</span> validator.invalid[element.name];</span><br><span class="line">        validator.showErrors();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        errors = &#123;&#125;;</span><br><span class="line">        message = response || validator.defaultMessage(element, <span class="string">"remote"</span>);</span><br><span class="line">        errors[element.name] = previous.message = $.isFunction(message) ? message(value) : message;</span><br><span class="line">        validator.invalid[element.name] = <span class="literal">true</span>;</span><br><span class="line">        validator.showErrors(errors);</span><br><span class="line">      &#125;</span><br><span class="line">      previous.valid = valid;</span><br><span class="line">      validator.stopRequest(element, valid);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, param));</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"pending"</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pendingRequests = &#123;&#125;,</span><br><span class="line">  ajax;</span><br><span class="line"><span class="comment">// Use a prefilter if available (1.5+)  </span></span><br><span class="line"><span class="comment">// 为ajax方法添加abort、port标志，阻止同一验证元素在前一次ajax未完成时，再度发起ajax请求</span></span><br><span class="line"><span class="keyword">if</span> ($.ajaxPrefilter) &#123;</span><br><span class="line">  <span class="comment">// ajaxPrefilter发送前的预处理，setting请求的所有参数，xhr经过jquery封装的XMLHttpRequest对象  </span></span><br><span class="line">  $.ajaxPrefilter(<span class="function"><span class="keyword">function</span> (<span class="params">settings, _, xhr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> port = settings.port;</span><br><span class="line">    <span class="keyword">if</span> (settings.mode === <span class="string">"abort"</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (pendingRequests[port]) &#123;</span><br><span class="line">        pendingRequests[port].abort();</span><br><span class="line">      &#125;</span><br><span class="line">      pendingRequests[port] = xhr;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  ajax = $.ajax; </span><br><span class="line">  $.ajax = <span class="function"><span class="keyword">function</span> (<span class="params">settings</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> mode = (<span class="string">"mode"</span> <span class="keyword">in</span> settings ? settings : $.ajaxSettings).mode,</span><br><span class="line">      port = (<span class="string">"port"</span> <span class="keyword">in</span> settings ? settings : $.ajaxSettings).port;</span><br><span class="line">    <span class="keyword">if</span> (mode === <span class="string">"abort"</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (pendingRequests[port]) &#123;</span><br><span class="line">        pendingRequests[port].abort();<span class="comment">// abort()用来终止ajax请求，还是会执行success回调，返回值为空  </span></span><br><span class="line">      &#125;</span><br><span class="line">      pendingRequests[port] = ajax.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      <span class="keyword">return</span> pendingRequests[port];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ajax.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="注册校验器-1"><a href="#注册校验器-1" class="headerlink" title="注册校验器"></a>注册校验器</h4><p>在jquery-validate模块中，注册校验方法通过调用addMethod实现。与async-validadtor模块相比较，jquery-validate模块稍显得不够灵活，只能将自定义校验器注册为methods下属的方法，而不能直接使用外部函数。</p>
<p>$.validator = {<br>  // …</p>
<p>  addMethod: function (name, method, message) {<br>    $.validator.methods[name] = method;<br>    $.validator.messages[name] = message !== undefined ? message : $.validator.messages[name];<br>    if (method.length &lt; 3) {<br>      $.validator.addClassRules(name, $.validator.normalizeRule(name));<br>    }<br>  },<br>}</p>
<h4 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h4><p>在jquery-validate模块中，实际的校验过程通过调用this.check方法执行，无论是整张表单校验，还是单个表单项校验。在check方法内部，也即遍历校验规则，调用methods下属的方法完成校验。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.validator.prototype = &#123;</span><br><span class="line">  <span class="comment">// ... </span></span><br><span class="line"></span><br><span class="line">  check: <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">    element = <span class="keyword">this</span>.validationTargetFor(<span class="keyword">this</span>.clean(element));<span class="comment">// 获取当前验证元素  </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> rules = $(element).rules(),<span class="comment">// 获取元素的验证规则  </span></span><br><span class="line">      rulesCount = $.map(rules, <span class="function"><span class="keyword">function</span> (<span class="params">n, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">      &#125;).length,</span><br><span class="line">      dependencyMismatch = <span class="literal">false</span>,</span><br><span class="line">      val = <span class="keyword">this</span>.elementValue(element),</span><br><span class="line">      result, method, rule;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (method <span class="keyword">in</span> rules) &#123;</span><br><span class="line">      rule = &#123; <span class="attr">method</span>: method, <span class="attr">parameters</span>: rules[method] &#125;;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        result = $.validator.methods[method].call(<span class="keyword">this</span>, val, element, rule.parameters);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 依赖条件不成立，跳过验证  </span></span><br><span class="line">        <span class="keyword">if</span> (result === <span class="string">"dependency-mismatch"</span> &amp;&amp; rulesCount === <span class="number">1</span>) &#123;</span><br><span class="line">          dependencyMismatch = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dependencyMismatch = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result === <span class="string">"pending"</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.toHide = <span class="keyword">this</span>.toHide.not(<span class="keyword">this</span>.errorsFor(element));</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">          <span class="keyword">this</span>.formatAndAdd(element, rule);<span class="comment">// 获取错误文案，并向this.errorList塞值</span></span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.settings.debug &amp;&amp; <span class="built_in">window</span>.console) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"Exception occurred when checking element "</span> + element.id + <span class="string">", check the '"</span> + rule.method + <span class="string">"' method."</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> <span class="built_in">TypeError</span>) &#123;</span><br><span class="line">          e.message += <span class="string">".  Exception occurred when checking element "</span> + element.id + <span class="string">", check the '"</span> + rule.method + <span class="string">"' method."</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dependencyMismatch) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.objectLength(rules)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.successList.push(element);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="错误文案-1"><a href="#错误文案-1" class="headerlink" title="错误文案"></a>错误文案</h4><p>在jquery-validate模块中，错误文案的实现与async-validator模块基本相同。因为jquery-validate模块没有灵活的自定义校验器概念，错误文案都通过配置项注入，可以用通用的format方法对其格式化。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.validator = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">  format: <span class="function"><span class="keyword">function</span> (<span class="params">source, params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = $.makeArray(<span class="built_in">arguments</span>);</span><br><span class="line">        args.unshift(source);</span><br><span class="line">        <span class="keyword">return</span> $.validator.format.apply(<span class="keyword">this</span>, args);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">2</span> &amp;&amp; params.constructor !== <span class="built_in">Array</span>) &#123;</span><br><span class="line">      params = $.makeArray(<span class="built_in">arguments</span>).slice(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (params.constructor !== <span class="built_in">Array</span>) &#123;</span><br><span class="line">      params = [params];</span><br><span class="line">    &#125;</span><br><span class="line">    $.each(params, <span class="function"><span class="keyword">function</span> (<span class="params">i, n</span>) </span>&#123;</span><br><span class="line">      source = source.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\&#123;"</span> + i + <span class="string">"\\&#125;"</span>, <span class="string">"g"</span>), <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> source;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  messages: &#123;</span><br><span class="line">    required: <span class="string">"This field is required."</span>,</span><br><span class="line">    remote: <span class="string">"Please fix this field."</span>,</span><br><span class="line">    email: <span class="string">"Please enter a valid email address."</span>,</span><br><span class="line">    url: <span class="string">"Please enter a valid URL."</span>,</span><br><span class="line">    date: <span class="string">"Please enter a valid date."</span>,</span><br><span class="line">    dateISO: <span class="string">"Please enter a valid date ( ISO )."</span>,</span><br><span class="line">    number: <span class="string">"Please enter a valid number."</span>,</span><br><span class="line">    digits: <span class="string">"Please enter only digits."</span>,</span><br><span class="line">    creditcard: <span class="string">"Please enter a valid credit card number."</span>,</span><br><span class="line">    equalTo: <span class="string">"Please enter the same value again."</span>,</span><br><span class="line">    maxlength: $.validator.format(<span class="string">"Please enter no more than &#123;0&#125; characters."</span>),</span><br><span class="line">    minlength: $.validator.format(<span class="string">"Please enter at least &#123;0&#125; characters."</span>),</span><br><span class="line">    rangelength: $.validator.format(<span class="string">"Please enter a value between &#123;0&#125; and &#123;1&#125; characters long."</span>),</span><br><span class="line">    range: $.validator.format(<span class="string">"Please enter a value between &#123;0&#125; and &#123;1&#125;."</span>),</span><br><span class="line">    max: $.validator.format(<span class="string">"Please enter a value less than or equal to &#123;0&#125;."</span>),</span><br><span class="line">    min: $.validator.format(<span class="string">"Please enter a value greater than or equal to &#123;0&#125;."</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$.validator.prototype = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  defaultMessage: <span class="function"><span class="keyword">function</span> (<span class="params">element, method</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.findDefined(<span class="comment">// this.findDefined输出首个真值的参数</span></span><br><span class="line">      <span class="keyword">this</span>.customMessage(element.name, method),<span class="comment">// html设置的错误文案，字符串</span></span><br><span class="line">      <span class="keyword">this</span>.customDataMessage(element, method),<span class="comment">// js代码设置的错误文案，字符串或函数</span></span><br><span class="line">      <span class="comment">// title is never undefined, so handle empty string as undefined  </span></span><br><span class="line">      !<span class="keyword">this</span>.settings.ignoreTitle &amp;&amp; element.title || <span class="literal">undefined</span>,</span><br><span class="line">      $.validator.messages[method],</span><br><span class="line">      <span class="string">"&lt;strong&gt;Warning: No message defined for "</span> + element.name + <span class="string">"&lt;/strong&gt;"</span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  formatAndAdd: <span class="function"><span class="keyword">function</span> (<span class="params">element, rule</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> message = <span class="keyword">this</span>.defaultMessage(element, rule.method),<span class="comment">// 获取错误文案</span></span><br><span class="line">      theregex = <span class="regexp">/\$?\&#123;(\d+)\&#125;/g</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> message === <span class="string">"function"</span>) &#123;</span><br><span class="line">      message = message.call(<span class="keyword">this</span>, rule.parameters, element);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (theregex.test(message)) &#123;</span><br><span class="line">      message = $.validator.format(message.replace(theregex, <span class="string">"&#123;$1&#125;"</span>), rule.parameters);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.errorList.push(&#123;</span><br><span class="line">      message: message,</span><br><span class="line">      element: element,</span><br><span class="line">      method: rule.method</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.errorMap[element.name] = message;</span><br><span class="line">    <span class="keyword">this</span>.submitted[element.name] = message;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="jquery-validation"><a href="#jquery-validation" class="headerlink" title="jquery-validation"></a>jquery-validation</h3><p>jquery-validation模块的校验流程完全仿照jquery-validate，只是增加了额外的校验方法和语言包。笔者扼要说明一下部分校验方法的功能，代码不再赘述。</p>
<p>require_from_group方法校验指定相关元素(name值查找)选中项的个数不小于指定值时，予以校验通过<br>skip_or_fill_minimum方法校验相关元素(name值查找)未赋值或选中项个数不小于指定值时，予以校验通过。<br>pattern方法正则匹配。<br>notEqualTo方法校验不等于指定值。<br>integer方法校验整数，可以时负整数。<br>maxWords、minWords、rangeWords方法校验字符数量，剔除html标签和标点符号后。<br>strippedminlength方法校验文本长度不能小于指定值。<br>nowhitespace方法校验非空字符串。<br>lettersonly方法校验字符串。<br>letterswithbasicpunc方法校验带基本标点符号的字符串，通过正则表达式  /^[a-z-.,()’”\s]+$/i 。<br>alphanumeric方法校验值是否为字符串、下划线、数值中的一种，通过正则表达式 /^\w+$/i 。<br>url2方法校验网址。<br>dateFA、dateITA、dateNL校验日期。<br>time、time12h校验时分，24小时制或12小时制。<br>accept方法校验上传文件的类型。<br>extension方法校验文件的扩展名。<br>ipv4方法校验IP v4地址。<br>ipv6方法校验IP v6地址。<br>currency方法校验货币金额，可带有币种标识。<br>mobileNL、mobileUK方法校验特定地区或国家的手机号。<br>phoneNL、phonesUK、phoneUK、phoneUS方法校验特定地区或国家的移动电话号码。<br>postalcodeBR、postalCodeCA、postalcodeNL、postcodeUK、zipcodeUS、ziprange方法校验特定地区或国家的邮政编码。<br>bankaccountNL方法校验是否银行账号。<br>giroaccountNL方法校验是否转账账号。<br>bankorgiroaccountNL方法校验是否银行账号或者转账账号。<br>iban方法校验国际银行账号。<br>bic方法校验是否商业识别码。<br>cifES方法校验是否西班牙纳税识别号。<br>cpfBR方法校验是否巴西纳税识别号。<br>creditcardtypes方法校验信用卡号是否为特定类型。<br>vinUS方法校验汽车编号。<br>stateUS方法校验美国的州或地区。</p>
]]></content>
      <categories>
        <category>frontend</category>
        <category>antd</category>
      </categories>
      <tags>
        <tag>analyst</tag>
        <tag>validate</tag>
      </tags>
  </entry>
</search>
